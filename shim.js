/*! For license information please see shim.js.LICENSE.txt */
!function(){var e,t,n={8922:function(e){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var l=this[u][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var s=[].concat(e[c]);r&&a[s[0]]||(void 0!==i&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=i),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),t.push(s))}},t}},4155:function(e){"use strict";e.exports=function(e,t){return t||(t={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]|(%20)/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},4251:function(e){"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},7802:function(e,t,n){"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=n(2908),i=n(4853);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var u=new Set,l={};function c(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(l[e]=t,e=0;e<t.length;e++)u.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},v={};function g(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function A(e,t,n,o){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:o||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,o)&&(n=null),o||null===i?function(e){return!!d.call(v,e)||!d.call(h,e)&&(p.test(e)?v[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,o=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,C=Symbol.for("react.element"),x=Symbol.for("react.portal"),S=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),I=Symbol.for("react.context"),_=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var z=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function L(e){return null===e||"object"!==r(e)?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var F,B=Object.assign;function D(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var j=!1;function U(e,t){if(!e||j)return"";j=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var o=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){o=e}e.call(t.prototype)}else{try{throw Error()}catch(e){o=e}e()}}catch(t){if(t&&o&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),a=o.stack.split("\n"),u=i.length-1,l=a.length-1;1<=u&&0<=l&&i[u]!==a[l];)l--;for(;1<=u&&0<=l;u--,l--)if(i[u]!==a[l]){if(1!==u||1!==l)do{if(u--,0>--l||i[u]!==a[l]){var c="\n"+i[u].replace(" at new "," at ");return e.displayName&&c.includes("<anonymous>")&&(c=c.replace("<anonymous>",e.displayName)),c}}while(1<=u&&0<=l);break}}}finally{j=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?D(e):""}function G(e){switch(e.tag){case 5:return D(e.type);case 16:return D("Lazy");case 13:return D("Suspense");case 19:return D("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 1:return U(e.type,!0);default:return""}}function Q(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case x:return"Portal";case E:return"Profiler";case k:return"StrictMode";case T:return"Suspense";case O:return"SuspenseList"}if("object"===r(e))switch(e.$$typeof){case I:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case _:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:Q(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return Q(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Q(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(r(e)){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function J(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function $(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function q(e,t){var n=t.checked;return B({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function K(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&A(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?te(e,t.type,n):t.hasOwnProperty("defaultValue")&&te(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ee(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function te(e,t,n){"number"===t&&$(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var ne=Array.isArray;function re(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return B({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(ne(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ce(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,fe,de=(fe=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return fe(e,t)}))}:fe);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ve=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(he).forEach((function(e){ve.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ye=B({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ye[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!==r(t.dangerouslySetInnerHTML)||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!==r(t.style))throw Error(a(62))}}function Ae(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,Se=null,ke=null;function Ee(e){if(e=wo(e)){if("function"!=typeof xe)throw Error(a(280));var t=e.stateNode;t&&(t=xo(t),xe(e.stateNode,e.type,t))}}function Pe(e){Se?ke?ke.push(e):ke=[e]:Se=e}function Ie(){if(Se){var e=Se,t=ke;if(ke=Se=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function _e(e,t){return e(t)}function Te(){}var Oe=!1;function Re(e,t,n){if(Oe)return e(t,n);Oe=!0;try{return _e(e,t,n)}finally{Oe=!1,(null!==Se||null!==ke)&&(Te(),Ie())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var o=xo(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,r(n)));return n}var ze=!1;if(f)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){ze=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(fe){ze=!1}function Le(e,t,n,r,o,i,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Fe=!1,Be=null,De=!1,je=null,Ue={onError:function(e){Fe=!0,Be=e}};function Ge(e,t,n,r,o,i,a,u,l){Fe=!1,Be=null,Le.apply(Ue,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(Qe(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ve(o),e;if(i===r)return Ve(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u){for(l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ye(e):null}function Ye(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ye(e);if(null!==t)return t;e=e.sibling}return null}var Je=i.unstable_scheduleCallback,$e=i.unstable_cancelCallback,qe=i.unstable_shouldYield,Ke=i.unstable_requestPaint,Xe=i.unstable_now,Ze=i.unstable_getCurrentPriorityLevel,et=i.unstable_ImmediatePriority,tt=i.unstable_UserBlockingPriority,nt=i.unstable_NormalPriority,rt=i.unstable_LowPriority,ot=i.unstable_IdlePriority,it=null,at=null,ut=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/ct|0)|0},lt=Math.log,ct=Math.LN2,st=64,ft=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var u=a&~o;0!==u?r=dt(u):0!=(i&=a)&&(r=dt(i))}else 0!=(a=n&~o)?r=dt(a):0!==i&&(r=dt(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-ut(t)),r|=e[n],t&=~o;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function vt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=st;return 0==(4194240&(st<<=1))&&(st=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ut(t)]=n}function bt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ut(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var At=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var Ct,xt,St,kt,Et,Pt=!1,It=[],_t=null,Tt=null,Ot=null,Rt=new Map,Nt=new Map,zt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Lt(e,t){switch(e){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Ft(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Bt(e){var t=Ao(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Et(e.priority,(function(){St(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Dt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function jt(e,t,n){Dt(e)&&n.delete(t)}function Ut(){Pt=!1,null!==_t&&Dt(_t)&&(_t=null),null!==Tt&&Dt(Tt)&&(Tt=null),null!==Ot&&Dt(Ot)&&(Ot=null),Rt.forEach(jt),Nt.forEach(jt)}function Gt(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Ut)))}function Qt(e){function t(t){return Gt(t,e)}if(0<It.length){Gt(It[0],e);for(var n=1;n<It.length;n++){var r=It[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==_t&&Gt(_t,e),null!==Tt&&Gt(Tt,e),null!==Ot&&Gt(Ot,e),Rt.forEach(t),Nt.forEach(t),n=0;n<zt.length;n++)(r=zt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<zt.length&&null===(n=zt[0]).blockedOn;)Bt(n),null===n.blockedOn&&zt.shift()}var Ht=w.ReactCurrentBatchConfig,Vt=!0;function Wt(e,t,n,r){var o=At,i=Ht.transition;Ht.transition=null;try{At=1,Jt(e,t,n,r)}finally{At=o,Ht.transition=i}}function Yt(e,t,n,r){var o=At,i=Ht.transition;Ht.transition=null;try{At=4,Jt(e,t,n,r)}finally{At=o,Ht.transition=i}}function Jt(e,t,n,r){if(Vt){var o=qt(e,t,n,r);if(null===o)Vr(e,t,r,$t,n),Lt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return _t=Ft(_t,e,t,n,r,o),!0;case"dragenter":return Tt=Ft(Tt,e,t,n,r,o),!0;case"mouseover":return Ot=Ft(Ot,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Rt.set(i,Ft(Rt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Nt.set(i,Ft(Nt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Lt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==o;){var i=wo(o);if(null!==i&&Ct(i),null===(i=qt(e,t,n,r))&&Vr(e,t,r,$t,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var $t=null;function qt(e,t,n,r){if($t=null,null!==(e=Ao(e=Ce(r))))if(null===(t=Qe(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return $t=e,null}function Kt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case et:return 1;case tt:return 4;case nt:case rt:return 16;case ot:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return en=o.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function on(){return!1}function an(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rn:on,this.isPropagationStopped=on,this}return B(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var un,ln,cn,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(sn),dn=B({},sn,{view:0,detail:0}),pn=an(dn),hn=B({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),vn=an(hn),gn=an(B({},hn,{dataTransfer:0})),mn=an(B({},dn,{relatedTarget:0})),yn=an(B({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=B({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),An=an(bn),wn=an(B({},sn,{data:0})),Cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function En(){return kn}var Pn=B({},dn,{key:function(e){if(e.key){var t=Cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),In=an(Pn),_n=an(B({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(B({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),On=an(B({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=B({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=an(Rn),zn=[9,13,27,32],Mn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var Fn=f&&"TextEvent"in window&&!Ln,Bn=f&&(!Mn||Ln&&8<Ln&&11>=Ln),Dn=String.fromCharCode(32),jn=!1;function Un(e,t){switch(e){case"keyup":return-1!==zn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gn(e){return"object"===r(e=e.detail)&&"data"in e?e.data:null}var Qn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){Pe(r),0<(t=Yr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Jn=null;function $n(e){Dr(e,0)}function qn(e){if(J(Co(e)))return e}function Kn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Zn;if(f){var er="oninput"in document;if(!er){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),er="function"==typeof tr.oninput}Zn=er}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function nr(){Yn&&(Yn.detachEvent("onpropertychange",rr),Jn=Yn=null)}function rr(e){if("value"===e.propertyName&&qn(Jn)){var t=[];Wn(t,Jn,e,Ce(e)),Re($n,t)}}function or(e,t,n){"focusin"===e?(nr(),Jn=n,(Yn=t).attachEvent("onpropertychange",rr)):"focusout"===e&&nr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return qn(Jn)}function ar(e,t){if("click"===e)return qn(t)}function ur(e,t){if("input"===e||"change"===e)return qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function cr(e,t){if(lr(e,t))return!0;if("object"!==r(e)||null===e||"object"!==r(t)||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++){var i=n[o];if(!d.call(t,i)||!lr(e[i],t[i]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=$();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=$((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function vr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=fr(n,i);var a=fr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,yr=null,br=null,Ar=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Ar||null==mr||mr!==$(r)||(r="selectionStart"in(r=mr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&cr(br,r)||(br=r,0<(r=Yr(yr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function Cr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:Cr("Animation","AnimationEnd"),animationiteration:Cr("Animation","AnimationIteration"),animationstart:Cr("Animation","AnimationStart"),transitionend:Cr("Transition","TransitionEnd")},Sr={},kr={};function Er(e){if(Sr[e])return Sr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return Sr[e]=n[t];return e}f&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var Pr=Er("animationend"),Ir=Er("animationiteration"),_r=Er("animationstart"),Tr=Er("transitionend"),Or=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){Or.set(e,t),c(t,[e])}for(var zr=0;zr<Rr.length;zr++){var Mr=Rr[zr];Nr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Nr(Pr,"onAnimationEnd"),Nr(Ir,"onAnimationIteration"),Nr(_r,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(Tr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Br(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,u,l,c){if(Ge.apply(this,arguments),Fe){if(!Fe)throw Error(a(198));var s=Be;Fe=!1,Be=null,De||(De=!0,je=s)}}(r,t,void 0,e),e.currentTarget=null}function Dr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,c=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;Br(o,u,c),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,c=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;Br(o,u,c),i=l}}}if(De)throw e=je,De=!1,je=null,e}function jr(e,t){var n=t[mo];void 0===n&&(n=t[mo]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function Ur(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var Gr="_reactListening"+Math.random().toString(36).slice(2);function Qr(e){if(!e[Gr]){e[Gr]=!0,u.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||Ur(t,!1,e),Ur(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Gr]||(t[Gr]=!0,Ur("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Kt(t)){case 1:var o=Wt;break;case 4:o=Yt;break;default:o=Jt}n=o.bind(null,t,n,e),o=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=Ao(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}Re((function(){var r=i,o=Ce(n),a=[];e:{var u=Or.get(e);if(void 0!==u){var l=fn,c=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":l=In;break;case"focusin":c="focus",l=mn;break;case"focusout":c="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case Pr:case Ir:case _r:l=yn;break;case Tr:l=On;break;case"scroll":l=pn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=An;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=_n}var s=0!=(4&t),f=!s&&"scroll"===e,d=s?null!==u?u+"Capture":null:u;s=[];for(var p,h=r;null!==h;){var v=(p=h).stateNode;if(5===p.tag&&null!==v&&(p=v,null!==d&&null!=(v=Ne(h,d))&&s.push(Wr(h,v,p))),f)break;h=h.return}0<s.length&&(u=new l(u,c,null,n,o),a.push({event:u,listeners:s}))}}if(0==(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===we||!(c=n.relatedTarget||n.fromElement)||!Ao(c)&&!c[go])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?Ao(c):null)&&(c!==(f=Qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(s=vn,v="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(s=_n,v="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:Co(l),p=null==c?u:Co(c),(u=new s(v,h+"leave",l,n,o)).target=f,u.relatedTarget=p,v=null,Ao(o)===r&&((s=new s(d,h+"enter",c,n,o)).target=p,s.relatedTarget=f,v=s),f=v,l&&c)e:{for(d=c,h=0,p=s=l;p;p=Jr(p))h++;for(p=0,v=d;v;v=Jr(v))p++;for(;0<h-p;)s=Jr(s),h--;for(;0<p-h;)d=Jr(d),p--;for(;h--;){if(s===d||null!==d&&s===d.alternate)break e;s=Jr(s),d=Jr(d)}s=null}else s=null;null!==l&&$r(a,u,l,s,!1),null!==c&&null!==f&&$r(a,f,c,s,!0)}if("select"===(l=(u=r?Co(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var g=Kn;else if(Vn(u))if(Xn)g=ur;else{g=ir;var m=or}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(g=ar);switch(g&&(g=g(e,r))?Wn(a,g,n,o):(m&&m(e,u,r),"focusout"===e&&(m=u._wrapperState)&&m.controlled&&"number"===u.type&&te(u,"number",u.value)),m=r?Co(r):window,e){case"focusin":(Vn(m)||"true"===m.contentEditable)&&(mr=m,yr=r,br=null);break;case"focusout":br=yr=mr=null;break;case"mousedown":Ar=!0;break;case"contextmenu":case"mouseup":case"dragend":Ar=!1,wr(a,n,o);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":wr(a,n,o)}var y;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Qn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Bn&&"ko"!==n.locale&&(Qn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Qn&&(y=tn()):(Zt="value"in(Xt=o)?Xt.value:Xt.textContent,Qn=!0)),0<(m=Yr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:m}),(y||null!==(y=Gn(n)))&&(b.data=y))),(y=Fn?function(e,t){switch(e){case"compositionend":return Gn(t);case"keypress":return 32!==t.which?null:(jn=!0,Dn);case"textInput":return(e=t.data)===Dn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Qn)return"compositionend"===e||!Mn&&Un(e,t)?(e=tn(),en=Zt=Xt=null,Qn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Yr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=y)}Dr(a,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Yr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ne(e,n))&&r.unshift(Wr(e,i,o)),null!=(i=Ne(e,t))&&r.push(Wr(e,i,o))),e=e.return}return r}function Jr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function $r(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,c=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==c&&(u=c,o?null!=(l=Ne(n,i))&&a.unshift(Wr(n,l,u)):o||null!=(l=Ne(n,i))&&a.push(Wr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var qr=/\r\n?/g,Kr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(qr,"\n").replace(Kr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function eo(){}var to=null,no=null;function ro(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var oo="function"==typeof setTimeout?setTimeout:void 0,io="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,uo="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:oo;function lo(e){setTimeout((function(){throw e}))}function co(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Qt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Qt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function fo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var po=Math.random().toString(36).slice(2),ho="__reactFiber$"+po,vo="__reactProps$"+po,go="__reactContainer$"+po,mo="__reactEvents$"+po,yo="__reactListeners$"+po,bo="__reactHandles$"+po;function Ao(e){var t=e[ho];if(t)return t;for(var n=e.parentNode;n;){if(t=n[go]||n[ho]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=fo(e);null!==e;){if(n=e[ho])return n;e=fo(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[ho]||e[go])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Co(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function xo(e){return e[vo]||null}var So=[],ko=-1;function Eo(e){return{current:e}}function Po(e){0>ko||(e.current=So[ko],So[ko]=null,ko--)}function Io(e,t){ko++,So[ko]=e.current,e.current=t}var _o={},To=Eo(_o),Oo=Eo(!1),Ro=_o;function No(e,t){var n=e.type.contextTypes;if(!n)return _o;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function zo(e){return null!=e.childContextTypes}function Mo(){Po(Oo),Po(To)}function Lo(e,t,n){if(To.current!==_o)throw Error(a(168));Io(To,t),Io(Oo,n)}function Fo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,H(e)||"Unknown",o));return B({},n,r)}function Bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||_o,Ro=To.current,Io(To,e),Io(Oo,Oo.current),!0}function Do(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Fo(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,Po(Oo),Po(To),Io(To,e)):Po(Oo),Io(Oo,n)}var jo=null,Uo=!1,Go=!1;function Qo(e){null===jo?jo=[e]:jo.push(e)}function Ho(){if(!Go&&null!==jo){Go=!0;var e=0,t=At;try{var n=jo;for(At=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}jo=null,Uo=!1}catch(t){throw null!==jo&&(jo=jo.slice(e+1)),Je(et,Ho),t}finally{At=t,Go=!1}}return null}var Vo=[],Wo=0,Yo=null,Jo=0,$o=[],qo=0,Ko=null,Xo=1,Zo="";function ei(e,t){Vo[Wo++]=Jo,Vo[Wo++]=Yo,Yo=e,Jo=t}function ti(e,t,n){$o[qo++]=Xo,$o[qo++]=Zo,$o[qo++]=Ko,Ko=e;var r=Xo;e=Zo;var o=32-ut(r)-1;r&=~(1<<o),n+=1;var i=32-ut(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-ut(t)+o|n<<o|r,Zo=i+e}else Xo=1<<i|n<<o|r,Zo=e}function ni(e){null!==e.return&&(ei(e,1),ti(e,1,0))}function ri(e){for(;e===Yo;)Yo=Vo[--Wo],Vo[Wo]=null,Jo=Vo[--Wo],Vo[Wo]=null;for(;e===Ko;)Ko=$o[--qo],$o[qo]=null,Zo=$o[--qo],$o[qo]=null,Xo=$o[--qo],$o[qo]=null}var oi=null,ii=null,ai=!1,ui=null;function li(e,t){var n=Rc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function ci(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,oi=e,ii=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,oi=e,ii=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Ko?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Rc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,oi=e,ii=null,!0);default:return!1}}function si(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function fi(e){if(ai){var t=ii;if(t){var n=t;if(!ci(e,t)){if(si(e))throw Error(a(418));t=so(n.nextSibling);var r=oi;t&&ci(e,t)?li(r,n):(e.flags=-4097&e.flags|2,ai=!1,oi=e)}}else{if(si(e))throw Error(a(418));e.flags=-4097&e.flags|2,ai=!1,oi=e}}}function di(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;oi=e}function pi(e){if(e!==oi)return!1;if(!ai)return di(e),ai=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ro(e.type,e.memoizedProps)),t&&(t=ii)){if(si(e))throw hi(),Error(a(418));for(;t;)li(e,t),t=so(t.nextSibling)}if(di(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ii=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ii=null}}else ii=oi?so(e.stateNode.nextSibling):null;return!0}function hi(){for(var e=ii;e;)e=so(e.nextSibling)}function vi(){ii=oi=null,ai=!1}function gi(e){null===ui?ui=[e]:ui.push(e)}var mi=w.ReactCurrentBatchConfig;function yi(e,t){if(e&&e.defaultProps){for(var n in t=B({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var bi=Eo(null),Ai=null,wi=null,Ci=null;function xi(){Ci=wi=Ai=null}function Si(e){var t=bi.current;Po(bi),e._currentValue=t}function ki(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ei(e,t){Ai=e,Ci=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wu=!0),e.firstContext=null)}function Pi(e){var t=e._currentValue;if(Ci!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===Ai)throw Error(a(308));wi=e,Ai.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var Ii=null;function _i(e){null===Ii?Ii=[e]:Ii.push(e)}function Ti(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,_i(t)):(n.next=o.next,o.next=n),t.interleaved=n,Oi(e,r)}function Oi(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ri=!1;function Ni(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function zi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Mi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Li(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&_l)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Oi(e,n)}return null===(o=r.interleaved)?(t.next=t,_i(r)):(t.next=o.next,o.next=t),r.interleaved=t,Oi(e,n)}function Fi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}function Bi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Di(e,t,n,r){var o=e.updateQueue;Ri=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var l=u,c=l.next;l.next=null,null===a?i=c:a.next=c,a=l;var s=e.alternate;null!==s&&(u=(s=s.updateQueue).lastBaseUpdate)!==a&&(null===u?s.firstBaseUpdate=c:u.next=c,s.lastBaseUpdate=l)}if(null!==i){var f=o.baseState;for(a=0,s=c=l=null,u=i;;){var d=u.lane,p=u.eventTime;if((r&d)===d){null!==s&&(s=s.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,v=u;switch(d=t,p=n,v.tag){case 1:if("function"==typeof(h=v.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=v.payload)?h.call(p,f,d):h))break e;f=B({},f,d);break e;case 2:Ri=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===s?(c=s=p,l=f):s=s.next=p,a|=d;if(null===(u=u.next)){if(null===(u=o.shared.pending))break;u=(d=u).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===s&&(l=f),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=s,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Fl|=a,e.lanes=a,e.memoizedState=f}}function ji(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Ui=(new o.Component).refs;function Gi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:B({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Qi={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),i=Mi(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Li(e,i,o))&&(rc(t,e,o,r),Fi(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tc(),o=nc(e),i=Mi(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Li(e,i,o))&&(rc(t,e,o,r),Fi(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tc(),r=nc(e),o=Mi(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Li(e,o,r))&&(rc(t,e,r,n),Fi(t,e,r))}};function Hi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&cr(n,r)&&cr(o,i))}function Vi(e,t,n){var o=!1,i=_o,a=t.contextType;return"object"===r(a)&&null!==a?a=Pi(a):(i=zo(t)?Ro:To.current,a=(o=null!=(o=t.contextTypes))?No(e,i):_o),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Qi,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function Wi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Qi.enqueueReplaceState(t,t.state,null)}function Yi(e,t,n,o){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Ui,Ni(e);var a=t.contextType;"object"===r(a)&&null!==a?i.context=Pi(a):(a=zo(t)?Ro:To.current,i.context=No(e,a)),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Gi(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Qi.enqueueReplaceState(i,i.state,null),Di(e,n,i,o),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ji(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==r(e)){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var o=n.stateNode}if(!o)throw Error(a(147,e));var i=o,u=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===u?t.ref:(t=function(e){var t=i.refs;t===Ui&&(t=i.refs={}),null===e?delete t[u]:t[u]=e},t._stringRef=u,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function $i(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function qi(e){return(0,e._init)(e._payload)}function Ki(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=zc(e,t)).index=0,e.sibling=null,e}function u(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function c(e,t,n,r){return null===t||6!==t.tag?((t=Bc(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function s(e,t,n,o){var a=n.type;return a===S?d(e,t,n.props.children,o,n.key):null!==t&&(t.elementType===a||"object"===r(a)&&null!==a&&a.$$typeof===N&&qi(a)===t.type)?((o=i(t,n.props)).ref=Ji(e,t,n),o.return=e,o):((o=Mc(n.type,n.key,n.props,null,e.mode,o)).ref=Ji(e,t,n),o.return=e,o)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Dc(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Lc(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bc(""+t,e.mode,n)).return=e,t;if("object"===r(t)&&null!==t){switch(t.$$typeof){case C:return(n=Mc(t.type,t.key,t.props,null,e.mode,n)).ref=Ji(e,null,t),n.return=e,n;case x:return(t=Dc(t,e.mode,n)).return=e,t;case N:return p(e,(0,t._init)(t._payload),n)}if(ne(t)||L(t))return(t=Lc(t,e.mode,n,null)).return=e,t;$i(e,t)}return null}function h(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:c(e,t,""+n,o);if("object"===r(n)&&null!==n){switch(n.$$typeof){case C:return n.key===i?s(e,t,n,o):null;case x:return n.key===i?f(e,t,n,o):null;case N:return h(e,t,(i=n._init)(n._payload),o)}if(ne(n)||L(n))return null!==i?null:d(e,t,n,o,null);$i(e,n)}return null}function v(e,t,n,o,i){if("string"==typeof o&&""!==o||"number"==typeof o)return c(t,e=e.get(n)||null,""+o,i);if("object"===r(o)&&null!==o){switch(o.$$typeof){case C:return s(t,e=e.get(null===o.key?n:o.key)||null,o,i);case x:return f(t,e=e.get(null===o.key?n:o.key)||null,o,i);case N:return v(e,t,n,(0,o._init)(o._payload),i)}if(ne(o)||L(o))return d(t,e=e.get(n)||null,o,i,null);$i(t,o)}return null}function g(r,i,a,l){for(var c=null,s=null,f=i,d=i=0,g=null;null!==f&&d<a.length;d++){f.index>d?(g=f,f=null):g=f.sibling;var m=h(r,f,a[d],l);if(null===m){null===f&&(f=g);break}e&&f&&null===m.alternate&&t(r,f),i=u(m,i,d),null===s?c=m:s.sibling=m,s=m,f=g}if(d===a.length)return n(r,f),ai&&ei(r,d),c;if(null===f){for(;d<a.length;d++)null!==(f=p(r,a[d],l))&&(i=u(f,i,d),null===s?c=f:s.sibling=f,s=f);return ai&&ei(r,d),c}for(f=o(r,f);d<a.length;d++)null!==(g=v(f,r,d,a[d],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?d:g.key),i=u(g,i,d),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach((function(e){return t(r,e)})),ai&&ei(r,d),c}function m(r,i,l,c){var s=L(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,d=i,g=i=0,m=null,y=l.next();null!==d&&!y.done;g++,y=l.next()){d.index>g?(m=d,d=null):m=d.sibling;var b=h(r,d,y.value,c);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(r,d),i=u(b,i,g),null===f?s=b:f.sibling=b,f=b,d=m}if(y.done)return n(r,d),ai&&ei(r,g),s;if(null===d){for(;!y.done;g++,y=l.next())null!==(y=p(r,y.value,c))&&(i=u(y,i,g),null===f?s=y:f.sibling=y,f=y);return ai&&ei(r,g),s}for(d=o(r,d);!y.done;g++,y=l.next())null!==(y=v(d,r,g,y.value,c))&&(e&&null!==y.alternate&&d.delete(null===y.key?g:y.key),i=u(y,i,g),null===f?s=y:f.sibling=y,f=y);return e&&d.forEach((function(e){return t(r,e)})),ai&&ei(r,g),s}return function e(o,a,u,c){if("object"===r(u)&&null!==u&&u.type===S&&null===u.key&&(u=u.props.children),"object"===r(u)&&null!==u){switch(u.$$typeof){case C:e:{for(var s=u.key,f=a;null!==f;){if(f.key===s){if((s=u.type)===S){if(7===f.tag){n(o,f.sibling),(a=i(f,u.props.children)).return=o,o=a;break e}}else if(f.elementType===s||"object"===r(s)&&null!==s&&s.$$typeof===N&&qi(s)===f.type){n(o,f.sibling),(a=i(f,u.props)).ref=Ji(o,f,u),a.return=o,o=a;break e}n(o,f);break}t(o,f),f=f.sibling}u.type===S?((a=Lc(u.props.children,o.mode,c,u.key)).return=o,o=a):((c=Mc(u.type,u.key,u.props,null,o.mode,c)).ref=Ji(o,a,u),c.return=o,o=c)}return l(o);case x:e:{for(f=u.key;null!==a;){if(a.key===f){if(4===a.tag&&a.stateNode.containerInfo===u.containerInfo&&a.stateNode.implementation===u.implementation){n(o,a.sibling),(a=i(a,u.children||[])).return=o,o=a;break e}n(o,a);break}t(o,a),a=a.sibling}(a=Dc(u,o.mode,c)).return=o,o=a}return l(o);case N:return e(o,a,(f=u._init)(u._payload),c)}if(ne(u))return g(o,a,u,c);if(L(u))return m(o,a,u,c);$i(o,u)}return"string"==typeof u&&""!==u||"number"==typeof u?(u=""+u,null!==a&&6===a.tag?(n(o,a.sibling),(a=i(a,u)).return=o,o=a):(n(o,a),(a=Bc(u,o.mode,c)).return=o,o=a),l(o)):n(o,a)}}var Xi=Ki(!0),Zi=Ki(!1),ea={},ta=Eo(ea),na=Eo(ea),ra=Eo(ea);function oa(e){if(e===ea)throw Error(a(174));return e}function ia(e,t){switch(Io(ra,t),Io(na,e),Io(ta,ea),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ce(null,"");break;default:t=ce(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Po(ta),Io(ta,t)}function aa(){Po(ta),Po(na),Po(ra)}function ua(e){oa(ra.current);var t=oa(ta.current),n=ce(t,e.type);t!==n&&(Io(na,e),Io(ta,n))}function la(e){na.current===e&&(Po(ta),Po(na))}var ca=Eo(0);function sa(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var fa=[];function da(){for(var e=0;e<fa.length;e++)fa[e]._workInProgressVersionPrimary=null;fa.length=0}var pa=w.ReactCurrentDispatcher,ha=w.ReactCurrentBatchConfig,va=0,ga=null,ma=null,ya=null,ba=!1,Aa=!1,wa=0,Ca=0;function xa(){throw Error(a(321))}function Sa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function ka(e,t,n,r,o,i){if(va=i,ga=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pa.current=null===e||null===e.memoizedState?lu:cu,e=n(r,o),Aa){i=0;do{if(Aa=!1,wa=0,25<=i)throw Error(a(301));i+=1,ya=ma=null,t.updateQueue=null,pa.current=su,e=n(r,o)}while(Aa)}if(pa.current=uu,t=null!==ma&&null!==ma.next,va=0,ya=ma=ga=null,ba=!1,t)throw Error(a(300));return e}function Ea(){var e=0!==wa;return wa=0,e}function Pa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ya?ga.memoizedState=ya=e:ya=ya.next=e,ya}function Ia(){if(null===ma){var e=ga.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===ya?ga.memoizedState:ya.next;if(null!==t)ya=t,ma=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===ya?ga.memoizedState=ya=e:ya=ya.next=e}return ya}function _a(e,t){return"function"==typeof t?t(e):t}function Ta(e){var t=Ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ma,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var u=o.next;o.next=i.next,i.next=u}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var l=u=null,c=null,s=i;do{var f=s.lane;if((va&f)===f)null!==c&&(c=c.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var d={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};null===c?(l=c=d,u=r):c=c.next=d,ga.lanes|=f,Fl|=f}s=s.next}while(null!==s&&s!==i);null===c?u=r:c.next=l,lr(r,t.memoizedState)||(wu=!0),t.memoizedState=r,t.baseState=u,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,ga.lanes|=i,Fl|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Oa(e){var t=Ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{i=e(i,u.action),u=u.next}while(u!==o);lr(i,t.memoizedState)||(wu=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ra(){}function Na(e,t){var n=ga,r=Ia(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wu=!0),r=r.queue,Va(La.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ya&&1&ya.memoizedState.tag){if(n.flags|=2048,ja(9,Ma.bind(null,n,r,o,t),void 0,null),null===Tl)throw Error(a(349));0!=(30&va)||za(n,t,o)}return o}function za(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ma(e,t,n,r){t.value=n,t.getSnapshot=r,Fa(t)&&Ba(e)}function La(e,t,n){return n((function(){Fa(t)&&Ba(e)}))}function Fa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Ba(e){var t=Oi(e,1);null!==t&&rc(t,e,1,-1)}function Da(e){var t=Pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_a,lastRenderedState:e},t.queue=e,e=e.dispatch=ru.bind(null,ga,e),[t.memoizedState,e]}function ja(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ga.updateQueue)?(t={lastEffect:null,stores:null},ga.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ua(){return Ia().memoizedState}function Ga(e,t,n,r){var o=Pa();ga.flags|=e,o.memoizedState=ja(1|t,n,void 0,void 0===r?null:r)}function Qa(e,t,n,r){var o=Ia();r=void 0===r?null:r;var i=void 0;if(null!==ma){var a=ma.memoizedState;if(i=a.destroy,null!==r&&Sa(r,a.deps))return void(o.memoizedState=ja(t,n,i,r))}ga.flags|=e,o.memoizedState=ja(1|t,n,i,r)}function Ha(e,t){return Ga(8390656,8,e,t)}function Va(e,t){return Qa(2048,8,e,t)}function Wa(e,t){return Qa(4,2,e,t)}function Ya(e,t){return Qa(4,4,e,t)}function Ja(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function $a(e,t,n){return n=null!=n?n.concat([e]):null,Qa(4,4,Ja.bind(null,t,e),n)}function qa(){}function Ka(e,t){var n=Ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=Ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Sa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Za(e,t,n){return 0==(21&va)?(e.baseState&&(e.baseState=!1,wu=!0),e.memoizedState=n):(lr(n,t)||(n=gt(),ga.lanes|=n,Fl|=n,e.baseState=!0),t)}function eu(e,t){var n=At;At=0!==n&&4>n?n:4,e(!0);var r=ha.transition;ha.transition={};try{e(!1),t()}finally{At=n,ha.transition=r}}function tu(){return Ia().memoizedState}function nu(e,t,n){var r=nc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ou(e)?iu(t,n):null!==(n=Ti(e,t,n,r))&&(rc(n,e,r,tc()),au(n,t,r))}function ru(e,t,n){var r=nc(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ou(e))iu(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.hasEagerState=!0,o.eagerState=u,lr(u,a)){var l=t.interleaved;return null===l?(o.next=o,_i(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ti(e,t,o,r))&&(rc(n,e,r,o=tc()),au(n,t,r))}}function ou(e){var t=e.alternate;return e===ga||null!==t&&t===ga}function iu(e,t){Aa=ba=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function au(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}var uu={readContext:Pi,useCallback:xa,useContext:xa,useEffect:xa,useImperativeHandle:xa,useInsertionEffect:xa,useLayoutEffect:xa,useMemo:xa,useReducer:xa,useRef:xa,useState:xa,useDebugValue:xa,useDeferredValue:xa,useTransition:xa,useMutableSource:xa,useSyncExternalStore:xa,useId:xa,unstable_isNewReconciler:!1},lu={readContext:Pi,useCallback:function(e,t){return Pa().memoizedState=[e,void 0===t?null:t],e},useContext:Pi,useEffect:Ha,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ga(4194308,4,Ja.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ga(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ga(4,2,e,t)},useMemo:function(e,t){var n=Pa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Pa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=nu.bind(null,ga,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Pa().memoizedState=e},useState:Da,useDebugValue:qa,useDeferredValue:function(e){return Pa().memoizedState=e},useTransition:function(){var e=Da(!1),t=e[0];return e=eu.bind(null,e[1]),Pa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ga,o=Pa();if(ai){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Tl)throw Error(a(349));0!=(30&va)||za(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Ha(La.bind(null,r,i,e),[e]),r.flags|=2048,ja(9,Ma.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Pa(),t=Tl.identifierPrefix;if(ai){var n=Zo;t=":"+t+"R"+(n=(Xo&~(1<<32-ut(Xo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Ca++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},cu={readContext:Pi,useCallback:Ka,useContext:Pi,useEffect:Va,useImperativeHandle:$a,useInsertionEffect:Wa,useLayoutEffect:Ya,useMemo:Xa,useReducer:Ta,useRef:Ua,useState:function(){return Ta(_a)},useDebugValue:qa,useDeferredValue:function(e){return Za(Ia(),ma.memoizedState,e)},useTransition:function(){return[Ta(_a)[0],Ia().memoizedState]},useMutableSource:Ra,useSyncExternalStore:Na,useId:tu,unstable_isNewReconciler:!1},su={readContext:Pi,useCallback:Ka,useContext:Pi,useEffect:Va,useImperativeHandle:$a,useInsertionEffect:Wa,useLayoutEffect:Ya,useMemo:Xa,useReducer:Oa,useRef:Ua,useState:function(){return Oa(_a)},useDebugValue:qa,useDeferredValue:function(e){var t=Ia();return null===ma?t.memoizedState=e:Za(t,ma.memoizedState,e)},useTransition:function(){return[Oa(_a)[0],Ia().memoizedState]},useMutableSource:Ra,useSyncExternalStore:Na,useId:tu,unstable_isNewReconciler:!1};function fu(e,t){try{var n="",r=t;do{n+=G(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function du(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pu(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var hu="function"==typeof WeakMap?WeakMap:Map;function vu(e,t,n){(n=Mi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vl||(Vl=!0,Wl=r),pu(0,t)},n}function gu(e,t,n){(n=Mi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){pu(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){pu(0,t),"function"!=typeof r&&(null===Yl?Yl=new Set([this]):Yl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function mu(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new hu;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ec.bind(null,e,t,n),t.then(e,e))}function yu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function bu(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Mi(-1,1)).tag=2,Li(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var Au=w.ReactCurrentOwner,wu=!1;function Cu(e,t,n,r){t.child=null===e?Zi(t,null,n,r):Xi(t,e.child,n,r)}function xu(e,t,n,r,o){n=n.render;var i=t.ref;return Ei(t,o),r=ka(e,t,n,r,i,o),n=Ea(),null===e||wu?(ai&&n&&ni(t),t.flags|=1,Cu(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vu(e,t,o))}function Su(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Nc(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Mc(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ku(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:cr)(a,r)&&e.ref===t.ref)return Vu(e,t,o)}return t.flags|=1,(e=zc(i,r)).ref=t.ref,e.return=t,t.child=e}function ku(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(cr(i,r)&&e.ref===t.ref){if(wu=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,Vu(e,t,o);0!=(131072&e.flags)&&(wu=!0)}}return Iu(e,t,n,r,o)}function Eu(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Io(zl,Nl),Nl|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Io(zl,Nl),Nl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Io(zl,Nl),Nl|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Io(zl,Nl),Nl|=r;return Cu(e,t,o,n),t.child}function Pu(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Iu(e,t,n,r,o){var i=zo(n)?Ro:To.current;return i=No(t,i),Ei(t,o),n=ka(e,t,n,r,i,o),r=Ea(),null===e||wu?(ai&&r&&ni(t),t.flags|=1,Cu(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Vu(e,t,o))}function _u(e,t,n,o,i){if(zo(n)){var a=!0;Bo(t)}else a=!1;if(Ei(t,i),null===t.stateNode)Hu(e,t),Vi(t,n,o),Yi(t,n,o,i),o=!0;else if(null===e){var u=t.stateNode,l=t.memoizedProps;u.props=l;var c=u.context,s=n.contextType;s="object"===r(s)&&null!==s?Pi(s):No(t,s=zo(n)?Ro:To.current);var f=n.getDerivedStateFromProps,d="function"==typeof f||"function"==typeof u.getSnapshotBeforeUpdate;d||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==o||c!==s)&&Wi(t,u,o,s),Ri=!1;var p=t.memoizedState;u.state=p,Di(t,o,u,i),c=t.memoizedState,l!==o||p!==c||Oo.current||Ri?("function"==typeof f&&(Gi(t,n,f,o),c=t.memoizedState),(l=Ri||Hi(t,n,l,o,p,c,s))?(d||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(t.flags|=4194308)):("function"==typeof u.componentDidMount&&(t.flags|=4194308),t.memoizedProps=o,t.memoizedState=c),u.props=o,u.state=c,u.context=s,o=l):("function"==typeof u.componentDidMount&&(t.flags|=4194308),o=!1)}else{u=t.stateNode,zi(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:yi(t.type,l),u.props=s,d=t.pendingProps,p=u.context,c="object"===r(c=n.contextType)&&null!==c?Pi(c):No(t,c=zo(n)?Ro:To.current);var h=n.getDerivedStateFromProps;(f="function"==typeof h||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(l!==d||p!==c)&&Wi(t,u,o,c),Ri=!1,p=t.memoizedState,u.state=p,Di(t,o,u,i);var v=t.memoizedState;l!==d||p!==v||Oo.current||Ri?("function"==typeof h&&(Gi(t,n,h,o),v=t.memoizedState),(s=Ri||Hi(t,n,s,o,p,v,c)||!1)?(f||"function"!=typeof u.UNSAFE_componentWillUpdate&&"function"!=typeof u.componentWillUpdate||("function"==typeof u.componentWillUpdate&&u.componentWillUpdate(o,v,c),"function"==typeof u.UNSAFE_componentWillUpdate&&u.UNSAFE_componentWillUpdate(o,v,c)),"function"==typeof u.componentDidUpdate&&(t.flags|=4),"function"==typeof u.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof u.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof u.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=o,t.memoizedState=v),u.props=o,u.state=v,u.context=c,o=s):("function"!=typeof u.componentDidUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof u.getSnapshotBeforeUpdate||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),o=!1)}return Tu(e,t,n,o,a,i)}function Tu(e,t,n,r,o,i){Pu(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Do(t,n,!1),Vu(e,t,i);r=t.stateNode,Au.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,u,i)):Cu(e,t,u,i),t.memoizedState=r.state,o&&Do(t,n,!0),t.child}function Ou(e){var t=e.stateNode;t.pendingContext?Lo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lo(0,t.context,!1),ia(e,t.containerInfo)}function Ru(e,t,n,r,o){return vi(),gi(o),t.flags|=256,Cu(e,t,n,r),t.child}var Nu,zu,Mu,Lu={dehydrated:null,treeContext:null,retryLane:0};function Fu(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bu(e,t,n){var r,o=t.pendingProps,i=ca.current,u=!1,l=0!=(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),Io(ca,1&i),null===e)return fi(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(l=o.children,e=o.fallback,u?(o=t.mode,u=t.child,l={mode:"hidden",children:l},0==(1&o)&&null!==u?(u.childLanes=0,u.pendingProps=l):u=Fc(l,o,0,null),e=Lc(e,o,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Fu(n),t.memoizedState=Lu,e):Du(t,l));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,u){if(n)return 256&t.flags?(t.flags&=-257,ju(e,t,u,r=du(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Fc({mode:"visible",children:r.children},o,0,null),(i=Lc(i,o,u,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xi(t,e.child,null,u),t.child.memoizedState=Fu(u),t.memoizedState=Lu,i);if(0==(1&t.mode))return ju(e,t,u,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,ju(e,t,u,r=du(i=Error(a(419)),r,void 0))}if(l=0!=(u&e.childLanes),wu||l){if(null!==(r=Tl)){switch(u&-u){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|u))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Oi(e,o),rc(r,e,o,-1))}return gc(),ju(e,t,u,r=du(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Ic.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,ii=so(o.nextSibling),oi=t,ai=!0,ui=null,null!==e&&($o[qo++]=Xo,$o[qo++]=Zo,$o[qo++]=Ko,Xo=e.id,Zo=e.overflow,Ko=t),(t=Du(t,r.children)).flags|=4096,t)}(e,t,l,o,r,i,n);if(u){u=o.fallback,l=t.mode,r=(i=e.child).sibling;var c={mode:"hidden",children:o.children};return 0==(1&l)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=c,t.deletions=null):(o=zc(i,c)).subtreeFlags=14680064&i.subtreeFlags,null!==r?u=zc(r,u):(u=Lc(u,l,n,null)).flags|=2,u.return=t,o.return=t,o.sibling=u,t.child=o,o=u,u=t.child,l=null===(l=e.child.memoizedState)?Fu(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~n,t.memoizedState=Lu,o}return e=(u=e.child).sibling,o=zc(u,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Du(e,t){return(t=Fc({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function ju(e,t,n,r){return null!==r&&gi(r),Xi(t,e.child,null,n),(e=Du(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Uu(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),ki(e.return,t,n)}function Gu(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Qu(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Cu(e,t,r.children,n),0!=(2&(r=ca.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Uu(e,n,t);else if(19===e.tag)Uu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Io(ca,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===sa(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Gu(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===sa(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Gu(t,!0,n,null,i);break;case"together":Gu(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hu(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vu(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fl|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=zc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=zc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Wu(e,t){if(!ai)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Yu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ju(e,t,n){var r=t.pendingProps;switch(ri(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Yu(t),null;case 1:case 17:return zo(t.type)&&Mo(),Yu(t),null;case 3:return r=t.stateNode,aa(),Po(Oo),Po(To),da(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ui&&(uc(ui),ui=null))),Yu(t),null;case 5:la(t);var o=oa(ra.current);if(n=t.type,null!==e&&null!=t.stateNode)zu(e,t,n,r),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Yu(t),null}if(e=oa(ta.current),pi(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ho]=t,r[vo]=i,e=0!=(1&t.mode),n){case"dialog":jr("cancel",r),jr("close",r);break;case"iframe":case"object":case"embed":jr("load",r);break;case"video":case"audio":for(o=0;o<Lr.length;o++)jr(Lr[o],r);break;case"source":jr("error",r);break;case"img":case"image":case"link":jr("error",r),jr("load",r);break;case"details":jr("toggle",r);break;case"input":K(r,i),jr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},jr("invalid",r);break;case"textarea":ie(r,i),jr("invalid",r)}for(var u in be(n,i),o=null,i)if(i.hasOwnProperty(u)){var c=i[u];"children"===u?"string"==typeof c?r.textContent!==c&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,c,e),o=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,c,e),o=["children",""+c]):l.hasOwnProperty(u)&&null!=c&&"onScroll"===u&&jr("scroll",r)}switch(n){case"input":Y(r),ee(r,i,!0);break;case"textarea":Y(r),ue(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=eo)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{u=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=u.createElement(n,{is:r.is}):(e=u.createElement(n),"select"===n&&(u=e,r.multiple?u.multiple=!0:r.size&&(u.size=r.size))):e=u.createElementNS(e,n),e[ho]=t,e[vo]=r,Nu(e,t),t.stateNode=e;e:{switch(u=Ae(n,r),n){case"dialog":jr("cancel",e),jr("close",e),o=r;break;case"iframe":case"object":case"embed":jr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Lr.length;o++)jr(Lr[o],e);o=r;break;case"source":jr("error",e),o=r;break;case"img":case"image":case"link":jr("error",e),jr("load",e),o=r;break;case"details":jr("toggle",e),o=r;break;case"input":K(e,r),o=q(e,r),jr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=B({},r,{value:void 0}),jr("invalid",e);break;case"textarea":ie(e,r),o=oe(e,r),jr("invalid",e)}for(i in be(n,o),c=o)if(c.hasOwnProperty(i)){var s=c[i];"style"===i?me(e,s):"dangerouslySetInnerHTML"===i?null!=(s=s?s.__html:void 0)&&de(e,s):"children"===i?"string"==typeof s?("textarea"!==n||""!==s)&&pe(e,s):"number"==typeof s&&pe(e,""+s):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=s&&"onScroll"===i&&jr("scroll",e):null!=s&&A(e,i,s,u))}switch(n){case"input":Y(e),ee(e,r,!1);break;case"textarea":Y(e),ue(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?re(e,!!r.multiple,i,!1):null!=r.defaultValue&&re(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=eo)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Yu(t),null;case 6:if(e&&null!=t.stateNode)Mu(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=oa(ra.current),oa(ta.current),pi(t)){if(r=t.stateNode,n=t.memoizedProps,r[ho]=t,(i=r.nodeValue!==n)&&null!==(e=oi))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ho]=t,t.stateNode=r}return Yu(t),null;case 13:if(Po(ca),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ai&&null!==ii&&0!=(1&t.mode)&&0==(128&t.flags))hi(),vi(),t.flags|=98560,i=!1;else if(i=pi(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[ho]=t}else vi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Yu(t),i=!1}else null!==ui&&(uc(ui),ui=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&ca.current)?0===Ml&&(Ml=3):gc())),null!==t.updateQueue&&(t.flags|=4),Yu(t),null);case 4:return aa(),null===e&&Qr(t.stateNode.containerInfo),Yu(t),null;case 10:return Si(t.type._context),Yu(t),null;case 19:if(Po(ca),null===(i=t.memoizedState))return Yu(t),null;if(r=0!=(128&t.flags),null===(u=i.rendering))if(r)Wu(i,!1);else{if(0!==Ml||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(u=sa(e))){for(t.flags|=128,Wu(i,!1),null!==(r=u.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(u=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=u.childLanes,i.lanes=u.lanes,i.child=u.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=u.memoizedProps,i.memoizedState=u.memoizedState,i.updateQueue=u.updateQueue,i.type=u.type,e=u.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Io(ca,1&ca.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Ql&&(t.flags|=128,r=!0,Wu(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=sa(u))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Wu(i,!0),null===i.tail&&"hidden"===i.tailMode&&!u.alternate&&!ai)return Yu(t),null}else 2*Xe()-i.renderingStartTime>Ql&&1073741824!==n&&(t.flags|=128,r=!0,Wu(i,!1),t.lanes=4194304);i.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=i.last)?n.sibling=u:t.child=u,i.last=u)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=ca.current,Io(ca,r?1&n|2:1&n),t):(Yu(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Nl)&&(Yu(t),6&t.subtreeFlags&&(t.flags|=8192)):Yu(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function $u(e,t){switch(ri(t),t.tag){case 1:return zo(t.type)&&Mo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return aa(),Po(Oo),Po(To),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return la(t),null;case 13:if(Po(ca),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));vi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Po(ca),null;case 4:return aa(),null;case 10:return Si(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Nu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},zu=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,oa(ta.current);var i,a=null;switch(n){case"input":o=q(e,o),r=q(e,r),a=[];break;case"select":o=B({},o,{value:void 0}),r=B({},r,{value:void 0}),a=[];break;case"textarea":o=oe(e,o),r=oe(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=eo)}for(s in be(n,r),n=null,o)if(!r.hasOwnProperty(s)&&o.hasOwnProperty(s)&&null!=o[s])if("style"===s){var u=o[s];for(i in u)u.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?a||(a=[]):(a=a||[]).push(s,null));for(s in r){var c=r[s];if(u=null!=o?o[s]:void 0,r.hasOwnProperty(s)&&c!==u&&(null!=c||null!=u))if("style"===s)if(u){for(i in u)!u.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&u[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(a||(a=[]),a.push(s,n)),n=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,u=u?u.__html:void 0,null!=c&&u!==c&&(a=a||[]).push(s,c)):"children"===s?"string"!=typeof c&&"number"!=typeof c||(a=a||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(l.hasOwnProperty(s)?(null!=c&&"onScroll"===s&&jr("scroll",e),a||u===c||(a=[])):(a=a||[]).push(s,c))}n&&(a=a||[]).push("style",n);var s=a;(t.updateQueue=s)&&(t.flags|=4)}},Mu=function(e,t,n,r){n!==r&&(t.flags|=4)};var qu=!1,Ku=!1,Xu="function"==typeof WeakSet?WeakSet:Set,Zu=null;function el(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function tl(e,t,n){try{n()}catch(n){kc(e,t,n)}}var nl=!1;function rl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&tl(t,n,i)}o=o.next}while(o!==r)}}function ol(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function al(e){var t=e.alternate;null!==t&&(e.alternate=null,al(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[ho],delete t[vo],delete t[mo],delete t[yo],delete t[bo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ul(e){return 5===e.tag||3===e.tag||4===e.tag}function ll(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ul(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=eo));else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}function sl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var fl=null,dl=!1;function pl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Ku||el(n,t);case 6:var r=fl,o=dl;fl=null,pl(e,t,n),dl=o,null!==(fl=r)&&(dl?(e=fl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):fl.removeChild(n.stateNode));break;case 18:null!==fl&&(dl?(e=fl,n=n.stateNode,8===e.nodeType?co(e.parentNode,n):1===e.nodeType&&co(e,n),Qt(e)):co(fl,n.stateNode));break;case 4:r=fl,o=dl,fl=n.stateNode.containerInfo,dl=!0,pl(e,t,n),fl=r,dl=o;break;case 0:case 11:case 14:case 15:if(!Ku&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&tl(n,t,a),o=o.next}while(o!==r)}pl(e,t,n);break;case 1:if(!Ku&&(el(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){kc(n,t,e)}pl(e,t,n);break;case 21:pl(e,t,n);break;case 22:1&n.mode?(Ku=(r=Ku)||null!==n.memoizedState,pl(e,t,n),Ku=r):pl(e,t,n);break;default:pl(e,t,n)}}function vl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xu),t.forEach((function(t){var r=_c.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:fl=l.stateNode,dl=!1;break e;case 3:case 4:fl=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===fl)throw Error(a(160));hl(i,u,o),fl=null,dl=!1;var c=o.alternate;null!==c&&(c.return=null),o.return=null}catch(e){kc(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),yl(e),4&r){try{rl(3,e,e.return),ol(3,e)}catch(t){kc(e,e.return,t)}try{rl(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:gl(t,e),yl(e),512&r&&null!==n&&el(n,n.return);break;case 5:if(gl(t,e),yl(e),512&r&&null!==n&&el(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){kc(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,u=null!==n?n.memoizedProps:i,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===i.type&&null!=i.name&&X(o,i),Ae(l,u);var s=Ae(l,i);for(u=0;u<c.length;u+=2){var f=c[u],d=c[u+1];"style"===f?me(o,d):"dangerouslySetInnerHTML"===f?de(o,d):"children"===f?pe(o,d):A(o,f,d,s)}switch(l){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?re(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?re(o,!!i.multiple,i.defaultValue,!0):re(o,!!i.multiple,i.multiple?[]:"",!1))}o[vo]=i}catch(t){kc(e,e.return,t)}}break;case 6:if(gl(t,e),yl(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){kc(e,e.return,t)}}break;case 3:if(gl(t,e),yl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Qt(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:gl(t,e),yl(e);break;case 13:gl(t,e),yl(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Gl=Xe())),4&r&&vl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Ku=(s=Ku)||f,gl(t,e),Ku=s):gl(t,e),yl(e),8192&r){if(s=null!==e.memoizedState,(e.stateNode.isHidden=s)&&!f&&0!=(1&e.mode))for(Zu=e,f=e.child;null!==f;){for(d=Zu=f;null!==Zu;){switch(h=(p=Zu).child,p.tag){case 0:case 11:case 14:case 15:rl(4,p,p.return);break;case 1:el(p,p.return);var v=p.stateNode;if("function"==typeof v.componentWillUnmount){r=p,n=p.return;try{t=r,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(e){kc(r,n,e)}}break;case 5:el(p,p.return);break;case 22:if(null!==p.memoizedState){Cl(d);continue}}null!==h?(h.return=p,Zu=h):Cl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,s?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(l=d.stateNode,u=null!=(c=d.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=ge("display",u))}catch(t){kc(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=s?"":d.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:gl(t,e),yl(e),4&r&&vl(e);case 21:}}function yl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ul(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),sl(e,ll(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cl(e,ll(e),i);break;default:throw Error(a(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bl(e,t,n){Zu=e,Al(e,t,n)}function Al(e,t,n){for(var r=0!=(1&e.mode);null!==Zu;){var o=Zu,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||qu;if(!a){var u=o.alternate,l=null!==u&&null!==u.memoizedState||Ku;u=qu;var c=Ku;if(qu=a,(Ku=l)&&!c)for(Zu=o;null!==Zu;)l=(a=Zu).child,22===a.tag&&null!==a.memoizedState?xl(o):null!==l?(l.return=a,Zu=l):xl(o);for(;null!==i;)Zu=i,Al(i,t,n),i=i.sibling;Zu=o,qu=u,Ku=c}wl(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,Zu=i):wl(e)}}function wl(e){for(;null!==Zu;){var t=Zu;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Ku||ol(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Ku)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:yi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&ji(t,i,r);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}ji(t,u,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var s=t.alternate;if(null!==s){var f=s.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Qt(d)}}}break;default:throw Error(a(163))}Ku||512&t.flags&&il(t)}catch(e){kc(t,t.return,e)}}if(t===e){Zu=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zu=n;break}Zu=t.return}}function Cl(e){for(;null!==Zu;){var t=Zu;if(t===e){Zu=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zu=n;break}Zu=t.return}}function xl(e){for(;null!==Zu;){var t=Zu;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ol(4,t)}catch(e){kc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){kc(t,o,e)}}var i=t.return;try{il(t)}catch(e){kc(t,i,e)}break;case 5:var a=t.return;try{il(t)}catch(e){kc(t,a,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Zu=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Zu=u;break}Zu=t.return}}var Sl,kl=Math.ceil,El=w.ReactCurrentDispatcher,Pl=w.ReactCurrentOwner,Il=w.ReactCurrentBatchConfig,_l=0,Tl=null,Ol=null,Rl=0,Nl=0,zl=Eo(0),Ml=0,Ll=null,Fl=0,Bl=0,Dl=0,jl=null,Ul=null,Gl=0,Ql=1/0,Hl=null,Vl=!1,Wl=null,Yl=null,Jl=!1,$l=null,ql=0,Kl=0,Xl=null,Zl=-1,ec=0;function tc(){return 0!=(6&_l)?Xe():-1!==Zl?Zl:Zl=Xe()}function nc(e){return 0==(1&e.mode)?1:0!=(2&_l)&&0!==Rl?Rl&-Rl:null!==mi.transition?(0===ec&&(ec=gt()),ec):0!==(e=At)?e:e=void 0===(e=window.event)?16:Kt(e.type)}function rc(e,t,n,r){if(50<Kl)throw Kl=0,Xl=null,Error(a(185));yt(e,n,r),0!=(2&_l)&&e===Tl||(e===Tl&&(0==(2&_l)&&(Bl|=n),4===Ml&&lc(e,Rl)),oc(e,r),1===n&&0===_l&&0==(1&t.mode)&&(Ql=Xe()+500,Uo&&Ho()))}function oc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-ut(i),u=1<<a,l=o[a];-1===l?0!=(u&n)&&0==(u&r)||(o[a]=ht(u,t)):l<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var r=pt(e,e===Tl?Rl:0);if(0===r)null!==n&&$e(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&$e(n),1===t)0===e.tag?function(e){Uo=!0,Qo(e)}(cc.bind(null,e)):Qo(cc.bind(null,e)),uo((function(){0==(6&_l)&&Ho()})),n=null;else{switch(wt(r)){case 1:n=et;break;case 4:n=tt;break;case 16:default:n=nt;break;case 536870912:n=ot}n=Tc(n,ic.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ic(e,t){if(Zl=-1,ec=0,0!=(6&_l))throw Error(a(327));var n=e.callbackNode;if(xc()&&e.callbackNode!==n)return null;var r=pt(e,e===Tl?Rl:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=mc(e,r);else{t=r;var o=_l;_l|=2;var i=vc();for(Tl===e&&Rl===t||(Hl=null,Ql=Xe()+500,pc(e,t));;)try{bc();break}catch(t){hc(e,t)}xi(),El.current=i,_l=o,null!==Ol?t=0:(Tl=null,Rl=0,t=Ml)}if(0!==t){if(2===t&&0!==(o=vt(e))&&(r=o,t=ac(e,o)),1===t)throw n=Ll,pc(e,0),lc(e,r),oc(e,Xe()),n;if(6===t)lc(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!lr(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=mc(e,r))&&0!==(i=vt(e))&&(r=i,t=ac(e,i)),1===t))throw n=Ll,pc(e,0),lc(e,r),oc(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:Cc(e,Ul,Hl);break;case 3:if(lc(e,r),(130023424&r)===r&&10<(t=Gl+500-Xe())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tc(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=oo(Cc.bind(null,e,Ul,Hl),t);break}Cc(e,Ul,Hl);break;case 4:if(lc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var u=31-ut(r);i=1<<u,(u=t[u])>o&&(o=u),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*kl(r/1960))-r)){e.timeoutHandle=oo(Cc.bind(null,e,Ul,Hl),r);break}Cc(e,Ul,Hl);break;default:throw Error(a(329))}}}return oc(e,Xe()),e.callbackNode===n?ic.bind(null,e):null}function ac(e,t){var n=jl;return e.current.memoizedState.isDehydrated&&(pc(e,t).flags|=256),2!==(e=mc(e,t))&&(t=Ul,Ul=n,null!==t&&uc(t)),e}function uc(e){null===Ul?Ul=e:Ul.push.apply(Ul,e)}function lc(e,t){for(t&=~Dl,t&=~Bl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ut(t),r=1<<n;e[n]=-1,t&=~r}}function cc(e){if(0!=(6&_l))throw Error(a(327));xc();var t=pt(e,0);if(0==(1&t))return oc(e,Xe()),null;var n=mc(e,t);if(0!==e.tag&&2===n){var r=vt(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=Ll,pc(e,0),lc(e,t),oc(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,Cc(e,Ul,Hl),oc(e,Xe()),null}function sc(e,t){var n=_l;_l|=1;try{return e(t)}finally{0===(_l=n)&&(Ql=Xe()+500,Uo&&Ho())}}function fc(e){null!==$l&&0===$l.tag&&0==(6&_l)&&xc();var t=_l;_l|=1;var n=Il.transition,r=At;try{if(Il.transition=null,At=1,e)return e()}finally{At=r,Il.transition=n,0==(6&(_l=t))&&Ho()}}function dc(){Nl=zl.current,Po(zl)}function pc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,io(n)),null!==Ol)for(n=Ol.return;null!==n;){var r=n;switch(ri(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Mo();break;case 3:aa(),Po(Oo),Po(To),da();break;case 5:la(r);break;case 4:aa();break;case 13:case 19:Po(ca);break;case 10:Si(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Tl=e,Ol=e=zc(e.current,null),Rl=Nl=t,Ml=0,Ll=null,Dl=Bl=Fl=0,Ul=jl=null,null!==Ii){for(t=0;t<Ii.length;t++)if(null!==(r=(n=Ii[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Ii=null}return e}function hc(e,t){for(;;){var n=Ol;try{if(xi(),pa.current=uu,ba){for(var o=ga.memoizedState;null!==o;){var i=o.queue;null!==i&&(i.pending=null),o=o.next}ba=!1}if(va=0,ya=ma=ga=null,Aa=!1,wa=0,Pl.current=null,null===n||null===n.return){Ml=1,Ll=t,Ol=null;break}e:{var u=e,l=n.return,c=n,s=t;if(t=Rl,c.flags|=32768,null!==s&&"object"===r(s)&&"function"==typeof s.then){var f=s,d=c,p=d.tag;if(0==(1&d.mode)&&(0===p||11===p||15===p)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var v=yu(l);if(null!==v){v.flags&=-257,bu(v,l,c,0,t),1&v.mode&&mu(u,f,t),s=f;var g=(t=v).updateQueue;if(null===g){var m=new Set;m.add(s),t.updateQueue=m}else g.add(s);break e}if(0==(1&t)){mu(u,f,t),gc();break e}s=Error(a(426))}else if(ai&&1&c.mode){var y=yu(l);if(null!==y){0==(65536&y.flags)&&(y.flags|=256),bu(y,l,c,0,t),gi(fu(s,c));break e}}u=s=fu(s,c),4!==Ml&&(Ml=2),null===jl?jl=[u]:jl.push(u),u=l;do{switch(u.tag){case 3:u.flags|=65536,t&=-t,u.lanes|=t,Bi(u,vu(0,s,t));break e;case 1:c=s;var b=u.type,A=u.stateNode;if(0==(128&u.flags)&&("function"==typeof b.getDerivedStateFromError||null!==A&&"function"==typeof A.componentDidCatch&&(null===Yl||!Yl.has(A)))){u.flags|=65536,t&=-t,u.lanes|=t,Bi(u,gu(u,c,t));break e}}u=u.return}while(null!==u)}wc(n)}catch(e){t=e,Ol===n&&null!==n&&(Ol=n=n.return);continue}break}}function vc(){var e=El.current;return El.current=uu,null===e?uu:e}function gc(){0!==Ml&&3!==Ml&&2!==Ml||(Ml=4),null===Tl||0==(268435455&Fl)&&0==(268435455&Bl)||lc(Tl,Rl)}function mc(e,t){var n=_l;_l|=2;var r=vc();for(Tl===e&&Rl===t||(Hl=null,pc(e,t));;)try{yc();break}catch(t){hc(e,t)}if(xi(),_l=n,El.current=r,null!==Ol)throw Error(a(261));return Tl=null,Rl=0,Ml}function yc(){for(;null!==Ol;)Ac(Ol)}function bc(){for(;null!==Ol&&!qe();)Ac(Ol)}function Ac(e){var t=Sl(e.alternate,e,Nl);e.memoizedProps=e.pendingProps,null===t?wc(e):Ol=t,Pl.current=null}function wc(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ju(n,t,Nl)))return void(Ol=n)}else{if(null!==(n=$u(n,t)))return n.flags&=32767,void(Ol=n);if(null===e)return Ml=6,void(Ol=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Ol=t);Ol=t=e}while(null!==t);0===Ml&&(Ml=5)}function Cc(e,t,n){var r=At,o=Il.transition;try{Il.transition=null,At=1,function(e,t,n,r){do{xc()}while(null!==$l);if(0!=(6&_l))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-ut(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,i),e===Tl&&(Ol=Tl=null,Rl=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Jl||(Jl=!0,Tc(nt,(function(){return xc(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Il.transition,Il.transition=null;var u=At;At=1;var l=_l;_l|=4,Pl.current=null,function(e,t){if(to=Vt,hr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var u=0,l=-1,c=-1,s=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(l=u+o),d!==i||0!==r&&3!==d.nodeType||(c=u+r),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++s===o&&(l=u),p===i&&++f===r&&(c=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(no={focusedElem:e,selectionRange:n},Vt=!1,Zu=t;null!==Zu;)if(e=(t=Zu).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zu=e;else for(;null!==Zu;){t=Zu;try{var v=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==v){var g=v.memoizedProps,m=v.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:yi(t.type,g),m);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var A=t.stateNode.containerInfo;1===A.nodeType?A.textContent="":9===A.nodeType&&A.documentElement&&A.removeChild(A.documentElement);break;default:throw Error(a(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zu=e;break}Zu=t.return}v=nl,nl=!1}(e,n),ml(n,e),vr(no),Vt=!!to,no=to=null,e.current=n,bl(n,e,o),Ke(),_l=l,At=u,Il.transition=i}else e.current=n;if(Jl&&(Jl=!1,$l=e,ql=o),0===(i=e.pendingLanes)&&(Yl=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),oc(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Vl)throw Vl=!1,e=Wl,Wl=null,e;0!=(1&ql)&&0!==e.tag&&xc(),0!=(1&(i=e.pendingLanes))?e===Xl?Kl++:(Kl=0,Xl=e):Kl=0,Ho()}(e,t,n,r)}finally{Il.transition=o,At=r}return null}function xc(){if(null!==$l){var e=wt(ql),t=Il.transition,n=At;try{if(Il.transition=null,At=16>e?16:e,null===$l)var r=!1;else{if(e=$l,$l=null,ql=0,0!=(6&_l))throw Error(a(331));var o=_l;for(_l|=4,Zu=e.current;null!==Zu;){var i=Zu,u=i.child;if(0!=(16&Zu.flags)){var l=i.deletions;if(null!==l){for(var c=0;c<l.length;c++){var s=l[c];for(Zu=s;null!==Zu;){var f=Zu;switch(f.tag){case 0:case 11:case 15:rl(8,f,i)}var d=f.child;if(null!==d)d.return=f,Zu=d;else for(;null!==Zu;){var p=(f=Zu).sibling,h=f.return;if(al(f),f===s){Zu=null;break}if(null!==p){p.return=h,Zu=p;break}Zu=h}}}var v=i.alternate;if(null!==v){var g=v.child;if(null!==g){v.child=null;do{var m=g.sibling;g.sibling=null,g=m}while(null!==g)}}Zu=i}}if(0!=(2064&i.subtreeFlags)&&null!==u)u.return=i,Zu=u;else e:for(;null!==Zu;){if(0!=(2048&(i=Zu).flags))switch(i.tag){case 0:case 11:case 15:rl(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Zu=y;break e}Zu=i.return}}var b=e.current;for(Zu=b;null!==Zu;){var A=(u=Zu).child;if(0!=(2064&u.subtreeFlags)&&null!==A)A.return=u,Zu=A;else e:for(u=b;null!==Zu;){if(0!=(2048&(l=Zu).flags))try{switch(l.tag){case 0:case 11:case 15:ol(9,l)}}catch(e){kc(l,l.return,e)}if(l===u){Zu=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Zu=w;break e}Zu=l.return}}if(_l=o,Ho(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{At=n,Il.transition=t}}return!1}function Sc(e,t,n){e=Li(e,t=vu(0,t=fu(n,t),1),1),t=tc(),null!==e&&(yt(e,1,t),oc(e,t))}function kc(e,t,n){if(3===e.tag)Sc(e,e,n);else for(;null!==t;){if(3===t.tag){Sc(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Yl||!Yl.has(r))){t=Li(t,e=gu(t,e=fu(n,e),1),1),e=tc(),null!==t&&(yt(t,1,e),oc(t,e));break}}t=t.return}}function Ec(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tc(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Rl&n)===n&&(4===Ml||3===Ml&&(130023424&Rl)===Rl&&500>Xe()-Gl?pc(e,0):Dl|=n),oc(e,t)}function Pc(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ft,0==(130023424&(ft<<=1))&&(ft=4194304)));var n=tc();null!==(e=Oi(e,t))&&(yt(e,t,n),oc(e,n))}function Ic(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Pc(e,n)}function _c(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Pc(e,n)}function Tc(e,t){return Je(e,t)}function Oc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Rc(e,t,n,r){return new Oc(e,t,n,r)}function Nc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function zc(e,t){var n=e.alternate;return null===n?((n=Rc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Mc(e,t,n,o,i,u){var l=2;if(o=e,"function"==typeof e)Nc(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Lc(n.children,i,u,t);case k:l=8,i|=8;break;case E:return(e=Rc(12,n,t,2|i)).elementType=E,e.lanes=u,e;case T:return(e=Rc(13,n,t,i)).elementType=T,e.lanes=u,e;case O:return(e=Rc(19,n,t,i)).elementType=O,e.lanes=u,e;case z:return Fc(n,i,u,t);default:if("object"===r(e)&&null!==e)switch(e.$$typeof){case P:l=10;break e;case I:l=9;break e;case _:l=11;break e;case R:l=14;break e;case N:l=16,o=null;break e}throw Error(a(130,null==e?e:r(e),""))}return(t=Rc(l,n,t,i)).elementType=e,t.type=o,t.lanes=u,t}function Lc(e,t,n,r){return(e=Rc(7,e,r,t)).lanes=n,e}function Fc(e,t,n,r){return(e=Rc(22,e,r,t)).elementType=z,e.lanes=n,e.stateNode={isHidden:!1},e}function Bc(e,t,n){return(e=Rc(6,e,null,t)).lanes=n,e}function Dc(e,t,n){return(t=Rc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function jc(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Uc(e,t,n,r,o,i,a,u,l){return e=new jc(e,t,n,u,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Rc(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ni(i),e}function Gc(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Qc(e){if(!e)return _o;e:{if(Qe(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(zo(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(zo(n))return Fo(e,n,t)}return t}function Hc(e,t,n,r,o,i,a,u,l){return(e=Uc(n,r,!0,e,0,i,0,u,l)).context=Qc(null),n=e.current,(i=Mi(r=tc(),o=nc(n))).callback=null!=t?t:null,Li(n,i,o),e.current.lanes=o,yt(e,o,r),oc(e,r),e}function Vc(e,t,n,r){var o=t.current,i=tc(),a=nc(o);return n=Qc(n),null===t.context?t.context=n:t.pendingContext=n,(t=Mi(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Li(o,t,a))&&(rc(e,o,a,i),Fi(e,o,a)),a}function Wc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Yc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Jc(e,t){Yc(e,t),(e=e.alternate)&&Yc(e,t)}Sl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oo.current)wu=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wu=!1,function(e,t,n){switch(t.tag){case 3:Ou(t),vi();break;case 5:ua(t);break;case 1:zo(t.type)&&Bo(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Io(bi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Io(ca,1&ca.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Bu(e,t,n):(Io(ca,1&ca.current),null!==(e=Vu(e,t,n))?e.sibling:null);Io(ca,1&ca.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Qu(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Io(ca,ca.current),r)break;return null;case 22:case 23:return t.lanes=0,Eu(e,t,n)}return Vu(e,t,n)}(e,t,n);wu=0!=(131072&e.flags)}else wu=!1,ai&&0!=(1048576&t.flags)&&ti(t,Jo,t.index);switch(t.lanes=0,t.tag){case 2:var o=t.type;Hu(e,t),e=t.pendingProps;var i=No(t,To.current);Ei(t,n),i=ka(null,t,o,e,i,n);var u=Ea();return t.flags|=1,"object"===r(i)&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,zo(o)?(u=!0,Bo(t)):u=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ni(t),i.updater=Qi,t.stateNode=i,i._reactInternals=t,Yi(t,o,e,n),t=Tu(null,t,o,!0,u,n)):(t.tag=0,ai&&u&&ni(t),Cu(null,t,i,n),t=t.child),t;case 16:o=t.elementType;e:{switch(Hu(e,t),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Nc(e)?1:0;if(null!=e){if((e=e.$$typeof)===_)return 11;if(e===R)return 14}return 2}(o),e=yi(o,e),i){case 0:t=Iu(null,t,o,e,n);break e;case 1:t=_u(null,t,o,e,n);break e;case 11:t=xu(null,t,o,e,n);break e;case 14:t=Su(null,t,o,yi(o.type,e),n);break e}throw Error(a(306,o,""))}return t;case 0:return o=t.type,i=t.pendingProps,Iu(e,t,o,i=t.elementType===o?i:yi(o,i),n);case 1:return o=t.type,i=t.pendingProps,_u(e,t,o,i=t.elementType===o?i:yi(o,i),n);case 3:e:{if(Ou(t),null===e)throw Error(a(387));o=t.pendingProps,i=(u=t.memoizedState).element,zi(e,t),Di(t,o,null,n);var l=t.memoizedState;if(o=l.element,u.isDehydrated){if(u={element:o,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=u,t.memoizedState=u,256&t.flags){t=Ru(e,t,o,n,i=fu(Error(a(423)),t));break e}if(o!==i){t=Ru(e,t,o,n,i=fu(Error(a(424)),t));break e}for(ii=so(t.stateNode.containerInfo.firstChild),oi=t,ai=!0,ui=null,n=Zi(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(vi(),o===i){t=Vu(e,t,n);break e}Cu(e,t,o,n)}t=t.child}return t;case 5:return ua(t),null===e&&fi(t),o=t.type,i=t.pendingProps,u=null!==e?e.memoizedProps:null,l=i.children,ro(o,i)?l=null:null!==u&&ro(o,u)&&(t.flags|=32),Pu(e,t),Cu(e,t,l,n),t.child;case 6:return null===e&&fi(t),null;case 13:return Bu(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Xi(t,null,o,n):Cu(e,t,o,n),t.child;case 11:return o=t.type,i=t.pendingProps,xu(e,t,o,i=t.elementType===o?i:yi(o,i),n);case 7:return Cu(e,t,t.pendingProps,n),t.child;case 8:case 12:return Cu(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(o=t.type._context,i=t.pendingProps,u=t.memoizedProps,l=i.value,Io(bi,o._currentValue),o._currentValue=l,null!==u)if(lr(u.value,l)){if(u.children===i.children&&!Oo.current){t=Vu(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){l=u.child;for(var s=c.firstContext;null!==s;){if(s.context===o){if(1===u.tag){(s=Mi(-1,n&-n)).tag=2;var f=u.updateQueue;if(null!==f){var d=(f=f.shared).pending;null===d?s.next=s:(s.next=d.next,d.next=s),f.pending=s}}u.lanes|=n,null!==(s=u.alternate)&&(s.lanes|=n),ki(u.return,n,t),c.lanes|=n;break}s=s.next}}else if(10===u.tag)l=u.type===t.type?null:u.child;else if(18===u.tag){if(null===(l=u.return))throw Error(a(341));l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),ki(l,n,t),l=u.sibling}else l=u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Cu(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,o=t.pendingProps.children,Ei(t,n),o=o(i=Pi(i)),t.flags|=1,Cu(e,t,o,n),t.child;case 14:return i=yi(o=t.type,t.pendingProps),Su(e,t,o,i=yi(o.type,i),n);case 15:return ku(e,t,t.type,t.pendingProps,n);case 17:return o=t.type,i=t.pendingProps,i=t.elementType===o?i:yi(o,i),Hu(e,t),t.tag=1,zo(o)?(e=!0,Bo(t)):e=!1,Ei(t,n),Vi(t,o,i),Yi(t,o,i,n),Tu(null,t,o,!0,e,n);case 19:return Qu(e,t,n);case 22:return Eu(e,t,n)}throw Error(a(156,t.tag))};var $c="function"==typeof reportError?reportError:function(e){console.error(e)};function qc(e){this._internalRoot=e}function Kc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(){}function ts(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var u=o;o=function(){var e=Wc(a);u.call(e)}}Vc(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=Wc(a);i.call(e)}}var a=Hc(t,r,e,0,null,!1,0,"",es);return e._reactRootContainer=a,e[go]=a.current,Qr(8===e.nodeType?e.parentNode:e),fc(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var u=r;r=function(){var e=Wc(l);u.call(e)}}var l=Uc(e,0,!1,null,0,!1,0,"",es);return e._reactRootContainer=l,e[go]=l.current,Qr(8===e.nodeType?e.parentNode:e),fc((function(){Vc(t,l,n,r)})),l}(n,t,e,o,r);return Wc(a)}Kc.prototype.render=qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Vc(e,t,null,null)},Kc.prototype.unmount=qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;fc((function(){Vc(null,e,null,null)})),t[go]=null}},Kc.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<zt.length&&0!==t&&t<zt[n].priority;n++);zt.splice(n,0,e),0===n&&Bt(e)}},Ct=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(bt(t,1|n),oc(t,Xe()),0==(6&_l)&&(Ql=Xe()+500,Ho()))}break;case 13:fc((function(){var t=Oi(e,1);if(null!==t){var n=tc();rc(t,e,1,n)}})),Jc(e,1)}},xt=function(e){if(13===e.tag){var t=Oi(e,134217728);null!==t&&rc(t,e,134217728,tc()),Jc(e,134217728)}},St=function(e){if(13===e.tag){var t=nc(e),n=Oi(e,t);null!==n&&rc(n,e,t,tc()),Jc(e,t)}},kt=function(){return At},Et=function(e,t){var n=At;try{return At=e,t()}finally{At=n}},xe=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=xo(r);if(!o)throw Error(a(90));J(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&re(e,!!n.multiple,t,!1)}},_e=sc,Te=fc;var ns={usingClientEntryPoint:!1,Events:[wo,Co,xo,Pe,Ie,sc]},rs={findFiberByHostInstance:Ao,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var is=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!is.isDisabled&&is.supportsFiber)try{it=is.inject(os),at=is}catch(fe){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(t))throw Error(a(200));return Gc(e,t,null,n)},t.createRoot=function(e,t){if(!Xc(e))throw Error(a(299));var n=!1,r="",o=$c;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Uc(e,1,!1,null,0,n,0,r,o),e[go]=t.current,Qr(8===e.nodeType?e.parentNode:e),new qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return fc(e)},t.hydrate=function(e,t,n){if(!Zc(t))throw Error(a(200));return ts(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",u=$c;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=Hc(t,null,e,1,null!=n?n:null,o,0,i,u),e[go]=t.current,Qr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Kc(t)},t.render=function(e,t,n){if(!Zc(t))throw Error(a(200));return ts(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zc(e))throw Error(a(40));return!!e._reactRootContainer&&(fc((function(){ts(null,null,e,!1,(function(){e._reactRootContainer=null,e[go]=null}))})),!0)},t.unstable_batchedUpdates=sc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ts(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},7769:function(e,t,n){"use strict";var r=n(1169);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},1169:function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(7802)},1563:function(e,t){"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),u=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),c=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),h=Symbol.iterator,v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}function b(){}function A(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!==n(e)&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=y.prototype;var w=A.prototype=new b;w.constructor=A,g(w,y.prototype),w.isPureReactComponent=!0;var C=Array.isArray,x=Object.prototype.hasOwnProperty,S={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var o,i={},a=null,u=null;if(null!=t)for(o in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)x.call(t,o)&&!k.hasOwnProperty(o)&&(i[o]=t[o]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:r,type:e,key:a,ref:u,props:i,_owner:S.current}}function P(e){return"object"===n(e)&&null!==e&&e.$$typeof===r}var I=/\/+/g;function _(e,t){return"object"===n(e)&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,i,a,u){var l=n(e);"undefined"!==l&&"boolean"!==l||(e=null);var c=!1;if(null===e)c=!0;else switch(l){case"string":case"number":c=!0;break;case"object":switch(e.$$typeof){case r:case o:c=!0}}if(c)return u=u(c=e),e=""===a?"."+_(c,0):a,C(u)?(i="",null!=e&&(i=e.replace(I,"$&/")+"/"),T(u,t,i,"",(function(e){return e}))):null!=u&&(P(u)&&(u=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(u,i+(!u.key||c&&c.key===u.key?"":(""+u.key).replace(I,"$&/")+"/")+e)),t.push(u)),1;if(c=0,a=""===a?".":a+":",C(e))for(var s=0;s<e.length;s++){var f=a+_(l=e[s],s);c+=T(l,t,i,f,u)}else if(f=function(e){return null===e||"object"!==n(e)?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof f)for(e=f.call(e),s=0;!(l=e.next()).done;)c+=T(l=l.value,t,i,f=a+_(l,s++),u);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return c}function O(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},z={transition:null},M={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:z,ReactCurrentOwner:S};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=y,t.Fragment=i,t.Profiler=u,t.PureComponent=A,t.StrictMode=a,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=g({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=S.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)x.call(t,c)&&!k.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){l=Array(c);for(var s=0;s<c;s++)l[s]=arguments[s+2];o.children=l}return{$$typeof:r,type:e.type,key:i,ref:a,props:o,_owner:u}},t.createContext=function(e){return(e={$$typeof:c,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=z.transition;z.transition={};try{e()}finally{z.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.2.0"},2908:function(e,t,n){"use strict";e.exports=n(1563)},8245:function(e,t){"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function o(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var u=2*(r+1)-1,l=e[u],c=u+1,s=e[c];if(0>a(l,n))c<o&&0>a(s,l)?(e[r]=s,e[c]=n,r=c):(e[r]=l,e[u]=n,r=u);else{if(!(c<o&&0>a(s,n)))break e;e[r]=s,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"===("undefined"==typeof performance?"undefined":n(performance))&&"function"==typeof performance.now){var u=performance;t.unstable_now=function(){return u.now()}}else{var l=Date,c=l.now();t.unstable_now=function(){return l.now()-c}}var s=[],f=[],d=1,p=null,h=3,v=!1,g=!1,m=!1,y="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,A="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=o(f);null!==t;){if(null===t.callback)i(f);else{if(!(t.startTime<=e))break;i(f),t.sortIndex=t.expirationTime,r(s,t)}t=o(f)}}function C(e){if(m=!1,w(e),!g)if(null!==o(s))g=!0,z(x);else{var t=o(f);null!==t&&M(C,t.startTime-e)}}function x(e,n){g=!1,m&&(m=!1,b(P),P=-1),v=!0;var r=h;try{for(w(n),p=o(s);null!==p&&(!(p.expirationTime>n)||e&&!T());){var a=p.callback;if("function"==typeof a){p.callback=null,h=p.priorityLevel;var u=a(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?p.callback=u:p===o(s)&&i(s),w(n)}else i(s);p=o(s)}if(null!==p)var l=!0;else{var c=o(f);null!==c&&M(C,c.startTime-n),l=!1}return l}finally{p=null,h=r,v=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var S,k=!1,E=null,P=-1,I=5,_=-1;function T(){return!(t.unstable_now()-_<I)}function O(){if(null!==E){var e=t.unstable_now();_=e;var n=!0;try{n=E(!0,e)}finally{n?S():(k=!1,E=null)}}else k=!1}if("function"==typeof A)S=function(){A(O)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,N=R.port2;R.port1.onmessage=O,S=function(){N.postMessage(null)}}else S=function(){y(O,0)};function z(e){E=e,k||(k=!0,S())}function M(e,n){P=y((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||v||(g=!0,z(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):I=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return o(s)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,i,a){var u=t.unstable_now();switch(a="object"===n(a)&&null!==a&&"number"==typeof(a=a.delay)&&0<a?u+a:u,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>u?(e.sortIndex=a,r(f,e),null===o(s)&&e===o(f)&&(m?(b(P),P=-1):m=!0,M(C,a-u))):(e.sortIndex=l,r(s,e),g||v||(g=!0,z(x))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},4853:function(e,t,n){"use strict";e.exports=n(8245)},9662:function(e,t,n){var r=n(614),o=n(6330),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a function")}},9483:function(e,t,n){var r=n(4411),o=n(6330),i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not a constructor")}},6077:function(e,t,n){var r=n(614),o=String,i=TypeError;e.exports=function(e){if("object"==typeof e||r(e))return e;throw i("Can't set "+o(e)+" as a prototype")}},1223:function(e,t,n){var r=n(5112),o=n(30),i=n(3070).f,a=r("unscopables"),u=Array.prototype;null==u[a]&&i(u,a,{configurable:!0,value:o(null)}),e.exports=function(e){u[a][e]=!0}},1530:function(e,t,n){"use strict";var r=n(8710).charAt;e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},5787:function(e,t,n){var r=n(7976),o=TypeError;e.exports=function(e,t){if(r(t,e))return e;throw o("Incorrect invocation")}},9670:function(e,t,n){var r=n(111),o=String,i=TypeError;e.exports=function(e){if(r(e))return e;throw i(o(e)+" is not an object")}},3013:function(e){e.exports="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof DataView},7556:function(e,t,n){var r=n(7293);e.exports=r((function(){if("function"==typeof ArrayBuffer){var e=new ArrayBuffer(8);Object.isExtensible(e)&&Object.defineProperty(e,"a",{value:8})}}))},260:function(e,t,n){"use strict";var r,o,i,a=n(3013),u=n(9781),l=n(7854),c=n(614),s=n(111),f=n(2597),d=n(648),p=n(6330),h=n(8880),v=n(8052),g=n(3070).f,m=n(7976),y=n(9518),b=n(7674),A=n(5112),w=n(9711),C=n(9909),x=C.enforce,S=C.get,k=l.Int8Array,E=k&&k.prototype,P=l.Uint8ClampedArray,I=P&&P.prototype,_=k&&y(k),T=E&&y(E),O=Object.prototype,R=l.TypeError,N=A("toStringTag"),z=w("TYPED_ARRAY_TAG"),M="TypedArrayConstructor",L=a&&!!b&&"Opera"!==d(l.opera),F=!1,B={Int8Array:1,Uint8Array:1,Uint8ClampedArray:1,Int16Array:2,Uint16Array:2,Int32Array:4,Uint32Array:4,Float32Array:4,Float64Array:8},D={BigInt64Array:8,BigUint64Array:8},j=function(e){var t=y(e);if(s(t)){var n=S(t);return n&&f(n,M)?n[M]:j(t)}},U=function(e){if(!s(e))return!1;var t=d(e);return f(B,t)||f(D,t)};for(r in B)(i=(o=l[r])&&o.prototype)?x(i)[M]=o:L=!1;for(r in D)(i=(o=l[r])&&o.prototype)&&(x(i)[M]=o);if((!L||!c(_)||_===Function.prototype)&&(_=function(){throw R("Incorrect invocation")},L))for(r in B)l[r]&&b(l[r],_);if((!L||!T||T===O)&&(T=_.prototype,L))for(r in B)l[r]&&b(l[r].prototype,T);if(L&&y(I)!==T&&b(I,T),u&&!f(T,N))for(r in F=!0,g(T,N,{get:function(){return s(this)?this[z]:void 0}}),B)l[r]&&h(l[r],z,r);e.exports={NATIVE_ARRAY_BUFFER_VIEWS:L,TYPED_ARRAY_TAG:F&&z,aTypedArray:function(e){if(U(e))return e;throw R("Target is not a typed array")},aTypedArrayConstructor:function(e){if(c(e)&&(!b||m(_,e)))return e;throw R(p(e)+" is not a typed array constructor")},exportTypedArrayMethod:function(e,t,n,r){if(u){if(n)for(var o in B){var i=l[o];if(i&&f(i.prototype,e))try{delete i.prototype[e]}catch(n){try{i.prototype[e]=t}catch(e){}}}T[e]&&!n||v(T,e,n?t:L&&E[e]||t,r)}},exportTypedArrayStaticMethod:function(e,t,n){var r,o;if(u){if(b){if(n)for(r in B)if((o=l[r])&&f(o,e))try{delete o[e]}catch(e){}if(_[e]&&!n)return;try{return v(_,e,n?t:L&&_[e]||t)}catch(e){}}for(r in B)!(o=l[r])||o[e]&&!n||v(o,e,t)}},getTypedArrayConstructor:j,isView:function(e){if(!s(e))return!1;var t=d(e);return"DataView"===t||f(B,t)||f(D,t)},isTypedArray:U,TypedArray:_,TypedArrayPrototype:T}},3331:function(e,t,n){"use strict";var r=n(7854),o=n(1702),i=n(9781),a=n(3013),u=n(6530),l=n(8880),c=n(9190),s=n(7293),f=n(5787),d=n(9303),p=n(7466),h=n(7067),v=n(1179),g=n(9518),m=n(7674),y=n(8006).f,b=n(3070).f,A=n(1285),w=n(1589),C=n(8003),x=n(9909),S=u.PROPER,k=u.CONFIGURABLE,E=x.get,P=x.set,I="ArrayBuffer",_="DataView",T="prototype",O="Wrong index",R=r[I],N=R,z=N&&N[T],M=r[_],L=M&&M[T],F=Object.prototype,B=r.Array,D=r.RangeError,j=o(A),U=o([].reverse),G=v.pack,Q=v.unpack,H=function(e){return[255&e]},V=function(e){return[255&e,e>>8&255]},W=function(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]},Y=function(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]},J=function(e){return G(e,23,4)},$=function(e){return G(e,52,8)},q=function(e,t){b(e[T],t,{get:function(){return E(this)[t]}})},K=function(e,t,n,r){var o=h(n),i=E(e);if(o+t>i.byteLength)throw D(O);var a=E(i.buffer).bytes,u=o+i.byteOffset,l=w(a,u,u+t);return r?l:U(l)},X=function(e,t,n,r,o,i){var a=h(n),u=E(e);if(a+t>u.byteLength)throw D(O);for(var l=E(u.buffer).bytes,c=a+u.byteOffset,s=r(+o),f=0;f<t;f++)l[c+f]=s[i?f:t-f-1]};if(a){var Z=S&&R.name!==I;if(s((function(){R(1)}))&&s((function(){new R(-1)}))&&!s((function(){return new R,new R(1.5),new R(NaN),1!=R.length||Z&&!k})))Z&&k&&l(R,"name",I);else{(N=function(e){return f(this,z),new R(h(e))})[T]=z;for(var ee,te=y(R),ne=0;te.length>ne;)(ee=te[ne++])in N||l(N,ee,R[ee]);z.constructor=N}m&&g(L)!==F&&m(L,F);var re=new M(new N(2)),oe=o(L.setInt8);re.setInt8(0,2147483648),re.setInt8(1,2147483649),!re.getInt8(0)&&re.getInt8(1)||c(L,{setInt8:function(e,t){oe(this,e,t<<24>>24)},setUint8:function(e,t){oe(this,e,t<<24>>24)}},{unsafe:!0})}else z=(N=function(e){f(this,z);var t=h(e);P(this,{bytes:j(B(t),0),byteLength:t}),i||(this.byteLength=t)})[T],L=(M=function(e,t,n){f(this,L),f(e,z);var r=E(e).byteLength,o=d(t);if(o<0||o>r)throw D("Wrong offset");if(o+(n=void 0===n?r-o:p(n))>r)throw D("Wrong length");P(this,{buffer:e,byteLength:n,byteOffset:o}),i||(this.buffer=e,this.byteLength=n,this.byteOffset=o)})[T],i&&(q(N,"byteLength"),q(M,"buffer"),q(M,"byteLength"),q(M,"byteOffset")),c(L,{getInt8:function(e){return K(this,1,e)[0]<<24>>24},getUint8:function(e){return K(this,1,e)[0]},getInt16:function(e){var t=K(this,2,e,arguments.length>1?arguments[1]:void 0);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=K(this,2,e,arguments.length>1?arguments[1]:void 0);return t[1]<<8|t[0]},getInt32:function(e){return Y(K(this,4,e,arguments.length>1?arguments[1]:void 0))},getUint32:function(e){return Y(K(this,4,e,arguments.length>1?arguments[1]:void 0))>>>0},getFloat32:function(e){return Q(K(this,4,e,arguments.length>1?arguments[1]:void 0),23)},getFloat64:function(e){return Q(K(this,8,e,arguments.length>1?arguments[1]:void 0),52)},setInt8:function(e,t){X(this,1,e,H,t)},setUint8:function(e,t){X(this,1,e,H,t)},setInt16:function(e,t){X(this,2,e,V,t,arguments.length>2?arguments[2]:void 0)},setUint16:function(e,t){X(this,2,e,V,t,arguments.length>2?arguments[2]:void 0)},setInt32:function(e,t){X(this,4,e,W,t,arguments.length>2?arguments[2]:void 0)},setUint32:function(e,t){X(this,4,e,W,t,arguments.length>2?arguments[2]:void 0)},setFloat32:function(e,t){X(this,4,e,J,t,arguments.length>2?arguments[2]:void 0)},setFloat64:function(e,t){X(this,8,e,$,t,arguments.length>2?arguments[2]:void 0)}});C(N,I),C(M,_),e.exports={ArrayBuffer:N,DataView:M}},1048:function(e,t,n){"use strict";var r=n(7908),o=n(1400),i=n(6244),a=n(5117),u=Math.min;e.exports=[].copyWithin||function(e,t){var n=r(this),l=i(n),c=o(e,l),s=o(t,l),f=arguments.length>2?arguments[2]:void 0,d=u((void 0===f?l:o(f,l))-s,l-c),p=1;for(s<c&&c<s+d&&(p=-1,s+=d-1,c+=d-1);d-- >0;)s in n?n[c]=n[s]:a(n,c),c+=p,s+=p;return n}},1285:function(e,t,n){"use strict";var r=n(7908),o=n(1400),i=n(6244);e.exports=function(e){for(var t=r(this),n=i(t),a=arguments.length,u=o(a>1?arguments[1]:void 0,n),l=a>2?arguments[2]:void 0,c=void 0===l?n:o(l,n);c>u;)t[u++]=e;return t}},8533:function(e,t,n){"use strict";var r=n(2092).forEach,o=n(2133)("forEach");e.exports=o?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},7745:function(e,t,n){var r=n(6244);e.exports=function(e,t){for(var n=0,o=r(t),i=new e(o);o>n;)i[n]=t[n++];return i}},8457:function(e,t,n){"use strict";var r=n(9974),o=n(6916),i=n(7908),a=n(3411),u=n(7659),l=n(4411),c=n(6244),s=n(6135),f=n(4121),d=n(1246),p=Array;e.exports=function(e){var t=i(e),n=l(this),h=arguments.length,v=h>1?arguments[1]:void 0,g=void 0!==v;g&&(v=r(v,h>2?arguments[2]:void 0));var m,y,b,A,w,C,x=d(t),S=0;if(!x||this===p&&u(x))for(m=c(t),y=n?new this(m):p(m);m>S;S++)C=g?v(t[S],S):t[S],s(y,S,C);else for(w=(A=f(t,x)).next,y=n?new this:[];!(b=o(w,A)).done;S++)C=g?a(A,v,[b.value,S],!0):b.value,s(y,S,C);return y.length=S,y}},1318:function(e,t,n){var r=n(5656),o=n(1400),i=n(6244),a=function(e){return function(t,n,a){var u,l=r(t),c=i(l),s=o(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},2092:function(e,t,n){var r=n(9974),o=n(1702),i=n(8361),a=n(7908),u=n(6244),l=n(5417),c=o([].push),s=function(e){var t=1==e,n=2==e,o=3==e,s=4==e,f=6==e,d=7==e,p=5==e||f;return function(h,v,g,m){for(var y,b,A=a(h),w=i(A),C=r(v,g),x=u(w),S=0,k=m||l,E=t?k(h,x):n||d?k(h,0):void 0;x>S;S++)if((p||S in w)&&(b=C(y=w[S],S,A),e))if(t)E[S]=b;else if(b)switch(e){case 3:return!0;case 5:return y;case 6:return S;case 2:c(E,y)}else switch(e){case 4:return!1;case 7:c(E,y)}return f?-1:o||s?s:E}};e.exports={forEach:s(0),map:s(1),filter:s(2),some:s(3),every:s(4),find:s(5),findIndex:s(6),filterReject:s(7)}},6583:function(e,t,n){"use strict";var r=n(2104),o=n(5656),i=n(9303),a=n(6244),u=n(2133),l=Math.min,c=[].lastIndexOf,s=!!c&&1/[1].lastIndexOf(1,-0)<0,f=u("lastIndexOf"),d=s||!f;e.exports=d?function(e){if(s)return r(c,this,arguments)||0;var t=o(this),n=a(t),u=n-1;for(arguments.length>1&&(u=l(u,i(arguments[1]))),u<0&&(u=n+u);u>=0;u--)if(u in t&&t[u]===e)return u||0;return-1}:c},1194:function(e,t,n){var r=n(7293),o=n(5112),i=n(7392),a=o("species");e.exports=function(e){return i>=51||!r((function(){var t=[];return(t.constructor={})[a]=function(){return{foo:1}},1!==t[e](Boolean).foo}))}},2133:function(e,t,n){"use strict";var r=n(7293);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){return 1},1)}))}},3671:function(e,t,n){var r=n(9662),o=n(7908),i=n(8361),a=n(6244),u=TypeError,l=function(e){return function(t,n,l,c){r(n);var s=o(t),f=i(s),d=a(s),p=e?d-1:0,h=e?-1:1;if(l<2)for(;;){if(p in f){c=f[p],p+=h;break}if(p+=h,e?p<0:d<=p)throw u("Reduce of empty array with no initial value")}for(;e?p>=0:d>p;p+=h)p in f&&(c=n(c,f[p],p,s));return c}};e.exports={left:l(!1),right:l(!0)}},3658:function(e,t,n){"use strict";var r=n(9781),o=n(3157),i=TypeError,a=Object.getOwnPropertyDescriptor,u=r&&!function(){if(void 0!==this)return!0;try{Object.defineProperty([],"length",{writable:!1}).length=1}catch(e){return e instanceof TypeError}}();e.exports=u?function(e,t){if(o(e)&&!a(e,"length").writable)throw i("Cannot set read only .length");return e.length=t}:function(e,t){return e.length=t}},1589:function(e,t,n){var r=n(1400),o=n(6244),i=n(6135),a=Array,u=Math.max;e.exports=function(e,t,n){for(var l=o(e),c=r(t,l),s=r(void 0===n?l:n,l),f=a(u(s-c,0)),d=0;c<s;c++,d++)i(f,d,e[c]);return f.length=d,f}},206:function(e,t,n){var r=n(1702);e.exports=r([].slice)},4362:function(e,t,n){var r=n(1589),o=Math.floor,i=function(e,t){var n=e.length,l=o(n/2);return n<8?a(e,t):u(e,i(r(e,0,l),t),i(r(e,l),t),t)},a=function(e,t){for(var n,r,o=e.length,i=1;i<o;){for(r=i,n=e[i];r&&t(e[r-1],n)>0;)e[r]=e[--r];r!==i++&&(e[r]=n)}return e},u=function(e,t,n,r){for(var o=t.length,i=n.length,a=0,u=0;a<o||u<i;)e[a+u]=a<o&&u<i?r(t[a],n[u])<=0?t[a++]:n[u++]:a<o?t[a++]:n[u++];return e};e.exports=i},7475:function(e,t,n){var r=n(3157),o=n(4411),i=n(111),a=n(5112)("species"),u=Array;e.exports=function(e){var t;return r(e)&&(t=e.constructor,(o(t)&&(t===u||r(t.prototype))||i(t)&&null===(t=t[a]))&&(t=void 0)),void 0===t?u:t}},5417:function(e,t,n){var r=n(7475);e.exports=function(e,t){return new(r(e))(0===t?0:t)}},3411:function(e,t,n){var r=n(9670),o=n(9212);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){o(e,"throw",t)}}},7072:function(e,t,n){var r=n(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var n=!1;try{var i={};i[r]=function(){return{next:function(){return{done:n=!0}}}},e(i)}catch(e){}return n}},4326:function(e,t,n){var r=n(1702),o=r({}.toString),i=r("".slice);e.exports=function(e){return i(o(e),8,-1)}},648:function(e,t,n){var r=n(1694),o=n(614),i=n(4326),a=n(5112)("toStringTag"),u=Object,l="Arguments"==i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=u(e),a))?n:l?i(t):"Object"==(r=i(t))&&o(t.callee)?"Arguments":r}},5631:function(e,t,n){"use strict";var r=n(3070).f,o=n(30),i=n(9190),a=n(9974),u=n(5787),l=n(8554),c=n(408),s=n(1656),f=n(6178),d=n(6340),p=n(9781),h=n(2423).fastKey,v=n(9909),g=v.set,m=v.getterFor;e.exports={getConstructor:function(e,t,n,s){var f=e((function(e,r){u(e,d),g(e,{type:t,index:o(null),first:void 0,last:void 0,size:0}),p||(e.size=0),l(r)||c(r,e[s],{that:e,AS_ENTRIES:n})})),d=f.prototype,v=m(t),y=function(e,t,n){var r,o,i=v(e),a=b(e,t);return a?a.value=n:(i.last=a={index:o=h(t,!0),key:t,value:n,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),p?i.size++:e.size++,"F"!==o&&(i.index[o]=a)),e},b=function(e,t){var n,r=v(e),o=h(t);if("F"!==o)return r.index[o];for(n=r.first;n;n=n.next)if(n.key==t)return n};return i(d,{clear:function(){for(var e=v(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,p?e.size=0:this.size=0},delete:function(e){var t=this,n=v(t),r=b(t,e);if(r){var o=r.next,i=r.previous;delete n.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),n.first==r&&(n.first=o),n.last==r&&(n.last=i),p?n.size--:t.size--}return!!r},forEach:function(e){for(var t,n=v(this),r=a(e,arguments.length>1?arguments[1]:void 0);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!b(this,e)}}),i(d,n?{get:function(e){var t=b(this,e);return t&&t.value},set:function(e,t){return y(this,0===e?0:e,t)}}:{add:function(e){return y(this,e=0===e?0:e,e)}}),p&&r(d,"size",{get:function(){return v(this).size}}),f},setStrong:function(e,t,n){var r=t+" Iterator",o=m(t),i=m(r);s(e,t,(function(e,t){g(this,{type:r,target:e,state:o(e),kind:t,last:void 0})}),(function(){for(var e=i(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?f("keys"==t?n.key:"values"==t?n.value:[n.key,n.value],!1):(e.target=void 0,f(void 0,!0))}),n?"entries":"values",!n,!0),d(t)}}},9320:function(e,t,n){"use strict";var r=n(1702),o=n(9190),i=n(2423).getWeakData,a=n(5787),u=n(9670),l=n(8554),c=n(111),s=n(408),f=n(2092),d=n(2597),p=n(9909),h=p.set,v=p.getterFor,g=f.find,m=f.findIndex,y=r([].splice),b=0,A=function(e){return e.frozen||(e.frozen=new w)},w=function(){this.entries=[]},C=function(e,t){return g(e.entries,(function(e){return e[0]===t}))};w.prototype={get:function(e){var t=C(this,e);if(t)return t[1]},has:function(e){return!!C(this,e)},set:function(e,t){var n=C(this,e);n?n[1]=t:this.entries.push([e,t])},delete:function(e){var t=m(this.entries,(function(t){return t[0]===e}));return~t&&y(this.entries,t,1),!!~t}},e.exports={getConstructor:function(e,t,n,r){var f=e((function(e,o){a(e,p),h(e,{type:t,id:b++,frozen:void 0}),l(o)||s(o,e[r],{that:e,AS_ENTRIES:n})})),p=f.prototype,g=v(t),m=function(e,t,n){var r=g(e),o=i(u(t),!0);return!0===o?A(r).set(t,n):o[r.id]=n,e};return o(p,{delete:function(e){var t=g(this);if(!c(e))return!1;var n=i(e);return!0===n?A(t).delete(e):n&&d(n,t.id)&&delete n[t.id]},has:function(e){var t=g(this);if(!c(e))return!1;var n=i(e);return!0===n?A(t).has(e):n&&d(n,t.id)}}),o(p,n?{get:function(e){var t=g(this);if(c(e)){var n=i(e);return!0===n?A(t).get(e):n?n[t.id]:void 0}},set:function(e,t){return m(this,e,t)}}:{add:function(e){return m(this,e,!0)}}),f}}},7710:function(e,t,n){"use strict";var r=n(2109),o=n(7854),i=n(1702),a=n(4705),u=n(8052),l=n(2423),c=n(408),s=n(5787),f=n(614),d=n(8554),p=n(111),h=n(7293),v=n(7072),g=n(8003),m=n(9587);e.exports=function(e,t,n){var y=-1!==e.indexOf("Map"),b=-1!==e.indexOf("Weak"),A=y?"set":"add",w=o[e],C=w&&w.prototype,x=w,S={},k=function(e){var t=i(C[e]);u(C,e,"add"==e?function(e){return t(this,0===e?0:e),this}:"delete"==e?function(e){return!(b&&!p(e))&&t(this,0===e?0:e)}:"get"==e?function(e){return b&&!p(e)?void 0:t(this,0===e?0:e)}:"has"==e?function(e){return!(b&&!p(e))&&t(this,0===e?0:e)}:function(e,n){return t(this,0===e?0:e,n),this})};if(a(e,!f(w)||!(b||C.forEach&&!h((function(){(new w).entries().next()})))))x=n.getConstructor(t,e,y,A),l.enable();else if(a(e,!0)){var E=new x,P=E[A](b?{}:-0,1)!=E,I=h((function(){E.has(1)})),_=v((function(e){new w(e)})),T=!b&&h((function(){for(var e=new w,t=5;t--;)e[A](t,t);return!e.has(-0)}));_||((x=t((function(e,t){s(e,C);var n=m(new w,e,x);return d(t)||c(t,n[A],{that:n,AS_ENTRIES:y}),n}))).prototype=C,C.constructor=x),(I||T)&&(k("delete"),k("has"),y&&k("get")),(T||P)&&k(A),b&&C.clear&&delete C.clear}return S[e]=x,r({global:!0,constructor:!0,forced:x!=w},S),g(x,e),b||n.setStrong(x,e,y),x}},9920:function(e,t,n){var r=n(2597),o=n(3887),i=n(1236),a=n(3070);e.exports=function(e,t,n){for(var u=o(t),l=a.f,c=i.f,s=0;s<u.length;s++){var f=u[s];r(e,f)||n&&r(n,f)||l(e,f,c(t,f))}}},4964:function(e,t,n){var r=n(5112)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,"/./"[e](t)}catch(e){}}return!1}},8544:function(e,t,n){var r=n(7293);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4230:function(e,t,n){var r=n(1702),o=n(4488),i=n(1340),a=/"/g,u=r("".replace);e.exports=function(e,t,n,r){var l=i(o(e)),c="<"+t;return""!==n&&(c+=" "+n+'="'+u(i(r),a,"&quot;")+'"'),c+">"+l+"</"+t+">"}},6178:function(e){e.exports=function(e,t){return{value:e,done:t}}},8880:function(e,t,n){var r=n(9781),o=n(3070),i=n(9114);e.exports=r?function(e,t,n){return o.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},9114:function(e){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:function(e,t,n){"use strict";var r=n(4948),o=n(3070),i=n(9114);e.exports=function(e,t,n){var a=r(t);a in e?o.f(e,a,i(0,n)):e[a]=n}},8709:function(e,t,n){"use strict";var r=n(9670),o=n(2140),i=TypeError;e.exports=function(e){if(r(this),"string"===e||"default"===e)e="string";else if("number"!==e)throw i("Incorrect hint");return o(this,e)}},7045:function(e,t,n){var r=n(6339),o=n(3070);e.exports=function(e,t,n){return n.get&&r(n.get,t,{getter:!0}),n.set&&r(n.set,t,{setter:!0}),o.f(e,t,n)}},8052:function(e,t,n){var r=n(614),o=n(3070),i=n(6339),a=n(3072);e.exports=function(e,t,n,u){u||(u={});var l=u.enumerable,c=void 0!==u.name?u.name:t;if(r(n)&&i(n,c,u),u.global)l?e[t]=n:a(t,n);else{try{u.unsafe?e[t]&&(l=!0):delete e[t]}catch(e){}l?e[t]=n:o.f(e,t,{value:n,enumerable:!1,configurable:!u.nonConfigurable,writable:!u.nonWritable})}return e}},9190:function(e,t,n){var r=n(8052);e.exports=function(e,t,n){for(var o in t)r(e,o,t[o],n);return e}},3072:function(e,t,n){var r=n(7854),o=Object.defineProperty;e.exports=function(e,t){try{o(r,e,{value:t,configurable:!0,writable:!0})}catch(n){r[e]=t}return t}},5117:function(e,t,n){"use strict";var r=n(6330),o=TypeError;e.exports=function(e,t){if(!delete e[t])throw o("Cannot delete property "+r(t)+" of "+r(e))}},9781:function(e,t,n){var r=n(7293);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},4154:function(e){var t="object"==typeof document&&document.all,n=void 0===t&&void 0!==t;e.exports={all:t,IS_HTMLDDA:n}},317:function(e,t,n){var r=n(7854),o=n(111),i=r.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},7207:function(e){var t=TypeError;e.exports=function(e){if(e>9007199254740991)throw t("Maximum allowed index exceeded");return e}},8324:function(e){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:function(e,t,n){var r=n(317)("span").classList,o=r&&r.constructor&&r.constructor.prototype;e.exports=o===Object.prototype?void 0:o},8886:function(e,t,n){var r=n(8113).match(/firefox\/(\d+)/i);e.exports=!!r&&+r[1]},7871:function(e,t,n){var r=n(3823),o=n(5268);e.exports=!r&&!o&&"object"==typeof window&&"object"==typeof document},9363:function(e){e.exports="function"==typeof Bun&&Bun&&"string"==typeof Bun.version},3823:function(e){e.exports="object"==typeof Deno&&Deno&&"object"==typeof Deno.version},256:function(e,t,n){var r=n(8113);e.exports=/MSIE|Trident/.test(r)},1528:function(e,t,n){var r=n(8113);e.exports=/ipad|iphone|ipod/i.test(r)&&"undefined"!=typeof Pebble},8334:function(e,t,n){var r=n(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},5268:function(e,t,n){var r=n(4326);e.exports="undefined"!=typeof process&&"process"==r(process)},1036:function(e,t,n){var r=n(8113);e.exports=/web0s(?!.*chrome)/i.test(r)},8113:function(e){e.exports="undefined"!=typeof navigator&&String(navigator.userAgent)||""},7392:function(e,t,n){var r,o,i=n(7854),a=n(8113),u=i.process,l=i.Deno,c=u&&u.versions||l&&l.version,s=c&&c.v8;s&&(o=(r=s.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!o&&a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=+r[1]),e.exports=o},8008:function(e,t,n){var r=n(8113).match(/AppleWebKit\/(\d+)\./);e.exports=!!r&&+r[1]},748:function(e){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:function(e,t,n){var r=n(7854),o=n(1236).f,i=n(8880),a=n(8052),u=n(3072),l=n(9920),c=n(4705);e.exports=function(e,t){var n,s,f,d,p,h=e.target,v=e.global,g=e.stat;if(n=v?r:g?r[h]||u(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.dontCallGetSet?(p=o(n,s))&&p.value:n[s],!c(v?s:h+(g?".":"#")+s,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(n,s,d,e)}}},7293:function(e){e.exports=function(e){try{return!!e()}catch(e){return!0}}},7007:function(e,t,n){"use strict";n(4916);var r=n(1470),o=n(8052),i=n(2261),a=n(7293),u=n(5112),l=n(8880),c=u("species"),s=RegExp.prototype;e.exports=function(e,t,n,f){var d=u(e),p=!a((function(){var t={};return t[d]=function(){return 7},7!=""[e](t)})),h=p&&!a((function(){var t=!1,n=/a/;return"split"===e&&((n={}).constructor={},n.constructor[c]=function(){return n},n.flags="",n[d]=/./[d]),n.exec=function(){return t=!0,null},n[d](""),!t}));if(!p||!h||n){var v=r(/./[d]),g=t(d,""[e],(function(e,t,n,o,a){var u=r(e),l=t.exec;return l===i||l===s.exec?p&&!a?{done:!0,value:v(t,n,o)}:{done:!0,value:u(n,t,o)}:{done:!1}}));o(String.prototype,e,g[0]),o(s,d,g[1])}f&&l(s[d],"sham",!0)}},6790:function(e,t,n){"use strict";var r=n(3157),o=n(6244),i=n(7207),a=n(9974),u=function(e,t,n,l,c,s,f,d){for(var p,h,v=c,g=0,m=!!f&&a(f,d);g<l;)g in n&&(p=m?m(n[g],g,t):n[g],s>0&&r(p)?(h=o(p),v=u(e,t,p,h,v,s-1)-1):(i(v+1),e[v]=p),v++),g++;return v};e.exports=u},6677:function(e,t,n){var r=n(7293);e.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},2104:function(e,t,n){var r=n(4374),o=Function.prototype,i=o.apply,a=o.call;e.exports="object"==typeof Reflect&&Reflect.apply||(r?a.bind(i):function(){return a.apply(i,arguments)})},9974:function(e,t,n){var r=n(1470),o=n(9662),i=n(4374),a=r(r.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?a(e,t):function(){return e.apply(t,arguments)}}},4374:function(e,t,n){var r=n(7293);e.exports=!r((function(){var e=function(){}.bind();return"function"!=typeof e||e.hasOwnProperty("prototype")}))},7065:function(e,t,n){"use strict";var r=n(1702),o=n(9662),i=n(111),a=n(2597),u=n(206),l=n(4374),c=Function,s=r([].concat),f=r([].join),d={},p=function(e,t,n){if(!a(d,t)){for(var r=[],o=0;o<t;o++)r[o]="a["+o+"]";d[t]=c("C,a","return new C("+f(r,",")+")")}return d[t](e,n)};e.exports=l?c.bind:function(e){var t=o(this),n=t.prototype,r=u(arguments,1),a=function(){var n=s(r,u(arguments));return this instanceof a?p(t,n.length,n):t.apply(e,n)};return i(n)&&(a.prototype=n),a}},6916:function(e,t,n){var r=n(4374),o=Function.prototype.call;e.exports=r?o.bind(o):function(){return o.apply(o,arguments)}},6530:function(e,t,n){var r=n(9781),o=n(2597),i=Function.prototype,a=r&&Object.getOwnPropertyDescriptor,u=o(i,"name"),l=u&&"something"===function(){}.name,c=u&&(!r||r&&a(i,"name").configurable);e.exports={EXISTS:u,PROPER:l,CONFIGURABLE:c}},1470:function(e,t,n){var r=n(4326),o=n(1702);e.exports=function(e){if("Function"===r(e))return o(e)}},1702:function(e,t,n){var r=n(4374),o=Function.prototype,i=o.call,a=r&&o.bind.bind(i,i);e.exports=r?a:function(e){return function(){return i.apply(e,arguments)}}},5005:function(e,t,n){var r=n(7854),o=n(614),i=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?i(r[e]):r[e]&&r[e][t]}},1246:function(e,t,n){var r=n(648),o=n(8173),i=n(8554),a=n(7497),u=n(5112)("iterator");e.exports=function(e){if(!i(e))return o(e,u)||o(e,"@@iterator")||a[r(e)]}},4121:function(e,t,n){var r=n(6916),o=n(9662),i=n(9670),a=n(6330),u=n(1246),l=TypeError;e.exports=function(e,t){var n=arguments.length<2?u(e):t;if(o(n))return i(r(n,e));throw l(a(e)+" is not iterable")}},8173:function(e,t,n){var r=n(9662),o=n(8554);e.exports=function(e,t){var n=e[t];return o(n)?void 0:r(n)}},647:function(e,t,n){var r=n(1702),o=n(7908),i=Math.floor,a=r("".charAt),u=r("".replace),l=r("".slice),c=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,s=/\$([$&'`]|\d{1,2})/g;e.exports=function(e,t,n,r,f,d){var p=n+e.length,h=r.length,v=s;return void 0!==f&&(f=o(f),v=c),u(d,v,(function(o,u){var c;switch(a(u,0)){case"$":return"$";case"&":return e;case"`":return l(t,0,n);case"'":return l(t,p);case"<":c=f[l(u,1,-1)];break;default:var s=+u;if(0===s)return o;if(s>h){var d=i(s/10);return 0===d?o:d<=h?void 0===r[d-1]?a(u,1):r[d-1]+a(u,1):o}c=r[s-1]}return void 0===c?"":c}))}},7854:function(e,t,n){var r=function(e){return e&&e.Math==Math&&e};e.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof n.g&&n.g)||function(){return this}()||Function("return this")()},2597:function(e,t,n){var r=n(1702),o=n(7908),i=r({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},3501:function(e){e.exports={}},842:function(e){e.exports=function(e,t){try{1==arguments.length?console.error(e):console.error(e,t)}catch(e){}}},490:function(e,t,n){var r=n(5005);e.exports=r("document","documentElement")},4664:function(e,t,n){var r=n(9781),o=n(7293),i=n(317);e.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},1179:function(e){var t=Array,n=Math.abs,r=Math.pow,o=Math.floor,i=Math.log,a=Math.LN2;e.exports={pack:function(e,u,l){var c,s,f,d=t(l),p=8*l-u-1,h=(1<<p)-1,v=h>>1,g=23===u?r(2,-24)-r(2,-77):0,m=e<0||0===e&&1/e<0?1:0,y=0;for((e=n(e))!=e||e===1/0?(s=e!=e?1:0,c=h):(c=o(i(e)/a),e*(f=r(2,-c))<1&&(c--,f*=2),(e+=c+v>=1?g/f:g*r(2,1-v))*f>=2&&(c++,f/=2),c+v>=h?(s=0,c=h):c+v>=1?(s=(e*f-1)*r(2,u),c+=v):(s=e*r(2,v-1)*r(2,u),c=0));u>=8;)d[y++]=255&s,s/=256,u-=8;for(c=c<<u|s,p+=u;p>0;)d[y++]=255&c,c/=256,p-=8;return d[--y]|=128*m,d},unpack:function(e,t){var n,o=e.length,i=8*o-t-1,a=(1<<i)-1,u=a>>1,l=i-7,c=o-1,s=e[c--],f=127&s;for(s>>=7;l>0;)f=256*f+e[c--],l-=8;for(n=f&(1<<-l)-1,f>>=-l,l+=t;l>0;)n=256*n+e[c--],l-=8;if(0===f)f=1-u;else{if(f===a)return n?NaN:s?-1/0:1/0;n+=r(2,t),f-=u}return(s?-1:1)*n*r(2,f-t)}}},8361:function(e,t,n){var r=n(1702),o=n(7293),i=n(4326),a=Object,u=r("".split);e.exports=o((function(){return!a("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?u(e,""):a(e)}:a},9587:function(e,t,n){var r=n(614),o=n(111),i=n(7674);e.exports=function(e,t,n){var a,u;return i&&r(a=t.constructor)&&a!==n&&o(u=a.prototype)&&u!==n.prototype&&i(e,u),e}},2788:function(e,t,n){var r=n(1702),o=n(614),i=n(5465),a=r(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},2423:function(e,t,n){var r=n(2109),o=n(1702),i=n(3501),a=n(111),u=n(2597),l=n(3070).f,c=n(8006),s=n(1156),f=n(2050),d=n(9711),p=n(6677),h=!1,v=d("meta"),g=0,m=function(e){l(e,v,{value:{objectID:"O"+g++,weakData:{}}})},y=e.exports={enable:function(){y.enable=function(){},h=!0;var e=c.f,t=o([].splice),n={};n[v]=1,e(n).length&&(c.f=function(n){for(var r=e(n),o=0,i=r.length;o<i;o++)if(r[o]===v){t(r,o,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:s.f}))},fastKey:function(e,t){if(!a(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!u(e,v)){if(!f(e))return"F";if(!t)return"E";m(e)}return e[v].objectID},getWeakData:function(e,t){if(!u(e,v)){if(!f(e))return!0;if(!t)return!1;m(e)}return e[v].weakData},onFreeze:function(e){return p&&h&&f(e)&&!u(e,v)&&m(e),e}};i[v]=!0},9909:function(e,t,n){var r,o,i,a=n(4811),u=n(7854),l=n(111),c=n(8880),s=n(2597),f=n(5465),d=n(6200),p=n(3501),h="Object already initialized",v=u.TypeError,g=u.WeakMap;if(a||f.state){var m=f.state||(f.state=new g);m.get=m.get,m.has=m.has,m.set=m.set,r=function(e,t){if(m.has(e))throw v(h);return t.facade=e,m.set(e,t),t},o=function(e){return m.get(e)||{}},i=function(e){return m.has(e)}}else{var y=d("state");p[y]=!0,r=function(e,t){if(s(e,y))throw v(h);return t.facade=e,c(e,y,t),t},o=function(e){return s(e,y)?e[y]:{}},i=function(e){return s(e,y)}}e.exports={set:r,get:o,has:i,enforce:function(e){return i(e)?o(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=o(t)).type!==e)throw v("Incompatible receiver, "+e+" required");return n}}}},7659:function(e,t,n){var r=n(5112),o=n(7497),i=r("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},3157:function(e,t,n){var r=n(4326);e.exports=Array.isArray||function(e){return"Array"==r(e)}},4067:function(e,t,n){var r=n(648);e.exports=function(e){var t=r(e);return"BigInt64Array"==t||"BigUint64Array"==t}},614:function(e,t,n){var r=n(4154),o=r.all;e.exports=r.IS_HTMLDDA?function(e){return"function"==typeof e||e===o}:function(e){return"function"==typeof e}},4411:function(e,t,n){var r=n(1702),o=n(7293),i=n(614),a=n(648),u=n(5005),l=n(2788),c=function(){},s=[],f=u("Reflect","construct"),d=/^\s*(?:class|function)\b/,p=r(d.exec),h=!d.exec(c),v=function(e){if(!i(e))return!1;try{return f(c,s,e),!0}catch(e){return!1}},g=function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return h||!!p(d,l(e))}catch(e){return!0}};g.sham=!0,e.exports=!f||o((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?g:v},5032:function(e,t,n){var r=n(2597);e.exports=function(e){return void 0!==e&&(r(e,"value")||r(e,"writable"))}},4705:function(e,t,n){var r=n(7293),o=n(614),i=/#|\.prototype\./,a=function(e,t){var n=l[u(e)];return n==s||n!=c&&(o(t)?r(t):!!t)},u=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},l=a.data={},c=a.NATIVE="N",s=a.POLYFILL="P";e.exports=a},5988:function(e,t,n){var r=n(111),o=Math.floor;e.exports=Number.isInteger||function(e){return!r(e)&&isFinite(e)&&o(e)===e}},8554:function(e){e.exports=function(e){return null==e}},111:function(e,t,n){var r=n(614),o=n(4154),i=o.all;e.exports=o.IS_HTMLDDA?function(e){return"object"==typeof e?null!==e:r(e)||e===i}:function(e){return"object"==typeof e?null!==e:r(e)}},1913:function(e){e.exports=!1},7850:function(e,t,n){var r=n(111),o=n(4326),i=n(5112)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[i])?!!t:"RegExp"==o(e))}},2190:function(e,t,n){var r=n(5005),o=n(614),i=n(7976),a=n(3307),u=Object;e.exports=a?function(e){return"symbol"==typeof e}:function(e){var t=r("Symbol");return o(t)&&i(t.prototype,u(e))}},408:function(e,t,n){var r=n(9974),o=n(6916),i=n(9670),a=n(6330),u=n(7659),l=n(6244),c=n(7976),s=n(4121),f=n(1246),d=n(9212),p=TypeError,h=function(e,t){this.stopped=e,this.result=t},v=h.prototype;e.exports=function(e,t,n){var g,m,y,b,A,w,C,x=n&&n.that,S=!(!n||!n.AS_ENTRIES),k=!(!n||!n.IS_RECORD),E=!(!n||!n.IS_ITERATOR),P=!(!n||!n.INTERRUPTED),I=r(t,x),_=function(e){return g&&d(g,"normal",e),new h(!0,e)},T=function(e){return S?(i(e),P?I(e[0],e[1],_):I(e[0],e[1])):P?I(e,_):I(e)};if(k)g=e.iterator;else if(E)g=e;else{if(!(m=f(e)))throw p(a(e)+" is not iterable");if(u(m)){for(y=0,b=l(e);b>y;y++)if((A=T(e[y]))&&c(v,A))return A;return new h(!1)}g=s(e,m)}for(w=k?e.next:g.next;!(C=o(w,g)).done;){try{A=T(C.value)}catch(e){d(g,"throw",e)}if("object"==typeof A&&A&&c(v,A))return A}return new h(!1)}},9212:function(e,t,n){var r=n(6916),o=n(9670),i=n(8173);e.exports=function(e,t,n){var a,u;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw n;return n}a=r(a,e)}catch(e){u=!0,a=e}if("throw"===t)throw n;if(u)throw a;return o(a),n}},3061:function(e,t,n){"use strict";var r=n(3383).IteratorPrototype,o=n(30),i=n(9114),a=n(8003),u=n(7497),l=function(){return this};e.exports=function(e,t,n,c){var s=t+" Iterator";return e.prototype=o(r,{next:i(+!c,n)}),a(e,s,!1,!0),u[s]=l,e}},1656:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(1913),a=n(6530),u=n(614),l=n(3061),c=n(9518),s=n(7674),f=n(8003),d=n(8880),p=n(8052),h=n(5112),v=n(7497),g=n(3383),m=a.PROPER,y=a.CONFIGURABLE,b=g.IteratorPrototype,A=g.BUGGY_SAFARI_ITERATORS,w=h("iterator"),C="keys",x="values",S="entries",k=function(){return this};e.exports=function(e,t,n,a,h,g,E){l(n,t,a);var P,I,_,T=function(e){if(e===h&&M)return M;if(!A&&e in N)return N[e];switch(e){case C:case x:case S:return function(){return new n(this,e)}}return function(){return new n(this)}},O=t+" Iterator",R=!1,N=e.prototype,z=N[w]||N["@@iterator"]||h&&N[h],M=!A&&z||T(h),L="Array"==t&&N.entries||z;if(L&&(P=c(L.call(new e)))!==Object.prototype&&P.next&&(i||c(P)===b||(s?s(P,b):u(P[w])||p(P,w,k)),f(P,O,!0,!0),i&&(v[O]=k)),m&&h==x&&z&&z.name!==x&&(!i&&y?d(N,"name",x):(R=!0,M=function(){return o(z,this)})),h)if(I={values:T(x),keys:g?M:T(C),entries:T(S)},E)for(_ in I)(A||R||!(_ in N))&&p(N,_,I[_]);else r({target:t,proto:!0,forced:A||R},I);return i&&!E||N[w]===M||p(N,w,M,{name:h}),v[t]=M,I}},3383:function(e,t,n){"use strict";var r,o,i,a=n(7293),u=n(614),l=n(111),c=n(30),s=n(9518),f=n(8052),d=n(5112),p=n(1913),h=d("iterator"),v=!1;[].keys&&("next"in(i=[].keys())?(o=s(s(i)))!==Object.prototype&&(r=o):v=!0),!l(r)||a((function(){var e={};return r[h].call(e)!==e}))?r={}:p&&(r=c(r)),u(r[h])||f(r,h,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:v}},7497:function(e){e.exports={}},6244:function(e,t,n){var r=n(7466);e.exports=function(e){return r(e.length)}},6339:function(e,t,n){var r=n(1702),o=n(7293),i=n(614),a=n(2597),u=n(9781),l=n(6530).CONFIGURABLE,c=n(2788),s=n(9909),f=s.enforce,d=s.get,p=String,h=Object.defineProperty,v=r("".slice),g=r("".replace),m=r([].join),y=u&&!o((function(){return 8!==h((function(){}),"length",{value:8}).length})),b=String(String).split("String"),A=e.exports=function(e,t,n){"Symbol("===v(p(t),0,7)&&(t="["+g(p(t),/^Symbol\(([^)]*)\)/,"$1")+"]"),n&&n.getter&&(t="get "+t),n&&n.setter&&(t="set "+t),(!a(e,"name")||l&&e.name!==t)&&(u?h(e,"name",{value:t,configurable:!0}):e.name=t),y&&n&&a(n,"arity")&&e.length!==n.arity&&h(e,"length",{value:n.arity});try{n&&a(n,"constructor")&&n.constructor?u&&h(e,"prototype",{writable:!1}):e.prototype&&(e.prototype=void 0)}catch(e){}var r=f(e);return a(r,"source")||(r.source=m(b,"string"==typeof t?t:"")),e};Function.prototype.toString=A((function(){return i(this)&&d(this).source||c(this)}),"toString")},6736:function(e){var t=Math.expm1,n=Math.exp;e.exports=!t||t(10)>22025.465794806718||t(10)<22025.465794806718||-2e-17!=t(-2e-17)?function(e){var t=+e;return 0==t?t:t>-1e-6&&t<1e-6?t+t*t/2:n(t)-1}:t},6130:function(e,t,n){var r=n(4310),o=Math.abs,i=Math.pow,a=i(2,-52),u=i(2,-23),l=i(2,127)*(2-u),c=i(2,-126);e.exports=Math.fround||function(e){var t,n,i=+e,s=o(i),f=r(i);return s<c?f*function(e){return e+1/a-1/a}(s/c/u)*c*u:(n=(t=(1+u/a)*s)-(t-s))>l||n!=n?f*(1/0):f*n}},202:function(e){var t=Math.log,n=Math.LOG10E;e.exports=Math.log10||function(e){return t(e)*n}},6513:function(e){var t=Math.log;e.exports=Math.log1p||function(e){var n=+e;return n>-1e-8&&n<1e-8?n-n*n/2:t(1+n)}},4310:function(e){e.exports=Math.sign||function(e){var t=+e;return 0==t||t!=t?t:t<0?-1:1}},4758:function(e){var t=Math.ceil,n=Math.floor;e.exports=Math.trunc||function(e){var r=+e;return(r>0?n:t)(r)}},5948:function(e,t,n){var r,o,i,a,u,l=n(7854),c=n(9974),s=n(1236).f,f=n(261).set,d=n(8572),p=n(8334),h=n(1528),v=n(1036),g=n(5268),m=l.MutationObserver||l.WebKitMutationObserver,y=l.document,b=l.process,A=l.Promise,w=s(l,"queueMicrotask"),C=w&&w.value;if(!C){var x=new d,S=function(){var e,t;for(g&&(e=b.domain)&&e.exit();t=x.get();)try{t()}catch(e){throw x.head&&r(),e}e&&e.enter()};p||g||v||!m||!y?!h&&A&&A.resolve?((a=A.resolve(void 0)).constructor=A,u=c(a.then,a),r=function(){u(S)}):g?r=function(){b.nextTick(S)}:(f=c(f,l),r=function(){f(S)}):(o=!0,i=y.createTextNode(""),new m(S).observe(i,{characterData:!0}),r=function(){i.data=o=!o}),C=function(e){x.head||r(),x.add(e)}}e.exports=C},8523:function(e,t,n){"use strict";var r=n(9662),o=TypeError,i=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw o("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new i(e)}},3929:function(e,t,n){var r=n(7850),o=TypeError;e.exports=function(e){if(r(e))throw o("The method doesn't accept regular expressions");return e}},7023:function(e,t,n){var r=n(7854).isFinite;e.exports=Number.isFinite||function(e){return"number"==typeof e&&r(e)}},2814:function(e,t,n){var r=n(7854),o=n(7293),i=n(1702),a=n(1340),u=n(3111).trim,l=n(1361),c=i("".charAt),s=r.parseFloat,f=r.Symbol,d=f&&f.iterator,p=1/s(l+"-0")!=-1/0||d&&!o((function(){s(Object(d))}));e.exports=p?function(e){var t=u(a(e)),n=s(t);return 0===n&&"-"==c(t,0)?-0:n}:s},3009:function(e,t,n){var r=n(7854),o=n(7293),i=n(1702),a=n(1340),u=n(3111).trim,l=n(1361),c=r.parseInt,s=r.Symbol,f=s&&s.iterator,d=/^[+-]?0x/i,p=i(d.exec),h=8!==c(l+"08")||22!==c(l+"0x16")||f&&!o((function(){c(Object(f))}));e.exports=h?function(e,t){var n=u(a(e));return c(n,t>>>0||(p(d,n)?16:10))}:c},1574:function(e,t,n){"use strict";var r=n(9781),o=n(1702),i=n(6916),a=n(7293),u=n(1956),l=n(5181),c=n(5296),s=n(7908),f=n(8361),d=Object.assign,p=Object.defineProperty,h=o([].concat);e.exports=!d||a((function(){if(r&&1!==d({b:1},d(p({},"a",{enumerable:!0,get:function(){p(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},n=Symbol(),o="abcdefghijklmnopqrst";return e[n]=7,o.split("").forEach((function(e){t[e]=e})),7!=d({},e)[n]||u(d({},t)).join("")!=o}))?function(e,t){for(var n=s(e),o=arguments.length,a=1,d=l.f,p=c.f;o>a;)for(var v,g=f(arguments[a++]),m=d?h(u(g),d(g)):u(g),y=m.length,b=0;y>b;)v=m[b++],r&&!i(p,g,v)||(n[v]=g[v]);return n}:d},30:function(e,t,n){var r,o=n(9670),i=n(6048),a=n(748),u=n(3501),l=n(490),c=n(317),s=n(6200),f="prototype",d="script",p=s("IE_PROTO"),h=function(){},v=function(e){return"<"+d+">"+e+"</"+d+">"},g=function(e){e.write(v("")),e.close();var t=e.parentWindow.Object;return e=null,t},m=function(){try{r=new ActiveXObject("htmlfile")}catch(e){}var e,t,n;m="undefined"!=typeof document?document.domain&&r?g(r):(t=c("iframe"),n="java"+d+":",t.style.display="none",l.appendChild(t),t.src=String(n),(e=t.contentWindow.document).open(),e.write(v("document.F=Object")),e.close(),e.F):g(r);for(var o=a.length;o--;)delete m[f][a[o]];return m()};u[p]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(h[f]=o(e),n=new h,h[f]=null,n[p]=e):n=m(),void 0===t?n:i.f(n,t)}},6048:function(e,t,n){var r=n(9781),o=n(3353),i=n(3070),a=n(9670),u=n(5656),l=n(1956);t.f=r&&!o?Object.defineProperties:function(e,t){a(e);for(var n,r=u(t),o=l(t),c=o.length,s=0;c>s;)i.f(e,n=o[s++],r[n]);return e}},3070:function(e,t,n){var r=n(9781),o=n(4664),i=n(3353),a=n(9670),u=n(4948),l=TypeError,c=Object.defineProperty,s=Object.getOwnPropertyDescriptor,f="enumerable",d="configurable",p="writable";t.f=r?i?function(e,t,n){if(a(e),t=u(t),a(n),"function"==typeof e&&"prototype"===t&&"value"in n&&p in n&&!n[p]){var r=s(e,t);r&&r[p]&&(e[t]=n.value,n={configurable:d in n?n[d]:r[d],enumerable:f in n?n[f]:r[f],writable:!1})}return c(e,t,n)}:c:function(e,t,n){if(a(e),t=u(t),a(n),o)try{return c(e,t,n)}catch(e){}if("get"in n||"set"in n)throw l("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},1236:function(e,t,n){var r=n(9781),o=n(6916),i=n(5296),a=n(9114),u=n(5656),l=n(4948),c=n(2597),s=n(4664),f=Object.getOwnPropertyDescriptor;t.f=r?f:function(e,t){if(e=u(e),t=l(t),s)try{return f(e,t)}catch(e){}if(c(e,t))return a(!o(i.f,e,t),e[t])}},1156:function(e,t,n){var r=n(4326),o=n(5656),i=n(8006).f,a=n(1589),u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return u&&"Window"==r(e)?function(e){try{return i(e)}catch(e){return a(u)}}(e):i(o(e))}},8006:function(e,t,n){var r=n(6324),o=n(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,o)}},5181:function(e,t){t.f=Object.getOwnPropertySymbols},9518:function(e,t,n){var r=n(2597),o=n(614),i=n(7908),a=n(6200),u=n(8544),l=a("IE_PROTO"),c=Object,s=c.prototype;e.exports=u?c.getPrototypeOf:function(e){var t=i(e);if(r(t,l))return t[l];var n=t.constructor;return o(n)&&t instanceof n?n.prototype:t instanceof c?s:null}},2050:function(e,t,n){var r=n(7293),o=n(111),i=n(4326),a=n(7556),u=Object.isExtensible,l=r((function(){u(1)}));e.exports=l||a?function(e){return!!o(e)&&(!a||"ArrayBuffer"!=i(e))&&(!u||u(e))}:u},7976:function(e,t,n){var r=n(1702);e.exports=r({}.isPrototypeOf)},6324:function(e,t,n){var r=n(1702),o=n(2597),i=n(5656),a=n(1318).indexOf,u=n(3501),l=r([].push);e.exports=function(e,t){var n,r=i(e),c=0,s=[];for(n in r)!o(u,n)&&o(r,n)&&l(s,n);for(;t.length>c;)o(r,n=t[c++])&&(~a(s,n)||l(s,n));return s}},1956:function(e,t,n){var r=n(6324),o=n(748);e.exports=Object.keys||function(e){return r(e,o)}},5296:function(e,t){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);t.f=o?function(e){var t=r(this,e);return!!t&&t.enumerable}:n},9026:function(e,t,n){"use strict";var r=n(1913),o=n(7854),i=n(7293),a=n(8008);e.exports=r||!i((function(){if(!(a&&a<535)){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete o[e]}}))},7674:function(e,t,n){var r=n(1702),o=n(9670),i=n(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(n,[]),t=n instanceof Array}catch(e){}return function(n,r){return o(n),i(r),t?e(n,r):n.__proto__=r,n}}():void 0)},4699:function(e,t,n){var r=n(9781),o=n(1702),i=n(1956),a=n(5656),u=o(n(5296).f),l=o([].push),c=function(e){return function(t){for(var n,o=a(t),c=i(o),s=c.length,f=0,d=[];s>f;)n=c[f++],r&&!u(o,n)||l(d,e?[n,o[n]]:o[n]);return d}};e.exports={entries:c(!0),values:c(!1)}},288:function(e,t,n){"use strict";var r=n(1694),o=n(648);e.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},2140:function(e,t,n){var r=n(6916),o=n(614),i=n(111),a=TypeError;e.exports=function(e,t){var n,u;if("string"===t&&o(n=e.toString)&&!i(u=r(n,e)))return u;if(o(n=e.valueOf)&&!i(u=r(n,e)))return u;if("string"!==t&&o(n=e.toString)&&!i(u=r(n,e)))return u;throw a("Can't convert object to primitive value")}},3887:function(e,t,n){var r=n(5005),o=n(1702),i=n(8006),a=n(5181),u=n(9670),l=o([].concat);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(u(e)),n=a.f;return n?l(t,n(e)):t}},857:function(e,t,n){var r=n(7854);e.exports=r},2534:function(e){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},3702:function(e,t,n){var r=n(7854),o=n(2492),i=n(614),a=n(4705),u=n(2788),l=n(5112),c=n(7871),s=n(3823),f=n(1913),d=n(7392),p=o&&o.prototype,h=l("species"),v=!1,g=i(r.PromiseRejectionEvent),m=a("Promise",(function(){var e=u(o),t=e!==String(o);if(!t&&66===d)return!0;if(f&&(!p.catch||!p.finally))return!0;if(!d||d<51||!/native code/.test(e)){var n=new o((function(e){e(1)})),r=function(e){e((function(){}),(function(){}))};if((n.constructor={})[h]=r,!(v=n.then((function(){}))instanceof r))return!0}return!t&&(c||s)&&!g}));e.exports={CONSTRUCTOR:m,REJECTION_EVENT:g,SUBCLASSING:v}},2492:function(e,t,n){var r=n(7854);e.exports=r.Promise},9478:function(e,t,n){var r=n(9670),o=n(111),i=n(8523);e.exports=function(e,t){if(r(e),o(t)&&t.constructor===e)return t;var n=i.f(e);return(0,n.resolve)(t),n.promise}},612:function(e,t,n){var r=n(2492),o=n(7072),i=n(3702).CONSTRUCTOR;e.exports=i||!o((function(e){r.all(e).then(void 0,(function(){}))}))},2626:function(e,t,n){var r=n(3070).f;e.exports=function(e,t,n){n in e||r(e,n,{configurable:!0,get:function(){return t[n]},set:function(e){t[n]=e}})}},8572:function(e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(e){var t={item:e,next:null},n=this.tail;n?n.next=t:this.head=t,this.tail=t},get:function(){var e=this.head;if(e)return null===(this.head=e.next)&&(this.tail=null),e.item}},e.exports=t},7651:function(e,t,n){var r=n(6916),o=n(9670),i=n(614),a=n(4326),u=n(2261),l=TypeError;e.exports=function(e,t){var n=e.exec;if(i(n)){var c=r(n,e,t);return null!==c&&o(c),c}if("RegExp"===a(e))return r(u,e,t);throw l("RegExp#exec called on incompatible receiver")}},2261:function(e,t,n){"use strict";var r,o,i=n(6916),a=n(1702),u=n(1340),l=n(7066),c=n(2999),s=n(2309),f=n(30),d=n(9909).get,p=n(9441),h=n(7168),v=s("native-string-replace",String.prototype.replace),g=RegExp.prototype.exec,m=g,y=a("".charAt),b=a("".indexOf),A=a("".replace),w=a("".slice),C=(o=/b*/g,i(g,r=/a/,"a"),i(g,o,"a"),0!==r.lastIndex||0!==o.lastIndex),x=c.BROKEN_CARET,S=void 0!==/()??/.exec("")[1];(C||S||x||p||h)&&(m=function(e){var t,n,r,o,a,c,s,p=this,h=d(p),k=u(e),E=h.raw;if(E)return E.lastIndex=p.lastIndex,t=i(m,E,k),p.lastIndex=E.lastIndex,t;var P=h.groups,I=x&&p.sticky,_=i(l,p),T=p.source,O=0,R=k;if(I&&(_=A(_,"y",""),-1===b(_,"g")&&(_+="g"),R=w(k,p.lastIndex),p.lastIndex>0&&(!p.multiline||p.multiline&&"\n"!==y(k,p.lastIndex-1))&&(T="(?: "+T+")",R=" "+R,O++),n=new RegExp("^(?:"+T+")",_)),S&&(n=new RegExp("^"+T+"$(?!\\s)",_)),C&&(r=p.lastIndex),o=i(g,I?n:p,R),I?o?(o.input=w(o.input,O),o[0]=w(o[0],O),o.index=p.lastIndex,p.lastIndex+=o[0].length):p.lastIndex=0:C&&o&&(p.lastIndex=p.global?o.index+o[0].length:r),S&&o&&o.length>1&&i(v,o[0],n,(function(){for(a=1;a<arguments.length-2;a++)void 0===arguments[a]&&(o[a]=void 0)})),o&&P)for(o.groups=c=f(null),a=0;a<P.length;a++)c[(s=P[a])[0]]=o[s[1]];return o}),e.exports=m},7066:function(e,t,n){"use strict";var r=n(9670);e.exports=function(){var e=r(this),t="";return e.hasIndices&&(t+="d"),e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.unicodeSets&&(t+="v"),e.sticky&&(t+="y"),t}},4706:function(e,t,n){var r=n(6916),o=n(2597),i=n(7976),a=n(7066),u=RegExp.prototype;e.exports=function(e){var t=e.flags;return void 0!==t||"flags"in u||o(e,"flags")||!i(u,e)?t:r(a,e)}},2999:function(e,t,n){var r=n(7293),o=n(7854).RegExp,i=r((function(){var e=o("a","y");return e.lastIndex=2,null!=e.exec("abcd")})),a=i||r((function(){return!o("a","y").sticky})),u=i||r((function(){var e=o("^r","gy");return e.lastIndex=2,null!=e.exec("str")}));e.exports={BROKEN_CARET:u,MISSED_STICKY:a,UNSUPPORTED_Y:i}},9441:function(e,t,n){var r=n(7293),o=n(7854).RegExp;e.exports=r((function(){var e=o(".","s");return!(e.dotAll&&e.exec("\n")&&"s"===e.flags)}))},7168:function(e,t,n){var r=n(7293),o=n(7854).RegExp;e.exports=r((function(){var e=o("(?<a>b)","g");return"b"!==e.exec("b").groups.a||"bc"!=="b".replace(e,"$<a>c")}))},4488:function(e,t,n){var r=n(8554),o=TypeError;e.exports=function(e){if(r(e))throw o("Can't call method on "+e);return e}},1150:function(e){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},7152:function(e,t,n){"use strict";var r,o=n(7854),i=n(2104),a=n(614),u=n(9363),l=n(8113),c=n(206),s=n(8053),f=o.Function,d=/MSIE .\./.test(l)||u&&((r=o.Bun.version.split(".")).length<3||0==r[0]&&(r[1]<3||3==r[1]&&0==r[2]));e.exports=function(e,t){var n=t?2:1;return d?function(r,o){var u=s(arguments.length,1)>n,l=a(r)?r:f(r),d=u?c(arguments,n):[],p=u?function(){i(l,this,d)}:l;return t?e(p,o):e(p)}:e}},6340:function(e,t,n){"use strict";var r=n(5005),o=n(3070),i=n(5112),a=n(9781),u=i("species");e.exports=function(e){var t=r(e),n=o.f;a&&t&&!t[u]&&n(t,u,{configurable:!0,get:function(){return this}})}},8003:function(e,t,n){var r=n(3070).f,o=n(2597),i=n(5112)("toStringTag");e.exports=function(e,t,n){e&&!n&&(e=e.prototype),e&&!o(e,i)&&r(e,i,{configurable:!0,value:t})}},6200:function(e,t,n){var r=n(2309),o=n(9711),i=r("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:function(e,t,n){var r=n(7854),o=n(3072),i="__core-js_shared__",a=r[i]||o(i,{});e.exports=a},2309:function(e,t,n){var r=n(1913),o=n(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.27.2",mode:r?"pure":"global",copyright:"© 2014-2023 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.27.2/LICENSE",source:"https://github.com/zloirock/core-js"})},6707:function(e,t,n){var r=n(9670),o=n(9483),i=n(8554),a=n(5112)("species");e.exports=function(e,t){var n,u=r(e).constructor;return void 0===u||i(n=r(u)[a])?t:o(n)}},3429:function(e,t,n){var r=n(7293);e.exports=function(e){return r((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3}))}},8710:function(e,t,n){var r=n(1702),o=n(9303),i=n(1340),a=n(4488),u=r("".charAt),l=r("".charCodeAt),c=r("".slice),s=function(e){return function(t,n){var r,s,f=i(a(t)),d=o(n),p=f.length;return d<0||d>=p?e?"":void 0:(r=l(f,d))<55296||r>56319||d+1===p||(s=l(f,d+1))<56320||s>57343?e?u(f,d):r:e?c(f,d,d+2):s-56320+(r-55296<<10)+65536}};e.exports={codeAt:s(!1),charAt:s(!0)}},7061:function(e,t,n){var r=n(8113);e.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},6650:function(e,t,n){var r=n(1702),o=n(7466),i=n(1340),a=n(8415),u=n(4488),l=r(a),c=r("".slice),s=Math.ceil,f=function(e){return function(t,n,r){var a,f,d=i(u(t)),p=o(n),h=d.length,v=void 0===r?" ":i(r);return p<=h||""==v?d:((f=l(v,s((a=p-h)/v.length))).length>a&&(f=c(f,0,a)),e?d+f:f+d)}};e.exports={start:f(!1),end:f(!0)}},3197:function(e,t,n){var r=n(1702),o=2147483647,i=/[^\0-\u007E]/,a=/[.\u3002\uFF0E\uFF61]/g,u="Overflow: input needs wider integers to process",l=RangeError,c=r(a.exec),s=Math.floor,f=String.fromCharCode,d=r("".charCodeAt),p=r([].join),h=r([].push),v=r("".replace),g=r("".split),m=r("".toLowerCase),y=function(e){return e+22+75*(e<26)},b=function(e,t,n){var r=0;for(e=n?s(e/700):e>>1,e+=s(e/t);e>455;)e=s(e/35),r+=36;return s(r+36*e/(e+38))},A=function(e){var t=[];e=function(e){for(var t=[],n=0,r=e.length;n<r;){var o=d(e,n++);if(o>=55296&&o<=56319&&n<r){var i=d(e,n++);56320==(64512&i)?h(t,((1023&o)<<10)+(1023&i)+65536):(h(t,o),n--)}else h(t,o)}return t}(e);var n,r,i=e.length,a=128,c=0,v=72;for(n=0;n<e.length;n++)(r=e[n])<128&&h(t,f(r));var g=t.length,m=g;for(g&&h(t,"-");m<i;){var A=o;for(n=0;n<e.length;n++)(r=e[n])>=a&&r<A&&(A=r);var w=m+1;if(A-a>s((o-c)/w))throw l(u);for(c+=(A-a)*w,a=A,n=0;n<e.length;n++){if((r=e[n])<a&&++c>o)throw l(u);if(r==a){for(var C=c,x=36;;){var S=x<=v?1:x>=v+26?26:x-v;if(C<S)break;var k=C-S,E=36-S;h(t,f(y(S+k%E))),C=s(k/E),x+=36}h(t,f(y(C))),v=b(c,w,m==g),c=0,m++}}c++,a++}return p(t,"")};e.exports=function(e){var t,n,r=[],o=g(v(m(e),a,"."),".");for(t=0;t<o.length;t++)n=o[t],h(r,c(i,n)?"xn--"+A(n):n);return p(r,".")}},8415:function(e,t,n){"use strict";var r=n(9303),o=n(1340),i=n(4488),a=RangeError;e.exports=function(e){var t=o(i(this)),n="",u=r(e);if(u<0||u==1/0)throw a("Wrong number of repetitions");for(;u>0;(u>>>=1)&&(t+=t))1&u&&(n+=t);return n}},365:function(e,t,n){"use strict";var r=n(3111).end,o=n(6091);e.exports=o("trimEnd")?function(){return r(this)}:"".trimEnd},6091:function(e,t,n){var r=n(6530).PROPER,o=n(7293),i=n(1361);e.exports=function(e){return o((function(){return!!i[e]()||"​᠎"!=="​᠎"[e]()||r&&i[e].name!==e}))}},3217:function(e,t,n){"use strict";var r=n(3111).start,o=n(6091);e.exports=o("trimStart")?function(){return r(this)}:"".trimStart},3111:function(e,t,n){var r=n(1702),o=n(4488),i=n(1340),a=n(1361),u=r("".replace),l="["+a+"]",c=RegExp("^"+l+l+"*"),s=RegExp(l+l+"*$"),f=function(e){return function(t){var n=i(o(t));return 1&e&&(n=u(n,c,"")),2&e&&(n=u(n,s,"")),n}};e.exports={start:f(1),end:f(2),trim:f(3)}},6293:function(e,t,n){var r=n(7392),o=n(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},6532:function(e,t,n){var r=n(6916),o=n(5005),i=n(5112),a=n(8052);e.exports=function(){var e=o("Symbol"),t=e&&e.prototype,n=t&&t.valueOf,u=i("toPrimitive");t&&!t[u]&&a(t,u,(function(e){return r(n,this)}),{arity:1})}},2015:function(e,t,n){var r=n(6293);e.exports=r&&!!Symbol.for&&!!Symbol.keyFor},261:function(e,t,n){var r,o,i,a,u=n(7854),l=n(2104),c=n(9974),s=n(614),f=n(2597),d=n(7293),p=n(490),h=n(206),v=n(317),g=n(8053),m=n(8334),y=n(5268),b=u.setImmediate,A=u.clearImmediate,w=u.process,C=u.Dispatch,x=u.Function,S=u.MessageChannel,k=u.String,E=0,P={},I="onreadystatechange";d((function(){r=u.location}));var _=function(e){if(f(P,e)){var t=P[e];delete P[e],t()}},T=function(e){return function(){_(e)}},O=function(e){_(e.data)},R=function(e){u.postMessage(k(e),r.protocol+"//"+r.host)};b&&A||(b=function(e){g(arguments.length,1);var t=s(e)?e:x(e),n=h(arguments,1);return P[++E]=function(){l(t,void 0,n)},o(E),E},A=function(e){delete P[e]},y?o=function(e){w.nextTick(T(e))}:C&&C.now?o=function(e){C.now(T(e))}:S&&!m?(a=(i=new S).port2,i.port1.onmessage=O,o=c(a.postMessage,a)):u.addEventListener&&s(u.postMessage)&&!u.importScripts&&r&&"file:"!==r.protocol&&!d(R)?(o=R,u.addEventListener("message",O,!1)):o=I in v("script")?function(e){p.appendChild(v("script"))[I]=function(){p.removeChild(this),_(e)}}:function(e){setTimeout(T(e),0)}),e.exports={set:b,clear:A}},863:function(e,t,n){var r=n(1702);e.exports=r(1..valueOf)},1400:function(e,t,n){var r=n(9303),o=Math.max,i=Math.min;e.exports=function(e,t){var n=r(e);return n<0?o(n+t,0):i(n,t)}},4599:function(e,t,n){var r=n(7593),o=TypeError;e.exports=function(e){var t=r(e,"number");if("number"==typeof t)throw o("Can't convert number to bigint");return BigInt(t)}},7067:function(e,t,n){var r=n(9303),o=n(7466),i=RangeError;e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=o(t);if(t!==n)throw i("Wrong length or index");return n}},5656:function(e,t,n){var r=n(8361),o=n(4488);e.exports=function(e){return r(o(e))}},9303:function(e,t,n){var r=n(4758);e.exports=function(e){var t=+e;return t!=t||0===t?0:r(t)}},7466:function(e,t,n){var r=n(9303),o=Math.min;e.exports=function(e){return e>0?o(r(e),9007199254740991):0}},7908:function(e,t,n){var r=n(4488),o=Object;e.exports=function(e){return o(r(e))}},4590:function(e,t,n){var r=n(3002),o=RangeError;e.exports=function(e,t){var n=r(e);if(n%t)throw o("Wrong offset");return n}},3002:function(e,t,n){var r=n(9303),o=RangeError;e.exports=function(e){var t=r(e);if(t<0)throw o("The argument can't be less than 0");return t}},7593:function(e,t,n){var r=n(6916),o=n(111),i=n(2190),a=n(8173),u=n(2140),l=n(5112),c=TypeError,s=l("toPrimitive");e.exports=function(e,t){if(!o(e)||i(e))return e;var n,l=a(e,s);if(l){if(void 0===t&&(t="default"),n=r(l,e,t),!o(n)||i(n))return n;throw c("Can't convert object to primitive value")}return void 0===t&&(t="number"),u(e,t)}},4948:function(e,t,n){var r=n(7593),o=n(2190);e.exports=function(e){var t=r(e,"string");return o(t)?t:t+""}},1694:function(e,t,n){var r={};r[n(5112)("toStringTag")]="z",e.exports="[object z]"===String(r)},1340:function(e,t,n){var r=n(648),o=String;e.exports=function(e){if("Symbol"===r(e))throw TypeError("Cannot convert a Symbol value to a string");return o(e)}},6330:function(e){var t=String;e.exports=function(e){try{return t(e)}catch(e){return"Object"}}},9843:function(e,t,n){"use strict";var r=n(2109),o=n(7854),i=n(6916),a=n(9781),u=n(3832),l=n(260),c=n(3331),s=n(5787),f=n(9114),d=n(8880),p=n(5988),h=n(7466),v=n(7067),g=n(4590),m=n(4948),y=n(2597),b=n(648),A=n(111),w=n(2190),C=n(30),x=n(7976),S=n(7674),k=n(8006).f,E=n(7321),P=n(2092).forEach,I=n(6340),_=n(3070),T=n(1236),O=n(9909),R=n(9587),N=O.get,z=O.set,M=O.enforce,L=_.f,F=T.f,B=Math.round,D=o.RangeError,j=c.ArrayBuffer,U=j.prototype,G=c.DataView,Q=l.NATIVE_ARRAY_BUFFER_VIEWS,H=l.TYPED_ARRAY_TAG,V=l.TypedArray,W=l.TypedArrayPrototype,Y=l.aTypedArrayConstructor,J=l.isTypedArray,$="BYTES_PER_ELEMENT",q="Wrong length",K=function(e,t){Y(e);for(var n=0,r=t.length,o=new e(r);r>n;)o[n]=t[n++];return o},X=function(e,t){L(e,t,{get:function(){return N(this)[t]}})},Z=function(e){var t;return x(U,e)||"ArrayBuffer"==(t=b(e))||"SharedArrayBuffer"==t},ee=function(e,t){return J(e)&&!w(t)&&t in e&&p(+t)&&t>=0},te=function(e,t){return t=m(t),ee(e,t)?f(2,e[t]):F(e,t)},ne=function(e,t,n){return t=m(t),!(ee(e,t)&&A(n)&&y(n,"value"))||y(n,"get")||y(n,"set")||n.configurable||y(n,"writable")&&!n.writable||y(n,"enumerable")&&!n.enumerable?L(e,t,n):(e[t]=n.value,e)};a?(Q||(T.f=te,_.f=ne,X(W,"buffer"),X(W,"byteOffset"),X(W,"byteLength"),X(W,"length")),r({target:"Object",stat:!0,forced:!Q},{getOwnPropertyDescriptor:te,defineProperty:ne}),e.exports=function(e,t,n){var a=e.match(/\d+$/)[0]/8,l=e+(n?"Clamped":"")+"Array",c="get"+e,f="set"+e,p=o[l],m=p,y=m&&m.prototype,b={},w=function(e,t){L(e,t,{get:function(){return function(e,t){var n=N(e);return n.view[c](t*a+n.byteOffset,!0)}(this,t)},set:function(e){return function(e,t,r){var o=N(e);n&&(r=(r=B(r))<0?0:r>255?255:255&r),o.view[f](t*a+o.byteOffset,r,!0)}(this,t,e)},enumerable:!0})};Q?u&&(m=t((function(e,t,n,r){return s(e,y),R(A(t)?Z(t)?void 0!==r?new p(t,g(n,a),r):void 0!==n?new p(t,g(n,a)):new p(t):J(t)?K(m,t):i(E,m,t):new p(v(t)),e,m)})),S&&S(m,V),P(k(p),(function(e){e in m||d(m,e,p[e])})),m.prototype=y):(m=t((function(e,t,n,r){s(e,y);var o,u,l,c=0,f=0;if(A(t)){if(!Z(t))return J(t)?K(m,t):i(E,m,t);o=t,f=g(n,a);var d=t.byteLength;if(void 0===r){if(d%a)throw D(q);if((u=d-f)<0)throw D(q)}else if((u=h(r)*a)+f>d)throw D(q);l=u/a}else l=v(t),o=new j(u=l*a);for(z(e,{buffer:o,byteOffset:f,byteLength:u,length:l,view:new G(o)});c<l;)w(e,c++)})),S&&S(m,V),y=m.prototype=C(W)),y.constructor!==m&&d(y,"constructor",m),M(y).TypedArrayConstructor=m,H&&d(y,H,l);var x=m!=p;b[l]=m,r({global:!0,constructor:!0,forced:x,sham:!Q},b),$ in m||d(m,$,a),$ in y||d(y,$,a),I(l)}):e.exports=function(){}},3832:function(e,t,n){var r=n(7854),o=n(7293),i=n(7072),a=n(260).NATIVE_ARRAY_BUFFER_VIEWS,u=r.ArrayBuffer,l=r.Int8Array;e.exports=!a||!o((function(){l(1)}))||!o((function(){new l(-1)}))||!i((function(e){new l,new l(null),new l(1.5),new l(e)}),!0)||o((function(){return 1!==new l(new u(2),1,void 0).length}))},3074:function(e,t,n){var r=n(7745),o=n(6304);e.exports=function(e,t){return r(o(e),t)}},7321:function(e,t,n){var r=n(9974),o=n(6916),i=n(9483),a=n(7908),u=n(6244),l=n(4121),c=n(1246),s=n(7659),f=n(4067),d=n(260).aTypedArrayConstructor,p=n(4599);e.exports=function(e){var t,n,h,v,g,m,y,b,A=i(this),w=a(e),C=arguments.length,x=C>1?arguments[1]:void 0,S=void 0!==x,k=c(w);if(k&&!s(k))for(b=(y=l(w,k)).next,w=[];!(m=o(b,y)).done;)w.push(m.value);for(S&&C>2&&(x=r(x,arguments[2])),n=u(w),h=new(d(A))(n),v=f(h),t=0;n>t;t++)g=S?x(w[t],t):w[t],h[t]=v?p(g):+g;return h}},6304:function(e,t,n){var r=n(260),o=n(6707),i=r.aTypedArrayConstructor,a=r.getTypedArrayConstructor;e.exports=function(e){return i(o(e,a(e)))}},9711:function(e,t,n){var r=n(1702),o=0,i=Math.random(),a=r(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},5143:function(e,t,n){var r=n(7293),o=n(5112),i=n(1913),a=o("iterator");e.exports=!r((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,n="";return e.pathname="c%20d",t.forEach((function(e,r){t.delete("b"),n+=r+e})),i&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==n||"x"!==new URL("http://x",void 0).host}))},3307:function(e,t,n){var r=n(6293);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},3353:function(e,t,n){var r=n(9781),o=n(7293);e.exports=r&&o((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},8053:function(e){var t=TypeError;e.exports=function(e,n){if(e<n)throw t("Not enough arguments");return e}},4811:function(e,t,n){var r=n(7854),o=n(614),i=r.WeakMap;e.exports=o(i)&&/native code/.test(String(i))},6800:function(e,t,n){var r=n(857),o=n(2597),i=n(6061),a=n(3070).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});o(t,e)||a(t,e,{value:i.f(e)})}},6061:function(e,t,n){var r=n(5112);t.f=r},5112:function(e,t,n){var r=n(7854),o=n(2309),i=n(2597),a=n(9711),u=n(6293),l=n(3307),c=r.Symbol,s=o("wks"),f=l?c.for||c:c&&c.withoutSetter||a;e.exports=function(e){return i(s,e)||(s[e]=u&&i(c,e)?c[e]:f("Symbol."+e)),s[e]}},1361:function(e){e.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},8264:function(e,t,n){"use strict";var r=n(2109),o=n(7854),i=n(3331),a=n(6340),u="ArrayBuffer",l=i[u];r({global:!0,constructor:!0,forced:o[u]!==l},{ArrayBuffer:l}),a(u)},9575:function(e,t,n){"use strict";var r=n(2109),o=n(1470),i=n(7293),a=n(3331),u=n(9670),l=n(1400),c=n(7466),s=n(6707),f=a.ArrayBuffer,d=a.DataView,p=d.prototype,h=o(f.prototype.slice),v=o(p.getUint8),g=o(p.setUint8);r({target:"ArrayBuffer",proto:!0,unsafe:!0,forced:i((function(){return!new f(2).slice(1,void 0).byteLength}))},{slice:function(e,t){if(h&&void 0===t)return h(u(this),e);for(var n=u(this).byteLength,r=l(e,n),o=l(void 0===t?n:t,n),i=new(s(this,f))(c(o-r)),a=new d(this),p=new d(i),m=0;r<o;)g(p,m++,v(a,r++));return i}})},2222:function(e,t,n){"use strict";var r=n(2109),o=n(7293),i=n(3157),a=n(111),u=n(7908),l=n(6244),c=n(7207),s=n(6135),f=n(5417),d=n(1194),p=n(5112),h=n(7392),v=p("isConcatSpreadable"),g=h>=51||!o((function(){var e=[];return e[v]=!1,e.concat()[0]!==e})),m=function(e){if(!a(e))return!1;var t=e[v];return void 0!==t?!!t:i(e)};r({target:"Array",proto:!0,arity:1,forced:!g||!d("concat")},{concat:function(e){var t,n,r,o,i,a=u(this),d=f(a,0),p=0;for(t=-1,r=arguments.length;t<r;t++)if(m(i=-1===t?a:arguments[t]))for(o=l(i),c(p+o),n=0;n<o;n++,p++)n in i&&s(d,p,i[n]);else c(p+1),s(d,p++,i);return d.length=p,d}})},545:function(e,t,n){var r=n(2109),o=n(1048),i=n(1223);r({target:"Array",proto:!0},{copyWithin:o}),i("copyWithin")},3290:function(e,t,n){var r=n(2109),o=n(1285),i=n(1223);r({target:"Array",proto:!0},{fill:o}),i("fill")},7327:function(e,t,n){"use strict";var r=n(2109),o=n(2092).filter;r({target:"Array",proto:!0,forced:!n(1194)("filter")},{filter:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},4553:function(e,t,n){"use strict";var r=n(2109),o=n(2092).findIndex,i=n(1223),a="findIndex",u=!0;a in[]&&Array(1)[a]((function(){u=!1})),r({target:"Array",proto:!0,forced:u},{findIndex:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},9826:function(e,t,n){"use strict";var r=n(2109),o=n(2092).find,i=n(1223),a="find",u=!0;a in[]&&Array(1)[a]((function(){u=!1})),r({target:"Array",proto:!0,forced:u},{find:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i(a)},6535:function(e,t,n){"use strict";var r=n(2109),o=n(6790),i=n(9662),a=n(7908),u=n(6244),l=n(5417);r({target:"Array",proto:!0},{flatMap:function(e){var t,n=a(this),r=u(n);return i(e),(t=l(n,0)).length=o(t,n,n,r,0,1,e,arguments.length>1?arguments[1]:void 0),t}})},4944:function(e,t,n){"use strict";var r=n(2109),o=n(6790),i=n(7908),a=n(6244),u=n(9303),l=n(5417);r({target:"Array",proto:!0},{flat:function(){var e=arguments.length?arguments[0]:void 0,t=i(this),n=a(t),r=l(t,0);return r.length=o(r,t,t,n,0,void 0===e?1:u(e)),r}})},1038:function(e,t,n){var r=n(2109),o=n(8457);r({target:"Array",stat:!0,forced:!n(7072)((function(e){Array.from(e)}))},{from:o})},6699:function(e,t,n){"use strict";var r=n(2109),o=n(1318).includes,i=n(7293),a=n(1223);r({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),a("includes")},2772:function(e,t,n){"use strict";var r=n(2109),o=n(1470),i=n(1318).indexOf,a=n(2133),u=o([].indexOf),l=!!u&&1/u([1],1,-0)<0;r({target:"Array",proto:!0,forced:l||!a("indexOf")},{indexOf:function(e){var t=arguments.length>1?arguments[1]:void 0;return l?u(this,e,t)||0:i(this,e,t)}})},6992:function(e,t,n){"use strict";var r=n(5656),o=n(1223),i=n(7497),a=n(9909),u=n(3070).f,l=n(1656),c=n(6178),s=n(1913),f=n(9781),d="Array Iterator",p=a.set,h=a.getterFor(d);e.exports=l(Array,"Array",(function(e,t){p(this,{type:d,target:r(e),index:0,kind:t})}),(function(){var e=h(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,c(void 0,!0)):c("keys"==n?r:"values"==n?t[r]:[r,t[r]],!1)}),"values");var v=i.Arguments=i.Array;if(o("keys"),o("values"),o("entries"),!s&&f&&"values"!==v.name)try{u(v,"name",{value:"values"})}catch(e){}},9600:function(e,t,n){"use strict";var r=n(2109),o=n(1702),i=n(8361),a=n(5656),u=n(2133),l=o([].join);r({target:"Array",proto:!0,forced:i!=Object||!u("join",",")},{join:function(e){return l(a(this),void 0===e?",":e)}})},4986:function(e,t,n){var r=n(2109),o=n(6583);r({target:"Array",proto:!0,forced:o!==[].lastIndexOf},{lastIndexOf:o})},1249:function(e,t,n){"use strict";var r=n(2109),o=n(2092).map;r({target:"Array",proto:!0,forced:!n(1194)("map")},{map:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},6572:function(e,t,n){"use strict";var r=n(2109),o=n(7293),i=n(4411),a=n(6135),u=Array;r({target:"Array",stat:!0,forced:o((function(){function e(){}return!(u.of.call(e)instanceof e)}))},{of:function(){for(var e=0,t=arguments.length,n=new(i(this)?this:u)(t);t>e;)a(n,e,arguments[e++]);return n.length=t,n}})},6644:function(e,t,n){"use strict";var r=n(2109),o=n(3671).right,i=n(2133),a=n(7392);r({target:"Array",proto:!0,forced:!n(5268)&&a>79&&a<83||!i("reduceRight")},{reduceRight:function(e){return o(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}})},5827:function(e,t,n){"use strict";var r=n(2109),o=n(3671).left,i=n(2133),a=n(7392);r({target:"Array",proto:!0,forced:!n(5268)&&a>79&&a<83||!i("reduce")},{reduce:function(e){var t=arguments.length;return o(this,e,t,t>1?arguments[1]:void 0)}})},5069:function(e,t,n){"use strict";var r=n(2109),o=n(1702),i=n(3157),a=o([].reverse),u=[1,2];r({target:"Array",proto:!0,forced:String(u)===String(u.reverse())},{reverse:function(){return i(this)&&(this.length=this.length),a(this)}})},7042:function(e,t,n){"use strict";var r=n(2109),o=n(3157),i=n(4411),a=n(111),u=n(1400),l=n(6244),c=n(5656),s=n(6135),f=n(5112),d=n(1194),p=n(206),h=d("slice"),v=f("species"),g=Array,m=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(e,t){var n,r,f,d=c(this),h=l(d),y=u(e,h),b=u(void 0===t?h:t,h);if(o(d)&&(n=d.constructor,(i(n)&&(n===g||o(n.prototype))||a(n)&&null===(n=n[v]))&&(n=void 0),n===g||void 0===n))return p(d,y,b);for(r=new(void 0===n?g:n)(m(b-y,0)),f=0;y<b;y++,f++)y in d&&s(r,f,d[y]);return r.length=f,r}})},2707:function(e,t,n){"use strict";var r=n(2109),o=n(1702),i=n(9662),a=n(7908),u=n(6244),l=n(5117),c=n(1340),s=n(7293),f=n(4362),d=n(2133),p=n(8886),h=n(256),v=n(7392),g=n(8008),m=[],y=o(m.sort),b=o(m.push),A=s((function(){m.sort(void 0)})),w=s((function(){m.sort(null)})),C=d("sort"),x=!s((function(){if(v)return v<70;if(!(p&&p>3)){if(h)return!0;if(g)return g<603;var e,t,n,r,o="";for(e=65;e<76;e++){switch(t=String.fromCharCode(e),e){case 66:case 69:case 70:case 72:n=3;break;case 68:case 71:n=4;break;default:n=2}for(r=0;r<47;r++)m.push({k:t+r,v:n})}for(m.sort((function(e,t){return t.v-e.v})),r=0;r<m.length;r++)t=m[r].k.charAt(0),o.charAt(o.length-1)!==t&&(o+=t);return"DGBEFHACIJK"!==o}}));r({target:"Array",proto:!0,forced:A||!w||!C||!x},{sort:function(e){void 0!==e&&i(e);var t=a(this);if(x)return void 0===e?y(t):y(t,e);var n,r,o=[],s=u(t);for(r=0;r<s;r++)r in t&&b(o,t[r]);for(f(o,function(e){return function(t,n){return void 0===n?-1:void 0===t?1:void 0!==e?+e(t,n)||0:c(t)>c(n)?1:-1}}(e)),n=u(o),r=0;r<n;)t[r]=o[r++];for(;r<s;)l(t,r++);return t}})},8706:function(e,t,n){n(6340)("Array")},561:function(e,t,n){"use strict";var r=n(2109),o=n(7908),i=n(1400),a=n(9303),u=n(6244),l=n(3658),c=n(7207),s=n(5417),f=n(6135),d=n(5117),p=n(1194)("splice"),h=Math.max,v=Math.min;r({target:"Array",proto:!0,forced:!p},{splice:function(e,t){var n,r,p,g,m,y,b=o(this),A=u(b),w=i(e,A),C=arguments.length;for(0===C?n=r=0:1===C?(n=0,r=A-w):(n=C-2,r=v(h(a(t),0),A-w)),c(A+n-r),p=s(b,r),g=0;g<r;g++)(m=w+g)in b&&f(p,g,b[m]);if(p.length=r,n<r){for(g=w;g<A-r;g++)y=g+n,(m=g+r)in b?b[y]=b[m]:d(b,y);for(g=A;g>A-r+n;g--)d(b,g-1)}else if(n>r)for(g=A-r;g>w;g--)y=g+n-1,(m=g+r-1)in b?b[y]=b[m]:d(b,y);for(g=0;g<n;g++)b[g+w]=arguments[g+2];return l(b,A-r+n),p}})},9244:function(e,t,n){n(1223)("flatMap")},3792:function(e,t,n){n(1223)("flat")},5735:function(e,t,n){"use strict";var r=n(2109),o=n(7293),i=n(7908),a=n(7593);r({target:"Date",proto:!0,arity:1,forced:o((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}))},{toJSON:function(e){var t=i(this),n=a(t,"number");return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},6078:function(e,t,n){var r=n(2597),o=n(8052),i=n(8709),a=n(5112)("toPrimitive"),u=Date.prototype;r(u,a)||o(u,a,i)},4855:function(e,t,n){"use strict";var r=n(614),o=n(111),i=n(3070),a=n(9518),u=n(5112),l=n(6339),c=u("hasInstance"),s=Function.prototype;c in s||i.f(s,c,{value:l((function(e){if(!r(this)||!o(e))return!1;var t=this.prototype;if(!o(t))return e instanceof this;for(;e=a(e);)if(t===e)return!0;return!1}),c)})},8309:function(e,t,n){var r=n(9781),o=n(6530).EXISTS,i=n(1702),a=n(3070).f,u=Function.prototype,l=i(u.toString),c=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,s=i(c.exec);r&&!o&&a(u,"name",{configurable:!0,get:function(){try{return s(c,l(this))[1]}catch(e){return""}}})},8862:function(e,t,n){var r=n(2109),o=n(5005),i=n(2104),a=n(6916),u=n(1702),l=n(7293),c=n(3157),s=n(614),f=n(111),d=n(2190),p=n(206),h=n(6293),v=o("JSON","stringify"),g=u(/./.exec),m=u("".charAt),y=u("".charCodeAt),b=u("".replace),A=u(1..toString),w=/[\uD800-\uDFFF]/g,C=/^[\uD800-\uDBFF]$/,x=/^[\uDC00-\uDFFF]$/,S=!h||l((function(){var e=o("Symbol")();return"[null]"!=v([e])||"{}"!=v({a:e})||"{}"!=v(Object(e))})),k=l((function(){return'"\\udf06\\ud834"'!==v("\udf06\ud834")||'"\\udead"'!==v("\udead")})),E=function(e,t){var n=p(arguments),r=t;if((f(t)||void 0!==e)&&!d(e))return c(t)||(t=function(e,t){if(s(r)&&(t=a(r,this,e,t)),!d(t))return t}),n[1]=t,i(v,null,n)},P=function(e,t,n){var r=m(n,t-1),o=m(n,t+1);return g(C,e)&&!g(x,o)||g(x,e)&&!g(C,r)?"\\u"+A(y(e,0),16):e};v&&r({target:"JSON",stat:!0,arity:3,forced:S||k},{stringify:function(e,t,n){var r=p(arguments),o=i(S?E:v,null,r);return k&&"string"==typeof o?b(o,w,P):o}})},3706:function(e,t,n){var r=n(7854);n(8003)(r.JSON,"JSON",!0)},9098:function(e,t,n){"use strict";n(7710)("Map",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(5631))},1532:function(e,t,n){n(9098)},9752:function(e,t,n){var r=n(2109),o=n(6513),i=Math.acosh,a=Math.log,u=Math.sqrt,l=Math.LN2;r({target:"Math",stat:!0,forced:!i||710!=Math.floor(i(Number.MAX_VALUE))||i(1/0)!=1/0},{acosh:function(e){var t=+e;return t<1?NaN:t>94906265.62425156?a(t)+l:o(t-1+u(t-1)*u(t+1))}})},2376:function(e,t,n){var r=n(2109),o=Math.asinh,i=Math.log,a=Math.sqrt;r({target:"Math",stat:!0,forced:!(o&&1/o(0)>0)},{asinh:function e(t){var n=+t;return isFinite(n)&&0!=n?n<0?-e(-n):i(n+a(n*n+1)):n}})},3181:function(e,t,n){var r=n(2109),o=Math.atanh,i=Math.log;r({target:"Math",stat:!0,forced:!(o&&1/o(-0)<0)},{atanh:function(e){var t=+e;return 0==t?t:i((1+t)/(1-t))/2}})},3484:function(e,t,n){var r=n(2109),o=n(4310),i=Math.abs,a=Math.pow;r({target:"Math",stat:!0},{cbrt:function(e){var t=+e;return o(t)*a(i(t),1/3)}})},2388:function(e,t,n){var r=n(2109),o=Math.floor,i=Math.log,a=Math.LOG2E;r({target:"Math",stat:!0},{clz32:function(e){var t=e>>>0;return t?31-o(i(t+.5)*a):32}})},8621:function(e,t,n){var r=n(2109),o=n(6736),i=Math.cosh,a=Math.abs,u=Math.E;r({target:"Math",stat:!0,forced:!i||i(710)===1/0},{cosh:function(e){var t=o(a(e)-1)+1;return(t+1/(t*u*u))*(u/2)}})},403:function(e,t,n){var r=n(2109),o=n(6736);r({target:"Math",stat:!0,forced:o!=Math.expm1},{expm1:o})},4755:function(e,t,n){n(2109)({target:"Math",stat:!0},{fround:n(6130)})},5438:function(e,t,n){var r=n(2109),o=Math.hypot,i=Math.abs,a=Math.sqrt;r({target:"Math",stat:!0,arity:2,forced:!!o&&o(1/0,NaN)!==1/0},{hypot:function(e,t){for(var n,r,o=0,u=0,l=arguments.length,c=0;u<l;)c<(n=i(arguments[u++]))?(o=o*(r=c/n)*r+1,c=n):o+=n>0?(r=n/c)*r:n;return c===1/0?1/0:c*a(o)}})},332:function(e,t,n){var r=n(2109),o=n(7293),i=Math.imul;r({target:"Math",stat:!0,forced:o((function(){return-5!=i(4294967295,5)||2!=i.length}))},{imul:function(e,t){var n=65535,r=+e,o=+t,i=n&r,a=n&o;return 0|i*a+((n&r>>>16)*a+i*(n&o>>>16)<<16>>>0)}})},658:function(e,t,n){n(2109)({target:"Math",stat:!0},{log10:n(202)})},197:function(e,t,n){n(2109)({target:"Math",stat:!0},{log1p:n(6513)})},4914:function(e,t,n){var r=n(2109),o=Math.log,i=Math.LN2;r({target:"Math",stat:!0},{log2:function(e){return o(e)/i}})},2420:function(e,t,n){n(2109)({target:"Math",stat:!0},{sign:n(4310)})},160:function(e,t,n){var r=n(2109),o=n(7293),i=n(6736),a=Math.abs,u=Math.exp,l=Math.E;r({target:"Math",stat:!0,forced:o((function(){return-2e-17!=Math.sinh(-2e-17)}))},{sinh:function(e){var t=+e;return a(t)<1?(i(t)-i(-t))/2:(u(t-1)-u(-t-1))*(l/2)}})},970:function(e,t,n){var r=n(2109),o=n(6736),i=Math.exp;r({target:"Math",stat:!0},{tanh:function(e){var t=+e,n=o(t),r=o(-t);return n==1/0?1:r==1/0?-1:(n-r)/(i(t)+i(-t))}})},2703:function(e,t,n){n(8003)(Math,"Math",!0)},3689:function(e,t,n){n(2109)({target:"Math",stat:!0},{trunc:n(4758)})},9653:function(e,t,n){"use strict";var r=n(2109),o=n(1913),i=n(9781),a=n(7854),u=n(857),l=n(1702),c=n(4705),s=n(2597),f=n(9587),d=n(7976),p=n(2190),h=n(7593),v=n(7293),g=n(8006).f,m=n(1236).f,y=n(3070).f,b=n(863),A=n(3111).trim,w="Number",C=a[w],x=u[w],S=C.prototype,k=a.TypeError,E=l("".slice),P=l("".charCodeAt),I=function(e){var t=h(e,"number");return"bigint"==typeof t?t:_(t)},_=function(e){var t,n,r,o,i,a,u,l,c=h(e,"number");if(p(c))throw k("Cannot convert a Symbol value to a number");if("string"==typeof c&&c.length>2)if(c=A(c),43===(t=P(c,0))||45===t){if(88===(n=P(c,2))||120===n)return NaN}else if(48===t){switch(P(c,1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+c}for(a=(i=E(c,2)).length,u=0;u<a;u++)if((l=P(i,u))<48||l>o)return NaN;return parseInt(i,r)}return+c},T=c(w,!C(" 0o1")||!C("0b1")||C("+0x1")),O=function(e){return d(S,e)&&v((function(){b(e)}))},R=function(e){var t=arguments.length<1?0:C(I(e));return O(this)?f(Object(t),this,R):t};R.prototype=S,T&&!o&&(S.constructor=R),r({global:!0,constructor:!0,wrap:!0,forced:T},{Number:R});var N=function(e,t){for(var n,r=i?g(t):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),o=0;r.length>o;o++)s(t,n=r[o])&&!s(e,n)&&y(e,n,m(t,n))};o&&x&&N(u[w],x),(T||o)&&N(u[w],C)},3299:function(e,t,n){n(2109)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{EPSILON:Math.pow(2,-52)})},5192:function(e,t,n){n(2109)({target:"Number",stat:!0},{isFinite:n(7023)})},3161:function(e,t,n){n(2109)({target:"Number",stat:!0},{isInteger:n(5988)})},4048:function(e,t,n){n(2109)({target:"Number",stat:!0},{isNaN:function(e){return e!=e}})},8285:function(e,t,n){var r=n(2109),o=n(5988),i=Math.abs;r({target:"Number",stat:!0},{isSafeInteger:function(e){return o(e)&&i(e)<=9007199254740991}})},4363:function(e,t,n){n(2109)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MAX_SAFE_INTEGER:9007199254740991})},5994:function(e,t,n){n(2109)({target:"Number",stat:!0,nonConfigurable:!0,nonWritable:!0},{MIN_SAFE_INTEGER:-9007199254740991})},1874:function(e,t,n){var r=n(2109),o=n(2814);r({target:"Number",stat:!0,forced:Number.parseFloat!=o},{parseFloat:o})},9494:function(e,t,n){var r=n(2109),o=n(3009);r({target:"Number",stat:!0,forced:Number.parseInt!=o},{parseInt:o})},6977:function(e,t,n){"use strict";var r=n(2109),o=n(1702),i=n(9303),a=n(863),u=n(8415),l=n(7293),c=RangeError,s=String,f=Math.floor,d=o(u),p=o("".slice),h=o(1..toFixed),v=function(e,t,n){return 0===t?n:t%2==1?v(e,t-1,n*e):v(e*e,t/2,n)},g=function(e,t,n){for(var r=-1,o=n;++r<6;)o+=t*e[r],e[r]=o%1e7,o=f(o/1e7)},m=function(e,t){for(var n=6,r=0;--n>=0;)r+=e[n],e[n]=f(r/t),r=r%t*1e7},y=function(e){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==e[t]){var r=s(e[t]);n=""===n?r:n+d("0",7-r.length)+r}return n};r({target:"Number",proto:!0,forced:l((function(){return"0.000"!==h(8e-5,3)||"1"!==h(.9,0)||"1.25"!==h(1.255,2)||"1000000000000000128"!==h(0xde0b6b3a7640080,0)}))||!l((function(){h({})}))},{toFixed:function(e){var t,n,r,o,u=a(this),l=i(e),f=[0,0,0,0,0,0],h="",b="0";if(l<0||l>20)throw c("Incorrect fraction digits");if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return s(u);if(u<0&&(h="-",u=-u),u>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(u*v(2,69,1))-69)<0?u*v(2,-t,1):u/v(2,t,1),n*=4503599627370496,(t=52-t)>0){for(g(f,0,n),r=l;r>=7;)g(f,1e7,0),r-=7;for(g(f,v(10,r,1),0),r=t-1;r>=23;)m(f,1<<23),r-=23;m(f,1<<r),g(f,1,1),m(f,2),b=y(f)}else g(f,0,n),g(f,1<<-t,0),b=y(f)+d("0",l);return l>0?h+((o=b.length)<=l?"0."+d("0",l-o)+b:p(b,0,o-l)+"."+p(b,o-l)):h+b}})},9601:function(e,t,n){var r=n(2109),o=n(1574);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==o},{assign:o})},9595:function(e,t,n){"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(9662),u=n(7908),l=n(3070);o&&r({target:"Object",proto:!0,forced:i},{__defineGetter__:function(e,t){l.f(u(this),e,{get:a(t),enumerable:!0,configurable:!0})}})},5500:function(e,t,n){"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(9662),u=n(7908),l=n(3070);o&&r({target:"Object",proto:!0,forced:i},{__defineSetter__:function(e,t){l.f(u(this),e,{set:a(t),enumerable:!0,configurable:!0})}})},9720:function(e,t,n){var r=n(2109),o=n(4699).entries;r({target:"Object",stat:!0},{entries:function(e){return o(e)}})},3371:function(e,t,n){var r=n(2109),o=n(6677),i=n(7293),a=n(111),u=n(2423).onFreeze,l=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){l(1)})),sham:!o},{freeze:function(e){return l&&a(e)?l(u(e)):e}})},8559:function(e,t,n){var r=n(2109),o=n(408),i=n(6135);r({target:"Object",stat:!0},{fromEntries:function(e){var t={};return o(e,(function(e,n){i(t,e,n)}),{AS_ENTRIES:!0}),t}})},5003:function(e,t,n){var r=n(2109),o=n(7293),i=n(5656),a=n(1236).f,u=n(9781);r({target:"Object",stat:!0,forced:!u||o((function(){a(1)})),sham:!u},{getOwnPropertyDescriptor:function(e,t){return a(i(e),t)}})},9337:function(e,t,n){var r=n(2109),o=n(9781),i=n(3887),a=n(5656),u=n(1236),l=n(6135);r({target:"Object",stat:!0,sham:!o},{getOwnPropertyDescriptors:function(e){for(var t,n,r=a(e),o=u.f,c=i(r),s={},f=0;c.length>f;)void 0!==(n=o(r,t=c[f++]))&&l(s,t,n);return s}})},6210:function(e,t,n){var r=n(2109),o=n(7293),i=n(1156).f;r({target:"Object",stat:!0,forced:o((function(){return!Object.getOwnPropertyNames(1)}))},{getOwnPropertyNames:i})},9660:function(e,t,n){var r=n(2109),o=n(6293),i=n(7293),a=n(5181),u=n(7908);r({target:"Object",stat:!0,forced:!o||i((function(){a.f(1)}))},{getOwnPropertySymbols:function(e){var t=a.f;return t?t(u(e)):[]}})},489:function(e,t,n){var r=n(2109),o=n(7293),i=n(7908),a=n(9518),u=n(8544);r({target:"Object",stat:!0,forced:o((function(){a(1)})),sham:!u},{getPrototypeOf:function(e){return a(i(e))}})},1825:function(e,t,n){var r=n(2109),o=n(2050);r({target:"Object",stat:!0,forced:Object.isExtensible!==o},{isExtensible:o})},8410:function(e,t,n){var r=n(2109),o=n(7293),i=n(111),a=n(4326),u=n(7556),l=Object.isFrozen;r({target:"Object",stat:!0,forced:u||o((function(){l(1)}))},{isFrozen:function(e){return!i(e)||!(!u||"ArrayBuffer"!=a(e))||!!l&&l(e)}})},2200:function(e,t,n){var r=n(2109),o=n(7293),i=n(111),a=n(4326),u=n(7556),l=Object.isSealed;r({target:"Object",stat:!0,forced:u||o((function(){l(1)}))},{isSealed:function(e){return!i(e)||!(!u||"ArrayBuffer"!=a(e))||!!l&&l(e)}})},3304:function(e,t,n){n(2109)({target:"Object",stat:!0},{is:n(1150)})},7941:function(e,t,n){var r=n(2109),o=n(7908),i=n(1956);r({target:"Object",stat:!0,forced:n(7293)((function(){i(1)}))},{keys:function(e){return i(o(e))}})},4869:function(e,t,n){"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(7908),u=n(4948),l=n(9518),c=n(1236).f;o&&r({target:"Object",proto:!0,forced:i},{__lookupGetter__:function(e){var t,n=a(this),r=u(e);do{if(t=c(n,r))return t.get}while(n=l(n))}})},3952:function(e,t,n){"use strict";var r=n(2109),o=n(9781),i=n(9026),a=n(7908),u=n(4948),l=n(9518),c=n(1236).f;o&&r({target:"Object",proto:!0,forced:i},{__lookupSetter__:function(e){var t,n=a(this),r=u(e);do{if(t=c(n,r))return t.set}while(n=l(n))}})},7227:function(e,t,n){var r=n(2109),o=n(111),i=n(2423).onFreeze,a=n(6677),u=n(7293),l=Object.preventExtensions;r({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!a},{preventExtensions:function(e){return l&&o(e)?l(i(e)):e}})},514:function(e,t,n){var r=n(2109),o=n(111),i=n(2423).onFreeze,a=n(6677),u=n(7293),l=Object.seal;r({target:"Object",stat:!0,forced:u((function(){l(1)})),sham:!a},{seal:function(e){return l&&o(e)?l(i(e)):e}})},1539:function(e,t,n){var r=n(1694),o=n(8052),i=n(288);r||o(Object.prototype,"toString",i,{unsafe:!0})},6833:function(e,t,n){var r=n(2109),o=n(4699).values;r({target:"Object",stat:!0},{values:function(e){return o(e)}})},4678:function(e,t,n){var r=n(2109),o=n(2814);r({global:!0,forced:parseFloat!=o},{parseFloat:o})},1058:function(e,t,n){var r=n(2109),o=n(3009);r({global:!0,forced:parseInt!=o},{parseInt:o})},821:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(9662),a=n(8523),u=n(2534),l=n(408);r({target:"Promise",stat:!0,forced:n(612)},{all:function(e){var t=this,n=a.f(t),r=n.resolve,c=n.reject,s=u((function(){var n=i(t.resolve),a=[],u=0,s=1;l(e,(function(e){var i=u++,l=!1;s++,o(n,t,e).then((function(e){l||(l=!0,a[i]=e,--s||r(a))}),c)})),--s||r(a)}));return s.error&&c(s.value),n.promise}})},4164:function(e,t,n){"use strict";var r=n(2109),o=n(1913),i=n(3702).CONSTRUCTOR,a=n(2492),u=n(5005),l=n(614),c=n(8052),s=a&&a.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(e){return this.then(void 0,e)}}),!o&&l(a)){var f=u("Promise").prototype.catch;s.catch!==f&&c(s,"catch",f,{unsafe:!0})}},3401:function(e,t,n){"use strict";var r,o,i,a=n(2109),u=n(1913),l=n(5268),c=n(7854),s=n(6916),f=n(8052),d=n(7674),p=n(8003),h=n(6340),v=n(9662),g=n(614),m=n(111),y=n(5787),b=n(6707),A=n(261).set,w=n(5948),C=n(842),x=n(2534),S=n(8572),k=n(9909),E=n(2492),P=n(3702),I=n(8523),_="Promise",T=P.CONSTRUCTOR,O=P.REJECTION_EVENT,R=P.SUBCLASSING,N=k.getterFor(_),z=k.set,M=E&&E.prototype,L=E,F=M,B=c.TypeError,D=c.document,j=c.process,U=I.f,G=U,Q=!!(D&&D.createEvent&&c.dispatchEvent),H="unhandledrejection",V=function(e){var t;return!(!m(e)||!g(t=e.then))&&t},W=function(e,t){var n,r,o,i=t.value,a=1==t.state,u=a?e.ok:e.fail,l=e.resolve,c=e.reject,f=e.domain;try{u?(a||(2===t.rejection&&K(t),t.rejection=1),!0===u?n=i:(f&&f.enter(),n=u(i),f&&(f.exit(),o=!0)),n===e.promise?c(B("Promise-chain cycle")):(r=V(n))?s(r,n,l,c):l(n)):c(i)}catch(e){f&&!o&&f.exit(),c(e)}},Y=function(e,t){e.notified||(e.notified=!0,w((function(){for(var n,r=e.reactions;n=r.get();)W(n,e);e.notified=!1,t&&!e.rejection&&$(e)})))},J=function(e,t,n){var r,o;Q?((r=D.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),c.dispatchEvent(r)):r={promise:t,reason:n},!O&&(o=c["on"+e])?o(r):e===H&&C("Unhandled promise rejection",n)},$=function(e){s(A,c,(function(){var t,n=e.facade,r=e.value;if(q(e)&&(t=x((function(){l?j.emit("unhandledRejection",r,n):J(H,n,r)})),e.rejection=l||q(e)?2:1,t.error))throw t.value}))},q=function(e){return 1!==e.rejection&&!e.parent},K=function(e){s(A,c,(function(){var t=e.facade;l?j.emit("rejectionHandled",t):J("rejectionhandled",t,e.value)}))},X=function(e,t,n){return function(r){e(t,r,n)}},Z=function(e,t,n){e.done||(e.done=!0,n&&(e=n),e.value=t,e.state=2,Y(e,!0))},ee=function(e,t,n){if(!e.done){e.done=!0,n&&(e=n);try{if(e.facade===t)throw B("Promise can't be resolved itself");var r=V(t);r?w((function(){var n={done:!1};try{s(r,t,X(ee,n,e),X(Z,n,e))}catch(t){Z(n,t,e)}})):(e.value=t,e.state=1,Y(e,!1))}catch(t){Z({done:!1},t,e)}}};if(T&&(F=(L=function(e){y(this,F),v(e),s(r,this);var t=N(this);try{e(X(ee,t),X(Z,t))}catch(e){Z(t,e)}}).prototype,(r=function(e){z(this,{type:_,done:!1,notified:!1,parent:!1,reactions:new S,rejection:!1,state:0,value:void 0})}).prototype=f(F,"then",(function(e,t){var n=N(this),r=U(b(this,L));return n.parent=!0,r.ok=!g(e)||e,r.fail=g(t)&&t,r.domain=l?j.domain:void 0,0==n.state?n.reactions.add(r):w((function(){W(r,n)})),r.promise})),o=function(){var e=new r,t=N(e);this.promise=e,this.resolve=X(ee,t),this.reject=X(Z,t)},I.f=U=function(e){return e===L||void 0===e?new o(e):G(e)},!u&&g(E)&&M!==Object.prototype)){i=M.then,R||f(M,"then",(function(e,t){var n=this;return new L((function(e,t){s(i,n,e,t)})).then(e,t)}),{unsafe:!0});try{delete M.constructor}catch(e){}d&&d(M,F)}a({global:!0,constructor:!0,wrap:!0,forced:T},{Promise:L}),p(L,_,!1,!0),h(_)},7727:function(e,t,n){"use strict";var r=n(2109),o=n(1913),i=n(2492),a=n(7293),u=n(5005),l=n(614),c=n(6707),s=n(9478),f=n(8052),d=i&&i.prototype;if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){d.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=c(this,u("Promise")),n=l(e);return this.then(n?function(n){return s(t,e()).then((function(){return n}))}:e,n?function(n){return s(t,e()).then((function(){throw n}))}:e)}}),!o&&l(i)){var p=u("Promise").prototype.finally;d.finally!==p&&f(d,"finally",p,{unsafe:!0})}},8674:function(e,t,n){n(3401),n(821),n(4164),n(6027),n(683),n(6294)},6027:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(9662),a=n(8523),u=n(2534),l=n(408);r({target:"Promise",stat:!0,forced:n(612)},{race:function(e){var t=this,n=a.f(t),r=n.reject,c=u((function(){var a=i(t.resolve);l(e,(function(e){o(a,t,e).then(n.resolve,r)}))}));return c.error&&r(c.value),n.promise}})},683:function(e,t,n){"use strict";var r=n(2109),o=n(6916),i=n(8523);r({target:"Promise",stat:!0,forced:n(3702).CONSTRUCTOR},{reject:function(e){var t=i.f(this);return o(t.reject,void 0,e),t.promise}})},6294:function(e,t,n){"use strict";var r=n(2109),o=n(5005),i=n(1913),a=n(2492),u=n(3702).CONSTRUCTOR,l=n(9478),c=o("Promise"),s=i&&!u;r({target:"Promise",stat:!0,forced:i||u},{resolve:function(e){return l(s&&this===c?a:this,e)}})},224:function(e,t,n){var r=n(2109),o=n(2104),i=n(9662),a=n(9670);r({target:"Reflect",stat:!0,forced:!n(7293)((function(){Reflect.apply((function(){}))}))},{apply:function(e,t,n){return o(i(e),t,a(n))}})},2419:function(e,t,n){var r=n(2109),o=n(5005),i=n(2104),a=n(7065),u=n(9483),l=n(9670),c=n(111),s=n(30),f=n(7293),d=o("Reflect","construct"),p=Object.prototype,h=[].push,v=f((function(){function e(){}return!(d((function(){}),[],e)instanceof e)})),g=!f((function(){d((function(){}))})),m=v||g;r({target:"Reflect",stat:!0,forced:m,sham:m},{construct:function(e,t){u(e),l(t);var n=arguments.length<3?e:u(arguments[2]);if(g&&!v)return d(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return i(h,r,t),new(i(a,e,r))}var o=n.prototype,f=s(c(o)?o:p),m=i(e,f,t);return c(m)?m:f}})},9596:function(e,t,n){var r=n(2109),o=n(9781),i=n(9670),a=n(4948),u=n(3070);r({target:"Reflect",stat:!0,forced:n(7293)((function(){Reflect.defineProperty(u.f({},1,{value:1}),1,{value:2})})),sham:!o},{defineProperty:function(e,t,n){i(e);var r=a(t);i(n);try{return u.f(e,r,n),!0}catch(e){return!1}}})},2586:function(e,t,n){var r=n(2109),o=n(9670),i=n(1236).f;r({target:"Reflect",stat:!0},{deleteProperty:function(e,t){var n=i(o(e),t);return!(n&&!n.configurable)&&delete e[t]}})},5683:function(e,t,n){var r=n(2109),o=n(9781),i=n(9670),a=n(1236);r({target:"Reflect",stat:!0,sham:!o},{getOwnPropertyDescriptor:function(e,t){return a.f(i(e),t)}})},9361:function(e,t,n){var r=n(2109),o=n(9670),i=n(9518);r({target:"Reflect",stat:!0,sham:!n(8544)},{getPrototypeOf:function(e){return i(o(e))}})},4819:function(e,t,n){var r=n(2109),o=n(6916),i=n(111),a=n(9670),u=n(5032),l=n(1236),c=n(9518);r({target:"Reflect",stat:!0},{get:function e(t,n){var r,s,f=arguments.length<3?t:arguments[2];return a(t)===f?t[n]:(r=l.f(t,n))?u(r)?r.value:void 0===r.get?void 0:o(r.get,f):i(s=c(t))?e(s,n,f):void 0}})},1037:function(e,t,n){n(2109)({target:"Reflect",stat:!0},{has:function(e,t){return t in e}})},5898:function(e,t,n){var r=n(2109),o=n(9670),i=n(2050);r({target:"Reflect",stat:!0},{isExtensible:function(e){return o(e),i(e)}})},7318:function(e,t,n){n(2109)({target:"Reflect",stat:!0},{ownKeys:n(3887)})},4361:function(e,t,n){var r=n(2109),o=n(5005),i=n(9670);r({target:"Reflect",stat:!0,sham:!n(6677)},{preventExtensions:function(e){i(e);try{var t=o("Object","preventExtensions");return t&&t(e),!0}catch(e){return!1}}})},9532:function(e,t,n){var r=n(2109),o=n(9670),i=n(6077),a=n(7674);a&&r({target:"Reflect",stat:!0},{setPrototypeOf:function(e,t){o(e),i(t);try{return a(e,t),!0}catch(e){return!1}}})},3593:function(e,t,n){var r=n(2109),o=n(6916),i=n(9670),a=n(111),u=n(5032),l=n(7293),c=n(3070),s=n(1236),f=n(9518),d=n(9114);r({target:"Reflect",stat:!0,forced:l((function(){var e=function(){},t=c.f(new e,"a",{configurable:!0});return!1!==Reflect.set(e.prototype,"a",1,t)}))},{set:function e(t,n,r){var l,p,h,v=arguments.length<4?t:arguments[3],g=s.f(i(t),n);if(!g){if(a(p=f(t)))return e(p,n,r,v);g=d(0)}if(u(g)){if(!1===g.writable||!a(v))return!1;if(l=s.f(v,n)){if(l.get||l.set||!1===l.writable)return!1;l.value=r,c.f(v,n,l)}else c.f(v,n,d(0,r))}else{if(void 0===(h=g.set))return!1;o(h,v,r)}return!0}})},4603:function(e,t,n){var r=n(9781),o=n(7854),i=n(1702),a=n(4705),u=n(9587),l=n(8880),c=n(8006).f,s=n(7976),f=n(7850),d=n(1340),p=n(4706),h=n(2999),v=n(2626),g=n(8052),m=n(7293),y=n(2597),b=n(9909).enforce,A=n(6340),w=n(5112),C=n(9441),x=n(7168),S=w("match"),k=o.RegExp,E=k.prototype,P=o.SyntaxError,I=i(E.exec),_=i("".charAt),T=i("".replace),O=i("".indexOf),R=i("".slice),N=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,z=/a/g,M=/a/g,L=new k(z)!==z,F=h.MISSED_STICKY,B=h.UNSUPPORTED_Y;if(a("RegExp",r&&(!L||F||C||x||m((function(){return M[S]=!1,k(z)!=z||k(M)==M||"/a/i"!=k(z,"i")}))))){for(var D=function(e,t){var n,r,o,i,a,c,h=s(E,this),v=f(e),g=void 0===t,m=[],A=e;if(!h&&v&&g&&e.constructor===D)return e;if((v||s(E,e))&&(e=e.source,g&&(t=p(A))),e=void 0===e?"":d(e),t=void 0===t?"":d(t),A=e,C&&"dotAll"in z&&(r=!!t&&O(t,"s")>-1)&&(t=T(t,/s/g,"")),n=t,F&&"sticky"in z&&(o=!!t&&O(t,"y")>-1)&&B&&(t=T(t,/y/g,"")),x&&(i=function(e){for(var t,n=e.length,r=0,o="",i=[],a={},u=!1,l=!1,c=0,s="";r<=n;r++){if("\\"===(t=_(e,r)))t+=_(e,++r);else if("]"===t)u=!1;else if(!u)switch(!0){case"["===t:u=!0;break;case"("===t:I(N,R(e,r+1))&&(r+=2,l=!0),o+=t,c++;continue;case">"===t&&l:if(""===s||y(a,s))throw new P("Invalid capture group name");a[s]=!0,i[i.length]=[s,c],l=!1,s="";continue}l?s+=t:o+=t}return[o,i]}(e),e=i[0],m=i[1]),a=u(k(e,t),h?this:E,D),(r||o||m.length)&&(c=b(a),r&&(c.dotAll=!0,c.raw=D(function(e){for(var t,n=e.length,r=0,o="",i=!1;r<=n;r++)"\\"!==(t=_(e,r))?i||"."!==t?("["===t?i=!0:"]"===t&&(i=!1),o+=t):o+="[\\s\\S]":o+=t+_(e,++r);return o}(e),n)),o&&(c.sticky=!0),m.length&&(c.groups=m)),e!==A)try{l(a,"source",""===A?"(?:)":A)}catch(e){}return a},j=c(k),U=0;j.length>U;)v(D,k,j[U++]);E.constructor=D,D.prototype=E,g(o,"RegExp",D,{constructor:!0})}A("RegExp")},4916:function(e,t,n){"use strict";var r=n(2109),o=n(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},2087:function(e,t,n){var r=n(7854),o=n(9781),i=n(7045),a=n(7066),u=n(7293),l=r.RegExp,c=l.prototype;o&&u((function(){var e=!0;try{l(".","d")}catch(t){e=!1}var t={},n="",r=e?"dgimsy":"gimsy",o=function(e,r){Object.defineProperty(t,e,{get:function(){return n+=r,!0}})},i={dotAll:"s",global:"g",ignoreCase:"i",multiline:"m",sticky:"y"};for(var a in e&&(i.hasIndices="d"),i)o(a,i[a]);return Object.getOwnPropertyDescriptor(c,"flags").get.call(t)!==r||n!==r}))&&i(c,"flags",{configurable:!0,get:a})},9714:function(e,t,n){"use strict";var r=n(6530).PROPER,o=n(8052),i=n(9670),a=n(1340),u=n(7293),l=n(4706),c="toString",s=RegExp.prototype[c],f=u((function(){return"/a/b"!=s.call({source:"a",flags:"b"})})),d=r&&s.name!=c;(f||d)&&o(RegExp.prototype,c,(function(){var e=i(this);return"/"+a(e.source)+"/"+a(l(e))}),{unsafe:!0})},143:function(e,t,n){"use strict";n(7710)("Set",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(5631))},189:function(e,t,n){n(143)},5218:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("anchor")},{anchor:function(e){return o(this,"a","name",e)}})},4475:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("big")},{big:function(){return o(this,"big","","")}})},7929:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("blink")},{blink:function(){return o(this,"blink","","")}})},915:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("bold")},{bold:function(){return o(this,"b","","")}})},9841:function(e,t,n){"use strict";var r=n(2109),o=n(8710).codeAt;r({target:"String",proto:!0},{codePointAt:function(e){return o(this,e)}})},7852:function(e,t,n){"use strict";var r,o=n(2109),i=n(1470),a=n(1236).f,u=n(7466),l=n(1340),c=n(3929),s=n(4488),f=n(4964),d=n(1913),p=i("".endsWith),h=i("".slice),v=Math.min,g=f("endsWith");o({target:"String",proto:!0,forced:!(!d&&!g&&(r=a(String.prototype,"endsWith"),r&&!r.writable)||g)},{endsWith:function(e){var t=l(s(this));c(e);var n=arguments.length>1?arguments[1]:void 0,r=t.length,o=void 0===n?r:v(u(n),r),i=l(e);return p?p(t,i,o):h(t,o-i.length,o)===i}})},9253:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("fixed")},{fixed:function(){return o(this,"tt","","")}})},2125:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontcolor")},{fontcolor:function(e){return o(this,"font","color",e)}})},8830:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("fontsize")},{fontsize:function(e){return o(this,"font","size",e)}})},4953:function(e,t,n){var r=n(2109),o=n(1702),i=n(1400),a=RangeError,u=String.fromCharCode,l=String.fromCodePoint,c=o([].join);r({target:"String",stat:!0,arity:1,forced:!!l&&1!=l.length},{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,o=0;r>o;){if(t=+arguments[o++],i(t,1114111)!==t)throw a(t+" is not a valid code point");n[o]=t<65536?u(t):u(55296+((t-=65536)>>10),t%1024+56320)}return c(n,"")}})},2023:function(e,t,n){"use strict";var r=n(2109),o=n(1702),i=n(3929),a=n(4488),u=n(1340),l=n(4964),c=o("".indexOf);r({target:"String",proto:!0,forced:!l("includes")},{includes:function(e){return!!~c(u(a(this)),u(i(e)),arguments.length>1?arguments[1]:void 0)}})},8734:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("italics")},{italics:function(){return o(this,"i","","")}})},8783:function(e,t,n){"use strict";var r=n(8710).charAt,o=n(1340),i=n(9909),a=n(1656),u=n(6178),l="String Iterator",c=i.set,s=i.getterFor(l);a(String,"String",(function(e){c(this,{type:l,string:o(e),index:0})}),(function(){var e,t=s(this),n=t.string,o=t.index;return o>=n.length?u(void 0,!0):(e=r(n,o),t.index+=e.length,u(e,!1))}))},9254:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("link")},{link:function(e){return o(this,"a","href",e)}})},4723:function(e,t,n){"use strict";var r=n(6916),o=n(7007),i=n(9670),a=n(8554),u=n(7466),l=n(1340),c=n(4488),s=n(8173),f=n(1530),d=n(7651);o("match",(function(e,t,n){return[function(t){var n=c(this),o=a(t)?void 0:s(t,e);return o?r(o,t,n):new RegExp(t)[e](l(n))},function(e){var r=i(this),o=l(e),a=n(t,r,o);if(a.done)return a.value;if(!r.global)return d(r,o);var c=r.unicode;r.lastIndex=0;for(var s,p=[],h=0;null!==(s=d(r,o));){var v=l(s[0]);p[h]=v,""===v&&(r.lastIndex=f(o,u(r.lastIndex),c)),h++}return 0===h?null:p}]}))},6528:function(e,t,n){"use strict";var r=n(2109),o=n(6650).end;r({target:"String",proto:!0,forced:n(7061)},{padEnd:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},3112:function(e,t,n){"use strict";var r=n(2109),o=n(6650).start;r({target:"String",proto:!0,forced:n(7061)},{padStart:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}})},8992:function(e,t,n){var r=n(2109),o=n(1702),i=n(5656),a=n(7908),u=n(1340),l=n(6244),c=o([].push),s=o([].join);r({target:"String",stat:!0},{raw:function(e){var t=i(a(e).raw),n=l(t);if(!n)return"";for(var r=arguments.length,o=[],f=0;;){if(c(o,u(t[f++])),f===n)return s(o,"");f<r&&c(o,u(arguments[f]))}}})},2481:function(e,t,n){n(2109)({target:"String",proto:!0},{repeat:n(8415)})},5306:function(e,t,n){"use strict";var r=n(2104),o=n(6916),i=n(1702),a=n(7007),u=n(7293),l=n(9670),c=n(614),s=n(8554),f=n(9303),d=n(7466),p=n(1340),h=n(4488),v=n(1530),g=n(8173),m=n(647),y=n(7651),b=n(5112)("replace"),A=Math.max,w=Math.min,C=i([].concat),x=i([].push),S=i("".indexOf),k=i("".slice),E="$0"==="a".replace(/./,"$0"),P=!!/./[b]&&""===/./[b]("a","$0");a("replace",(function(e,t,n){var i=P?"$":"$0";return[function(e,n){var r=h(this),i=s(e)?void 0:g(e,b);return i?o(i,e,r,n):o(t,p(r),e,n)},function(e,o){var a=l(this),u=p(e);if("string"==typeof o&&-1===S(o,i)&&-1===S(o,"$<")){var s=n(t,a,u,o);if(s.done)return s.value}var h=c(o);h||(o=p(o));var g=a.global;if(g){var b=a.unicode;a.lastIndex=0}for(var E=[];;){var P=y(a,u);if(null===P)break;if(x(E,P),!g)break;""===p(P[0])&&(a.lastIndex=v(u,d(a.lastIndex),b))}for(var I,_="",T=0,O=0;O<E.length;O++){for(var R=p((P=E[O])[0]),N=A(w(f(P.index),u.length),0),z=[],M=1;M<P.length;M++)x(z,void 0===(I=P[M])?I:String(I));var L=P.groups;if(h){var F=C([R],z,N,u);void 0!==L&&x(F,L);var B=p(r(o,void 0,F))}else B=m(R,u,N,z,L,o);N>=T&&(_+=k(u,T,N)+B,T=N+R.length)}return _+k(u,T)}]}),!!u((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")}))||!E||P)},4765:function(e,t,n){"use strict";var r=n(6916),o=n(7007),i=n(9670),a=n(8554),u=n(4488),l=n(1150),c=n(1340),s=n(8173),f=n(7651);o("search",(function(e,t,n){return[function(t){var n=u(this),o=a(t)?void 0:s(t,e);return o?r(o,t,n):new RegExp(t)[e](c(n))},function(e){var r=i(this),o=c(e),a=n(t,r,o);if(a.done)return a.value;var u=r.lastIndex;l(u,0)||(r.lastIndex=0);var s=f(r,o);return l(r.lastIndex,u)||(r.lastIndex=u),null===s?-1:s.index}]}))},7268:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("small")},{small:function(){return o(this,"small","","")}})},3123:function(e,t,n){"use strict";var r=n(2104),o=n(6916),i=n(1702),a=n(7007),u=n(9670),l=n(8554),c=n(7850),s=n(4488),f=n(6707),d=n(1530),p=n(7466),h=n(1340),v=n(8173),g=n(1589),m=n(7651),y=n(2261),b=n(2999),A=n(7293),w=b.UNSUPPORTED_Y,C=4294967295,x=Math.min,S=[].push,k=i(/./.exec),E=i(S),P=i("".slice),I=!A((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2!==n.length||"a"!==n[0]||"b"!==n[1]}));a("split",(function(e,t,n){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,n){var i=h(s(this)),a=void 0===n?C:n>>>0;if(0===a)return[];if(void 0===e)return[i];if(!c(e))return o(t,i,e,a);for(var u,l,f,d=[],p=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),v=0,m=new RegExp(e.source,p+"g");(u=o(y,m,i))&&!((l=m.lastIndex)>v&&(E(d,P(i,v,u.index)),u.length>1&&u.index<i.length&&r(S,d,g(u,1)),f=u[0].length,v=l,d.length>=a));)m.lastIndex===u.index&&m.lastIndex++;return v===i.length?!f&&k(m,"")||E(d,""):E(d,P(i,v)),d.length>a?g(d,0,a):d}:"0".split(void 0,0).length?function(e,n){return void 0===e&&0===n?[]:o(t,this,e,n)}:t,[function(t,n){var r=s(this),a=l(t)?void 0:v(t,e);return a?o(a,t,r,n):o(i,h(r),t,n)},function(e,r){var o=u(this),a=h(e),l=n(i,o,a,r,i!==t);if(l.done)return l.value;var c=f(o,RegExp),s=o.unicode,v=(o.ignoreCase?"i":"")+(o.multiline?"m":"")+(o.unicode?"u":"")+(w?"g":"y"),g=new c(w?"^(?:"+o.source+")":o,v),y=void 0===r?C:r>>>0;if(0===y)return[];if(0===a.length)return null===m(g,a)?[a]:[];for(var b=0,A=0,S=[];A<a.length;){g.lastIndex=w?0:A;var k,I=m(g,w?P(a,A):a);if(null===I||(k=x(p(g.lastIndex+(w?A:0)),a.length))===b)A=d(a,A,s);else{if(E(S,P(a,b,A)),S.length===y)return S;for(var _=1;_<=I.length-1;_++)if(E(S,I[_]),S.length===y)return S;A=b=k}}return E(S,P(a,b)),S}]}),!I,w)},6755:function(e,t,n){"use strict";var r,o=n(2109),i=n(1470),a=n(1236).f,u=n(7466),l=n(1340),c=n(3929),s=n(4488),f=n(4964),d=n(1913),p=i("".startsWith),h=i("".slice),v=Math.min,g=f("startsWith");o({target:"String",proto:!0,forced:!(!d&&!g&&(r=a(String.prototype,"startsWith"),r&&!r.writable)||g)},{startsWith:function(e){var t=l(s(this));c(e);var n=u(v(arguments.length>1?arguments[1]:void 0,t.length)),r=l(e);return p?p(t,r,n):h(t,n,n+r.length)===r}})},7397:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("strike")},{strike:function(){return o(this,"strike","","")}})},86:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("sub")},{sub:function(){return o(this,"sub","","")}})},623:function(e,t,n){"use strict";var r=n(2109),o=n(4230);r({target:"String",proto:!0,forced:n(3429)("sup")},{sup:function(){return o(this,"sup","","")}})},8702:function(e,t,n){n(3462);var r=n(2109),o=n(365);r({target:"String",proto:!0,name:"trimEnd",forced:"".trimEnd!==o},{trimEnd:o})},9967:function(e,t,n){var r=n(2109),o=n(3217);r({target:"String",proto:!0,name:"trimStart",forced:"".trimLeft!==o},{trimLeft:o})},3462:function(e,t,n){var r=n(2109),o=n(365);r({target:"String",proto:!0,name:"trimEnd",forced:"".trimRight!==o},{trimRight:o})},5674:function(e,t,n){n(9967);var r=n(2109),o=n(3217);r({target:"String",proto:!0,name:"trimStart",forced:"".trimStart!==o},{trimStart:o})},3210:function(e,t,n){"use strict";var r=n(2109),o=n(3111).trim;r({target:"String",proto:!0,forced:n(6091)("trim")},{trim:function(){return o(this)}})},2443:function(e,t,n){n(6800)("asyncIterator")},4032:function(e,t,n){"use strict";var r=n(2109),o=n(7854),i=n(6916),a=n(1702),u=n(1913),l=n(9781),c=n(6293),s=n(7293),f=n(2597),d=n(7976),p=n(9670),h=n(5656),v=n(4948),g=n(1340),m=n(9114),y=n(30),b=n(1956),A=n(8006),w=n(1156),C=n(5181),x=n(1236),S=n(3070),k=n(6048),E=n(5296),P=n(8052),I=n(2309),_=n(6200),T=n(3501),O=n(9711),R=n(5112),N=n(6061),z=n(6800),M=n(6532),L=n(8003),F=n(9909),B=n(2092).forEach,D=_("hidden"),j="Symbol",U="prototype",G=F.set,Q=F.getterFor(j),H=Object[U],V=o.Symbol,W=V&&V[U],Y=o.TypeError,J=o.QObject,$=x.f,q=S.f,K=w.f,X=E.f,Z=a([].push),ee=I("symbols"),te=I("op-symbols"),ne=I("wks"),re=!J||!J[U]||!J[U].findChild,oe=l&&s((function(){return 7!=y(q({},"a",{get:function(){return q(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=$(H,t);r&&delete H[t],q(e,t,n),r&&e!==H&&q(H,t,r)}:q,ie=function(e,t){var n=ee[e]=y(W);return G(n,{type:j,tag:e,description:t}),l||(n.description=t),n},ae=function(e,t,n){e===H&&ae(te,t,n),p(e);var r=v(t);return p(n),f(ee,r)?(n.enumerable?(f(e,D)&&e[D][r]&&(e[D][r]=!1),n=y(n,{enumerable:m(0,!1)})):(f(e,D)||q(e,D,m(1,{})),e[D][r]=!0),oe(e,r,n)):q(e,r,n)},ue=function(e,t){p(e);var n=h(t),r=b(n).concat(fe(n));return B(r,(function(t){l&&!i(le,n,t)||ae(e,t,n[t])})),e},le=function(e){var t=v(e),n=i(X,this,t);return!(this===H&&f(ee,t)&&!f(te,t))&&(!(n||!f(this,t)||!f(ee,t)||f(this,D)&&this[D][t])||n)},ce=function(e,t){var n=h(e),r=v(t);if(n!==H||!f(ee,r)||f(te,r)){var o=$(n,r);return!o||!f(ee,r)||f(n,D)&&n[D][r]||(o.enumerable=!0),o}},se=function(e){var t=K(h(e)),n=[];return B(t,(function(e){f(ee,e)||f(T,e)||Z(n,e)})),n},fe=function(e){var t=e===H,n=K(t?te:h(e)),r=[];return B(n,(function(e){!f(ee,e)||t&&!f(H,e)||Z(r,ee[e])})),r};c||(V=function(){if(d(W,this))throw Y("Symbol is not a constructor");var e=arguments.length&&void 0!==arguments[0]?g(arguments[0]):void 0,t=O(e),n=function(e){this===H&&i(n,te,e),f(this,D)&&f(this[D],t)&&(this[D][t]=!1),oe(this,t,m(1,e))};return l&&re&&oe(H,t,{configurable:!0,set:n}),ie(t,e)},P(W=V[U],"toString",(function(){return Q(this).tag})),P(V,"withoutSetter",(function(e){return ie(O(e),e)})),E.f=le,S.f=ae,k.f=ue,x.f=ce,A.f=w.f=se,C.f=fe,N.f=function(e){return ie(R(e),e)},l&&(q(W,"description",{configurable:!0,get:function(){return Q(this).description}}),u||P(H,"propertyIsEnumerable",le,{unsafe:!0}))),r({global:!0,constructor:!0,wrap:!0,forced:!c,sham:!c},{Symbol:V}),B(b(ne),(function(e){z(e)})),r({target:j,stat:!0,forced:!c},{useSetter:function(){re=!0},useSimple:function(){re=!1}}),r({target:"Object",stat:!0,forced:!c,sham:!l},{create:function(e,t){return void 0===t?y(e):ue(y(e),t)},defineProperty:ae,defineProperties:ue,getOwnPropertyDescriptor:ce}),r({target:"Object",stat:!0,forced:!c},{getOwnPropertyNames:se}),M(),L(V,j),T[D]=!0},1817:function(e,t,n){"use strict";var r=n(2109),o=n(9781),i=n(7854),a=n(1702),u=n(2597),l=n(614),c=n(7976),s=n(1340),f=n(3070).f,d=n(9920),p=i.Symbol,h=p&&p.prototype;if(o&&l(p)&&(!("description"in h)||void 0!==p().description)){var v={},g=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:s(arguments[0]),t=c(h,this)?new p(e):void 0===e?p():p(e);return""===e&&(v[t]=!0),t};d(g,p),g.prototype=h,h.constructor=g;var m="Symbol(test)"==String(p("test")),y=a(h.valueOf),b=a(h.toString),A=/^Symbol\((.*)\)[^)]+$/,w=a("".replace),C=a("".slice);f(h,"description",{configurable:!0,get:function(){var e=y(this);if(u(v,e))return"";var t=b(e),n=m?C(t,7,-1):w(t,A,"$1");return""===n?void 0:n}}),r({global:!0,constructor:!0,forced:!0},{Symbol:g})}},763:function(e,t,n){var r=n(2109),o=n(5005),i=n(2597),a=n(1340),u=n(2309),l=n(2015),c=u("string-to-symbol-registry"),s=u("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!l},{for:function(e){var t=a(e);if(i(c,t))return c[t];var n=o("Symbol")(t);return c[t]=n,s[n]=t,n}})},2401:function(e,t,n){n(6800)("hasInstance")},8722:function(e,t,n){n(6800)("isConcatSpreadable")},2165:function(e,t,n){n(6800)("iterator")},2526:function(e,t,n){n(4032),n(763),n(6620),n(8862),n(9660)},6620:function(e,t,n){var r=n(2109),o=n(2597),i=n(2190),a=n(6330),u=n(2309),l=n(2015),c=u("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!l},{keyFor:function(e){if(!i(e))throw TypeError(a(e)+" is not a symbol");if(o(c,e))return c[e]}})},9007:function(e,t,n){n(6800)("match")},3510:function(e,t,n){n(6800)("replace")},1840:function(e,t,n){n(6800)("search")},6982:function(e,t,n){n(6800)("species")},2159:function(e,t,n){n(6800)("split")},6649:function(e,t,n){var r=n(6800),o=n(6532);r("toPrimitive"),o()},9341:function(e,t,n){var r=n(5005),o=n(6800),i=n(8003);o("toStringTag"),i(r("Symbol"),"Symbol")},543:function(e,t,n){n(6800)("unscopables")},2990:function(e,t,n){"use strict";var r=n(1702),o=n(260),i=r(n(1048)),a=o.aTypedArray;(0,o.exportTypedArrayMethod)("copyWithin",(function(e,t){return i(a(this),e,t,arguments.length>2?arguments[2]:void 0)}))},8927:function(e,t,n){"use strict";var r=n(260),o=n(2092).every,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("every",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},3105:function(e,t,n){"use strict";var r=n(260),o=n(1285),i=n(4599),a=n(648),u=n(6916),l=n(1702),c=n(7293),s=r.aTypedArray,f=r.exportTypedArrayMethod,d=l("".slice);f("fill",(function(e){var t=arguments.length;s(this);var n="Big"===d(a(this),0,3)?i(e):+e;return u(o,this,n,t>1?arguments[1]:void 0,t>2?arguments[2]:void 0)}),c((function(){var e=0;return new Int8Array(2).fill({valueOf:function(){return e++}}),1!==e})))},5035:function(e,t,n){"use strict";var r=n(260),o=n(2092).filter,i=n(3074),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("filter",(function(e){var t=o(a(this),e,arguments.length>1?arguments[1]:void 0);return i(this,t)}))},7174:function(e,t,n){"use strict";var r=n(260),o=n(2092).findIndex,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("findIndex",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},4345:function(e,t,n){"use strict";var r=n(260),o=n(2092).find,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("find",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},4197:function(e,t,n){n(9843)("Float32",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},6495:function(e,t,n){n(9843)("Float64",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},2846:function(e,t,n){"use strict";var r=n(260),o=n(2092).forEach,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("forEach",(function(e){o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},8145:function(e,t,n){"use strict";var r=n(3832);(0,n(260).exportTypedArrayStaticMethod)("from",n(7321),r)},4731:function(e,t,n){"use strict";var r=n(260),o=n(1318).includes,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("includes",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},7209:function(e,t,n){"use strict";var r=n(260),o=n(1318).indexOf,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("indexOf",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},5109:function(e,t,n){n(9843)("Int16",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},5125:function(e,t,n){n(9843)("Int32",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},7145:function(e,t,n){n(9843)("Int8",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},6319:function(e,t,n){"use strict";var r=n(7854),o=n(7293),i=n(1702),a=n(260),u=n(6992),l=n(5112)("iterator"),c=r.Uint8Array,s=i(u.values),f=i(u.keys),d=i(u.entries),p=a.aTypedArray,h=a.exportTypedArrayMethod,v=c&&c.prototype,g=!o((function(){v[l].call([1])})),m=!!v&&v.values&&v[l]===v.values&&"values"===v.values.name,y=function(){return s(p(this))};h("entries",(function(){return d(p(this))}),g),h("keys",(function(){return f(p(this))}),g),h("values",y,g||!m,{name:"values"}),h(l,y,g||!m,{name:"values"})},8867:function(e,t,n){"use strict";var r=n(260),o=n(1702),i=r.aTypedArray,a=r.exportTypedArrayMethod,u=o([].join);a("join",(function(e){return u(i(this),e)}))},7789:function(e,t,n){"use strict";var r=n(260),o=n(2104),i=n(6583),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("lastIndexOf",(function(e){var t=arguments.length;return o(i,a(this),t>1?[e,arguments[1]]:[e])}))},3739:function(e,t,n){"use strict";var r=n(260),o=n(2092).map,i=n(6304),a=r.aTypedArray;(0,r.exportTypedArrayMethod)("map",(function(e){return o(a(this),e,arguments.length>1?arguments[1]:void 0,(function(e,t){return new(i(e))(t)}))}))},5206:function(e,t,n){"use strict";var r=n(260),o=n(3832),i=r.aTypedArrayConstructor;(0,r.exportTypedArrayStaticMethod)("of",(function(){for(var e=0,t=arguments.length,n=new(i(this))(t);t>e;)n[e]=arguments[e++];return n}),o)},4483:function(e,t,n){"use strict";var r=n(260),o=n(3671).right,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduceRight",(function(e){var t=arguments.length;return o(i(this),e,t,t>1?arguments[1]:void 0)}))},9368:function(e,t,n){"use strict";var r=n(260),o=n(3671).left,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("reduce",(function(e){var t=arguments.length;return o(i(this),e,t,t>1?arguments[1]:void 0)}))},2056:function(e,t,n){"use strict";var r=n(260),o=r.aTypedArray,i=r.exportTypedArrayMethod,a=Math.floor;i("reverse",(function(){for(var e,t=this,n=o(t).length,r=a(n/2),i=0;i<r;)e=t[i],t[i++]=t[--n],t[n]=e;return t}))},4141:function(e,t,n){"use strict";var r=n(7854),o=n(6916),i=n(260),a=n(6244),u=n(4590),l=n(7908),c=n(7293),s=r.RangeError,f=r.Int8Array,d=f&&f.prototype,p=d&&d.set,h=i.aTypedArray,v=i.exportTypedArrayMethod,g=!c((function(){var e=new Uint8ClampedArray(2);return o(p,e,{length:1,0:3},1),3!==e[1]})),m=g&&i.NATIVE_ARRAY_BUFFER_VIEWS&&c((function(){var e=new f(2);return e.set(1),e.set("2",1),0!==e[0]||2!==e[1]}));v("set",(function(e){h(this);var t=u(arguments.length>1?arguments[1]:void 0,1),n=l(e);if(g)return o(p,this,n,t);var r=this.length,i=a(n),c=0;if(i+t>r)throw s("Wrong length");for(;c<i;)this[t+c]=n[c++]}),!g||m)},678:function(e,t,n){"use strict";var r=n(260),o=n(6304),i=n(7293),a=n(206),u=r.aTypedArray;(0,r.exportTypedArrayMethod)("slice",(function(e,t){for(var n=a(u(this),e,t),r=o(this),i=0,l=n.length,c=new r(l);l>i;)c[i]=n[i++];return c}),i((function(){new Int8Array(1).slice()})))},7462:function(e,t,n){"use strict";var r=n(260),o=n(2092).some,i=r.aTypedArray;(0,r.exportTypedArrayMethod)("some",(function(e){return o(i(this),e,arguments.length>1?arguments[1]:void 0)}))},3824:function(e,t,n){"use strict";var r=n(7854),o=n(1470),i=n(7293),a=n(9662),u=n(4362),l=n(260),c=n(8886),s=n(256),f=n(7392),d=n(8008),p=l.aTypedArray,h=l.exportTypedArrayMethod,v=r.Uint16Array,g=v&&o(v.prototype.sort),m=!(!g||i((function(){g(new v(2),null)}))&&i((function(){g(new v(2),{})}))),y=!!g&&!i((function(){if(f)return f<74;if(c)return c<67;if(s)return!0;if(d)return d<602;var e,t,n=new v(516),r=Array(516);for(e=0;e<516;e++)t=e%4,n[e]=515-e,r[e]=e-2*t+3;for(g(n,(function(e,t){return(e/4|0)-(t/4|0)})),e=0;e<516;e++)if(n[e]!==r[e])return!0}));h("sort",(function(e){return void 0!==e&&a(e),y?g(this,e):u(p(this),function(e){return function(t,n){return void 0!==e?+e(t,n)||0:n!=n?-1:t!=t?1:0===t&&0===n?1/t>0&&1/n<0?1:-1:t>n}}(e))}),!y||m)},5021:function(e,t,n){"use strict";var r=n(260),o=n(7466),i=n(1400),a=n(6304),u=r.aTypedArray;(0,r.exportTypedArrayMethod)("subarray",(function(e,t){var n=u(this),r=n.length,l=i(e,r);return new(a(n))(n.buffer,n.byteOffset+l*n.BYTES_PER_ELEMENT,o((void 0===t?r:i(t,r))-l))}))},2974:function(e,t,n){"use strict";var r=n(7854),o=n(2104),i=n(260),a=n(7293),u=n(206),l=r.Int8Array,c=i.aTypedArray,s=i.exportTypedArrayMethod,f=[].toLocaleString,d=!!l&&a((function(){f.call(new l(1))}));s("toLocaleString",(function(){return o(f,d?u(c(this)):c(this),u(arguments))}),a((function(){return[1,2].toLocaleString()!=new l([1,2]).toLocaleString()}))||!a((function(){l.prototype.toLocaleString.call([1,2])})))},5016:function(e,t,n){"use strict";var r=n(260).exportTypedArrayMethod,o=n(7293),i=n(7854),a=n(1702),u=i.Uint8Array,l=u&&u.prototype||{},c=[].toString,s=a([].join);o((function(){c.call({})}))&&(c=function(){return s(this)});var f=l.toString!=c;r("toString",c,f)},8255:function(e,t,n){n(9843)("Uint16",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},9135:function(e,t,n){n(9843)("Uint32",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},2472:function(e,t,n){n(9843)("Uint8",(function(e){return function(t,n,r){return e(this,t,n,r)}}))},9743:function(e,t,n){n(9843)("Uint8",(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},1202:function(e,t,n){"use strict";var r,o=n(6677),i=n(7854),a=n(1702),u=n(9190),l=n(2423),c=n(7710),s=n(9320),f=n(111),d=n(9909).enforce,p=n(7293),h=n(4811),v=Object,g=Array.isArray,m=v.isExtensible,y=v.isFrozen,b=v.isSealed,A=v.freeze,w=v.seal,C={},x={},S=!i.ActiveXObject&&"ActiveXObject"in i,k=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},E=c("WeakMap",k,s),P=E.prototype,I=a(P.set);if(h)if(S){r=s.getConstructor(k,"WeakMap",!0),l.enable();var _=a(P.delete),T=a(P.has),O=a(P.get);u(P,{delete:function(e){if(f(e)&&!m(e)){var t=d(this);return t.frozen||(t.frozen=new r),_(this,e)||t.frozen.delete(e)}return _(this,e)},has:function(e){if(f(e)&&!m(e)){var t=d(this);return t.frozen||(t.frozen=new r),T(this,e)||t.frozen.has(e)}return T(this,e)},get:function(e){if(f(e)&&!m(e)){var t=d(this);return t.frozen||(t.frozen=new r),T(this,e)?O(this,e):t.frozen.get(e)}return O(this,e)},set:function(e,t){if(f(e)&&!m(e)){var n=d(this);n.frozen||(n.frozen=new r),T(this,e)?I(this,e,t):n.frozen.set(e,t)}else I(this,e,t);return this}})}else o&&p((function(){var e=A([]);return I(new E,e,1),!y(e)}))&&u(P,{set:function(e,t){var n;return g(e)&&(y(e)?n=C:b(e)&&(n=x)),I(this,e,t),n==C&&A(e),n==x&&w(e),this}})},4129:function(e,t,n){n(1202)},2098:function(e,t,n){"use strict";n(7710)("WeakSet",(function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}}),n(9320))},8478:function(e,t,n){n(2098)},1091:function(e,t,n){var r=n(2109),o=n(7854),i=n(261).clear;r({global:!0,bind:!0,enumerable:!0,forced:o.clearImmediate!==i},{clearImmediate:i})},4747:function(e,t,n){var r=n(7854),o=n(8324),i=n(8509),a=n(8533),u=n(8880),l=function(e){if(e&&e.forEach!==a)try{u(e,"forEach",a)}catch(t){e.forEach=a}};for(var c in o)o[c]&&l(r[c]&&r[c].prototype);l(i)},3948:function(e,t,n){var r=n(7854),o=n(8324),i=n(8509),a=n(6992),u=n(8880),l=n(5112),c=l("iterator"),s=l("toStringTag"),f=a.values,d=function(e,t){if(e){if(e[c]!==f)try{u(e,c,f)}catch(t){e[c]=f}if(e[s]||u(e,s,t),o[t])for(var n in a)if(e[n]!==a[n])try{u(e,n,a[n])}catch(t){e[n]=a[n]}}};for(var p in o)d(r[p]&&r[p].prototype,p);d(i,"DOMTokenList")},4633:function(e,t,n){n(1091),n(2986)},5844:function(e,t,n){var r=n(2109),o=n(7854),i=n(5948),a=n(9662),u=n(8053),l=n(5268),c=o.process;r({global:!0,enumerable:!0,dontCallGetSet:!0},{queueMicrotask:function(e){u(arguments.length,1),a(e);var t=l&&c.domain;i(t?t.bind(e):e)}})},2986:function(e,t,n){var r=n(2109),o=n(7854),i=n(261).set,a=n(7152),u=o.setImmediate?a(i,!1):i;r({global:!0,bind:!0,enumerable:!0,forced:o.setImmediate!==u},{setImmediate:u})},5556:function(e,t,n){"use strict";n(6992);var r=n(2109),o=n(7854),i=n(6916),a=n(1702),u=n(9781),l=n(5143),c=n(8052),s=n(9190),f=n(8003),d=n(3061),p=n(9909),h=n(5787),v=n(614),g=n(2597),m=n(9974),y=n(648),b=n(9670),A=n(111),w=n(1340),C=n(30),x=n(9114),S=n(4121),k=n(1246),E=n(8053),P=n(5112),I=n(4362),_=P("iterator"),T="URLSearchParams",O=T+"Iterator",R=p.set,N=p.getterFor(T),z=p.getterFor(O),M=Object.getOwnPropertyDescriptor,L=function(e){if(!u)return o[e];var t=M(o,e);return t&&t.value},F=L("fetch"),B=L("Request"),D=L("Headers"),j=B&&B.prototype,U=D&&D.prototype,G=o.RegExp,Q=o.TypeError,H=o.decodeURIComponent,V=o.encodeURIComponent,W=a("".charAt),Y=a([].join),J=a([].push),$=a("".replace),q=a([].shift),K=a([].splice),X=a("".split),Z=a("".slice),ee=/\+/g,te=Array(4),ne=function(e){return te[e-1]||(te[e-1]=G("((?:%[\\da-f]{2}){"+e+"})","gi"))},re=function(e){try{return H(e)}catch(t){return e}},oe=function(e){var t=$(e,ee," "),n=4;try{return H(t)}catch(e){for(;n;)t=$(t,ne(n--),re);return t}},ie=/[!'()~]|%20/g,ae={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},ue=function(e){return ae[e]},le=function(e){return $(V(e),ie,ue)},ce=d((function(e,t){R(this,{type:O,iterator:S(N(e).entries),kind:t})}),"Iterator",(function(){var e=z(this),t=e.kind,n=e.iterator.next(),r=n.value;return n.done||(n.value="keys"===t?r.key:"values"===t?r.value:[r.key,r.value]),n}),!0),se=function(e){this.entries=[],this.url=null,void 0!==e&&(A(e)?this.parseObject(e):this.parseQuery("string"==typeof e?"?"===W(e,0)?Z(e,1):e:w(e)))};se.prototype={type:T,bindURL:function(e){this.url=e,this.update()},parseObject:function(e){var t,n,r,o,a,u,l,c=k(e);if(c)for(n=(t=S(e,c)).next;!(r=i(n,t)).done;){if(a=(o=S(b(r.value))).next,(u=i(a,o)).done||(l=i(a,o)).done||!i(a,o).done)throw Q("Expected sequence with length 2");J(this.entries,{key:w(u.value),value:w(l.value)})}else for(var s in e)g(e,s)&&J(this.entries,{key:s,value:w(e[s])})},parseQuery:function(e){if(e)for(var t,n,r=X(e,"&"),o=0;o<r.length;)(t=r[o++]).length&&(n=X(t,"="),J(this.entries,{key:oe(q(n)),value:oe(Y(n,"="))}))},serialize:function(){for(var e,t=this.entries,n=[],r=0;r<t.length;)e=t[r++],J(n,le(e.key)+"="+le(e.value));return Y(n,"&")},update:function(){this.entries.length=0,this.parseQuery(this.url.query)},updateURL:function(){this.url&&this.url.update()}};var fe=function(){h(this,de);var e=arguments.length>0?arguments[0]:void 0;R(this,new se(e))},de=fe.prototype;if(s(de,{append:function(e,t){E(arguments.length,2);var n=N(this);J(n.entries,{key:w(e),value:w(t)}),n.updateURL()},delete:function(e){E(arguments.length,1);for(var t=N(this),n=t.entries,r=w(e),o=0;o<n.length;)n[o].key===r?K(n,o,1):o++;t.updateURL()},get:function(e){E(arguments.length,1);for(var t=N(this).entries,n=w(e),r=0;r<t.length;r++)if(t[r].key===n)return t[r].value;return null},getAll:function(e){E(arguments.length,1);for(var t=N(this).entries,n=w(e),r=[],o=0;o<t.length;o++)t[o].key===n&&J(r,t[o].value);return r},has:function(e){E(arguments.length,1);for(var t=N(this).entries,n=w(e),r=0;r<t.length;)if(t[r++].key===n)return!0;return!1},set:function(e,t){E(arguments.length,1);for(var n,r=N(this),o=r.entries,i=!1,a=w(e),u=w(t),l=0;l<o.length;l++)(n=o[l]).key===a&&(i?K(o,l--,1):(i=!0,n.value=u));i||J(o,{key:a,value:u}),r.updateURL()},sort:function(){var e=N(this);I(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,n=N(this).entries,r=m(e,arguments.length>1?arguments[1]:void 0),o=0;o<n.length;)r((t=n[o++]).value,t.key,this)},keys:function(){return new ce(this,"keys")},values:function(){return new ce(this,"values")},entries:function(){return new ce(this,"entries")}},{enumerable:!0}),c(de,_,de.entries,{name:"entries"}),c(de,"toString",(function(){return N(this).serialize()}),{enumerable:!0}),f(fe,T),r({global:!0,constructor:!0,forced:!l},{URLSearchParams:fe}),!l&&v(D)){var pe=a(U.has),he=a(U.set),ve=function(e){if(A(e)){var t,n=e.body;if(y(n)===T)return t=e.headers?new D(e.headers):new D,pe(t,"content-type")||he(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),C(e,{body:x(0,w(n)),headers:x(0,t)})}return e};if(v(F)&&r({global:!0,enumerable:!0,dontCallGetSet:!0,forced:!0},{fetch:function(e){return F(e,arguments.length>1?ve(arguments[1]):{})}}),v(B)){var ge=function(e){return h(this,j),new B(e,arguments.length>1?ve(arguments[1]):{})};j.constructor=ge,ge.prototype=j,r({global:!0,constructor:!0,dontCallGetSet:!0,forced:!0},{Request:ge})}}e.exports={URLSearchParams:fe,getState:N}},1637:function(e,t,n){n(5556)},8789:function(e,t,n){"use strict";n(8783);var r,o=n(2109),i=n(9781),a=n(5143),u=n(7854),l=n(9974),c=n(1702),s=n(8052),f=n(7045),d=n(5787),p=n(2597),h=n(1574),v=n(8457),g=n(1589),m=n(8710).codeAt,y=n(3197),b=n(1340),A=n(8003),w=n(8053),C=n(5556),x=n(9909),S=x.set,k=x.getterFor("URL"),E=C.URLSearchParams,P=C.getState,I=u.URL,_=u.TypeError,T=u.parseInt,O=Math.floor,R=Math.pow,N=c("".charAt),z=c(/./.exec),M=c([].join),L=c(1..toString),F=c([].pop),B=c([].push),D=c("".replace),j=c([].shift),U=c("".split),G=c("".slice),Q=c("".toLowerCase),H=c([].unshift),V="Invalid scheme",W="Invalid host",Y="Invalid port",J=/[a-z]/i,$=/[\d+-.a-z]/i,q=/\d/,K=/^0x/i,X=/^[0-7]+$/,Z=/^\d+$/,ee=/^[\da-f]+$/i,te=/[\0\t\n\r #%/:<>?@[\\\]^|]/,ne=/[\0\t\n\r #/:<>?@[\\\]^|]/,re=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,oe=/[\t\n\r]/g,ie=function(e){var t,n,r,o;if("number"==typeof e){for(t=[],n=0;n<4;n++)H(t,e%256),e=O(e/256);return M(t,".")}if("object"==typeof e){for(t="",r=function(e){for(var t=null,n=1,r=null,o=0,i=0;i<8;i++)0!==e[i]?(o>n&&(t=r,n=o),r=null,o=0):(null===r&&(r=i),++o);return o>n&&(t=r,n=o),t}(e),n=0;n<8;n++)o&&0===e[n]||(o&&(o=!1),r===n?(t+=n?":":"::",o=!0):(t+=L(e[n],16),n<7&&(t+=":")));return"["+t+"]"}return e},ae={},ue=h({},ae,{" ":1,'"':1,"<":1,">":1,"`":1}),le=h({},ue,{"#":1,"?":1,"{":1,"}":1}),ce=h({},le,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),se=function(e,t){var n=m(e,0);return n>32&&n<127&&!p(t,e)?e:encodeURIComponent(e)},fe={ftp:21,file:null,http:80,https:443,ws:80,wss:443},de=function(e,t){var n;return 2==e.length&&z(J,N(e,0))&&(":"==(n=N(e,1))||!t&&"|"==n)},pe=function(e){var t;return e.length>1&&de(G(e,0,2))&&(2==e.length||"/"===(t=N(e,2))||"\\"===t||"?"===t||"#"===t)},he=function(e){return"."===e||"%2e"===Q(e)},ve={},ge={},me={},ye={},be={},Ae={},we={},Ce={},xe={},Se={},ke={},Ee={},Pe={},Ie={},_e={},Te={},Oe={},Re={},Ne={},ze={},Me={},Le=function(e,t,n){var r,o,i,a=b(e);if(t){if(o=this.parse(a))throw _(o);this.searchParams=null}else{if(void 0!==n&&(r=new Le(n,!0)),o=this.parse(a,null,r))throw _(o);(i=P(new E)).bindURL(this),this.searchParams=i}};Le.prototype={type:"URL",parse:function(e,t,n){var o,i,a,u,l,c=this,s=t||ve,f=0,d="",h=!1,m=!1,y=!1;for(e=b(e),t||(c.scheme="",c.username="",c.password="",c.host=null,c.port=null,c.path=[],c.query=null,c.fragment=null,c.cannotBeABaseURL=!1,e=D(e,re,"")),e=D(e,oe,""),o=v(e);f<=o.length;){switch(i=o[f],s){case ve:if(!i||!z(J,i)){if(t)return V;s=me;continue}d+=Q(i),s=ge;break;case ge:if(i&&(z($,i)||"+"==i||"-"==i||"."==i))d+=Q(i);else{if(":"!=i){if(t)return V;d="",s=me,f=0;continue}if(t&&(c.isSpecial()!=p(fe,d)||"file"==d&&(c.includesCredentials()||null!==c.port)||"file"==c.scheme&&!c.host))return;if(c.scheme=d,t)return void(c.isSpecial()&&fe[c.scheme]==c.port&&(c.port=null));d="","file"==c.scheme?s=Ie:c.isSpecial()&&n&&n.scheme==c.scheme?s=ye:c.isSpecial()?s=Ce:"/"==o[f+1]?(s=be,f++):(c.cannotBeABaseURL=!0,B(c.path,""),s=Ne)}break;case me:if(!n||n.cannotBeABaseURL&&"#"!=i)return V;if(n.cannotBeABaseURL&&"#"==i){c.scheme=n.scheme,c.path=g(n.path),c.query=n.query,c.fragment="",c.cannotBeABaseURL=!0,s=Me;break}s="file"==n.scheme?Ie:Ae;continue;case ye:if("/"!=i||"/"!=o[f+1]){s=Ae;continue}s=xe,f++;break;case be:if("/"==i){s=Se;break}s=Re;continue;case Ae:if(c.scheme=n.scheme,i==r)c.username=n.username,c.password=n.password,c.host=n.host,c.port=n.port,c.path=g(n.path),c.query=n.query;else if("/"==i||"\\"==i&&c.isSpecial())s=we;else if("?"==i)c.username=n.username,c.password=n.password,c.host=n.host,c.port=n.port,c.path=g(n.path),c.query="",s=ze;else{if("#"!=i){c.username=n.username,c.password=n.password,c.host=n.host,c.port=n.port,c.path=g(n.path),c.path.length--,s=Re;continue}c.username=n.username,c.password=n.password,c.host=n.host,c.port=n.port,c.path=g(n.path),c.query=n.query,c.fragment="",s=Me}break;case we:if(!c.isSpecial()||"/"!=i&&"\\"!=i){if("/"!=i){c.username=n.username,c.password=n.password,c.host=n.host,c.port=n.port,s=Re;continue}s=Se}else s=xe;break;case Ce:if(s=xe,"/"!=i||"/"!=N(d,f+1))continue;f++;break;case xe:if("/"!=i&&"\\"!=i){s=Se;continue}break;case Se:if("@"==i){h&&(d="%40"+d),h=!0,a=v(d);for(var A=0;A<a.length;A++){var w=a[A];if(":"!=w||y){var C=se(w,ce);y?c.password+=C:c.username+=C}else y=!0}d=""}else if(i==r||"/"==i||"?"==i||"#"==i||"\\"==i&&c.isSpecial()){if(h&&""==d)return"Invalid authority";f-=v(d).length+1,d="",s=ke}else d+=i;break;case ke:case Ee:if(t&&"file"==c.scheme){s=Te;continue}if(":"!=i||m){if(i==r||"/"==i||"?"==i||"#"==i||"\\"==i&&c.isSpecial()){if(c.isSpecial()&&""==d)return W;if(t&&""==d&&(c.includesCredentials()||null!==c.port))return;if(u=c.parseHost(d))return u;if(d="",s=Oe,t)return;continue}"["==i?m=!0:"]"==i&&(m=!1),d+=i}else{if(""==d)return W;if(u=c.parseHost(d))return u;if(d="",s=Pe,t==Ee)return}break;case Pe:if(!z(q,i)){if(i==r||"/"==i||"?"==i||"#"==i||"\\"==i&&c.isSpecial()||t){if(""!=d){var x=T(d,10);if(x>65535)return Y;c.port=c.isSpecial()&&x===fe[c.scheme]?null:x,d=""}if(t)return;s=Oe;continue}return Y}d+=i;break;case Ie:if(c.scheme="file","/"==i||"\\"==i)s=_e;else{if(!n||"file"!=n.scheme){s=Re;continue}if(i==r)c.host=n.host,c.path=g(n.path),c.query=n.query;else if("?"==i)c.host=n.host,c.path=g(n.path),c.query="",s=ze;else{if("#"!=i){pe(M(g(o,f),""))||(c.host=n.host,c.path=g(n.path),c.shortenPath()),s=Re;continue}c.host=n.host,c.path=g(n.path),c.query=n.query,c.fragment="",s=Me}}break;case _e:if("/"==i||"\\"==i){s=Te;break}n&&"file"==n.scheme&&!pe(M(g(o,f),""))&&(de(n.path[0],!0)?B(c.path,n.path[0]):c.host=n.host),s=Re;continue;case Te:if(i==r||"/"==i||"\\"==i||"?"==i||"#"==i){if(!t&&de(d))s=Re;else if(""==d){if(c.host="",t)return;s=Oe}else{if(u=c.parseHost(d))return u;if("localhost"==c.host&&(c.host=""),t)return;d="",s=Oe}continue}d+=i;break;case Oe:if(c.isSpecial()){if(s=Re,"/"!=i&&"\\"!=i)continue}else if(t||"?"!=i)if(t||"#"!=i){if(i!=r&&(s=Re,"/"!=i))continue}else c.fragment="",s=Me;else c.query="",s=ze;break;case Re:if(i==r||"/"==i||"\\"==i&&c.isSpecial()||!t&&("?"==i||"#"==i)){if(".."===(l=Q(l=d))||"%2e."===l||".%2e"===l||"%2e%2e"===l?(c.shortenPath(),"/"==i||"\\"==i&&c.isSpecial()||B(c.path,"")):he(d)?"/"==i||"\\"==i&&c.isSpecial()||B(c.path,""):("file"==c.scheme&&!c.path.length&&de(d)&&(c.host&&(c.host=""),d=N(d,0)+":"),B(c.path,d)),d="","file"==c.scheme&&(i==r||"?"==i||"#"==i))for(;c.path.length>1&&""===c.path[0];)j(c.path);"?"==i?(c.query="",s=ze):"#"==i&&(c.fragment="",s=Me)}else d+=se(i,le);break;case Ne:"?"==i?(c.query="",s=ze):"#"==i?(c.fragment="",s=Me):i!=r&&(c.path[0]+=se(i,ae));break;case ze:t||"#"!=i?i!=r&&("'"==i&&c.isSpecial()?c.query+="%27":c.query+="#"==i?"%23":se(i,ae)):(c.fragment="",s=Me);break;case Me:i!=r&&(c.fragment+=se(i,ue))}f++}},parseHost:function(e){var t,n,r;if("["==N(e,0)){if("]"!=N(e,e.length-1))return W;if(t=function(e){var t,n,r,o,i,a,u,l=[0,0,0,0,0,0,0,0],c=0,s=null,f=0,d=function(){return N(e,f)};if(":"==d()){if(":"!=N(e,1))return;f+=2,s=++c}for(;d();){if(8==c)return;if(":"!=d()){for(t=n=0;n<4&&z(ee,d());)t=16*t+T(d(),16),f++,n++;if("."==d()){if(0==n)return;if(f-=n,c>6)return;for(r=0;d();){if(o=null,r>0){if(!("."==d()&&r<4))return;f++}if(!z(q,d()))return;for(;z(q,d());){if(i=T(d(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;f++}l[c]=256*l[c]+o,2!=++r&&4!=r||c++}if(4!=r)return;break}if(":"==d()){if(f++,!d())return}else if(d())return;l[c++]=t}else{if(null!==s)return;f++,s=++c}}if(null!==s)for(a=c-s,c=7;0!=c&&a>0;)u=l[c],l[c--]=l[s+a-1],l[s+--a]=u;else if(8!=c)return;return l}(G(e,1,-1)),!t)return W;this.host=t}else if(this.isSpecial()){if(e=y(e),z(te,e))return W;if(t=function(e){var t,n,r,o,i,a,u,l=U(e,".");if(l.length&&""==l[l.length-1]&&l.length--,(t=l.length)>4)return e;for(n=[],r=0;r<t;r++){if(""==(o=l[r]))return e;if(i=10,o.length>1&&"0"==N(o,0)&&(i=z(K,o)?16:8,o=G(o,8==i?1:2)),""===o)a=0;else{if(!z(10==i?Z:8==i?X:ee,o))return e;a=T(o,i)}B(n,a)}for(r=0;r<t;r++)if(a=n[r],r==t-1){if(a>=R(256,5-t))return null}else if(a>255)return null;for(u=F(n),r=0;r<n.length;r++)u+=n[r]*R(256,3-r);return u}(e),null===t)return W;this.host=t}else{if(z(ne,e))return W;for(t="",n=v(e),r=0;r<n.length;r++)t+=se(n[r],ae);this.host=t}},cannotHaveUsernamePasswordPort:function(){return!this.host||this.cannotBeABaseURL||"file"==this.scheme},includesCredentials:function(){return""!=this.username||""!=this.password},isSpecial:function(){return p(fe,this.scheme)},shortenPath:function(){var e=this.path,t=e.length;!t||"file"==this.scheme&&1==t&&de(e[0],!0)||e.length--},serialize:function(){var e=this,t=e.scheme,n=e.username,r=e.password,o=e.host,i=e.port,a=e.path,u=e.query,l=e.fragment,c=t+":";return null!==o?(c+="//",e.includesCredentials()&&(c+=n+(r?":"+r:"")+"@"),c+=ie(o),null!==i&&(c+=":"+i)):"file"==t&&(c+="//"),c+=e.cannotBeABaseURL?a[0]:a.length?"/"+M(a,"/"):"",null!==u&&(c+="?"+u),null!==l&&(c+="#"+l),c},setHref:function(e){var t=this.parse(e);if(t)throw _(t);this.searchParams.update()},getOrigin:function(){var e=this.scheme,t=this.port;if("blob"==e)try{return new Fe(e.path[0]).origin}catch(e){return"null"}return"file"!=e&&this.isSpecial()?e+"://"+ie(this.host)+(null!==t?":"+t:""):"null"},getProtocol:function(){return this.scheme+":"},setProtocol:function(e){this.parse(b(e)+":",ve)},getUsername:function(){return this.username},setUsername:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.username="";for(var n=0;n<t.length;n++)this.username+=se(t[n],ce)}},getPassword:function(){return this.password},setPassword:function(e){var t=v(b(e));if(!this.cannotHaveUsernamePasswordPort()){this.password="";for(var n=0;n<t.length;n++)this.password+=se(t[n],ce)}},getHost:function(){var e=this.host,t=this.port;return null===e?"":null===t?ie(e):ie(e)+":"+t},setHost:function(e){this.cannotBeABaseURL||this.parse(e,ke)},getHostname:function(){var e=this.host;return null===e?"":ie(e)},setHostname:function(e){this.cannotBeABaseURL||this.parse(e,Ee)},getPort:function(){var e=this.port;return null===e?"":b(e)},setPort:function(e){this.cannotHaveUsernamePasswordPort()||(""==(e=b(e))?this.port=null:this.parse(e,Pe))},getPathname:function(){var e=this.path;return this.cannotBeABaseURL?e[0]:e.length?"/"+M(e,"/"):""},setPathname:function(e){this.cannotBeABaseURL||(this.path=[],this.parse(e,Oe))},getSearch:function(){var e=this.query;return e?"?"+e:""},setSearch:function(e){""==(e=b(e))?this.query=null:("?"==N(e,0)&&(e=G(e,1)),this.query="",this.parse(e,ze)),this.searchParams.update()},getSearchParams:function(){return this.searchParams.facade},getHash:function(){var e=this.fragment;return e?"#"+e:""},setHash:function(e){""!=(e=b(e))?("#"==N(e,0)&&(e=G(e,1)),this.fragment="",this.parse(e,Me)):this.fragment=null},update:function(){this.query=this.searchParams.serialize()||null}};var Fe=function(e){var t=d(this,Be),n=w(arguments.length,1)>1?arguments[1]:void 0,r=S(t,new Le(e,!1,n));i||(t.href=r.serialize(),t.origin=r.getOrigin(),t.protocol=r.getProtocol(),t.username=r.getUsername(),t.password=r.getPassword(),t.host=r.getHost(),t.hostname=r.getHostname(),t.port=r.getPort(),t.pathname=r.getPathname(),t.search=r.getSearch(),t.searchParams=r.getSearchParams(),t.hash=r.getHash())},Be=Fe.prototype,De=function(e,t){return{get:function(){return k(this)[e]()},set:t&&function(e){return k(this)[t](e)},configurable:!0,enumerable:!0}};if(i&&(f(Be,"href",De("serialize","setHref")),f(Be,"origin",De("getOrigin")),f(Be,"protocol",De("getProtocol","setProtocol")),f(Be,"username",De("getUsername","setUsername")),f(Be,"password",De("getPassword","setPassword")),f(Be,"host",De("getHost","setHost")),f(Be,"hostname",De("getHostname","setHostname")),f(Be,"port",De("getPort","setPort")),f(Be,"pathname",De("getPathname","setPathname")),f(Be,"search",De("getSearch","setSearch")),f(Be,"searchParams",De("getSearchParams")),f(Be,"hash",De("getHash","setHash"))),s(Be,"toJSON",(function(){return k(this).serialize()}),{enumerable:!0}),s(Be,"toString",(function(){return k(this).serialize()}),{enumerable:!0}),I){var je=I.createObjectURL,Ue=I.revokeObjectURL;je&&s(Fe,"createObjectURL",l(je,I)),Ue&&s(Fe,"revokeObjectURL",l(Ue,I))}A(Fe,"URL"),o({global:!0,constructor:!0,forced:!a,sham:!i},{URL:Fe})},285:function(e,t,n){n(8789)},3753:function(e,t,n){"use strict";var r=n(2109),o=n(6916);r({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return o(URL.prototype.toString,this)}})},7448:function(e,t,n){"use strict";var r=n(4251),o=n.n(r),i=n(8922),a=n.n(i)()(o());a.push([e.id,'.IMqMrT2eGOGeFiLbCAGg{display:flex;justify-content:center;align-content:center}.IMqMrT2eGOGeFiLbCAGg .cDkF1Y1s0HJ9u_9_vUmj{font-family:"Exo 2.0 Thin";font-size:large}',"",{version:3,sources:["webpack://./src/App.module.scss"],names:[],mappings:"AAAA,sBACC,YAAA,CACA,sBAAA,CACA,oBAAA,CAEA,4CACC,0BAAA,CACA,eAAA",sourcesContent:['.App {\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-content: center;\r\n\r\n\t.title {\r\n\t\tfont-family: "Exo 2.0 Thin";\r\n\t\tfont-size: large;\r\n\t}\r\n}'],sourceRoot:""}]),a.locals={App:"IMqMrT2eGOGeFiLbCAGg",title:"cDkF1Y1s0HJ9u_9_vUmj"},t.Z=a},1187:function(e,t,n){"use strict";var r=n(4251),o=n.n(r),i=n(8922),a=n.n(i)()(o());a.push([e.id,'.ldBrYzwJeD2PI20urQha{font-family:"Trebuchet MS"}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw{font-family:inherit;border:none;cursor:pointer;position:relative;width:20rem;height:30rem;border-right:4px solid #1698d9;overflow:hidden;border-radius:10px;background:linear-gradient(135deg, transparent 2.5em, #fff 0)}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled{border-color:#b3b3b3;background-color:linear-gradient(135deg, transparent 2.5em, #F2F2F2 0)}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled .HuGhz795kKcI9GWF7_l3{background:#b3b3b3}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled:hover{border-color:#b3b3b3}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled .rWVkk8aQPBIREhcxpGCY .ypRiSXnjijaF_UwBJ9k5,.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled .rWVkk8aQPBIREhcxpGCY .ZFtMOJV0nxG3zUXzDSCZ,.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled .rWVkk8aQPBIREhcxpGCY .eCnyJzL0gZ5NaglMFoEq,.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled .rWVkk8aQPBIREhcxpGCY .t_hO0Fd5zyX4doNUj5hA{color:#b3b3b3}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:hover{border-color:#2ea8e6}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:hover .HuGhz795kKcI9GWF7_l3{background:#2ea8e6}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled:hover .HuGhz795kKcI9GWF7_l3{background:#b3b3b3}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:hover~.MKT3kuImasbYEJ2RPjDd .yoXeptHaQeP0Nnk7yL6t{color:#2ea8e6}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV{border-color:#d91667}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV:hover{border-color:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE{border-color:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE:hover{border-color:#e52e7a}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV:hover .HuGhz795kKcI9GWF7_l3{background:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE:hover .HuGhz795kKcI9GWF7_l3{background:#e52e7a}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:after{content:"";position:absolute;width:calc(100% - 0px);right:0;z-index:1;height:10%;top:0px;border-style:solid;border-color:#1698d9;border-width:4px 0 0px 6px;transform:skew(-45deg);transform-origin:left bottom}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:hover:after{border-color:#2ea8e6}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled:after{border-color:#b3b3b3}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV:after{border-color:#d91667}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV:hover:after{border-color:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE:after{border-color:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE:hover:after{border-color:#e52e7a}.ldBrYzwJeD2PI20urQha .dMejecRseS1BRVNaCm8B:after{pointer-events:none;opacity:.4}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:before{content:"";position:absolute;width:calc(100% - 4px);right:0px;z-index:1;height:calc(90% - 2px);bottom:0px;border-style:solid;border-color:#1698d9;border-width:0px 0 4px 4px}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:hover:before{border-color:#2ea8e6}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled:before{border-color:#b3b3b3}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV:before{border-color:#d91667}.ldBrYzwJeD2PI20urQha .XliKAfiIocZpHlXXdKAV:hover:before{border-color:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE:before{border-color:#d91667}.ldBrYzwJeD2PI20urQha .hSiKFUIs24MUOl3abYRE:hover:before{border-color:#e52e7a}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY{position:absolute;top:6.1%;left:16%;display:flex;flex-direction:column;align-items:flex-start;text-align:start}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY .ZFtMOJV0nxG3zUXzDSCZ{font-weight:normal;font-size:1rem;color:#666;margin-bottom:18%}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY .ZFtMOJV0nxG3zUXzDSCZ::first-letter{font-size:130%}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY .ypRiSXnjijaF_UwBJ9k5{text-indent:-0.7mm;line-height:0;font-weight:bold;font-size:3rem;color:#000;margin-bottom:19.5%}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY .ypRiSXnjijaF_UwBJ9k5::first-letter{font-size:130%;font-weight:normal;letter-spacing:0}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY .eCnyJzL0gZ5NaglMFoEq{font-weight:bold;font-size:1.5rem;color:#000;margin-bottom:14.5%}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY .t_hO0Fd5zyX4doNUj5hA{text-align:left;display:flex;flex-direction:column;align-items:start;font-weight:normal;font-size:.9rem;color:#666;line-height:1rem}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .rWVkk8aQPBIREhcxpGCY>*{line-height:0}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .Zq387SgIBdRQJUE1r8U1{position:absolute;left:0;bottom:0;z-index:0}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw:disabled .Zq387SgIBdRQJUE1r8U1{opacity:.65}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .HuGhz795kKcI9GWF7_l3{position:absolute;bottom:3.1%;right:3.1%;height:5rem;width:5rem;border-radius:50%;display:flex;justify-content:center;flex-direction:column;align-items:center;color:#fff;background:#1698d9}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .SGjVGePSGu5mnjvV4XnM{background:#d91667}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .HuGhz795kKcI9GWF7_l3 .QZ9rCUEM4P9QQP3v1NSH{font-size:2.625rem}.ldBrYzwJeD2PI20urQha .jndmPboJ8jFrC_ipICLw .HuGhz795kKcI9GWF7_l3 .yvDywIZ_UUlpiddcYFcJ{font-size:1.3rem;line-height:1rem}.ldBrYzwJeD2PI20urQha .MKT3kuImasbYEJ2RPjDd{height:1rem;margin-top:4%;display:flex;justify-content:center;font-size:.813rem;font-weight:normal;color:#fff}.ldBrYzwJeD2PI20urQha .MKT3kuImasbYEJ2RPjDd .yoXeptHaQeP0Nnk7yL6t{padding:0;cursor:pointer;text-decoration:none;border:none;border-bottom:2px dashed;background:rgba(0,0,0,0);color:#1698d9}.ldBrYzwJeD2PI20urQha .MKT3kuImasbYEJ2RPjDd .ftAabfL9WX9_CiXCNnNz{color:#ff6}',"",{version:3,sources:["webpack://./src/components/card/Card.module.scss"],names:[],mappings:"AAAA,sBACC,0BAAA,CAEA,4CACC,mBAAA,CACA,WAAA,CACA,cAAA,CACA,iBAAA,CACA,WAAA,CACA,YAAA,CACA,8BAAA,CACA,eAAA,CACA,kBAAA,CACA,6DAAA,CAEA,qDACC,oBAAA,CACA,sEAAA,CAGD,2EACC,kBAAA,CAGD,2DACC,oBAAA,CAGD,oYAIC,aAAA,CAGD,kDACC,oBAAA,CAGD,wEACC,kBAAA,CAGD,iFACC,kBAAA,CAGD,8FACC,aAAA,CAGD,4CACC,oBAAA,CAID,kDACC,oBAAA,CAGD,4CACC,oBAAA,CAGD,kDACC,oBAAA,CAID,wEACC,kBAAA,CAGD,wEACC,kBAAA,CAGD,kDACC,UAAA,CACA,iBAAA,CACA,sBAAA,CACA,OAAA,CACA,SAAA,CACA,UAAA,CACA,OAAA,CACA,kBAAA,CACA,oBAAA,CACA,0BAAA,CACA,sBAAA,CACA,4BAAA,CAGD,wDACC,oBAAA,CAGD,2DACC,oBAAA,CAGD,kDACC,oBAAA,CAID,wDACC,oBAAA,CAGD,kDACC,oBAAA,CAGD,wDACC,oBAAA,CAGD,kDACC,mBAAA,CACA,UAAA,CAGD,mDACC,UAAA,CACA,iBAAA,CACA,sBAAA,CACA,SAAA,CACA,SAAA,CACA,sBAAA,CACA,UAAA,CACA,kBAAA,CACA,oBAAA,CACA,0BAAA,CAGD,yDACC,oBAAA,CAID,4DACC,oBAAA,CAGD,mDACC,oBAAA,CAID,yDACC,oBAAA,CAGD,mDACC,oBAAA,CAGD,yDACC,oBAAA,CAGD,kEACC,iBAAA,CACA,QAAA,CACA,QAAA,CACA,YAAA,CACA,qBAAA,CACA,sBAAA,CACA,gBAAA,CAEA,wFACC,kBAAA,CACA,cAAA,CACA,UAAA,CACA,iBAAA,CAEA,sGACC,cAAA,CAIF,wFACC,kBAAA,CACA,aAAA,CACA,gBAAA,CACA,cAAA,CACA,UAAA,CACA,mBAAA,CAEA,sGACC,cAAA,CACA,kBAAA,CACA,gBAAA,CAIF,wFACC,gBAAA,CACA,gBAAA,CACA,UAAA,CACA,mBAAA,CAGD,wFACC,eAAA,CACA,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,kBAAA,CACA,eAAA,CACA,UAAA,CACA,gBAAA,CAGD,oEACC,aAAA,CAIF,kEACC,iBAAA,CACA,MAAA,CACA,QAAA,CACA,SAAA,CAGD,2EACC,WAAA,CAGD,kEACC,iBAAA,CACA,WAAA,CACA,UAAA,CACA,WAAA,CACA,UAAA,CACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,qBAAA,CACA,kBAAA,CACA,UAAA,CACA,kBAAA,CAEA,kEACC,kBAAA,CAGD,wFACC,kBAAA,CAGD,wFACC,gBAAA,CACA,gBAAA,CAMH,4CACC,WAAA,CACA,aAAA,CACA,YAAA,CACA,sBAAA,CACA,iBAAA,CACA,kBAAA,CACA,UAAA,CAEA,kEACC,SAAA,CACA,cAAA,CACA,oBAAA,CACA,WAAA,CACA,wBAAA,CACA,wBAAA,CACA,aAAA,CAGD,kEACC,UAAA",sourcesContent:['.container {\r\n\tfont-family: \'Trebuchet MS\';\r\n\r\n\t.body {\r\n\t\tfont-family: inherit;\r\n\t\tborder: none;\r\n\t\tcursor: pointer;\r\n\t\tposition: relative;\r\n\t\twidth: 20rem;\r\n\t\theight: 30rem;\r\n\t\tborder-right: 4px solid #1698D9;\r\n\t\toverflow: hidden;\r\n\t\tborder-radius: 10px;\r\n\t\tbackground: linear-gradient(135deg, transparent 2.5em, #fff 0);\r\n\r\n\t\t&:disabled {\r\n\t\t\tborder-color: #B3B3B3;\r\n\t\t\tbackground-color: linear-gradient(135deg, transparent 2.5em, #F2F2F2 0) ;\r\n\t\t}\r\n\r\n\t\t&:disabled .weight{\r\n\t\t\tbackground: #B3B3B3;\r\n\t\t}\r\n\r\n\t\t&:disabled:hover {\r\n\t\t\tborder-color: #B3B3B3;\r\n\t\t}\r\n\r\n\t\t&:disabled .text .brand,\r\n\t\t&:disabled .text .slogan,\r\n\t\t&:disabled .text .tasty,\r\n\t\t&:disabled .text .description {\r\n\t\t\tcolor: #B3B3B3;\r\n\t\t}\r\n\r\n\t\t&:hover {\r\n\t\t\tborder-color: #2EA8E6;\r\n\t\t}\r\n\r\n\t\t&:hover .weight {\r\n\t\t\tbackground: #2EA8E6;\r\n\t\t}\r\n\r\n\t\t&:disabled:hover .weight {\r\n\t\t\tbackground: #B3B3B3;\r\n\t\t}\r\n\r\n\t\t&:hover~.CallToAction .button {\r\n\t\t\tcolor: #2EA8E6;\r\n\t\t}\r\n\r\n\t\t&_selected {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t// Состояние наведения применяется к выбранной упаковке не сразу, а после того, как курсор ушел с нее после первоначального выбора.\r\n\t\t&_selected:hover {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover:hover {\r\n\t\t\tborder-color: #E52E7A;\r\n\t\t}\r\n\r\n\t\t// Состояние наведения применяется к выбранной упаковке не сразу, а после того, как курсор ушел с нее после первоначального выбора.\r\n\t\t&_selected:hover .weight {\r\n\t\t\tbackground: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover:hover .weight {\r\n\t\t\tbackground: #E52E7A;\r\n\t\t}\r\n\r\n\t\t&:after {\r\n\t\t\tcontent: "";\r\n\t\t\tposition: absolute;\r\n\t\t\twidth: calc(100% - 0px);\r\n\t\t\tright: 0;\r\n\t\t\tz-index: 1;\r\n\t\t\theight: 10%;\r\n\t\t\ttop: 0px;\r\n\t\t\tborder-style: solid;\r\n\t\t\tborder-color: #1698D9;\r\n\t\t\tborder-width: 4px 0 0px 6px;\r\n\t\t\ttransform: skew(-45deg);\r\n\t\t\ttransform-origin: left bottom;\r\n\t\t}\r\n\r\n\t\t&:hover:after {\r\n\t\t\tborder-color: #2EA8E6;\r\n\t\t}\r\n\r\n\t\t&:disabled:after {\r\n\t\t\tborder-color: #B3B3B3;\r\n\t\t}\r\n\r\n\t\t&_selected:after {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t// Состояние наведения применяется к выбранной упаковке не сразу, а после того, как курсор ушел с нее после первоначального выбора.\r\n\t\t&_selected:hover:after {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover:after {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover:hover:after {\r\n\t\t\tborder-color: #E52E7A;\r\n\t\t}\r\n\r\n\t\t&_disabled:after {\r\n\t\t\tpointer-events: none;\r\n\t\t\topacity: 0.4;\r\n\t\t}\r\n\r\n\t\t&:before {\r\n\t\t\tcontent: "";\r\n\t\t\tposition: absolute;\r\n\t\t\twidth: calc(100% - 4px);\r\n\t\t\tright: 0px;\r\n\t\t\tz-index: 1;\r\n\t\t\theight: calc(90% - 2px);\r\n\t\t\tbottom: 0px;\r\n\t\t\tborder-style: solid;\r\n\t\t\tborder-color: #1698D9;\r\n\t\t\tborder-width: 0px 0 4px 4px;\r\n\t\t}\r\n\r\n\t\t&:hover:before {\r\n\t\t\tborder-color: #2EA8E6;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t&:disabled:before {\r\n\t\t\tborder-color: #B3B3B3;\r\n\t\t}\r\n\r\n\t\t&_selected:before {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t// Состояние наведения применяется к выбранной упаковке не сразу, а после того, как курсор ушел с нее после первоначального выбора.\r\n\t\t&_selected:hover:before {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover:before {\r\n\t\t\tborder-color: #D91667;\r\n\t\t}\r\n\r\n\t\t&_selectedHover:hover:before {\r\n\t\t\tborder-color: #E52E7A;\r\n\t\t}\r\n\r\n\t\t.text {\r\n\t\t\tposition: absolute;\r\n\t\t\ttop: 6.1%;\r\n\t\t\tleft: 16%;\r\n\t\t\tdisplay: flex;\r\n\t\t\tflex-direction: column;\r\n\t\t\talign-items: flex-start;\r\n\t\t\ttext-align: start;\r\n\r\n\t\t\t.slogan {\r\n\t\t\t\tfont-weight: normal;\r\n\t\t\t\tfont-size: 1rem;\r\n\t\t\t\tcolor: #666666;\r\n\t\t\t\tmargin-bottom: 18%;\r\n\r\n\t\t\t\t&::first-letter {\r\n\t\t\t\t\tfont-size: 130%;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t.brand {\r\n\t\t\t\ttext-indent: -0.7mm;\r\n\t\t\t\tline-height: 0;\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\tfont-size: 3rem;\r\n\t\t\t\tcolor: #000000;\r\n\t\t\t\tmargin-bottom: 19.5%;\r\n\r\n\t\t\t\t&::first-letter {\r\n\t\t\t\t\tfont-size: 130%;\r\n\t\t\t\t\tfont-weight: normal;\r\n\t\t\t\t\tletter-spacing: 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t.tasty {\r\n\t\t\t\tfont-weight: bold;\r\n\t\t\t\tfont-size: 1.5rem;\r\n\t\t\t\tcolor: #000000;\r\n\t\t\t\tmargin-bottom: 14.5%;\r\n\t\t\t}\r\n\r\n\t\t\t.description {\r\n\t\t\t\ttext-align: left;\r\n\t\t\t\tdisplay: flex;\r\n\t\t\t\tflex-direction: column;\r\n\t\t\t\talign-items: start;\r\n\t\t\t\tfont-weight: normal;\r\n\t\t\t\tfont-size: .9rem;\r\n\t\t\t\tcolor: #666666;\r\n\t\t\t\tline-height: 1rem;\r\n\t\t\t}\r\n\r\n\t\t\t&>* {\r\n\t\t\t\tline-height: 0;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t.img {\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 0;\r\n\t\t\tbottom: 0;\r\n\t\t\tz-index: 0;\r\n\t\t}\r\n\r\n\t\t&:disabled .img {\r\n\t\t\topacity: 0.65;\r\n\t\t}\r\n\r\n\t\t.weight {\r\n\t\t\tposition: absolute;\r\n\t\t\tbottom: 3.1%;\r\n\t\t\tright: 3.1%;\r\n\t\t\theight: 5rem;\r\n\t\t\twidth: 5rem;\r\n\t\t\tborder-radius: 50%;\r\n\t\t\tdisplay: flex;\r\n\t\t\tjustify-content: center;\r\n\t\t\tflex-direction: column;\r\n\t\t\talign-items: center;\r\n\t\t\tcolor: #ffff;\r\n\t\t\tbackground: #1698D9;\r\n\r\n\t\t\t&_selected {\r\n\t\t\t\tbackground: #D91667;\r\n\t\t\t}\r\n\r\n\t\t\t.amount {\r\n\t\t\t\tfont-size: 2.625rem;\r\n\t\t\t}\r\n\r\n\t\t\t.measure {\r\n\t\t\t\tfont-size: 1.3rem;\r\n\t\t\t\tline-height: 1rem;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t.CallToAction {\r\n\t\theight: 1rem;\r\n\t\tmargin-top: 4%;\r\n\t\tdisplay: flex;\r\n\t\tjustify-content: center;\r\n\t\tfont-size: 0.813rem;\r\n\t\tfont-weight: normal;\r\n\t\tcolor: #fff;\r\n\r\n\t\t.button {\r\n\t\t\tpadding: 0;\r\n\t\t\tcursor: pointer;\r\n\t\t\ttext-decoration: none;\r\n\t\t\tborder: none;\r\n\t\t\tborder-bottom: 2px dashed;\r\n\t\t\tbackground: rgba(0, 0, 0, 0);\r\n\t\t\tcolor: #1698D9;\r\n\t\t}\r\n\r\n\t\t.notAvailable {\r\n\t\t\tcolor: #FFFF66;\r\n\t\t}\r\n\t}\r\n}'],sourceRoot:""}]),a.locals={container:"ldBrYzwJeD2PI20urQha",body:"jndmPboJ8jFrC_ipICLw",weight:"HuGhz795kKcI9GWF7_l3",text:"rWVkk8aQPBIREhcxpGCY",brand:"ypRiSXnjijaF_UwBJ9k5",slogan:"ZFtMOJV0nxG3zUXzDSCZ",tasty:"eCnyJzL0gZ5NaglMFoEq",description:"t_hO0Fd5zyX4doNUj5hA",CallToAction:"MKT3kuImasbYEJ2RPjDd",button:"yoXeptHaQeP0Nnk7yL6t",body_selected:"XliKAfiIocZpHlXXdKAV",body_selectedHover:"hSiKFUIs24MUOl3abYRE",body_disabled:"dMejecRseS1BRVNaCm8B",img:"Zq387SgIBdRQJUE1r8U1",weight_selected:"SGjVGePSGu5mnjvV4XnM",amount:"QZ9rCUEM4P9QQP3v1NSH",measure:"yvDywIZ_UUlpiddcYFcJ",notAvailable:"ftAabfL9WX9_CiXCNnNz"},t.Z=a},435:function(e,t,n){"use strict";var r=n(4251),o=n.n(r),i=n(8922),a=n.n(i),u=n(4155),l=n.n(u),c=new URL(n(684),n.b),s=a()(o()),f=l()(c);s.push([e.id,".Cs6eoSGNglhZQuRHG9G3{min-height:100vh;min-width:100%;background-image:url("+f+');background-size:auto;display:flex;align-items:center;justify-content:center;flex-direction:column;position:relative}.Cs6eoSGNglhZQuRHG9G3 .zYBC4RiWsUhCFL_3Wkub{font-family:"Exo 2.0 Thin";color:#fff;font-size:2.25rem;margin-bottom:1.6%;text-align:center}.Cs6eoSGNglhZQuRHG9G3 .mGQDY0H62NyG15Noio1i{width:100%;display:flex;flex-wrap:wrap;justify-content:space-around}.Cs6eoSGNglhZQuRHG9G3 .mGQDY0H62NyG15Noio1i>*{margin:0 1.5rem 1.5rem 1.5rem}.Cs6eoSGNglhZQuRHG9G3::after{background:rgba(0,0,0,0);background:-moz-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.00005) 49.88%, rgba(0, 0, 0, 0.5) 100%);background:-webkit-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.00005) 49.88%, rgba(0, 0, 0, 0.5) 100%);background:-webkit-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.00005) 49.88%, rgba(0, 0, 0, 0.5) 100%);background:-o-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.00005) 49.88%, rgba(0, 0, 0, 0.5) 100%);background:-ms-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.00005) 49.88%, rgba(0, 0, 0, 0.5) 100%);background:linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.00005) 49.88%, rgba(0, 0, 0, 0.5) 100%);content:"";display:block;height:100%;left:0;position:absolute;top:0;width:100%}.Cs6eoSGNglhZQuRHG9G3>*{z-index:1}',"",{version:3,sources:["webpack://./src/components/container/Container.module.scss"],names:[],mappings:"AAAA,sBACC,gBAAA,CACA,cAAA,CACA,wDAAA,CACA,oBAAA,CACA,YAAA,CACA,kBAAA,CACA,sBAAA,CACA,qBAAA,CACA,iBAAA,CAEA,4CACC,0BAAA,CACA,UAAA,CACA,iBAAA,CACA,kBAAA,CACA,iBAAA,CAGD,4CACC,UAAA,CACA,YAAA,CACA,cAAA,CACA,4BAAA,CAEA,8CACC,6BAAA,CAIF,6BACC,wBAAA,CACA,sHAAA,CACA,kHAAA,CACA,yHAAA,CACA,oHAAA,CACA,qHAAA,CACA,iHAAA,CACA,UAAA,CACA,aAAA,CACA,WAAA,CACA,MAAA,CACA,iBAAA,CACA,KAAA,CACA,UAAA,CAGD,wBACC,SAAA",sourcesContent:['.container {\r\n\tmin-height: 100vh;\r\n\tmin-width: 100%;\r\n\tbackground-image: url("../../images/background.png");\r\n\tbackground-size: auto;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n\tjustify-content: center;\r\n\tflex-direction: column;\r\n\tposition: relative;\r\n\r\n\t.title {\r\n\t\tfont-family: "Exo 2.0 Thin";\r\n\t\tcolor: #FFFFFF;\r\n\t\tfont-size: 2.25rem;\r\n\t\tmargin-bottom: 1.6%;\r\n\t\ttext-align: center;\r\n\t}\r\n\r\n\t.elements {\r\n\t\twidth: 100%;\r\n\t\tdisplay: flex;\r\n\t\tflex-wrap: wrap;\r\n\t\tjustify-content: space-around;\r\n\r\n\t\t&>* {\r\n\t\t\tmargin: 0 1.5rem 1.5rem 1.5rem;\r\n\t\t}\r\n\t}\r\n\r\n\t&::after {\r\n\t\tbackground: transparent;\r\n\t\tbackground: -moz-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 5e-05) 49.88%, rgba(0, 0, 0, 0.5) 100%);\r\n\t\tbackground: -webkit-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 5e-05) 49.88%, rgba(0, 0, 0, 0.5) 100%);\r\n\t\tbackground: -webkit-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 5e-05) 49.88%, rgba(0, 0, 0, 0.5) 100%);\r\n\t\tbackground: -o-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 5e-05) 49.88%, rgba(0, 0, 0, 0.5) 100%);\r\n\t\tbackground: -ms-linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 5e-05) 49.88%, rgba(0, 0, 0, 0.5) 100%);\r\n\t\tbackground: linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 5e-05) 49.88%, rgba(0, 0, 0, 0.5) 100%);\r\n\t\tcontent: "";\r\n\t\tdisplay: block;\r\n\t\theight: 100%;\r\n\t\tleft: 0;\r\n\t\tposition: absolute;\r\n\t\ttop: 0;\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t&>* {\r\n\t\tz-index: 1;\r\n\t}\r\n}'],sourceRoot:""}]),s.locals={container:"Cs6eoSGNglhZQuRHG9G3",title:"zYBC4RiWsUhCFL_3Wkub",elements:"mGQDY0H62NyG15Noio1i"},t.Z=s},6086:function(e,t,n){"use strict";var r=n(4251),o=n.n(r),i=n(8922),a=n.n(i),u=n(5786),l=n(5582),c=a()(o());c.i(u.Z),c.i(l.Z),c.push([e.id,'*{box-sizing:border-box}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,"Trebuchet MS","Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue",sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro,Menlo,Monaco,Consolas,"Courier New",monospace}',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAGA,EACC,qBAAA,CAGD,KACC,QAAA,CACA,kKAAA,CAGA,kCAAA,CACA,iCAAA,CAGD,KACC,yEAAA",sourcesContent:["@import './fonts/Trebuchet-MS/trebuchet-ms.css';\n@import './fonts/Exo2.0-Thin/Exo2.0-Thin.css';\n\n* {\n\tbox-sizing: border-box;\n}\n\nbody {\n\tmargin: 0;\n\tfont-family: -apple-system, BlinkMacSystemFont, 'Trebuchet MS', 'Segoe UI', 'Roboto', 'Oxygen',\n\t\t'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n\t\tsans-serif;\n\t-webkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n\tfont-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n\t\tmonospace;\n}"],sourceRoot:""}]),t.Z=c},5582:function(e,t,n){"use strict";var r=n(4251),o=n.n(r),i=n(8922),a=n.n(i),u=n(4155),l=n.n(u),c=new URL(n(1994),n.b),s=new URL(n(6549),n.b),f=a()(o()),d=l()(c),p=l()(s);f.push([e.id,'/* @font-face {\r\n\tfont-family: "Exo 2.0 Thin";\r\n\tsrc: url("./Exo2.0-Thin.woff") format("woff");\r\n} */\r\n\r\n@font-face {\r\n\tfont-family: "Exo 2.0 Thin";\r\n\tsrc: local("Exo 2.0 Thin"),\r\n\t\turl('+d+"),\r\n\t\turl("+p+') format("woff");\r\n}',"",{version:3,sources:["webpack://./src/fonts/Exo2.0-Thin/Exo2.0-Thin.css"],names:[],mappings:"AAAA;;;GAGG;;AAEH;CACC,2BAA2B;CAC3B;;wDAEyC;AAC1C",sourcesContent:['/* @font-face {\r\n\tfont-family: "Exo 2.0 Thin";\r\n\tsrc: url("./Exo2.0-Thin.woff") format("woff");\r\n} */\r\n\r\n@font-face {\r\n\tfont-family: "Exo 2.0 Thin";\r\n\tsrc: local("Exo 2.0 Thin"),\r\n\t\turl("./Exo2.0-Thin.eot"),\r\n\t\turl("./Exo2.0-Thin.woff") format("woff");\r\n}'],sourceRoot:""}]),t.Z=f},5786:function(e,t,n){"use strict";var r=n(4251),o=n.n(r),i=n(8922),a=n.n(i),u=n(4155),l=n.n(u),c=new URL(n(5702),n.b),s=new URL(n(7476),n.b),f=a()(o()),d=l()(c),p=l()(s);f.push([e.id,'@font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: normal;\r\n\tsrc: url('+d+') format("woff");\r\n}\r\n\r\n@font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: bold;\r\n\tsrc: url('+p+') format("woff");\r\n}\r\n\r\n/* @font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: normal;\r\n\tsrc: local("Trebuchet MS"),\r\n\t\turl("./trebuc.eot"),\r\n\t\turl("./trebuc.woff") format("woff");\r\n}\r\n\r\n@font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: bold;\r\n\tsrc: local("Trebuchet MS"),\r\n\t\turl("./trebuchet-ms-bold.eot"),\r\n\t\turl("./trebuchet-ms-bold.woff") format("woff");\r\n} */',"",{version:3,sources:["webpack://./src/fonts/Trebuchet-MS/trebuchet-ms.css"],names:[],mappings:"AAAA;CACC,2BAA2B;CAC3B,mBAAmB;CACnB,2DAAwC;AACzC;;AAEA;CACC,2BAA2B;CAC3B,iBAAiB;CACjB,2DAAmD;AACpD;;AAEA;;;;;;;;;;;;;;GAcG",sourcesContent:['@font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: normal;\r\n\tsrc: url("./trebuc.woff") format("woff");\r\n}\r\n\r\n@font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: bold;\r\n\tsrc: url("./trebuchet-ms-bold.woff") format("woff");\r\n}\r\n\r\n/* @font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: normal;\r\n\tsrc: local("Trebuchet MS"),\r\n\t\turl("./trebuc.eot"),\r\n\t\turl("./trebuc.woff") format("woff");\r\n}\r\n\r\n@font-face {\r\n\tfont-family: "Trebuchet MS";\r\n\tfont-weight: bold;\r\n\tsrc: local("Trebuchet MS"),\r\n\t\turl("./trebuchet-ms-bold.eot"),\r\n\t\turl("./trebuchet-ms-bold.woff") format("woff");\r\n} */'],sourceRoot:""}]),t.Z=f},3379:function(e){"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],u=0;u<e.length;u++){var l=e[u],c=r.base?l[0]+r.base:l[0],s=i[c]||0,f="".concat(c," ").concat(s);i[c]=s+1;var d=n(f),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=u,t.splice(u,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var u=n(i[a]);t[u].references--}for(var l=r(e,o),c=0;c<i.length;c++){var s=n(i[c]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}i=l}}},569:function(e){"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:function(e){"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},3565:function(e,t,n){"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:function(e){"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:function(e){"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},1994:function(e,t,n){"use strict";e.exports=n.p+"src/assets/Exo2.0-Thin.eot"},6549:function(e,t,n){"use strict";e.exports=n.p+"src/assets/Exo2.0-Thin.woff"},5702:function(e,t,n){"use strict";e.exports=n.p+"src/assets/trebuc.woff"},7476:function(e,t,n){"use strict";e.exports=n.p+"src/assets/trebuchet-ms-bold.woff"},684:function(e,t,n){"use strict";e.exports=n.p+"src/assets/background.png"}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.m=n,o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,{a:t}),t},o.d=function(e,t){for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.f={},o.e=function(e){return Promise.all(Object.keys(o.f).reduce((function(t,n){return o.f[n](e,t),t}),[]))},o.u=function(e){return e+".shim.js"},o.miniCssF=function(e){},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},e={},t="fun-box-tz:",o.l=function(n,r,i,a){if(e[n])e[n].push(r);else{var u,l;if(void 0!==i)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var f=c[s];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+i){u=f;break}}u||(l=!0,(u=document.createElement("script")).charset="utf-8",u.timeout=120,o.nc&&u.setAttribute("nonce",o.nc),u.setAttribute("data-webpack",t+i),u.src=n),e[n]=[r];var d=function(t,r){u.onerror=u.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],u.parentNode&&u.parentNode.removeChild(u),o&&o.forEach((function(e){return e(r)})),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:u}),12e4);u.onerror=d.bind(null,u.onerror),u.onload=d.bind(null,u.onload),l&&document.head.appendChild(u)}},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.p="./",function(){o.b=document.baseURI||self.location.href;var e={179:0};o.f.j=function(t,n){var r=o.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise((function(n,o){r=e[t]=[n,o]}));n.push(r[2]=i);var a=o.p+o.u(t),u=new Error;o.l(a,(function(n){if(o.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;u.message="Loading chunk "+t+" failed.\n("+i+": "+a+")",u.name="ChunkLoadError",u.type=i,u.request=a,r[1](u)}}),"chunk-"+t,t)}};var t=function(t,n){var r,i,a=n[0],u=n[1],l=n[2],c=0;if(a.some((function(t){return 0!==e[t]}))){for(r in u)o.o(u,r)&&(o.m[r]=u[r]);l&&l(o)}for(t&&t(n);c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0},n=self.webpackChunkfun_box_tz=self.webpackChunkfun_box_tz||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))}(),o.nc=void 0,function(){"use strict";o(2526),o(1817),o(2443),o(2401),o(8722),o(2165),o(9007),o(3510),o(1840),o(6982),o(2159),o(6649),o(9341),o(543),o(2222),o(545),o(3290),o(7327),o(9826),o(4553),o(4944),o(6535),o(1038),o(6699),o(2772),o(6992),o(9600),o(4986),o(1249),o(6572),o(5827),o(6644),o(5069),o(7042),o(2707),o(8706),o(561),o(3792),o(9244),o(8264),o(9575),o(5735),o(6078),o(4855),o(8309),o(3706),o(1532),o(9752),o(2376),o(3181),o(3484),o(2388),o(8621),o(403),o(4755),o(5438),o(332),o(658),o(197),o(4914),o(2420),o(160),o(970),o(2703),o(3689),o(9653),o(3299),o(5192),o(3161),o(4048),o(8285),o(4363),o(5994),o(1874),o(9494),o(6977),o(9601),o(9595),o(5500),o(9720),o(3371),o(8559),o(5003),o(9337),o(6210),o(489),o(3304),o(1825),o(8410),o(2200),o(7941),o(4869),o(3952),o(7227),o(514),o(1539),o(6833),o(4678),o(1058),o(8674),o(7727),o(224),o(2419),o(9596),o(2586),o(4819),o(5683),o(9361),o(1037),o(5898),o(7318),o(4361),o(3593),o(9532),o(4603),o(4916),o(2087),o(9714),o(189),o(9841),o(7852),o(4953),o(2023),o(8783),o(4723),o(6528),o(3112),o(8992),o(2481),o(5306),o(4765),o(3123),o(6755),o(3210),o(8702),o(5674),o(5218),o(4475),o(7929),o(915),o(9253),o(2125),o(8830),o(8734),o(9254),o(7268),o(7397),o(86),o(623),o(4197),o(6495),o(7145),o(5109),o(5125),o(2472),o(9743),o(8255),o(9135),o(2990),o(8927),o(3105),o(5035),o(4345),o(7174),o(2846),o(8145),o(4731),o(7209),o(6319),o(8867),o(7789),o(3739),o(5206),o(9368),o(4483),o(2056),o(4141),o(678),o(7462),o(3824),o(5021),o(2974),o(5016),o(4129),o(8478),o(4747),o(3948),o(4633),o(5844),o(285),o(3753),o(1637);var e=o(2908),t=o(7769),n=o(3379),r=o.n(n),i=o(7795),a=o.n(i),u=o(569),l=o.n(u),c=o(3565),s=o.n(c),f=o(9216),d=o.n(f),p=o(4589),h=o.n(p),v=o(6086),g={};g.styleTagTransform=h(),g.setAttributes=s(),g.insert=l().bind(null,"head"),g.domAPI=a(),g.insertStyleElement=d(),r()(v.Z,g),v.Z&&v.Z.locals&&v.Z.locals;var m=o(7448),y={};y.styleTagTransform=h(),y.setAttributes=s(),y.insert=l().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=d(),r()(m.Z,y);var b=m.Z&&m.Z.locals?m.Z.locals:void 0,A=o.p+"src/assets/cat_fun-box.png",w=o(1187),C={};C.styleTagTransform=h(),C.setAttributes=s(),C.insert=l().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=d(),r()(w.Z,C);var x=w.Z&&w.Z.locals?w.Z.locals:void 0;function S(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,u=[],l=!0,c=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=i.call(n)).done)&&(u.push(r.value),u.length!==t);l=!0);}catch(e){c=!0,o=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw o}}return u}}(e,t)||function(e,t){if(e){if("string"==typeof e)return k(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?k(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function k(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=["порций","порция","порции","порции","порции","порций","порций","порций","порций","порций"],P=["мышей","мышь","мыши","мыши","мыши","мышей","мышей","мышей","мышей","мышей"];function I(t){var n=S((0,e.useState)(!1),2),r=n[0],o=n[1],i=S((0,e.useState)(!1),2),a=i[0],u=i[1],l=function(){o(!r),u(!1)},c=function(e,t){var n=t[e%10];return e>10&&20>e?t[0]:n};return e.createElement("div",{className:x.container},e.createElement("button",{className:r?"".concat(x.body," ").concat(x.body_selected," ").concat(a?x.body_selectedHover:""):"".concat(x.body),onClick:l,onMouseLeave:function(){return u(!0)},disabled:!t.isAvailable},e.createElement("div",{className:x.text},e.createElement("div",{className:x.slogan},t.slogan),e.createElement("div",{className:x.brand},t.brand),e.createElement("div",{className:x.tasty},"с ","".concat(t.tasty)),e.createElement("div",{className:x.description},e.createElement("div",null,"".concat(t.portions," ").concat(c(t.portions,E))),e.createElement("div",null,"".concat(1===t.gifts?"":t.gifts," ").concat(c(t.gifts,P))," ",t.text1),t.portions>50?e.createElement("div",null,t.text2):null)),e.createElement("img",{className:x.img,src:t.img,alt:t.altImg}),e.createElement("div",{className:r?"".concat(x.weight," ").concat(x.weight_selected):"".concat(x.weight)},e.createElement("div",{className:x.amount},(""+t.weight.amount).replace(".",",")),e.createElement("div",{className:x.measure},t.weight.measure))),e.createElement("div",{className:x.CallToAction},t.isAvailable?r?e.createElement("div",null,t.text):e.createElement(e.Fragment,null,e.createElement("div",{className:x.callToActionText},t.callToAction," "),e.createElement("button",{onClick:l,className:x.button,children:t.callToActionButton})):e.createElement("div",{className:x.notAvailable},t.notAvailable)))}function _(t){return e.createElement(e.Fragment,null,t.cards.map((function(t){return e.createElement(I,{isAvailable:t.isAvailable,id:t.id,text:t.text,brand:t.brand,gifts:t.gifts,img:t.img,portions:t.portions,slogan:t.slogan,tasty:t.tasty,weight:t.weight,key:t.id,altImg:"Котик",callToAction:"Чего сидишь? Порадуй коте,",callToActionButton:"купи.",notAvailable:"Печалька, с ".concat(t.tasty," закончился."),text1:"в подарок",text2:"заказчик доволен"})})))}var T=o(435),O={};O.styleTagTransform=h(),O.setAttributes=s(),O.insert=l().bind(null,"head"),O.domAPI=a(),O.insertStyleElement=d(),r()(T.Z,O);var R=T.Z&&T.Z.locals?T.Z.locals:void 0;function N(t){return e.createElement("div",{className:R.container},e.createElement("div",{className:R.title},t.title),e.createElement("div",{className:R.elements},t.children))}var z,M=[{isAvailable:!0,id:1,text:"Печень утки разварная с артишоками.",brand:"нямушка",slogan:"сказочное заморское яство",gifts:1,img:A,portions:10,tasty:"фуа-гра",weight:{amount:.5,measure:"кг"}},{isAvailable:!0,id:2,text:"Головы щучьи с чесноком да свежайшая сёмгушка.",brand:"нямушка",slogan:"сказочное заморское яство",gifts:2,img:A,portions:40,tasty:"рыбой",weight:{amount:2,measure:"кг"}},{isAvailable:!1,id:3,text:"Филе из цыплят с трюфелями в бульоне.",brand:"нямушка",slogan:"сказочное заморское яство",gifts:5,img:A,portions:100,tasty:"курой",weight:{amount:5,measure:"кг"}}],L=function(){return e.createElement("div",{className:b.App},e.createElement(N,{title:"Ты сегодня покормил кота?"},e.createElement(_,{cards:M})))};t.createRoot(document.getElementById("root")).render(e.createElement(e.StrictMode,null,e.createElement(L,null))),z&&z instanceof Function&&o.e(276).then(o.bind(o,4276)).then((function(e){var t=e.getCLS,n=e.getFID,r=e.getFCP,o=e.getLCP,i=e.getTTFB;t(z),n(z),r(z),o(z),i(z)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNMeS9FLFNBQVUsR0FDVmtCLE1BQU8sVUFDUE0sT0FBUSxDQUNOQyxPQUFRLEdBQ1JDLFFBQVMsT0FFVixDQUNEWCxhQUFhLEVBQ2Jud0YsR0FBSSxFQUNKd2lCLEtBQU0saURBQ042dEUsTUFBTyxVQUNQRCxPQUFRLDRCQUNSRyxNQUFPLEVBQ1A1Z0YsSUFBSyxFQUNMeS9FLFNBQVUsR0FDVmtCLE1BQU8sUUFDUE0sT0FBUSxDQUNOQyxPQUFRLEVBQ1JDLFFBQVMsT0FFVixDQUNEWCxhQUFhLEVBQ2Jud0YsR0FBSSxFQUNKd2lCLEtBQU0sd0NBQ042dEUsTUFBTyxVQUNQRCxPQUFRLDRCQUNSRyxNQUFPLEVBQ1A1Z0YsSUFBSyxFQUNMeS9FLFNBQVUsSUFDVmtCLE1BQU8sUUFDUE0sT0FBUSxDQUNOQyxPQUFRLEVBQ1JDLFFBQVMsUUFZYixFQVRBLFdBQ0UsT0FBb0IsZ0JBQW9CLE1BQU8sQ0FDN0NiLFVBQVcsT0FDRyxnQkFBb0JtQixFQUFXLENBQzdDQyxNQUFPLDZCQUNPLGdCQUFvQkgsRUFBVSxDQUM1Q0MsTUFBTy92RixLQUVYLEVFNklXLGFBQW9CdUIsU0FBUzR1RixlQUFlLFNBQ2xEOXBGLE9BQXFCLGdCQUFvQixhQUFrQixLQUFtQixnQkFBb0IsRUFBSyxRRHZNdEc2cEYsR0FBZUEsYUFBdUI1N0MsVUFDeEMsOEJBQXFCMXBCLE1BQUssU0FBVXdsRSxHQUNsQyxJQUFJQyxFQUFTRCxFQUFLQyxPQUNoQkMsRUFBU0YsRUFBS0UsT0FDZEMsRUFBU0gsRUFBS0csT0FDZEMsRUFBU0osRUFBS0ksT0FDZEMsRUFBVUwsRUFBS0ssUUFDakJKLEVBQU9ILEdBQ1BJLEVBQU9KLEdBQ1BLLEVBQU9MLEdBQ1BNLEVBQU9OLEdBQ1BPLEVBQVFQLEVBQ1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mdW4tYm94LXR6L3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1idWZmZXItYmFzaWMtZGV0ZWN0aW9uLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZmlsbC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZvci1lYWNoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS1jb25zdHJ1Y3Rvci1hbmQtbGlzdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zZXQtbGVuZ3RoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc2xpY2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zb3J0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NsYXNzb2YuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1odG1sLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXItcmVzdWx0LW9iamVjdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGF0ZS10by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS10b2tlbi1saXN0LXByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtYnVuLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWRlbm8uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MtcGViYmxlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtd2Via2l0LXZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnJlZXppbmcuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llZWU3NTQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWJpZy1pbnQtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtaW50ZWdyYWwtbnVtYmVyLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcmVnZXhwLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtc3ltYm9sLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItY3JlYXRlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWV4cG0xLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1mcm91bmQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9tYXRoLWxvZzEwLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbWF0aC1sb2cxcC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtc2lnbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbm90LWEtcmVnZXhwLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLWlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtYXNzaWduLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcGF0aC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wcm94eS1hY2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3F1ZXVlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1mbGFncy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtc3RpY2t5LWhlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zYW1lLXZhbHVlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2NoZWR1bGVycy1maXguanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC13ZWJraXQtYnVnLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zdHJpbmctdHJpbS1zdGFydC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLWNvbnN0cnVjdG9yLWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYmlnLWludC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2Zmc2V0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90eXBlZC1hcnJheS1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS1zcGVjaWVzLWFuZC1saXN0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdHlwZWQtYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91aWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91cmwtY29uc3RydWN0b3ItZGV0ZWN0aW9uLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3ZhbGlkYXRlLWFyZ3VtZW50cy1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93aGl0ZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS1idWZmZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXktYnVmZmVyLnNsaWNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWxsLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNvcnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zcGxpY2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkudW5zY29wYWJsZXMuZmxhdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1wcmltaXRpdmUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuanNvbi50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXAuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hY29zaC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFzaW5oLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYXRhbmguanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jYnJ0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2x6MzIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5jb3NoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguZXhwbTEuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5mcm91bmQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5oeXBvdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmltdWwuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxMC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzFwLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpZ24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC5zaW5oLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgudGFuaC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWZpbml0ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5pcy1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1heC1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmZyZWV6ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJvbS1lbnRyaWVzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZXh0ZW5zaWJsZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuaXMtZnJvemVuLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtc2V0dGVyLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmFsbC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wcm9taXNlLmNhdGNoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5maW5hbGx5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5yYWNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UucmVqZWN0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UucmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5zZXQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnNldC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmFuY2hvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYmlnLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYm9sZC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuY29kZS1wb2ludC1hdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZW5kcy13aXRoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5maXhlZC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZm9udGNvbG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRhbGljcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtZW5kLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJhdy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwZWF0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zZWFyY2guanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNtYWxsLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN0cmlrZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3ViLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tZW5kLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLWxlZnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tcmlnaHQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmZvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaGFzLWluc3RhbmNlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5pcy1jb25jYXQtc3ByZWFkYWJsZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5rZXktZm9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5tYXRjaC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc2VhcmNoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGVjaWVzLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5jb3B5LXdpdGhpbi5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWxsLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLWluZGV4LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbmQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQzMi1hcnJheS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDY0LWFycmF5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW50OC1hcnJheS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5qb2luLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5Lm9mLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnJlZHVjZS1yaWdodC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkucmV2ZXJzZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zZXQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb3J0LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLWxvY2FsZS1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tc3RyaW5nLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnVpbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLXNldC5jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuY2xlYXItaW1tZWRpYXRlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuaW1tZWRpYXRlLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5xdWV1ZS1taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnNldC1pbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudXJsLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvQXBwLm1vZHVsZS5zY3NzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvY29tcG9uZW50cy9jYXJkL0NhcmQubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9Db250YWluZXIubW9kdWxlLnNjc3MiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9pbmRleC5jc3MiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9mb250cy9FeG8yLjAtVGhpbi9FeG8yLjAtVGhpbi5jc3MiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9mb250cy9UcmVidWNoZXQtTVMvdHJlYnVjaGV0LW1zLmNzcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Z1bi1ib3gtdHovd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9mdW4tYm94LXR6L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6L3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei93ZWJwYWNrL3J1bnRpbWUvZ2V0IG1pbmktY3NzIGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL2Z1bi1ib3gtdHovd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9mdW4tYm94LXR6L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2Z1bi1ib3gtdHovd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9mdW4tYm94LXR6L3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vc3JjL2luZGV4LmNzcz85NGY4Iiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvQXBwLm1vZHVsZS5zY3NzPzJhNmQiLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9jb21wb25lbnRzL2NhcmQvQ2FyZC5tb2R1bGUuc2Nzcz80YWM0Iiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvY29tcG9uZW50cy9jYXJkL0NhcmQudHN4Iiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvY29tcG9uZW50cy9DYXJkTGlzdC9DYXJkTGlzdC50c3giLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9Db250YWluZXIubW9kdWxlLnNjc3M/NjQ5MSIsIndlYnBhY2s6Ly9mdW4tYm94LXR6Ly4vc3JjL2NvbXBvbmVudHMvY29udGFpbmVyL0NvbnRhaW5lci50c3giLCJ3ZWJwYWNrOi8vZnVuLWJveC10ei8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvcmVwb3J0V2ViVml0YWxzLnRzIiwid2VicGFjazovL2Z1bi1ib3gtdHovLi9zcmMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcImZ1bi1ib3gtdHo6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9IGZ1bmN0aW9uKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSBmdW5jdGlvbihwcmV2LCBldmVudCkge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goZnVuY3Rpb24oZm4pIHsgcmV0dXJuIGZuKGV2ZW50KTsgfSk7XG5cdFx0aWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpO1xuXHR9O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGlmICghdXJsKSB7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7XG5cbiAgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaGFzaCkge1xuICAgIHVybCArPSBvcHRpb25zLmhhc2g7XG4gIH1cblxuICAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyByZXR1cm4gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH0sIF90eXBlb2Yob2JqKTsgfVxudmFyIGFhID0gcmVxdWlyZShcInJlYWN0XCIpLFxuICBjYSA9IHJlcXVpcmUoXCJzY2hlZHVsZXJcIik7XG5mdW5jdGlvbiBwKGEpIHtcbiAgZm9yICh2YXIgYiA9IFwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIgKyBhLCBjID0gMTsgYyA8IGFyZ3VtZW50cy5sZW5ndGg7IGMrKykgYiArPSBcIiZhcmdzW109XCIgKyBlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtcbiAgcmV0dXJuIFwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiICsgYSArIFwiOyB2aXNpdCBcIiArIGIgKyBcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCI7XG59XG52YXIgZGEgPSBuZXcgU2V0KCksXG4gIGVhID0ge307XG5mdW5jdGlvbiBmYShhLCBiKSB7XG4gIGhhKGEsIGIpO1xuICBoYShhICsgXCJDYXB0dXJlXCIsIGIpO1xufVxuZnVuY3Rpb24gaGEoYSwgYikge1xuICBlYVthXSA9IGI7XG4gIGZvciAoYSA9IDA7IGEgPCBiLmxlbmd0aDsgYSsrKSBkYS5hZGQoYlthXSk7XG59XG52YXIgaWEgPSAhKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cgfHwgXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5kb2N1bWVudCB8fCBcInVuZGVmaW5lZFwiID09PSB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLFxuICBqYSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gIGthID0gL15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLFxuICBsYSA9IHt9LFxuICBtYSA9IHt9O1xuZnVuY3Rpb24gb2EoYSkge1xuICBpZiAoamEuY2FsbChtYSwgYSkpIHJldHVybiAhMDtcbiAgaWYgKGphLmNhbGwobGEsIGEpKSByZXR1cm4gITE7XG4gIGlmIChrYS50ZXN0KGEpKSByZXR1cm4gbWFbYV0gPSAhMDtcbiAgbGFbYV0gPSAhMDtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcGEoYSwgYiwgYywgZCkge1xuICBpZiAobnVsbCAhPT0gYyAmJiAwID09PSBjLnR5cGUpIHJldHVybiAhMTtcbiAgc3dpdGNoIChfdHlwZW9mKGIpKSB7XG4gICAgY2FzZSBcImZ1bmN0aW9uXCI6XG4gICAgY2FzZSBcInN5bWJvbFwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICBpZiAoZCkgcmV0dXJuICExO1xuICAgICAgaWYgKG51bGwgIT09IGMpIHJldHVybiAhYy5hY2NlcHRzQm9vbGVhbnM7XG4gICAgICBhID0gYS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsIDUpO1xuICAgICAgcmV0dXJuIFwiZGF0YS1cIiAhPT0gYSAmJiBcImFyaWEtXCIgIT09IGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAhMTtcbiAgfVxufVxuZnVuY3Rpb24gcWEoYSwgYiwgYywgZCkge1xuICBpZiAobnVsbCA9PT0gYiB8fCBcInVuZGVmaW5lZFwiID09PSB0eXBlb2YgYiB8fCBwYShhLCBiLCBjLCBkKSkgcmV0dXJuICEwO1xuICBpZiAoZCkgcmV0dXJuICExO1xuICBpZiAobnVsbCAhPT0gYykgc3dpdGNoIChjLnR5cGUpIHtcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gIWI7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuICExID09PSBiO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBpc05hTihiKTtcbiAgICBjYXNlIDY6XG4gICAgICByZXR1cm4gaXNOYU4oYikgfHwgMSA+IGI7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gdihhLCBiLCBjLCBkLCBlLCBmLCBnKSB7XG4gIHRoaXMuYWNjZXB0c0Jvb2xlYW5zID0gMiA9PT0gYiB8fCAzID09PSBiIHx8IDQgPT09IGI7XG4gIHRoaXMuYXR0cmlidXRlTmFtZSA9IGQ7XG4gIHRoaXMuYXR0cmlidXRlTmFtZXNwYWNlID0gZTtcbiAgdGhpcy5tdXN0VXNlUHJvcGVydHkgPSBjO1xuICB0aGlzLnByb3BlcnR5TmFtZSA9IGE7XG4gIHRoaXMudHlwZSA9IGI7XG4gIHRoaXMuc2FuaXRpemVVUkwgPSBmO1xuICB0aGlzLnJlbW92ZUVtcHR5U3RyaW5nID0gZztcbn1cbnZhciB6ID0ge307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gIHpbYV0gPSBuZXcgdihhLCAwLCAhMSwgYSwgbnVsbCwgITEsICExKTtcbn0pO1xuW1tcImFjY2VwdENoYXJzZXRcIiwgXCJhY2NlcHQtY2hhcnNldFwiXSwgW1wiY2xhc3NOYW1lXCIsIFwiY2xhc3NcIl0sIFtcImh0bWxGb3JcIiwgXCJmb3JcIl0sIFtcImh0dHBFcXVpdlwiLCBcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgdmFyIGIgPSBhWzBdO1xuICB6W2JdID0gbmV3IHYoYiwgMSwgITEsIGFbMV0sIG51bGwsICExLCAhMSk7XG59KTtcbltcImNvbnRlbnRFZGl0YWJsZVwiLCBcImRyYWdnYWJsZVwiLCBcInNwZWxsQ2hlY2tcIiwgXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gIHpbYV0gPSBuZXcgdihhLCAyLCAhMSwgYS50b0xvd2VyQ2FzZSgpLCBudWxsLCAhMSwgITEpO1xufSk7XG5bXCJhdXRvUmV2ZXJzZVwiLCBcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIiwgXCJmb2N1c2FibGVcIiwgXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgelthXSA9IG5ldyB2KGEsIDIsICExLCBhLCBudWxsLCAhMSwgITEpO1xufSk7XG5cImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICB6W2FdID0gbmV3IHYoYSwgMywgITEsIGEudG9Mb3dlckNhc2UoKSwgbnVsbCwgITEsICExKTtcbn0pO1xuW1wiY2hlY2tlZFwiLCBcIm11bHRpcGxlXCIsIFwibXV0ZWRcIiwgXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gIHpbYV0gPSBuZXcgdihhLCAzLCAhMCwgYSwgbnVsbCwgITEsICExKTtcbn0pO1xuW1wiY2FwdHVyZVwiLCBcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgelthXSA9IG5ldyB2KGEsIDQsICExLCBhLCBudWxsLCAhMSwgITEpO1xufSk7XG5bXCJjb2xzXCIsIFwicm93c1wiLCBcInNpemVcIiwgXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgelthXSA9IG5ldyB2KGEsIDYsICExLCBhLCBudWxsLCAhMSwgITEpO1xufSk7XG5bXCJyb3dTcGFuXCIsIFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICB6W2FdID0gbmV3IHYoYSwgNSwgITEsIGEudG9Mb3dlckNhc2UoKSwgbnVsbCwgITEsICExKTtcbn0pO1xudmFyIHJhID0gL1tcXC06XShbYS16XSkvZztcbmZ1bmN0aW9uIHNhKGEpIHtcbiAgcmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKTtcbn1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICB2YXIgYiA9IGEucmVwbGFjZShyYSwgc2EpO1xuICB6W2JdID0gbmV3IHYoYiwgMSwgITEsIGEsIG51bGwsICExLCAhMSk7XG59KTtcblwieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24gKGEpIHtcbiAgdmFyIGIgPSBhLnJlcGxhY2UocmEsIHNhKTtcbiAgeltiXSA9IG5ldyB2KGIsIDEsICExLCBhLCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwgITEsICExKTtcbn0pO1xuW1wieG1sOmJhc2VcIiwgXCJ4bWw6bGFuZ1wiLCBcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gIHZhciBiID0gYS5yZXBsYWNlKHJhLCBzYSk7XG4gIHpbYl0gPSBuZXcgdihiLCAxLCAhMSwgYSwgXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwgITEsICExKTtcbn0pO1xuW1widGFiSW5kZXhcIiwgXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gIHpbYV0gPSBuZXcgdihhLCAxLCAhMSwgYS50b0xvd2VyQ2FzZSgpLCBudWxsLCAhMSwgITEpO1xufSk7XG56LnhsaW5rSHJlZiA9IG5ldyB2KFwieGxpbmtIcmVmXCIsIDEsICExLCBcInhsaW5rOmhyZWZcIiwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsICEwLCAhMSk7XG5bXCJzcmNcIiwgXCJocmVmXCIsIFwiYWN0aW9uXCIsIFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gIHpbYV0gPSBuZXcgdihhLCAxLCAhMSwgYS50b0xvd2VyQ2FzZSgpLCBudWxsLCAhMCwgITApO1xufSk7XG5mdW5jdGlvbiB0YShhLCBiLCBjLCBkKSB7XG4gIHZhciBlID0gei5oYXNPd25Qcm9wZXJ0eShiKSA/IHpbYl0gOiBudWxsO1xuICBpZiAobnVsbCAhPT0gZSA/IDAgIT09IGUudHlwZSA6IGQgfHwgISgyIDwgYi5sZW5ndGgpIHx8IFwib1wiICE9PSBiWzBdICYmIFwiT1wiICE9PSBiWzBdIHx8IFwiblwiICE9PSBiWzFdICYmIFwiTlwiICE9PSBiWzFdKSBxYShiLCBjLCBlLCBkKSAmJiAoYyA9IG51bGwpLCBkIHx8IG51bGwgPT09IGUgPyBvYShiKSAmJiAobnVsbCA9PT0gYyA/IGEucmVtb3ZlQXR0cmlidXRlKGIpIDogYS5zZXRBdHRyaWJ1dGUoYiwgXCJcIiArIGMpKSA6IGUubXVzdFVzZVByb3BlcnR5ID8gYVtlLnByb3BlcnR5TmFtZV0gPSBudWxsID09PSBjID8gMyA9PT0gZS50eXBlID8gITEgOiBcIlwiIDogYyA6IChiID0gZS5hdHRyaWJ1dGVOYW1lLCBkID0gZS5hdHRyaWJ1dGVOYW1lc3BhY2UsIG51bGwgPT09IGMgPyBhLnJlbW92ZUF0dHJpYnV0ZShiKSA6IChlID0gZS50eXBlLCBjID0gMyA9PT0gZSB8fCA0ID09PSBlICYmICEwID09PSBjID8gXCJcIiA6IFwiXCIgKyBjLCBkID8gYS5zZXRBdHRyaWJ1dGVOUyhkLCBiLCBjKSA6IGEuc2V0QXR0cmlidXRlKGIsIGMpKSk7XG59XG52YXIgdWEgPSBhYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxcbiAgdmEgPSBTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxcbiAgd2EgPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICB5YSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxcbiAgemEgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksXG4gIEFhID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICBCYSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxcbiAgQ2EgPSBTeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxcbiAgRGEgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIEVhID0gU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLFxuICBGYSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLFxuICBHYSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLFxuICBIYSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWEgPSBTeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1xuU3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7XG5TeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7XG5TeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7XG52YXIgSmEgPSBTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiBLYShhKSB7XG4gIGlmIChudWxsID09PSBhIHx8IFwib2JqZWN0XCIgIT09IF90eXBlb2YoYSkpIHJldHVybiBudWxsO1xuICBhID0gSmEgJiYgYVtKYV0gfHwgYVtcIkBAaXRlcmF0b3JcIl07XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhID8gYSA6IG51bGw7XG59XG52YXIgQSA9IE9iamVjdC5hc3NpZ24sXG4gIExhO1xuZnVuY3Rpb24gTWEoYSkge1xuICBpZiAodm9pZCAwID09PSBMYSkgdHJ5IHtcbiAgICB0aHJvdyBFcnJvcigpO1xuICB9IGNhdGNoIChjKSB7XG4gICAgdmFyIGIgPSBjLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO1xuICAgIExhID0gYiAmJiBiWzFdIHx8IFwiXCI7XG4gIH1cbiAgcmV0dXJuIFwiXFxuXCIgKyBMYSArIGE7XG59XG52YXIgTmEgPSAhMTtcbmZ1bmN0aW9uIE9hKGEsIGIpIHtcbiAgaWYgKCFhIHx8IE5hKSByZXR1cm4gXCJcIjtcbiAgTmEgPSAhMDtcbiAgdmFyIGMgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtcbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB2b2lkIDA7XG4gIHRyeSB7XG4gICAgaWYgKGIpIHtcbiAgICAgIGlmIChiID0gZnVuY3Rpb24gYigpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0sIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSwgXCJwcm9wc1wiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KCkge1xuICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBcIm9iamVjdFwiID09PSAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihSZWZsZWN0KSkgJiYgUmVmbGVjdC5jb25zdHJ1Y3QpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChiLCBbXSk7XG4gICAgICAgIH0gY2F0Y2ggKGwpIHtcbiAgICAgICAgICB2YXIgZCA9IGw7XG4gICAgICAgIH1cbiAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoYSwgW10sIGIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBiLmNhbGwoKTtcbiAgICAgICAgfSBjYXRjaCAobCkge1xuICAgICAgICAgIGQgPSBsO1xuICAgICAgICB9XG4gICAgICAgIGEuY2FsbChiLnByb3RvdHlwZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICB9IGNhdGNoIChsKSB7XG4gICAgICAgIGQgPSBsO1xuICAgICAgfVxuICAgICAgYSgpO1xuICAgIH1cbiAgfSBjYXRjaCAobCkge1xuICAgIGlmIChsICYmIGQgJiYgXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGwuc3RhY2spIHtcbiAgICAgIGZvciAodmFyIGUgPSBsLnN0YWNrLnNwbGl0KFwiXFxuXCIpLCBmID0gZC5zdGFjay5zcGxpdChcIlxcblwiKSwgZyA9IGUubGVuZ3RoIC0gMSwgaCA9IGYubGVuZ3RoIC0gMTsgMSA8PSBnICYmIDAgPD0gaCAmJiBlW2ddICE9PSBmW2hdOykgaC0tO1xuICAgICAgZm9yICg7IDEgPD0gZyAmJiAwIDw9IGg7IGctLSwgaC0tKSBpZiAoZVtnXSAhPT0gZltoXSkge1xuICAgICAgICBpZiAoMSAhPT0gZyB8fCAxICE9PSBoKSB7XG4gICAgICAgICAgZG8gaWYgKGctLSwgaC0tLCAwID4gaCB8fCBlW2ddICE9PSBmW2hdKSB7XG4gICAgICAgICAgICB2YXIgayA9IFwiXFxuXCIgKyBlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLCBcIiBhdCBcIik7XG4gICAgICAgICAgICBhLmRpc3BsYXlOYW1lICYmIGsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSAmJiAoayA9IGsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsIGEuZGlzcGxheU5hbWUpKTtcbiAgICAgICAgICAgIHJldHVybiBrO1xuICAgICAgICAgIH0gd2hpbGUgKDEgPD0gZyAmJiAwIDw9IGgpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICBOYSA9ICExLCBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IGM7XG4gIH1cbiAgcmV0dXJuIChhID0gYSA/IGEuZGlzcGxheU5hbWUgfHwgYS5uYW1lIDogXCJcIikgPyBNYShhKSA6IFwiXCI7XG59XG5mdW5jdGlvbiBQYShhKSB7XG4gIHN3aXRjaCAoYS50YWcpIHtcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gTWEoYS50eXBlKTtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIE1hKFwiTGF6eVwiKTtcbiAgICBjYXNlIDEzOlxuICAgICAgcmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMTU6XG4gICAgICByZXR1cm4gYSA9IE9hKGEudHlwZSwgITEpLCBhO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gYSA9IE9hKGEudHlwZS5yZW5kZXIsICExKSwgYTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gYSA9IE9hKGEudHlwZSwgITApLCBhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJcIjtcbiAgfVxufVxuZnVuY3Rpb24gUWEoYSkge1xuICBpZiAobnVsbCA9PSBhKSByZXR1cm4gbnVsbDtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGEpIHJldHVybiBhLmRpc3BsYXlOYW1lIHx8IGEubmFtZSB8fCBudWxsO1xuICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEpIHJldHVybiBhO1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIHlhOlxuICAgICAgcmV0dXJuIFwiRnJhZ21lbnRcIjtcbiAgICBjYXNlIHdhOlxuICAgICAgcmV0dXJuIFwiUG9ydGFsXCI7XG4gICAgY2FzZSBBYTpcbiAgICAgIHJldHVybiBcIlByb2ZpbGVyXCI7XG4gICAgY2FzZSB6YTpcbiAgICAgIHJldHVybiBcIlN0cmljdE1vZGVcIjtcbiAgICBjYXNlIEVhOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICBjYXNlIEZhOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VMaXN0XCI7XG4gIH1cbiAgaWYgKFwib2JqZWN0XCIgPT09IF90eXBlb2YoYSkpIHN3aXRjaCAoYS4kJHR5cGVvZikge1xuICAgIGNhc2UgQ2E6XG4gICAgICByZXR1cm4gKGEuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuQ29uc3VtZXJcIjtcbiAgICBjYXNlIEJhOlxuICAgICAgcmV0dXJuIChhLl9jb250ZXh0LmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLlByb3ZpZGVyXCI7XG4gICAgY2FzZSBEYTpcbiAgICAgIHZhciBiID0gYS5yZW5kZXI7XG4gICAgICBhID0gYS5kaXNwbGF5TmFtZTtcbiAgICAgIGEgfHwgKGEgPSBiLmRpc3BsYXlOYW1lIHx8IGIubmFtZSB8fCBcIlwiLCBhID0gXCJcIiAhPT0gYSA/IFwiRm9yd2FyZFJlZihcIiArIGEgKyBcIilcIiA6IFwiRm9yd2FyZFJlZlwiKTtcbiAgICAgIHJldHVybiBhO1xuICAgIGNhc2UgR2E6XG4gICAgICByZXR1cm4gYiA9IGEuZGlzcGxheU5hbWUgfHwgbnVsbCwgbnVsbCAhPT0gYiA/IGIgOiBRYShhLnR5cGUpIHx8IFwiTWVtb1wiO1xuICAgIGNhc2UgSGE6XG4gICAgICBiID0gYS5fcGF5bG9hZDtcbiAgICAgIGEgPSBhLl9pbml0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIFFhKGEoYikpO1xuICAgICAgfSBjYXRjaCAoYykge31cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIFJhKGEpIHtcbiAgdmFyIGIgPSBhLnR5cGU7XG4gIHN3aXRjaCAoYS50YWcpIHtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIFwiQ2FjaGVcIjtcbiAgICBjYXNlIDk6XG4gICAgICByZXR1cm4gKGIuZGlzcGxheU5hbWUgfHwgXCJDb250ZXh0XCIpICsgXCIuQ29uc3VtZXJcIjtcbiAgICBjYXNlIDEwOlxuICAgICAgcmV0dXJuIChiLl9jb250ZXh0LmRpc3BsYXlOYW1lIHx8IFwiQ29udGV4dFwiKSArIFwiLlByb3ZpZGVyXCI7XG4gICAgY2FzZSAxODpcbiAgICAgIHJldHVybiBcIkRlaHlkcmF0ZWRGcmFnbWVudFwiO1xuICAgIGNhc2UgMTE6XG4gICAgICByZXR1cm4gYSA9IGIucmVuZGVyLCBhID0gYS5kaXNwbGF5TmFtZSB8fCBhLm5hbWUgfHwgXCJcIiwgYi5kaXNwbGF5TmFtZSB8fCAoXCJcIiAhPT0gYSA/IFwiRm9yd2FyZFJlZihcIiArIGEgKyBcIilcIiA6IFwiRm9yd2FyZFJlZlwiKTtcbiAgICBjYXNlIDc6XG4gICAgICByZXR1cm4gXCJGcmFnbWVudFwiO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBiO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBcIlBvcnRhbFwiO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBcIlJvb3RcIjtcbiAgICBjYXNlIDY6XG4gICAgICByZXR1cm4gXCJUZXh0XCI7XG4gICAgY2FzZSAxNjpcbiAgICAgIHJldHVybiBRYShiKTtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gYiA9PT0gemEgPyBcIlN0cmljdE1vZGVcIiA6IFwiTW9kZVwiO1xuICAgIGNhc2UgMjI6XG4gICAgICByZXR1cm4gXCJPZmZzY3JlZW5cIjtcbiAgICBjYXNlIDEyOlxuICAgICAgcmV0dXJuIFwiUHJvZmlsZXJcIjtcbiAgICBjYXNlIDIxOlxuICAgICAgcmV0dXJuIFwiU2NvcGVcIjtcbiAgICBjYXNlIDEzOlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VcIjtcbiAgICBjYXNlIDE5OlxuICAgICAgcmV0dXJuIFwiU3VzcGVuc2VMaXN0XCI7XG4gICAgY2FzZSAyNTpcbiAgICAgIHJldHVybiBcIlRyYWNpbmdNYXJrZXJcIjtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTc6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMTQ6XG4gICAgY2FzZSAxNTpcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiKSByZXR1cm4gYi5kaXNwbGF5TmFtZSB8fCBiLm5hbWUgfHwgbnVsbDtcbiAgICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYikgcmV0dXJuIGI7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBTYShhKSB7XG4gIHN3aXRjaCAoX3R5cGVvZihhKSkge1xuICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgY2FzZSBcIm51bWJlclwiOlxuICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICByZXR1cm4gYTtcbiAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICByZXR1cm4gYTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIFRhKGEpIHtcbiAgdmFyIGIgPSBhLnR5cGU7XG4gIHJldHVybiAoYSA9IGEubm9kZU5hbWUpICYmIFwiaW5wdXRcIiA9PT0gYS50b0xvd2VyQ2FzZSgpICYmIChcImNoZWNrYm94XCIgPT09IGIgfHwgXCJyYWRpb1wiID09PSBiKTtcbn1cbmZ1bmN0aW9uIFVhKGEpIHtcbiAgdmFyIGIgPSBUYShhKSA/IFwiY2hlY2tlZFwiIDogXCJ2YWx1ZVwiLFxuICAgIGMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLCBiKSxcbiAgICBkID0gXCJcIiArIGFbYl07XG4gIGlmICghYS5oYXNPd25Qcm9wZXJ0eShiKSAmJiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgYyAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjLmdldCAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjLnNldCkge1xuICAgIHZhciBlID0gYy5nZXQsXG4gICAgICBmID0gYy5zZXQ7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsIGIsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogITAsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGUuY2FsbCh0aGlzKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChhKSB7XG4gICAgICAgIGQgPSBcIlwiICsgYTtcbiAgICAgICAgZi5jYWxsKHRoaXMsIGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLCBiLCB7XG4gICAgICBlbnVtZXJhYmxlOiBjLmVudW1lcmFibGVcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICByZXR1cm4gZDtcbiAgICAgIH0sXG4gICAgICBzZXRWYWx1ZTogZnVuY3Rpb24gc2V0VmFsdWUoYSkge1xuICAgICAgICBkID0gXCJcIiArIGE7XG4gICAgICB9LFxuICAgICAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiBzdG9wVHJhY2tpbmcoKSB7XG4gICAgICAgIGEuX3ZhbHVlVHJhY2tlciA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBhW2JdO1xuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIFZhKGEpIHtcbiAgYS5fdmFsdWVUcmFja2VyIHx8IChhLl92YWx1ZVRyYWNrZXIgPSBVYShhKSk7XG59XG5mdW5jdGlvbiBXYShhKSB7XG4gIGlmICghYSkgcmV0dXJuICExO1xuICB2YXIgYiA9IGEuX3ZhbHVlVHJhY2tlcjtcbiAgaWYgKCFiKSByZXR1cm4gITA7XG4gIHZhciBjID0gYi5nZXRWYWx1ZSgpO1xuICB2YXIgZCA9IFwiXCI7XG4gIGEgJiYgKGQgPSBUYShhKSA/IGEuY2hlY2tlZCA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiIDogYS52YWx1ZSk7XG4gIGEgPSBkO1xuICByZXR1cm4gYSAhPT0gYyA/IChiLnNldFZhbHVlKGEpLCAhMCkgOiAhMTtcbn1cbmZ1bmN0aW9uIFhhKGEpIHtcbiAgYSA9IGEgfHwgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBkb2N1bWVudCA/IGRvY3VtZW50IDogdm9pZCAwKTtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBhKSByZXR1cm4gbnVsbDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYS5hY3RpdmVFbGVtZW50IHx8IGEuYm9keTtcbiAgfSBjYXRjaCAoYikge1xuICAgIHJldHVybiBhLmJvZHk7XG4gIH1cbn1cbmZ1bmN0aW9uIFlhKGEsIGIpIHtcbiAgdmFyIGMgPSBiLmNoZWNrZWQ7XG4gIHJldHVybiBBKHt9LCBiLCB7XG4gICAgZGVmYXVsdENoZWNrZWQ6IHZvaWQgMCxcbiAgICBkZWZhdWx0VmFsdWU6IHZvaWQgMCxcbiAgICB2YWx1ZTogdm9pZCAwLFxuICAgIGNoZWNrZWQ6IG51bGwgIT0gYyA/IGMgOiBhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWRcbiAgfSk7XG59XG5mdW5jdGlvbiBaYShhLCBiKSB7XG4gIHZhciBjID0gbnVsbCA9PSBiLmRlZmF1bHRWYWx1ZSA/IFwiXCIgOiBiLmRlZmF1bHRWYWx1ZSxcbiAgICBkID0gbnVsbCAhPSBiLmNoZWNrZWQgPyBiLmNoZWNrZWQgOiBiLmRlZmF1bHRDaGVja2VkO1xuICBjID0gU2EobnVsbCAhPSBiLnZhbHVlID8gYi52YWx1ZSA6IGMpO1xuICBhLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgaW5pdGlhbENoZWNrZWQ6IGQsXG4gICAgaW5pdGlhbFZhbHVlOiBjLFxuICAgIGNvbnRyb2xsZWQ6IFwiY2hlY2tib3hcIiA9PT0gYi50eXBlIHx8IFwicmFkaW9cIiA9PT0gYi50eXBlID8gbnVsbCAhPSBiLmNoZWNrZWQgOiBudWxsICE9IGIudmFsdWVcbiAgfTtcbn1cbmZ1bmN0aW9uIGFiKGEsIGIpIHtcbiAgYiA9IGIuY2hlY2tlZDtcbiAgbnVsbCAhPSBiICYmIHRhKGEsIFwiY2hlY2tlZFwiLCBiLCAhMSk7XG59XG5mdW5jdGlvbiBiYihhLCBiKSB7XG4gIGFiKGEsIGIpO1xuICB2YXIgYyA9IFNhKGIudmFsdWUpLFxuICAgIGQgPSBiLnR5cGU7XG4gIGlmIChudWxsICE9IGMpIHtcbiAgICBpZiAoXCJudW1iZXJcIiA9PT0gZCkge1xuICAgICAgaWYgKDAgPT09IGMgJiYgXCJcIiA9PT0gYS52YWx1ZSB8fCBhLnZhbHVlICE9IGMpIGEudmFsdWUgPSBcIlwiICsgYztcbiAgICB9IGVsc2UgYS52YWx1ZSAhPT0gXCJcIiArIGMgJiYgKGEudmFsdWUgPSBcIlwiICsgYyk7XG4gIH0gZWxzZSBpZiAoXCJzdWJtaXRcIiA9PT0gZCB8fCBcInJlc2V0XCIgPT09IGQpIHtcbiAgICBhLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICAgIHJldHVybjtcbiAgfVxuICBiLmhhc093blByb3BlcnR5KFwidmFsdWVcIikgPyBjYihhLCBiLnR5cGUsIGMpIDogYi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSAmJiBjYihhLCBiLnR5cGUsIFNhKGIuZGVmYXVsdFZhbHVlKSk7XG4gIG51bGwgPT0gYi5jaGVja2VkICYmIG51bGwgIT0gYi5kZWZhdWx0Q2hlY2tlZCAmJiAoYS5kZWZhdWx0Q2hlY2tlZCA9ICEhYi5kZWZhdWx0Q2hlY2tlZCk7XG59XG5mdW5jdGlvbiBkYihhLCBiLCBjKSB7XG4gIGlmIChiLmhhc093blByb3BlcnR5KFwidmFsdWVcIikgfHwgYi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSkge1xuICAgIHZhciBkID0gYi50eXBlO1xuICAgIGlmICghKFwic3VibWl0XCIgIT09IGQgJiYgXCJyZXNldFwiICE9PSBkIHx8IHZvaWQgMCAhPT0gYi52YWx1ZSAmJiBudWxsICE9PSBiLnZhbHVlKSkgcmV0dXJuO1xuICAgIGIgPSBcIlwiICsgYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtcbiAgICBjIHx8IGIgPT09IGEudmFsdWUgfHwgKGEudmFsdWUgPSBiKTtcbiAgICBhLmRlZmF1bHRWYWx1ZSA9IGI7XG4gIH1cbiAgYyA9IGEubmFtZTtcbiAgXCJcIiAhPT0gYyAmJiAoYS5uYW1lID0gXCJcIik7XG4gIGEuZGVmYXVsdENoZWNrZWQgPSAhIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcbiAgXCJcIiAhPT0gYyAmJiAoYS5uYW1lID0gYyk7XG59XG5mdW5jdGlvbiBjYihhLCBiLCBjKSB7XG4gIGlmIChcIm51bWJlclwiICE9PSBiIHx8IFhhKGEub3duZXJEb2N1bWVudCkgIT09IGEpIG51bGwgPT0gYyA/IGEuZGVmYXVsdFZhbHVlID0gXCJcIiArIGEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUgOiBhLmRlZmF1bHRWYWx1ZSAhPT0gXCJcIiArIGMgJiYgKGEuZGVmYXVsdFZhbHVlID0gXCJcIiArIGMpO1xufVxudmFyIGViID0gQXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsIGIsIGMsIGQpIHtcbiAgYSA9IGEub3B0aW9ucztcbiAgaWYgKGIpIHtcbiAgICBiID0ge307XG4gICAgZm9yICh2YXIgZSA9IDA7IGUgPCBjLmxlbmd0aDsgZSsrKSBiW1wiJFwiICsgY1tlXV0gPSAhMDtcbiAgICBmb3IgKGMgPSAwOyBjIDwgYS5sZW5ndGg7IGMrKykgZSA9IGIuaGFzT3duUHJvcGVydHkoXCIkXCIgKyBhW2NdLnZhbHVlKSwgYVtjXS5zZWxlY3RlZCAhPT0gZSAmJiAoYVtjXS5zZWxlY3RlZCA9IGUpLCBlICYmIGQgJiYgKGFbY10uZGVmYXVsdFNlbGVjdGVkID0gITApO1xuICB9IGVsc2Uge1xuICAgIGMgPSBcIlwiICsgU2EoYyk7XG4gICAgYiA9IG51bGw7XG4gICAgZm9yIChlID0gMDsgZSA8IGEubGVuZ3RoOyBlKyspIHtcbiAgICAgIGlmIChhW2VdLnZhbHVlID09PSBjKSB7XG4gICAgICAgIGFbZV0uc2VsZWN0ZWQgPSAhMDtcbiAgICAgICAgZCAmJiAoYVtlXS5kZWZhdWx0U2VsZWN0ZWQgPSAhMCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IGIgfHwgYVtlXS5kaXNhYmxlZCB8fCAoYiA9IGFbZV0pO1xuICAgIH1cbiAgICBudWxsICE9PSBiICYmIChiLnNlbGVjdGVkID0gITApO1xuICB9XG59XG5mdW5jdGlvbiBnYihhLCBiKSB7XG4gIGlmIChudWxsICE9IGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpIHRocm93IEVycm9yKHAoOTEpKTtcbiAgcmV0dXJuIEEoe30sIGIsIHtcbiAgICB2YWx1ZTogdm9pZCAwLFxuICAgIGRlZmF1bHRWYWx1ZTogdm9pZCAwLFxuICAgIGNoaWxkcmVuOiBcIlwiICsgYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIGhiKGEsIGIpIHtcbiAgdmFyIGMgPSBiLnZhbHVlO1xuICBpZiAobnVsbCA9PSBjKSB7XG4gICAgYyA9IGIuY2hpbGRyZW47XG4gICAgYiA9IGIuZGVmYXVsdFZhbHVlO1xuICAgIGlmIChudWxsICE9IGMpIHtcbiAgICAgIGlmIChudWxsICE9IGIpIHRocm93IEVycm9yKHAoOTIpKTtcbiAgICAgIGlmIChlYihjKSkge1xuICAgICAgICBpZiAoMSA8IGMubGVuZ3RoKSB0aHJvdyBFcnJvcihwKDkzKSk7XG4gICAgICAgIGMgPSBjWzBdO1xuICAgICAgfVxuICAgICAgYiA9IGM7XG4gICAgfVxuICAgIG51bGwgPT0gYiAmJiAoYiA9IFwiXCIpO1xuICAgIGMgPSBiO1xuICB9XG4gIGEuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICBpbml0aWFsVmFsdWU6IFNhKGMpXG4gIH07XG59XG5mdW5jdGlvbiBpYihhLCBiKSB7XG4gIHZhciBjID0gU2EoYi52YWx1ZSksXG4gICAgZCA9IFNhKGIuZGVmYXVsdFZhbHVlKTtcbiAgbnVsbCAhPSBjICYmIChjID0gXCJcIiArIGMsIGMgIT09IGEudmFsdWUgJiYgKGEudmFsdWUgPSBjKSwgbnVsbCA9PSBiLmRlZmF1bHRWYWx1ZSAmJiBhLmRlZmF1bHRWYWx1ZSAhPT0gYyAmJiAoYS5kZWZhdWx0VmFsdWUgPSBjKSk7XG4gIG51bGwgIT0gZCAmJiAoYS5kZWZhdWx0VmFsdWUgPSBcIlwiICsgZCk7XG59XG5mdW5jdGlvbiBqYihhKSB7XG4gIHZhciBiID0gYS50ZXh0Q29udGVudDtcbiAgYiA9PT0gYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSAmJiBcIlwiICE9PSBiICYmIG51bGwgIT09IGIgJiYgKGEudmFsdWUgPSBiKTtcbn1cbmZ1bmN0aW9uIGtiKGEpIHtcbiAgc3dpdGNoIChhKSB7XG4gICAgY2FzZSBcInN2Z1wiOlxuICAgICAgcmV0dXJuIFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtcbiAgICBjYXNlIFwibWF0aFwiOlxuICAgICAgcmV0dXJuIFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG4gIH1cbn1cbmZ1bmN0aW9uIGxiKGEsIGIpIHtcbiAgcmV0dXJuIG51bGwgPT0gYSB8fCBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIiA9PT0gYSA/IGtiKGIpIDogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiID09PSBhICYmIFwiZm9yZWlnbk9iamVjdFwiID09PSBiID8gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgOiBhO1xufVxudmFyIG1iLFxuICBuYiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBNU0FwcCAmJiBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbiA/IGZ1bmN0aW9uIChiLCBjLCBkLCBlKSB7XG4gICAgICBNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhKGIsIGMsIGQsIGUpO1xuICAgICAgfSk7XG4gICAgfSA6IGE7XG4gIH0oZnVuY3Rpb24gKGEsIGIpIHtcbiAgICBpZiAoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiICE9PSBhLm5hbWVzcGFjZVVSSSB8fCBcImlubmVySFRNTFwiIGluIGEpIGEuaW5uZXJIVE1MID0gYjtlbHNlIHtcbiAgICAgIG1iID0gbWIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIG1iLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGIudmFsdWVPZigpLnRvU3RyaW5nKCkgKyBcIjwvc3ZnPlwiO1xuICAgICAgZm9yIChiID0gbWIuZmlyc3RDaGlsZDsgYS5maXJzdENoaWxkOykgYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO1xuICAgICAgZm9yICg7IGIuZmlyc3RDaGlsZDspIGEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKTtcbiAgICB9XG4gIH0pO1xuZnVuY3Rpb24gb2IoYSwgYikge1xuICBpZiAoYikge1xuICAgIHZhciBjID0gYS5maXJzdENoaWxkO1xuICAgIGlmIChjICYmIGMgPT09IGEubGFzdENoaWxkICYmIDMgPT09IGMubm9kZVR5cGUpIHtcbiAgICAgIGMubm9kZVZhbHVlID0gYjtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgYS50ZXh0Q29udGVudCA9IGI7XG59XG52YXIgcGIgPSB7XG4gICAgYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ICEwLFxuICAgIGFzcGVjdFJhdGlvOiAhMCxcbiAgICBib3JkZXJJbWFnZU91dHNldDogITAsXG4gICAgYm9yZGVySW1hZ2VTbGljZTogITAsXG4gICAgYm9yZGVySW1hZ2VXaWR0aDogITAsXG4gICAgYm94RmxleDogITAsXG4gICAgYm94RmxleEdyb3VwOiAhMCxcbiAgICBib3hPcmRpbmFsR3JvdXA6ICEwLFxuICAgIGNvbHVtbkNvdW50OiAhMCxcbiAgICBjb2x1bW5zOiAhMCxcbiAgICBmbGV4OiAhMCxcbiAgICBmbGV4R3JvdzogITAsXG4gICAgZmxleFBvc2l0aXZlOiAhMCxcbiAgICBmbGV4U2hyaW5rOiAhMCxcbiAgICBmbGV4TmVnYXRpdmU6ICEwLFxuICAgIGZsZXhPcmRlcjogITAsXG4gICAgZ3JpZEFyZWE6ICEwLFxuICAgIGdyaWRSb3c6ICEwLFxuICAgIGdyaWRSb3dFbmQ6ICEwLFxuICAgIGdyaWRSb3dTcGFuOiAhMCxcbiAgICBncmlkUm93U3RhcnQ6ICEwLFxuICAgIGdyaWRDb2x1bW46ICEwLFxuICAgIGdyaWRDb2x1bW5FbmQ6ICEwLFxuICAgIGdyaWRDb2x1bW5TcGFuOiAhMCxcbiAgICBncmlkQ29sdW1uU3RhcnQ6ICEwLFxuICAgIGZvbnRXZWlnaHQ6ICEwLFxuICAgIGxpbmVDbGFtcDogITAsXG4gICAgbGluZUhlaWdodDogITAsXG4gICAgb3BhY2l0eTogITAsXG4gICAgb3JkZXI6ICEwLFxuICAgIG9ycGhhbnM6ICEwLFxuICAgIHRhYlNpemU6ICEwLFxuICAgIHdpZG93czogITAsXG4gICAgekluZGV4OiAhMCxcbiAgICB6b29tOiAhMCxcbiAgICBmaWxsT3BhY2l0eTogITAsXG4gICAgZmxvb2RPcGFjaXR5OiAhMCxcbiAgICBzdG9wT3BhY2l0eTogITAsXG4gICAgc3Ryb2tlRGFzaGFycmF5OiAhMCxcbiAgICBzdHJva2VEYXNob2Zmc2V0OiAhMCxcbiAgICBzdHJva2VNaXRlcmxpbWl0OiAhMCxcbiAgICBzdHJva2VPcGFjaXR5OiAhMCxcbiAgICBzdHJva2VXaWR0aDogITBcbiAgfSxcbiAgcWIgPSBbXCJXZWJraXRcIiwgXCJtc1wiLCBcIk1velwiLCBcIk9cIl07XG5PYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICBxYi5mb3JFYWNoKGZ1bmN0aW9uIChiKSB7XG4gICAgYiA9IGIgKyBhLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgYS5zdWJzdHJpbmcoMSk7XG4gICAgcGJbYl0gPSBwYlthXTtcbiAgfSk7XG59KTtcbmZ1bmN0aW9uIHJiKGEsIGIsIGMpIHtcbiAgcmV0dXJuIG51bGwgPT0gYiB8fCBcImJvb2xlYW5cIiA9PT0gdHlwZW9mIGIgfHwgXCJcIiA9PT0gYiA/IFwiXCIgOiBjIHx8IFwibnVtYmVyXCIgIT09IHR5cGVvZiBiIHx8IDAgPT09IGIgfHwgcGIuaGFzT3duUHJvcGVydHkoYSkgJiYgcGJbYV0gPyAoXCJcIiArIGIpLnRyaW0oKSA6IGIgKyBcInB4XCI7XG59XG5mdW5jdGlvbiBzYihhLCBiKSB7XG4gIGEgPSBhLnN0eWxlO1xuICBmb3IgKHZhciBjIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KGMpKSB7XG4gICAgdmFyIGQgPSAwID09PSBjLmluZGV4T2YoXCItLVwiKSxcbiAgICAgIGUgPSByYihjLCBiW2NdLCBkKTtcbiAgICBcImZsb2F0XCIgPT09IGMgJiYgKGMgPSBcImNzc0Zsb2F0XCIpO1xuICAgIGQgPyBhLnNldFByb3BlcnR5KGMsIGUpIDogYVtjXSA9IGU7XG4gIH1cbn1cbnZhciB0YiA9IEEoe1xuICBtZW51aXRlbTogITBcbn0sIHtcbiAgYXJlYTogITAsXG4gIGJhc2U6ICEwLFxuICBicjogITAsXG4gIGNvbDogITAsXG4gIGVtYmVkOiAhMCxcbiAgaHI6ICEwLFxuICBpbWc6ICEwLFxuICBpbnB1dDogITAsXG4gIGtleWdlbjogITAsXG4gIGxpbms6ICEwLFxuICBtZXRhOiAhMCxcbiAgcGFyYW06ICEwLFxuICBzb3VyY2U6ICEwLFxuICB0cmFjazogITAsXG4gIHdicjogITBcbn0pO1xuZnVuY3Rpb24gdWIoYSwgYikge1xuICBpZiAoYikge1xuICAgIGlmICh0YlthXSAmJiAobnVsbCAhPSBiLmNoaWxkcmVuIHx8IG51bGwgIT0gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpIHRocm93IEVycm9yKHAoMTM3LCBhKSk7XG4gICAgaWYgKG51bGwgIT0gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkge1xuICAgICAgaWYgKG51bGwgIT0gYi5jaGlsZHJlbikgdGhyb3cgRXJyb3IocCg2MCkpO1xuICAgICAgaWYgKFwib2JqZWN0XCIgIT09IF90eXBlb2YoYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkgfHwgIShcIl9faHRtbFwiIGluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKSB0aHJvdyBFcnJvcihwKDYxKSk7XG4gICAgfVxuICAgIGlmIChudWxsICE9IGIuc3R5bGUgJiYgXCJvYmplY3RcIiAhPT0gX3R5cGVvZihiLnN0eWxlKSkgdGhyb3cgRXJyb3IocCg2MikpO1xuICB9XG59XG5mdW5jdGlvbiB2YihhLCBiKSB7XG4gIGlmICgtMSA9PT0gYS5pbmRleE9mKFwiLVwiKSkgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiBiLmlzO1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpcbiAgICBjYXNlIFwiY29sb3ItcHJvZmlsZVwiOlxuICAgIGNhc2UgXCJmb250LWZhY2VcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLXNyY1wiOlxuICAgIGNhc2UgXCJmb250LWZhY2UtdXJpXCI6XG4gICAgY2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpcbiAgICBjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpcbiAgICBjYXNlIFwibWlzc2luZy1nbHlwaFwiOlxuICAgICAgcmV0dXJuICExO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITA7XG4gIH1cbn1cbnZhciB3YiA9IG51bGw7XG5mdW5jdGlvbiB4YihhKSB7XG4gIGEgPSBhLnRhcmdldCB8fCBhLnNyY0VsZW1lbnQgfHwgd2luZG93O1xuICBhLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50ICYmIChhID0gYS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7XG4gIHJldHVybiAzID09PSBhLm5vZGVUeXBlID8gYS5wYXJlbnROb2RlIDogYTtcbn1cbnZhciB5YiA9IG51bGwsXG4gIHpiID0gbnVsbCxcbiAgQWIgPSBudWxsO1xuZnVuY3Rpb24gQmIoYSkge1xuICBpZiAoYSA9IENiKGEpKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIHliKSB0aHJvdyBFcnJvcihwKDI4MCkpO1xuICAgIHZhciBiID0gYS5zdGF0ZU5vZGU7XG4gICAgYiAmJiAoYiA9IERiKGIpLCB5YihhLnN0YXRlTm9kZSwgYS50eXBlLCBiKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIEViKGEpIHtcbiAgemIgPyBBYiA/IEFiLnB1c2goYSkgOiBBYiA9IFthXSA6IHpiID0gYTtcbn1cbmZ1bmN0aW9uIEZiKCkge1xuICBpZiAoemIpIHtcbiAgICB2YXIgYSA9IHpiLFxuICAgICAgYiA9IEFiO1xuICAgIEFiID0gemIgPSBudWxsO1xuICAgIEJiKGEpO1xuICAgIGlmIChiKSBmb3IgKGEgPSAwOyBhIDwgYi5sZW5ndGg7IGErKykgQmIoYlthXSk7XG4gIH1cbn1cbmZ1bmN0aW9uIEdiKGEsIGIpIHtcbiAgcmV0dXJuIGEoYik7XG59XG5mdW5jdGlvbiBIYigpIHt9XG52YXIgSWIgPSAhMTtcbmZ1bmN0aW9uIEpiKGEsIGIsIGMpIHtcbiAgaWYgKEliKSByZXR1cm4gYShiLCBjKTtcbiAgSWIgPSAhMDtcbiAgdHJ5IHtcbiAgICByZXR1cm4gR2IoYSwgYiwgYyk7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKEliID0gITEsIG51bGwgIT09IHpiIHx8IG51bGwgIT09IEFiKSBIYigpLCBGYigpO1xuICB9XG59XG5mdW5jdGlvbiBLYihhLCBiKSB7XG4gIHZhciBjID0gYS5zdGF0ZU5vZGU7XG4gIGlmIChudWxsID09PSBjKSByZXR1cm4gbnVsbDtcbiAgdmFyIGQgPSBEYihjKTtcbiAgaWYgKG51bGwgPT09IGQpIHJldHVybiBudWxsO1xuICBjID0gZFtiXTtcbiAgYTogc3dpdGNoIChiKSB7XG4gICAgY2FzZSBcIm9uQ2xpY2tcIjpcbiAgICBjYXNlIFwib25DbGlja0NhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Eb3VibGVDbGlja1wiOlxuICAgIGNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93blwiOlxuICAgIGNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVcIjpcbiAgICBjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VVcFwiOlxuICAgIGNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6XG4gICAgY2FzZSBcIm9uTW91c2VFbnRlclwiOlxuICAgICAgKGQgPSAhZC5kaXNhYmxlZCkgfHwgKGEgPSBhLnR5cGUsIGQgPSAhKFwiYnV0dG9uXCIgPT09IGEgfHwgXCJpbnB1dFwiID09PSBhIHx8IFwic2VsZWN0XCIgPT09IGEgfHwgXCJ0ZXh0YXJlYVwiID09PSBhKSk7XG4gICAgICBhID0gIWQ7XG4gICAgICBicmVhayBhO1xuICAgIGRlZmF1bHQ6XG4gICAgICBhID0gITE7XG4gIH1cbiAgaWYgKGEpIHJldHVybiBudWxsO1xuICBpZiAoYyAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBjKSB0aHJvdyBFcnJvcihwKDIzMSwgYiwgX3R5cGVvZihjKSkpO1xuICByZXR1cm4gYztcbn1cbnZhciBMYiA9ICExO1xuaWYgKGlhKSB0cnkge1xuICB2YXIgTWIgPSB7fTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLCBcInBhc3NpdmVcIiwge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgTGIgPSAhMDtcbiAgICB9XG4gIH0pO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgTWIsIE1iKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsIE1iLCBNYik7XG59IGNhdGNoIChhKSB7XG4gIExiID0gITE7XG59XG5mdW5jdGlvbiBOYihhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBrKSB7XG4gIHZhciBsID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAzKTtcbiAgdHJ5IHtcbiAgICBiLmFwcGx5KGMsIGwpO1xuICB9IGNhdGNoIChtKSB7XG4gICAgdGhpcy5vbkVycm9yKG0pO1xuICB9XG59XG52YXIgT2IgPSAhMSxcbiAgUGIgPSBudWxsLFxuICBRYiA9ICExLFxuICBSYiA9IG51bGwsXG4gIFNiID0ge1xuICAgIG9uRXJyb3I6IGZ1bmN0aW9uIG9uRXJyb3IoYSkge1xuICAgICAgT2IgPSAhMDtcbiAgICAgIFBiID0gYTtcbiAgICB9XG4gIH07XG5mdW5jdGlvbiBUYihhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBrKSB7XG4gIE9iID0gITE7XG4gIFBiID0gbnVsbDtcbiAgTmIuYXBwbHkoU2IsIGFyZ3VtZW50cyk7XG59XG5mdW5jdGlvbiBVYihhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBrKSB7XG4gIFRiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIGlmIChPYikge1xuICAgIGlmIChPYikge1xuICAgICAgdmFyIGwgPSBQYjtcbiAgICAgIE9iID0gITE7XG4gICAgICBQYiA9IG51bGw7XG4gICAgfSBlbHNlIHRocm93IEVycm9yKHAoMTk4KSk7XG4gICAgUWIgfHwgKFFiID0gITAsIFJiID0gbCk7XG4gIH1cbn1cbmZ1bmN0aW9uIFZiKGEpIHtcbiAgdmFyIGIgPSBhLFxuICAgIGMgPSBhO1xuICBpZiAoYS5hbHRlcm5hdGUpIGZvciAoOyBiLnJldHVybjspIGIgPSBiLnJldHVybjtlbHNlIHtcbiAgICBhID0gYjtcbiAgICBkbyBiID0gYSwgMCAhPT0gKGIuZmxhZ3MgJiA0MDk4KSAmJiAoYyA9IGIucmV0dXJuKSwgYSA9IGIucmV0dXJuOyB3aGlsZSAoYSk7XG4gIH1cbiAgcmV0dXJuIDMgPT09IGIudGFnID8gYyA6IG51bGw7XG59XG5mdW5jdGlvbiBXYihhKSB7XG4gIGlmICgxMyA9PT0gYS50YWcpIHtcbiAgICB2YXIgYiA9IGEubWVtb2l6ZWRTdGF0ZTtcbiAgICBudWxsID09PSBiICYmIChhID0gYS5hbHRlcm5hdGUsIG51bGwgIT09IGEgJiYgKGIgPSBhLm1lbW9pemVkU3RhdGUpKTtcbiAgICBpZiAobnVsbCAhPT0gYikgcmV0dXJuIGIuZGVoeWRyYXRlZDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIFhiKGEpIHtcbiAgaWYgKFZiKGEpICE9PSBhKSB0aHJvdyBFcnJvcihwKDE4OCkpO1xufVxuZnVuY3Rpb24gWWIoYSkge1xuICB2YXIgYiA9IGEuYWx0ZXJuYXRlO1xuICBpZiAoIWIpIHtcbiAgICBiID0gVmIoYSk7XG4gICAgaWYgKG51bGwgPT09IGIpIHRocm93IEVycm9yKHAoMTg4KSk7XG4gICAgcmV0dXJuIGIgIT09IGEgPyBudWxsIDogYTtcbiAgfVxuICBmb3IgKHZhciBjID0gYSwgZCA9IGI7Oykge1xuICAgIHZhciBlID0gYy5yZXR1cm47XG4gICAgaWYgKG51bGwgPT09IGUpIGJyZWFrO1xuICAgIHZhciBmID0gZS5hbHRlcm5hdGU7XG4gICAgaWYgKG51bGwgPT09IGYpIHtcbiAgICAgIGQgPSBlLnJldHVybjtcbiAgICAgIGlmIChudWxsICE9PSBkKSB7XG4gICAgICAgIGMgPSBkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoZS5jaGlsZCA9PT0gZi5jaGlsZCkge1xuICAgICAgZm9yIChmID0gZS5jaGlsZDsgZjspIHtcbiAgICAgICAgaWYgKGYgPT09IGMpIHJldHVybiBYYihlKSwgYTtcbiAgICAgICAgaWYgKGYgPT09IGQpIHJldHVybiBYYihlKSwgYjtcbiAgICAgICAgZiA9IGYuc2libGluZztcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKHAoMTg4KSk7XG4gICAgfVxuICAgIGlmIChjLnJldHVybiAhPT0gZC5yZXR1cm4pIGMgPSBlLCBkID0gZjtlbHNlIHtcbiAgICAgIGZvciAodmFyIGcgPSAhMSwgaCA9IGUuY2hpbGQ7IGg7KSB7XG4gICAgICAgIGlmIChoID09PSBjKSB7XG4gICAgICAgICAgZyA9ICEwO1xuICAgICAgICAgIGMgPSBlO1xuICAgICAgICAgIGQgPSBmO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoID09PSBkKSB7XG4gICAgICAgICAgZyA9ICEwO1xuICAgICAgICAgIGQgPSBlO1xuICAgICAgICAgIGMgPSBmO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggPSBoLnNpYmxpbmc7XG4gICAgICB9XG4gICAgICBpZiAoIWcpIHtcbiAgICAgICAgZm9yIChoID0gZi5jaGlsZDsgaDspIHtcbiAgICAgICAgICBpZiAoaCA9PT0gYykge1xuICAgICAgICAgICAgZyA9ICEwO1xuICAgICAgICAgICAgYyA9IGY7XG4gICAgICAgICAgICBkID0gZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaCA9PT0gZCkge1xuICAgICAgICAgICAgZyA9ICEwO1xuICAgICAgICAgICAgZCA9IGY7XG4gICAgICAgICAgICBjID0gZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoID0gaC5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZykgdGhyb3cgRXJyb3IocCgxODkpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGMuYWx0ZXJuYXRlICE9PSBkKSB0aHJvdyBFcnJvcihwKDE5MCkpO1xuICB9XG4gIGlmICgzICE9PSBjLnRhZykgdGhyb3cgRXJyb3IocCgxODgpKTtcbiAgcmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQgPT09IGMgPyBhIDogYjtcbn1cbmZ1bmN0aW9uIFpiKGEpIHtcbiAgYSA9IFliKGEpO1xuICByZXR1cm4gbnVsbCAhPT0gYSA/ICRiKGEpIDogbnVsbDtcbn1cbmZ1bmN0aW9uICRiKGEpIHtcbiAgaWYgKDUgPT09IGEudGFnIHx8IDYgPT09IGEudGFnKSByZXR1cm4gYTtcbiAgZm9yIChhID0gYS5jaGlsZDsgbnVsbCAhPT0gYTspIHtcbiAgICB2YXIgYiA9ICRiKGEpO1xuICAgIGlmIChudWxsICE9PSBiKSByZXR1cm4gYjtcbiAgICBhID0gYS5zaWJsaW5nO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxudmFyIGFjID0gY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxcbiAgYmMgPSBjYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxcbiAgY2MgPSBjYS51bnN0YWJsZV9zaG91bGRZaWVsZCxcbiAgZGMgPSBjYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsXG4gIEIgPSBjYS51bnN0YWJsZV9ub3csXG4gIGVjID0gY2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsXG4gIGZjID0gY2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksXG4gIGdjID0gY2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksXG4gIGhjID0gY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksXG4gIGljID0gY2EudW5zdGFibGVfTG93UHJpb3JpdHksXG4gIGpjID0gY2EudW5zdGFibGVfSWRsZVByaW9yaXR5LFxuICBrYyA9IG51bGwsXG4gIGxjID0gbnVsbDtcbmZ1bmN0aW9uIG1jKGEpIHtcbiAgaWYgKGxjICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KSB0cnkge1xuICAgIGxjLm9uQ29tbWl0RmliZXJSb290KGtjLCBhLCB2b2lkIDAsIDEyOCA9PT0gKGEuY3VycmVudC5mbGFncyAmIDEyOCkpO1xuICB9IGNhdGNoIChiKSB7fVxufVxudmFyIG9jID0gTWF0aC5jbHozMiA/IE1hdGguY2x6MzIgOiBuYyxcbiAgcGMgPSBNYXRoLmxvZyxcbiAgcWMgPSBNYXRoLkxOMjtcbmZ1bmN0aW9uIG5jKGEpIHtcbiAgYSA+Pj49IDA7XG4gIHJldHVybiAwID09PSBhID8gMzIgOiAzMSAtIChwYyhhKSAvIHFjIHwgMCkgfCAwO1xufVxudmFyIHJjID0gNjQsXG4gIHNjID0gNDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpIHtcbiAgc3dpdGNoIChhICYgLWEpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gNDtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gODtcbiAgICBjYXNlIDE2OlxuICAgICAgcmV0dXJuIDE2O1xuICAgIGNhc2UgMzI6XG4gICAgICByZXR1cm4gMzI7XG4gICAgY2FzZSA2NDpcbiAgICBjYXNlIDEyODpcbiAgICBjYXNlIDI1NjpcbiAgICBjYXNlIDUxMjpcbiAgICBjYXNlIDEwMjQ6XG4gICAgY2FzZSAyMDQ4OlxuICAgIGNhc2UgNDA5NjpcbiAgICBjYXNlIDgxOTI6XG4gICAgY2FzZSAxNjM4NDpcbiAgICBjYXNlIDMyNzY4OlxuICAgIGNhc2UgNjU1MzY6XG4gICAgY2FzZSAxMzEwNzI6XG4gICAgY2FzZSAyNjIxNDQ6XG4gICAgY2FzZSA1MjQyODg6XG4gICAgY2FzZSAxMDQ4NTc2OlxuICAgIGNhc2UgMjA5NzE1MjpcbiAgICAgIHJldHVybiBhICYgNDE5NDI0MDtcbiAgICBjYXNlIDQxOTQzMDQ6XG4gICAgY2FzZSA4Mzg4NjA4OlxuICAgIGNhc2UgMTY3NzcyMTY6XG4gICAgY2FzZSAzMzU1NDQzMjpcbiAgICBjYXNlIDY3MTA4ODY0OlxuICAgICAgcmV0dXJuIGEgJiAxMzAwMjM0MjQ7XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgICByZXR1cm4gMTM0MjE3NzI4O1xuICAgIGNhc2UgMjY4NDM1NDU2OlxuICAgICAgcmV0dXJuIDI2ODQzNTQ1NjtcbiAgICBjYXNlIDUzNjg3MDkxMjpcbiAgICAgIHJldHVybiA1MzY4NzA5MTI7XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIDEwNzM3NDE4MjQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBhO1xuICB9XG59XG5mdW5jdGlvbiB1YyhhLCBiKSB7XG4gIHZhciBjID0gYS5wZW5kaW5nTGFuZXM7XG4gIGlmICgwID09PSBjKSByZXR1cm4gMDtcbiAgdmFyIGQgPSAwLFxuICAgIGUgPSBhLnN1c3BlbmRlZExhbmVzLFxuICAgIGYgPSBhLnBpbmdlZExhbmVzLFxuICAgIGcgPSBjICYgMjY4NDM1NDU1O1xuICBpZiAoMCAhPT0gZykge1xuICAgIHZhciBoID0gZyAmIH5lO1xuICAgIDAgIT09IGggPyBkID0gdGMoaCkgOiAoZiAmPSBnLCAwICE9PSBmICYmIChkID0gdGMoZikpKTtcbiAgfSBlbHNlIGcgPSBjICYgfmUsIDAgIT09IGcgPyBkID0gdGMoZykgOiAwICE9PSBmICYmIChkID0gdGMoZikpO1xuICBpZiAoMCA9PT0gZCkgcmV0dXJuIDA7XG4gIGlmICgwICE9PSBiICYmIGIgIT09IGQgJiYgMCA9PT0gKGIgJiBlKSAmJiAoZSA9IGQgJiAtZCwgZiA9IGIgJiAtYiwgZSA+PSBmIHx8IDE2ID09PSBlICYmIDAgIT09IChmICYgNDE5NDI0MCkpKSByZXR1cm4gYjtcbiAgMCAhPT0gKGQgJiA0KSAmJiAoZCB8PSBjICYgMTYpO1xuICBiID0gYS5lbnRhbmdsZWRMYW5lcztcbiAgaWYgKDAgIT09IGIpIGZvciAoYSA9IGEuZW50YW5nbGVtZW50cywgYiAmPSBkOyAwIDwgYjspIGMgPSAzMSAtIG9jKGIpLCBlID0gMSA8PCBjLCBkIHw9IGFbY10sIGIgJj0gfmU7XG4gIHJldHVybiBkO1xufVxuZnVuY3Rpb24gdmMoYSwgYikge1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBiICsgMjUwO1xuICAgIGNhc2UgODpcbiAgICBjYXNlIDE2OlxuICAgIGNhc2UgMzI6XG4gICAgY2FzZSA2NDpcbiAgICBjYXNlIDEyODpcbiAgICBjYXNlIDI1NjpcbiAgICBjYXNlIDUxMjpcbiAgICBjYXNlIDEwMjQ6XG4gICAgY2FzZSAyMDQ4OlxuICAgIGNhc2UgNDA5NjpcbiAgICBjYXNlIDgxOTI6XG4gICAgY2FzZSAxNjM4NDpcbiAgICBjYXNlIDMyNzY4OlxuICAgIGNhc2UgNjU1MzY6XG4gICAgY2FzZSAxMzEwNzI6XG4gICAgY2FzZSAyNjIxNDQ6XG4gICAgY2FzZSA1MjQyODg6XG4gICAgY2FzZSAxMDQ4NTc2OlxuICAgIGNhc2UgMjA5NzE1MjpcbiAgICAgIHJldHVybiBiICsgNUUzO1xuICAgIGNhc2UgNDE5NDMwNDpcbiAgICBjYXNlIDgzODg2MDg6XG4gICAgY2FzZSAxNjc3NzIxNjpcbiAgICBjYXNlIDMzNTU0NDMyOlxuICAgIGNhc2UgNjcxMDg4NjQ6XG4gICAgICByZXR1cm4gLTE7XG4gICAgY2FzZSAxMzQyMTc3Mjg6XG4gICAgY2FzZSAyNjg0MzU0NTY6XG4gICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgY2FzZSAxMDczNzQxODI0OlxuICAgICAgcmV0dXJuIC0xO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gLTE7XG4gIH1cbn1cbmZ1bmN0aW9uIHdjKGEsIGIpIHtcbiAgZm9yICh2YXIgYyA9IGEuc3VzcGVuZGVkTGFuZXMsIGQgPSBhLnBpbmdlZExhbmVzLCBlID0gYS5leHBpcmF0aW9uVGltZXMsIGYgPSBhLnBlbmRpbmdMYW5lczsgMCA8IGY7KSB7XG4gICAgdmFyIGcgPSAzMSAtIG9jKGYpLFxuICAgICAgaCA9IDEgPDwgZyxcbiAgICAgIGsgPSBlW2ddO1xuICAgIGlmICgtMSA9PT0gaykge1xuICAgICAgaWYgKDAgPT09IChoICYgYykgfHwgMCAhPT0gKGggJiBkKSkgZVtnXSA9IHZjKGgsIGIpO1xuICAgIH0gZWxzZSBrIDw9IGIgJiYgKGEuZXhwaXJlZExhbmVzIHw9IGgpO1xuICAgIGYgJj0gfmg7XG4gIH1cbn1cbmZ1bmN0aW9uIHhjKGEpIHtcbiAgYSA9IGEucGVuZGluZ0xhbmVzICYgLTEwNzM3NDE4MjU7XG4gIHJldHVybiAwICE9PSBhID8gYSA6IGEgJiAxMDczNzQxODI0ID8gMTA3Mzc0MTgyNCA6IDA7XG59XG5mdW5jdGlvbiB5YygpIHtcbiAgdmFyIGEgPSByYztcbiAgcmMgPDw9IDE7XG4gIDAgPT09IChyYyAmIDQxOTQyNDApICYmIChyYyA9IDY0KTtcbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiB6YyhhKSB7XG4gIGZvciAodmFyIGIgPSBbXSwgYyA9IDA7IDMxID4gYzsgYysrKSBiLnB1c2goYSk7XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gQWMoYSwgYiwgYykge1xuICBhLnBlbmRpbmdMYW5lcyB8PSBiO1xuICA1MzY4NzA5MTIgIT09IGIgJiYgKGEuc3VzcGVuZGVkTGFuZXMgPSAwLCBhLnBpbmdlZExhbmVzID0gMCk7XG4gIGEgPSBhLmV2ZW50VGltZXM7XG4gIGIgPSAzMSAtIG9jKGIpO1xuICBhW2JdID0gYztcbn1cbmZ1bmN0aW9uIEJjKGEsIGIpIHtcbiAgdmFyIGMgPSBhLnBlbmRpbmdMYW5lcyAmIH5iO1xuICBhLnBlbmRpbmdMYW5lcyA9IGI7XG4gIGEuc3VzcGVuZGVkTGFuZXMgPSAwO1xuICBhLnBpbmdlZExhbmVzID0gMDtcbiAgYS5leHBpcmVkTGFuZXMgJj0gYjtcbiAgYS5tdXRhYmxlUmVhZExhbmVzICY9IGI7XG4gIGEuZW50YW5nbGVkTGFuZXMgJj0gYjtcbiAgYiA9IGEuZW50YW5nbGVtZW50cztcbiAgdmFyIGQgPSBhLmV2ZW50VGltZXM7XG4gIGZvciAoYSA9IGEuZXhwaXJhdGlvblRpbWVzOyAwIDwgYzspIHtcbiAgICB2YXIgZSA9IDMxIC0gb2MoYyksXG4gICAgICBmID0gMSA8PCBlO1xuICAgIGJbZV0gPSAwO1xuICAgIGRbZV0gPSAtMTtcbiAgICBhW2VdID0gLTE7XG4gICAgYyAmPSB+ZjtcbiAgfVxufVxuZnVuY3Rpb24gQ2MoYSwgYikge1xuICB2YXIgYyA9IGEuZW50YW5nbGVkTGFuZXMgfD0gYjtcbiAgZm9yIChhID0gYS5lbnRhbmdsZW1lbnRzOyBjOykge1xuICAgIHZhciBkID0gMzEgLSBvYyhjKSxcbiAgICAgIGUgPSAxIDw8IGQ7XG4gICAgZSAmIGIgfCBhW2RdICYgYiAmJiAoYVtkXSB8PSBiKTtcbiAgICBjICY9IH5lO1xuICB9XG59XG52YXIgQyA9IDA7XG5mdW5jdGlvbiBEYyhhKSB7XG4gIGEgJj0gLWE7XG4gIHJldHVybiAxIDwgYSA/IDQgPCBhID8gMCAhPT0gKGEgJiAyNjg0MzU0NTUpID8gMTYgOiA1MzY4NzA5MTIgOiA0IDogMTtcbn1cbnZhciBFYyxcbiAgRmMsXG4gIEdjLFxuICBIYyxcbiAgSWMsXG4gIEpjID0gITEsXG4gIEtjID0gW10sXG4gIExjID0gbnVsbCxcbiAgTWMgPSBudWxsLFxuICBOYyA9IG51bGwsXG4gIE9jID0gbmV3IE1hcCgpLFxuICBQYyA9IG5ldyBNYXAoKSxcbiAgUWMgPSBbXSxcbiAgUmMgPSBcIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLCBiKSB7XG4gIHN3aXRjaCAoYSkge1xuICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICBMYyA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgY2FzZSBcImRyYWdsZWF2ZVwiOlxuICAgICAgTWMgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIm1vdXNlb3ZlclwiOlxuICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgTmMgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgY2FzZSBcInBvaW50ZXJvdXRcIjpcbiAgICAgIE9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpcbiAgICBjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICBQYy5kZWxldGUoYi5wb2ludGVySWQpO1xuICB9XG59XG5mdW5jdGlvbiBUYyhhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGlmIChudWxsID09PSBhIHx8IGEubmF0aXZlRXZlbnQgIT09IGYpIHJldHVybiBhID0ge1xuICAgIGJsb2NrZWRPbjogYixcbiAgICBkb21FdmVudE5hbWU6IGMsXG4gICAgZXZlbnRTeXN0ZW1GbGFnczogZCxcbiAgICBuYXRpdmVFdmVudDogZixcbiAgICB0YXJnZXRDb250YWluZXJzOiBbZV1cbiAgfSwgbnVsbCAhPT0gYiAmJiAoYiA9IENiKGIpLCBudWxsICE9PSBiICYmIEZjKGIpKSwgYTtcbiAgYS5ldmVudFN5c3RlbUZsYWdzIHw9IGQ7XG4gIGIgPSBhLnRhcmdldENvbnRhaW5lcnM7XG4gIG51bGwgIT09IGUgJiYgLTEgPT09IGIuaW5kZXhPZihlKSAmJiBiLnB1c2goZSk7XG4gIHJldHVybiBhO1xufVxuZnVuY3Rpb24gVWMoYSwgYiwgYywgZCwgZSkge1xuICBzd2l0Y2ggKGIpIHtcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgICAgcmV0dXJuIExjID0gVGMoTGMsIGEsIGIsIGMsIGQsIGUpLCAhMDtcbiAgICBjYXNlIFwiZHJhZ2VudGVyXCI6XG4gICAgICByZXR1cm4gTWMgPSBUYyhNYywgYSwgYiwgYywgZCwgZSksICEwO1xuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICAgIHJldHVybiBOYyA9IFRjKE5jLCBhLCBiLCBjLCBkLCBlKSwgITA7XG4gICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgICB2YXIgZiA9IGUucG9pbnRlcklkO1xuICAgICAgT2Muc2V0KGYsIFRjKE9jLmdldChmKSB8fCBudWxsLCBhLCBiLCBjLCBkLCBlKSk7XG4gICAgICByZXR1cm4gITA7XG4gICAgY2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6XG4gICAgICByZXR1cm4gZiA9IGUucG9pbnRlcklkLCBQYy5zZXQoZiwgVGMoUGMuZ2V0KGYpIHx8IG51bGwsIGEsIGIsIGMsIGQsIGUpKSwgITA7XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gVmMoYSkge1xuICB2YXIgYiA9IFdjKGEudGFyZ2V0KTtcbiAgaWYgKG51bGwgIT09IGIpIHtcbiAgICB2YXIgYyA9IFZiKGIpO1xuICAgIGlmIChudWxsICE9PSBjKSBpZiAoYiA9IGMudGFnLCAxMyA9PT0gYikge1xuICAgICAgaWYgKGIgPSBXYihjKSwgbnVsbCAhPT0gYikge1xuICAgICAgICBhLmJsb2NrZWRPbiA9IGI7XG4gICAgICAgIEljKGEucHJpb3JpdHksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBHYyhjKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKDMgPT09IGIgJiYgYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgYS5ibG9ja2VkT24gPSAzID09PSBjLnRhZyA/IGMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gOiBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBhLmJsb2NrZWRPbiA9IG51bGw7XG59XG5mdW5jdGlvbiBYYyhhKSB7XG4gIGlmIChudWxsICE9PSBhLmJsb2NrZWRPbikgcmV0dXJuICExO1xuICBmb3IgKHZhciBiID0gYS50YXJnZXRDb250YWluZXJzOyAwIDwgYi5sZW5ndGg7KSB7XG4gICAgdmFyIGMgPSBZYyhhLmRvbUV2ZW50TmFtZSwgYS5ldmVudFN5c3RlbUZsYWdzLCBiWzBdLCBhLm5hdGl2ZUV2ZW50KTtcbiAgICBpZiAobnVsbCA9PT0gYykge1xuICAgICAgYyA9IGEubmF0aXZlRXZlbnQ7XG4gICAgICB2YXIgZCA9IG5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSwgYyk7XG4gICAgICB3YiA9IGQ7XG4gICAgICBjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO1xuICAgICAgd2IgPSBudWxsO1xuICAgIH0gZWxzZSByZXR1cm4gYiA9IENiKGMpLCBudWxsICE9PSBiICYmIEZjKGIpLCBhLmJsb2NrZWRPbiA9IGMsICExO1xuICAgIGIuc2hpZnQoKTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBaYyhhLCBiLCBjKSB7XG4gIFhjKGEpICYmIGMuZGVsZXRlKGIpO1xufVxuZnVuY3Rpb24gJGMoKSB7XG4gIEpjID0gITE7XG4gIG51bGwgIT09IExjICYmIFhjKExjKSAmJiAoTGMgPSBudWxsKTtcbiAgbnVsbCAhPT0gTWMgJiYgWGMoTWMpICYmIChNYyA9IG51bGwpO1xuICBudWxsICE9PSBOYyAmJiBYYyhOYykgJiYgKE5jID0gbnVsbCk7XG4gIE9jLmZvckVhY2goWmMpO1xuICBQYy5mb3JFYWNoKFpjKTtcbn1cbmZ1bmN0aW9uIGFkKGEsIGIpIHtcbiAgYS5ibG9ja2VkT24gPT09IGIgJiYgKGEuYmxvY2tlZE9uID0gbnVsbCwgSmMgfHwgKEpjID0gITAsIGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksICRjKSkpO1xufVxuZnVuY3Rpb24gYmQoYSkge1xuICBmdW5jdGlvbiBiKGIpIHtcbiAgICByZXR1cm4gYWQoYiwgYSk7XG4gIH1cbiAgaWYgKDAgPCBLYy5sZW5ndGgpIHtcbiAgICBhZChLY1swXSwgYSk7XG4gICAgZm9yICh2YXIgYyA9IDE7IGMgPCBLYy5sZW5ndGg7IGMrKykge1xuICAgICAgdmFyIGQgPSBLY1tjXTtcbiAgICAgIGQuYmxvY2tlZE9uID09PSBhICYmIChkLmJsb2NrZWRPbiA9IG51bGwpO1xuICAgIH1cbiAgfVxuICBudWxsICE9PSBMYyAmJiBhZChMYywgYSk7XG4gIG51bGwgIT09IE1jICYmIGFkKE1jLCBhKTtcbiAgbnVsbCAhPT0gTmMgJiYgYWQoTmMsIGEpO1xuICBPYy5mb3JFYWNoKGIpO1xuICBQYy5mb3JFYWNoKGIpO1xuICBmb3IgKGMgPSAwOyBjIDwgUWMubGVuZ3RoOyBjKyspIGQgPSBRY1tjXSwgZC5ibG9ja2VkT24gPT09IGEgJiYgKGQuYmxvY2tlZE9uID0gbnVsbCk7XG4gIGZvciAoOyAwIDwgUWMubGVuZ3RoICYmIChjID0gUWNbMF0sIG51bGwgPT09IGMuYmxvY2tlZE9uKTspIFZjKGMpLCBudWxsID09PSBjLmJsb2NrZWRPbiAmJiBRYy5zaGlmdCgpO1xufVxudmFyIGNkID0gdWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsXG4gIGRkID0gITA7XG5mdW5jdGlvbiBlZChhLCBiLCBjLCBkKSB7XG4gIHZhciBlID0gQyxcbiAgICBmID0gY2QudHJhbnNpdGlvbjtcbiAgY2QudHJhbnNpdGlvbiA9IG51bGw7XG4gIHRyeSB7XG4gICAgQyA9IDEsIGZkKGEsIGIsIGMsIGQpO1xuICB9IGZpbmFsbHkge1xuICAgIEMgPSBlLCBjZC50cmFuc2l0aW9uID0gZjtcbiAgfVxufVxuZnVuY3Rpb24gZ2QoYSwgYiwgYywgZCkge1xuICB2YXIgZSA9IEMsXG4gICAgZiA9IGNkLnRyYW5zaXRpb247XG4gIGNkLnRyYW5zaXRpb24gPSBudWxsO1xuICB0cnkge1xuICAgIEMgPSA0LCBmZChhLCBiLCBjLCBkKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBDID0gZSwgY2QudHJhbnNpdGlvbiA9IGY7XG4gIH1cbn1cbmZ1bmN0aW9uIGZkKGEsIGIsIGMsIGQpIHtcbiAgaWYgKGRkKSB7XG4gICAgdmFyIGUgPSBZYyhhLCBiLCBjLCBkKTtcbiAgICBpZiAobnVsbCA9PT0gZSkgaGQoYSwgYiwgZCwgaWQsIGMpLCBTYyhhLCBkKTtlbHNlIGlmIChVYyhlLCBhLCBiLCBjLCBkKSkgZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmIChTYyhhLCBkKSwgYiAmIDQgJiYgLTEgPCBSYy5pbmRleE9mKGEpKSB7XG4gICAgICBmb3IgKDsgbnVsbCAhPT0gZTspIHtcbiAgICAgICAgdmFyIGYgPSBDYihlKTtcbiAgICAgICAgbnVsbCAhPT0gZiAmJiBFYyhmKTtcbiAgICAgICAgZiA9IFljKGEsIGIsIGMsIGQpO1xuICAgICAgICBudWxsID09PSBmICYmIGhkKGEsIGIsIGQsIGlkLCBjKTtcbiAgICAgICAgaWYgKGYgPT09IGUpIGJyZWFrO1xuICAgICAgICBlID0gZjtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IGUgJiYgZC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9IGVsc2UgaGQoYSwgYiwgZCwgbnVsbCwgYyk7XG4gIH1cbn1cbnZhciBpZCA9IG51bGw7XG5mdW5jdGlvbiBZYyhhLCBiLCBjLCBkKSB7XG4gIGlkID0gbnVsbDtcbiAgYSA9IHhiKGQpO1xuICBhID0gV2MoYSk7XG4gIGlmIChudWxsICE9PSBhKSBpZiAoYiA9IFZiKGEpLCBudWxsID09PSBiKSBhID0gbnVsbDtlbHNlIGlmIChjID0gYi50YWcsIDEzID09PSBjKSB7XG4gICAgYSA9IFdiKGIpO1xuICAgIGlmIChudWxsICE9PSBhKSByZXR1cm4gYTtcbiAgICBhID0gbnVsbDtcbiAgfSBlbHNlIGlmICgzID09PSBjKSB7XG4gICAgaWYgKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpIHJldHVybiAzID09PSBiLnRhZyA/IGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gOiBudWxsO1xuICAgIGEgPSBudWxsO1xuICB9IGVsc2UgYiAhPT0gYSAmJiAoYSA9IG51bGwpO1xuICBpZCA9IGE7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gamQoYSkge1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIFwiY2FuY2VsXCI6XG4gICAgY2FzZSBcImNsaWNrXCI6XG4gICAgY2FzZSBcImNsb3NlXCI6XG4gICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgY2FzZSBcImNvcHlcIjpcbiAgICBjYXNlIFwiY3V0XCI6XG4gICAgY2FzZSBcImF1eGNsaWNrXCI6XG4gICAgY2FzZSBcImRibGNsaWNrXCI6XG4gICAgY2FzZSBcImRyYWdlbmRcIjpcbiAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgY2FzZSBcImRyb3BcIjpcbiAgICBjYXNlIFwiZm9jdXNpblwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgIGNhc2UgXCJpbnB1dFwiOlxuICAgIGNhc2UgXCJpbnZhbGlkXCI6XG4gICAgY2FzZSBcImtleWRvd25cIjpcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICBjYXNlIFwicGFzdGVcIjpcbiAgICBjYXNlIFwicGF1c2VcIjpcbiAgICBjYXNlIFwicGxheVwiOlxuICAgIGNhc2UgXCJwb2ludGVyY2FuY2VsXCI6XG4gICAgY2FzZSBcInBvaW50ZXJkb3duXCI6XG4gICAgY2FzZSBcInBvaW50ZXJ1cFwiOlxuICAgIGNhc2UgXCJyYXRlY2hhbmdlXCI6XG4gICAgY2FzZSBcInJlc2V0XCI6XG4gICAgY2FzZSBcInJlc2l6ZVwiOlxuICAgIGNhc2UgXCJzZWVrZWRcIjpcbiAgICBjYXNlIFwic3VibWl0XCI6XG4gICAgY2FzZSBcInRvdWNoY2FuY2VsXCI6XG4gICAgY2FzZSBcInRvdWNoZW5kXCI6XG4gICAgY2FzZSBcInRvdWNoc3RhcnRcIjpcbiAgICBjYXNlIFwidm9sdW1lY2hhbmdlXCI6XG4gICAgY2FzZSBcImNoYW5nZVwiOlxuICAgIGNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpcbiAgICBjYXNlIFwidGV4dElucHV0XCI6XG4gICAgY2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICBjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpcbiAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICBjYXNlIFwiYmVmb3JlaW5wdXRcIjpcbiAgICBjYXNlIFwiYmx1clwiOlxuICAgIGNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6XG4gICAgY2FzZSBcImZvY3VzXCI6XG4gICAgY2FzZSBcImhhc2hjaGFuZ2VcIjpcbiAgICBjYXNlIFwicG9wc3RhdGVcIjpcbiAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgY2FzZSBcInNlbGVjdHN0YXJ0XCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiZHJhZ1wiOlxuICAgIGNhc2UgXCJkcmFnZW50ZXJcIjpcbiAgICBjYXNlIFwiZHJhZ2V4aXRcIjpcbiAgICBjYXNlIFwiZHJhZ2xlYXZlXCI6XG4gICAgY2FzZSBcImRyYWdvdmVyXCI6XG4gICAgY2FzZSBcIm1vdXNlbW92ZVwiOlxuICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgIGNhc2UgXCJtb3VzZW92ZXJcIjpcbiAgICBjYXNlIFwicG9pbnRlcm1vdmVcIjpcbiAgICBjYXNlIFwicG9pbnRlcm91dFwiOlxuICAgIGNhc2UgXCJwb2ludGVyb3ZlclwiOlxuICAgIGNhc2UgXCJzY3JvbGxcIjpcbiAgICBjYXNlIFwidG9nZ2xlXCI6XG4gICAgY2FzZSBcInRvdWNobW92ZVwiOlxuICAgIGNhc2UgXCJ3aGVlbFwiOlxuICAgIGNhc2UgXCJtb3VzZWVudGVyXCI6XG4gICAgY2FzZSBcIm1vdXNlbGVhdmVcIjpcbiAgICBjYXNlIFwicG9pbnRlcmVudGVyXCI6XG4gICAgY2FzZSBcInBvaW50ZXJsZWF2ZVwiOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgIHN3aXRjaCAoZWMoKSkge1xuICAgICAgICBjYXNlIGZjOlxuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICBjYXNlIGdjOlxuICAgICAgICAgIHJldHVybiA0O1xuICAgICAgICBjYXNlIGhjOlxuICAgICAgICBjYXNlIGljOlxuICAgICAgICAgIHJldHVybiAxNjtcbiAgICAgICAgY2FzZSBqYzpcbiAgICAgICAgICByZXR1cm4gNTM2ODcwOTEyO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAxNjtcbiAgICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIDE2O1xuICB9XG59XG52YXIga2QgPSBudWxsLFxuICBsZCA9IG51bGwsXG4gIG1kID0gbnVsbDtcbmZ1bmN0aW9uIG5kKCkge1xuICBpZiAobWQpIHJldHVybiBtZDtcbiAgdmFyIGEsXG4gICAgYiA9IGxkLFxuICAgIGMgPSBiLmxlbmd0aCxcbiAgICBkLFxuICAgIGUgPSBcInZhbHVlXCIgaW4ga2QgPyBrZC52YWx1ZSA6IGtkLnRleHRDb250ZW50LFxuICAgIGYgPSBlLmxlbmd0aDtcbiAgZm9yIChhID0gMDsgYSA8IGMgJiYgYlthXSA9PT0gZVthXTsgYSsrKTtcbiAgdmFyIGcgPSBjIC0gYTtcbiAgZm9yIChkID0gMTsgZCA8PSBnICYmIGJbYyAtIGRdID09PSBlW2YgLSBkXTsgZCsrKTtcbiAgcmV0dXJuIG1kID0gZS5zbGljZShhLCAxIDwgZCA/IDEgLSBkIDogdm9pZCAwKTtcbn1cbmZ1bmN0aW9uIG9kKGEpIHtcbiAgdmFyIGIgPSBhLmtleUNvZGU7XG4gIFwiY2hhckNvZGVcIiBpbiBhID8gKGEgPSBhLmNoYXJDb2RlLCAwID09PSBhICYmIDEzID09PSBiICYmIChhID0gMTMpKSA6IGEgPSBiO1xuICAxMCA9PT0gYSAmJiAoYSA9IDEzKTtcbiAgcmV0dXJuIDMyIDw9IGEgfHwgMTMgPT09IGEgPyBhIDogMDtcbn1cbmZ1bmN0aW9uIHBkKCkge1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBxZCgpIHtcbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gcmQoYSkge1xuICBmdW5jdGlvbiBiKGIsIGQsIGUsIGYsIGcpIHtcbiAgICB0aGlzLl9yZWFjdE5hbWUgPSBiO1xuICAgIHRoaXMuX3RhcmdldEluc3QgPSBlO1xuICAgIHRoaXMudHlwZSA9IGQ7XG4gICAgdGhpcy5uYXRpdmVFdmVudCA9IGY7XG4gICAgdGhpcy50YXJnZXQgPSBnO1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgZm9yICh2YXIgYyBpbiBhKSBhLmhhc093blByb3BlcnR5KGMpICYmIChiID0gYVtjXSwgdGhpc1tjXSA9IGIgPyBiKGYpIDogZltjXSk7XG4gICAgdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSAobnVsbCAhPSBmLmRlZmF1bHRQcmV2ZW50ZWQgPyBmLmRlZmF1bHRQcmV2ZW50ZWQgOiAhMSA9PT0gZi5yZXR1cm5WYWx1ZSkgPyBwZCA6IHFkO1xuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBxZDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBBKGIucHJvdG90eXBlLCB7XG4gICAgcHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgdGhpcy5kZWZhdWx0UHJldmVudGVkID0gITA7XG4gICAgICB2YXIgYSA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gICAgICBhICYmIChhLnByZXZlbnREZWZhdWx0ID8gYS5wcmV2ZW50RGVmYXVsdCgpIDogXCJ1bmtub3duXCIgIT09IHR5cGVvZiBhLnJldHVyblZhbHVlICYmIChhLnJldHVyblZhbHVlID0gITEpLCB0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHBkKTtcbiAgICB9LFxuICAgIHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uKCkge1xuICAgICAgdmFyIGEgPSB0aGlzLm5hdGl2ZUV2ZW50O1xuICAgICAgYSAmJiAoYS5zdG9wUHJvcGFnYXRpb24gPyBhLnN0b3BQcm9wYWdhdGlvbigpIDogXCJ1bmtub3duXCIgIT09IHR5cGVvZiBhLmNhbmNlbEJ1YmJsZSAmJiAoYS5jYW5jZWxCdWJibGUgPSAhMCksIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBwZCk7XG4gICAgfSxcbiAgICBwZXJzaXN0OiBmdW5jdGlvbiBwZXJzaXN0KCkge30sXG4gICAgaXNQZXJzaXN0ZW50OiBwZFxuICB9KTtcbiAgcmV0dXJuIGI7XG59XG52YXIgc2QgPSB7XG4gICAgZXZlbnRQaGFzZTogMCxcbiAgICBidWJibGVzOiAwLFxuICAgIGNhbmNlbGFibGU6IDAsXG4gICAgdGltZVN0YW1wOiBmdW5jdGlvbiB0aW1lU3RhbXAoYSkge1xuICAgICAgcmV0dXJuIGEudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gICAgfSxcbiAgICBkZWZhdWx0UHJldmVudGVkOiAwLFxuICAgIGlzVHJ1c3RlZDogMFxuICB9LFxuICB0ZCA9IHJkKHNkKSxcbiAgdWQgPSBBKHt9LCBzZCwge1xuICAgIHZpZXc6IDAsXG4gICAgZGV0YWlsOiAwXG4gIH0pLFxuICB2ZCA9IHJkKHVkKSxcbiAgd2QsXG4gIHhkLFxuICB5ZCxcbiAgQWQgPSBBKHt9LCB1ZCwge1xuICAgIHNjcmVlblg6IDAsXG4gICAgc2NyZWVuWTogMCxcbiAgICBjbGllbnRYOiAwLFxuICAgIGNsaWVudFk6IDAsXG4gICAgcGFnZVg6IDAsXG4gICAgcGFnZVk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBhbHRLZXk6IDAsXG4gICAgbWV0YUtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiB6ZCxcbiAgICBidXR0b246IDAsXG4gICAgYnV0dG9uczogMCxcbiAgICByZWxhdGVkVGFyZ2V0OiBmdW5jdGlvbiByZWxhdGVkVGFyZ2V0KGEpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IGEucmVsYXRlZFRhcmdldCA/IGEuZnJvbUVsZW1lbnQgPT09IGEuc3JjRWxlbWVudCA/IGEudG9FbGVtZW50IDogYS5mcm9tRWxlbWVudCA6IGEucmVsYXRlZFRhcmdldDtcbiAgICB9LFxuICAgIG1vdmVtZW50WDogZnVuY3Rpb24gbW92ZW1lbnRYKGEpIHtcbiAgICAgIGlmIChcIm1vdmVtZW50WFwiIGluIGEpIHJldHVybiBhLm1vdmVtZW50WDtcbiAgICAgIGEgIT09IHlkICYmICh5ZCAmJiBcIm1vdXNlbW92ZVwiID09PSBhLnR5cGUgPyAod2QgPSBhLnNjcmVlblggLSB5ZC5zY3JlZW5YLCB4ZCA9IGEuc2NyZWVuWSAtIHlkLnNjcmVlblkpIDogeGQgPSB3ZCA9IDAsIHlkID0gYSk7XG4gICAgICByZXR1cm4gd2Q7XG4gICAgfSxcbiAgICBtb3ZlbWVudFk6IGZ1bmN0aW9uIG1vdmVtZW50WShhKSB7XG4gICAgICByZXR1cm4gXCJtb3ZlbWVudFlcIiBpbiBhID8gYS5tb3ZlbWVudFkgOiB4ZDtcbiAgICB9XG4gIH0pLFxuICBCZCA9IHJkKEFkKSxcbiAgQ2QgPSBBKHt9LCBBZCwge1xuICAgIGRhdGFUcmFuc2ZlcjogMFxuICB9KSxcbiAgRGQgPSByZChDZCksXG4gIEVkID0gQSh7fSwgdWQsIHtcbiAgICByZWxhdGVkVGFyZ2V0OiAwXG4gIH0pLFxuICBGZCA9IHJkKEVkKSxcbiAgR2QgPSBBKHt9LCBzZCwge1xuICAgIGFuaW1hdGlvbk5hbWU6IDAsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgcHNldWRvRWxlbWVudDogMFxuICB9KSxcbiAgSGQgPSByZChHZCksXG4gIElkID0gQSh7fSwgc2QsIHtcbiAgICBjbGlwYm9hcmREYXRhOiBmdW5jdGlvbiBjbGlwYm9hcmREYXRhKGEpIHtcbiAgICAgIHJldHVybiBcImNsaXBib2FyZERhdGFcIiBpbiBhID8gYS5jbGlwYm9hcmREYXRhIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gICAgfVxuICB9KSxcbiAgSmQgPSByZChJZCksXG4gIEtkID0gQSh7fSwgc2QsIHtcbiAgICBkYXRhOiAwXG4gIH0pLFxuICBMZCA9IHJkKEtkKSxcbiAgTWQgPSB7XG4gICAgRXNjOiBcIkVzY2FwZVwiLFxuICAgIFNwYWNlYmFyOiBcIiBcIixcbiAgICBMZWZ0OiBcIkFycm93TGVmdFwiLFxuICAgIFVwOiBcIkFycm93VXBcIixcbiAgICBSaWdodDogXCJBcnJvd1JpZ2h0XCIsXG4gICAgRG93bjogXCJBcnJvd0Rvd25cIixcbiAgICBEZWw6IFwiRGVsZXRlXCIsXG4gICAgV2luOiBcIk9TXCIsXG4gICAgTWVudTogXCJDb250ZXh0TWVudVwiLFxuICAgIEFwcHM6IFwiQ29udGV4dE1lbnVcIixcbiAgICBTY3JvbGw6IFwiU2Nyb2xsTG9ja1wiLFxuICAgIE1velByaW50YWJsZUtleTogXCJVbmlkZW50aWZpZWRcIlxuICB9LFxuICBOZCA9IHtcbiAgICA4OiBcIkJhY2tzcGFjZVwiLFxuICAgIDk6IFwiVGFiXCIsXG4gICAgMTI6IFwiQ2xlYXJcIixcbiAgICAxMzogXCJFbnRlclwiLFxuICAgIDE2OiBcIlNoaWZ0XCIsXG4gICAgMTc6IFwiQ29udHJvbFwiLFxuICAgIDE4OiBcIkFsdFwiLFxuICAgIDE5OiBcIlBhdXNlXCIsXG4gICAgMjA6IFwiQ2Fwc0xvY2tcIixcbiAgICAyNzogXCJFc2NhcGVcIixcbiAgICAzMjogXCIgXCIsXG4gICAgMzM6IFwiUGFnZVVwXCIsXG4gICAgMzQ6IFwiUGFnZURvd25cIixcbiAgICAzNTogXCJFbmRcIixcbiAgICAzNjogXCJIb21lXCIsXG4gICAgMzc6IFwiQXJyb3dMZWZ0XCIsXG4gICAgMzg6IFwiQXJyb3dVcFwiLFxuICAgIDM5OiBcIkFycm93UmlnaHRcIixcbiAgICA0MDogXCJBcnJvd0Rvd25cIixcbiAgICA0NTogXCJJbnNlcnRcIixcbiAgICA0NjogXCJEZWxldGVcIixcbiAgICAxMTI6IFwiRjFcIixcbiAgICAxMTM6IFwiRjJcIixcbiAgICAxMTQ6IFwiRjNcIixcbiAgICAxMTU6IFwiRjRcIixcbiAgICAxMTY6IFwiRjVcIixcbiAgICAxMTc6IFwiRjZcIixcbiAgICAxMTg6IFwiRjdcIixcbiAgICAxMTk6IFwiRjhcIixcbiAgICAxMjA6IFwiRjlcIixcbiAgICAxMjE6IFwiRjEwXCIsXG4gICAgMTIyOiBcIkYxMVwiLFxuICAgIDEyMzogXCJGMTJcIixcbiAgICAxNDQ6IFwiTnVtTG9ja1wiLFxuICAgIDE0NTogXCJTY3JvbGxMb2NrXCIsXG4gICAgMjI0OiBcIk1ldGFcIlxuICB9LFxuICBPZCA9IHtcbiAgICBBbHQ6IFwiYWx0S2V5XCIsXG4gICAgQ29udHJvbDogXCJjdHJsS2V5XCIsXG4gICAgTWV0YTogXCJtZXRhS2V5XCIsXG4gICAgU2hpZnQ6IFwic2hpZnRLZXlcIlxuICB9O1xuZnVuY3Rpb24gUGQoYSkge1xuICB2YXIgYiA9IHRoaXMubmF0aXZlRXZlbnQ7XG4gIHJldHVybiBiLmdldE1vZGlmaWVyU3RhdGUgPyBiLmdldE1vZGlmaWVyU3RhdGUoYSkgOiAoYSA9IE9kW2FdKSA/ICEhYlthXSA6ICExO1xufVxuZnVuY3Rpb24gemQoKSB7XG4gIHJldHVybiBQZDtcbn1cbnZhciBRZCA9IEEoe30sIHVkLCB7XG4gICAga2V5OiBmdW5jdGlvbiBrZXkoYSkge1xuICAgICAgaWYgKGEua2V5KSB7XG4gICAgICAgIHZhciBiID0gTWRbYS5rZXldIHx8IGEua2V5O1xuICAgICAgICBpZiAoXCJVbmlkZW50aWZpZWRcIiAhPT0gYikgcmV0dXJuIGI7XG4gICAgICB9XG4gICAgICByZXR1cm4gXCJrZXlwcmVzc1wiID09PSBhLnR5cGUgPyAoYSA9IG9kKGEpLCAxMyA9PT0gYSA/IFwiRW50ZXJcIiA6IFN0cmluZy5mcm9tQ2hhckNvZGUoYSkpIDogXCJrZXlkb3duXCIgPT09IGEudHlwZSB8fCBcImtleXVwXCIgPT09IGEudHlwZSA/IE5kW2Eua2V5Q29kZV0gfHwgXCJVbmlkZW50aWZpZWRcIiA6IFwiXCI7XG4gICAgfSxcbiAgICBjb2RlOiAwLFxuICAgIGxvY2F0aW9uOiAwLFxuICAgIGN0cmxLZXk6IDAsXG4gICAgc2hpZnRLZXk6IDAsXG4gICAgYWx0S2V5OiAwLFxuICAgIG1ldGFLZXk6IDAsXG4gICAgcmVwZWF0OiAwLFxuICAgIGxvY2FsZTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiB6ZCxcbiAgICBjaGFyQ29kZTogZnVuY3Rpb24gY2hhckNvZGUoYSkge1xuICAgICAgcmV0dXJuIFwia2V5cHJlc3NcIiA9PT0gYS50eXBlID8gb2QoYSkgOiAwO1xuICAgIH0sXG4gICAga2V5Q29kZTogZnVuY3Rpb24ga2V5Q29kZShhKSB7XG4gICAgICByZXR1cm4gXCJrZXlkb3duXCIgPT09IGEudHlwZSB8fCBcImtleXVwXCIgPT09IGEudHlwZSA/IGEua2V5Q29kZSA6IDA7XG4gICAgfSxcbiAgICB3aGljaDogZnVuY3Rpb24gd2hpY2goYSkge1xuICAgICAgcmV0dXJuIFwia2V5cHJlc3NcIiA9PT0gYS50eXBlID8gb2QoYSkgOiBcImtleWRvd25cIiA9PT0gYS50eXBlIHx8IFwia2V5dXBcIiA9PT0gYS50eXBlID8gYS5rZXlDb2RlIDogMDtcbiAgICB9XG4gIH0pLFxuICBSZCA9IHJkKFFkKSxcbiAgU2QgPSBBKHt9LCBBZCwge1xuICAgIHBvaW50ZXJJZDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgcHJlc3N1cmU6IDAsXG4gICAgdGFuZ2VudGlhbFByZXNzdXJlOiAwLFxuICAgIHRpbHRYOiAwLFxuICAgIHRpbHRZOiAwLFxuICAgIHR3aXN0OiAwLFxuICAgIHBvaW50ZXJUeXBlOiAwLFxuICAgIGlzUHJpbWFyeTogMFxuICB9KSxcbiAgVGQgPSByZChTZCksXG4gIFVkID0gQSh7fSwgdWQsIHtcbiAgICB0b3VjaGVzOiAwLFxuICAgIHRhcmdldFRvdWNoZXM6IDAsXG4gICAgY2hhbmdlZFRvdWNoZXM6IDAsXG4gICAgYWx0S2V5OiAwLFxuICAgIG1ldGFLZXk6IDAsXG4gICAgY3RybEtleTogMCxcbiAgICBzaGlmdEtleTogMCxcbiAgICBnZXRNb2RpZmllclN0YXRlOiB6ZFxuICB9KSxcbiAgVmQgPSByZChVZCksXG4gIFdkID0gQSh7fSwgc2QsIHtcbiAgICBwcm9wZXJ0eU5hbWU6IDAsXG4gICAgZWxhcHNlZFRpbWU6IDAsXG4gICAgcHNldWRvRWxlbWVudDogMFxuICB9KSxcbiAgWGQgPSByZChXZCksXG4gIFlkID0gQSh7fSwgQWQsIHtcbiAgICBkZWx0YVg6IGZ1bmN0aW9uIGRlbHRhWChhKSB7XG4gICAgICByZXR1cm4gXCJkZWx0YVhcIiBpbiBhID8gYS5kZWx0YVggOiBcIndoZWVsRGVsdGFYXCIgaW4gYSA/IC1hLndoZWVsRGVsdGFYIDogMDtcbiAgICB9LFxuICAgIGRlbHRhWTogZnVuY3Rpb24gZGVsdGFZKGEpIHtcbiAgICAgIHJldHVybiBcImRlbHRhWVwiIGluIGEgPyBhLmRlbHRhWSA6IFwid2hlZWxEZWx0YVlcIiBpbiBhID8gLWEud2hlZWxEZWx0YVkgOiBcIndoZWVsRGVsdGFcIiBpbiBhID8gLWEud2hlZWxEZWx0YSA6IDA7XG4gICAgfSxcbiAgICBkZWx0YVo6IDAsXG4gICAgZGVsdGFNb2RlOiAwXG4gIH0pLFxuICBaZCA9IHJkKFlkKSxcbiAgJGQgPSBbOSwgMTMsIDI3LCAzMl0sXG4gIGFlID0gaWEgJiYgXCJDb21wb3NpdGlvbkV2ZW50XCIgaW4gd2luZG93LFxuICBiZSA9IG51bGw7XG5pYSAmJiBcImRvY3VtZW50TW9kZVwiIGluIGRvY3VtZW50ICYmIChiZSA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSk7XG52YXIgY2UgPSBpYSAmJiBcIlRleHRFdmVudFwiIGluIHdpbmRvdyAmJiAhYmUsXG4gIGRlID0gaWEgJiYgKCFhZSB8fCBiZSAmJiA4IDwgYmUgJiYgMTEgPj0gYmUpLFxuICBlZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLFxuICBmZSA9ICExO1xuZnVuY3Rpb24gZ2UoYSwgYikge1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgIHJldHVybiAtMSAhPT0gJGQuaW5kZXhPZihiLmtleUNvZGUpO1xuICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICByZXR1cm4gMjI5ICE9PSBiLmtleUNvZGU7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgY2FzZSBcIm1vdXNlZG93blwiOlxuICAgIGNhc2UgXCJmb2N1c291dFwiOlxuICAgICAgcmV0dXJuICEwO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gITE7XG4gIH1cbn1cbmZ1bmN0aW9uIGhlKGEpIHtcbiAgYSA9IGEuZGV0YWlsO1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gX3R5cGVvZihhKSAmJiBcImRhdGFcIiBpbiBhID8gYS5kYXRhIDogbnVsbDtcbn1cbnZhciBpZSA9ICExO1xuZnVuY3Rpb24gamUoYSwgYikge1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgIHJldHVybiBoZShiKTtcbiAgICBjYXNlIFwia2V5cHJlc3NcIjpcbiAgICAgIGlmICgzMiAhPT0gYi53aGljaCkgcmV0dXJuIG51bGw7XG4gICAgICBmZSA9ICEwO1xuICAgICAgcmV0dXJuIGVlO1xuICAgIGNhc2UgXCJ0ZXh0SW5wdXRcIjpcbiAgICAgIHJldHVybiBhID0gYi5kYXRhLCBhID09PSBlZSAmJiBmZSA/IG51bGwgOiBhO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24ga2UoYSwgYikge1xuICBpZiAoaWUpIHJldHVybiBcImNvbXBvc2l0aW9uZW5kXCIgPT09IGEgfHwgIWFlICYmIGdlKGEsIGIpID8gKGEgPSBuZCgpLCBtZCA9IGxkID0ga2QgPSBudWxsLCBpZSA9ICExLCBhKSA6IG51bGw7XG4gIHN3aXRjaCAoYSkge1xuICAgIGNhc2UgXCJwYXN0ZVwiOlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICBpZiAoIShiLmN0cmxLZXkgfHwgYi5hbHRLZXkgfHwgYi5tZXRhS2V5KSB8fCBiLmN0cmxLZXkgJiYgYi5hbHRLZXkpIHtcbiAgICAgICAgaWYgKGIuY2hhciAmJiAxIDwgYi5jaGFyLmxlbmd0aCkgcmV0dXJuIGIuY2hhcjtcbiAgICAgICAgaWYgKGIud2hpY2gpIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XG4gICAgICByZXR1cm4gZGUgJiYgXCJrb1wiICE9PSBiLmxvY2FsZSA/IG51bGwgOiBiLmRhdGE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgbGUgPSB7XG4gIGNvbG9yOiAhMCxcbiAgZGF0ZTogITAsXG4gIGRhdGV0aW1lOiAhMCxcbiAgXCJkYXRldGltZS1sb2NhbFwiOiAhMCxcbiAgZW1haWw6ICEwLFxuICBtb250aDogITAsXG4gIG51bWJlcjogITAsXG4gIHBhc3N3b3JkOiAhMCxcbiAgcmFuZ2U6ICEwLFxuICBzZWFyY2g6ICEwLFxuICB0ZWw6ICEwLFxuICB0ZXh0OiAhMCxcbiAgdGltZTogITAsXG4gIHVybDogITAsXG4gIHdlZWs6ICEwXG59O1xuZnVuY3Rpb24gbWUoYSkge1xuICB2YXIgYiA9IGEgJiYgYS5ub2RlTmFtZSAmJiBhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiBcImlucHV0XCIgPT09IGIgPyAhIWxlW2EudHlwZV0gOiBcInRleHRhcmVhXCIgPT09IGIgPyAhMCA6ICExO1xufVxuZnVuY3Rpb24gbmUoYSwgYiwgYywgZCkge1xuICBFYihkKTtcbiAgYiA9IG9lKGIsIFwib25DaGFuZ2VcIik7XG4gIDAgPCBiLmxlbmd0aCAmJiAoYyA9IG5ldyB0ZChcIm9uQ2hhbmdlXCIsIFwiY2hhbmdlXCIsIG51bGwsIGMsIGQpLCBhLnB1c2goe1xuICAgIGV2ZW50OiBjLFxuICAgIGxpc3RlbmVyczogYlxuICB9KSk7XG59XG52YXIgcGUgPSBudWxsLFxuICBxZSA9IG51bGw7XG5mdW5jdGlvbiByZShhKSB7XG4gIHNlKGEsIDApO1xufVxuZnVuY3Rpb24gdGUoYSkge1xuICB2YXIgYiA9IHVlKGEpO1xuICBpZiAoV2EoYikpIHJldHVybiBhO1xufVxuZnVuY3Rpb24gdmUoYSwgYikge1xuICBpZiAoXCJjaGFuZ2VcIiA9PT0gYSkgcmV0dXJuIGI7XG59XG52YXIgd2UgPSAhMTtcbmlmIChpYSkge1xuICB2YXIgeGU7XG4gIGlmIChpYSkge1xuICAgIHZhciB5ZSA9IChcIm9uaW5wdXRcIiBpbiBkb2N1bWVudCk7XG4gICAgaWYgKCF5ZSkge1xuICAgICAgdmFyIHplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIHplLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIiwgXCJyZXR1cm47XCIpO1xuICAgICAgeWUgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB6ZS5vbmlucHV0O1xuICAgIH1cbiAgICB4ZSA9IHllO1xuICB9IGVsc2UgeGUgPSAhMTtcbiAgd2UgPSB4ZSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCA5IDwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbn1cbmZ1bmN0aW9uIEFlKCkge1xuICBwZSAmJiAocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsIEJlKSwgcWUgPSBwZSA9IG51bGwpO1xufVxuZnVuY3Rpb24gQmUoYSkge1xuICBpZiAoXCJ2YWx1ZVwiID09PSBhLnByb3BlcnR5TmFtZSAmJiB0ZShxZSkpIHtcbiAgICB2YXIgYiA9IFtdO1xuICAgIG5lKGIsIHFlLCBhLCB4YihhKSk7XG4gICAgSmIocmUsIGIpO1xuICB9XG59XG5mdW5jdGlvbiBDZShhLCBiLCBjKSB7XG4gIFwiZm9jdXNpblwiID09PSBhID8gKEFlKCksIHBlID0gYiwgcWUgPSBjLCBwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIiwgQmUpKSA6IFwiZm9jdXNvdXRcIiA9PT0gYSAmJiBBZSgpO1xufVxuZnVuY3Rpb24gRGUoYSkge1xuICBpZiAoXCJzZWxlY3Rpb25jaGFuZ2VcIiA9PT0gYSB8fCBcImtleXVwXCIgPT09IGEgfHwgXCJrZXlkb3duXCIgPT09IGEpIHJldHVybiB0ZShxZSk7XG59XG5mdW5jdGlvbiBFZShhLCBiKSB7XG4gIGlmIChcImNsaWNrXCIgPT09IGEpIHJldHVybiB0ZShiKTtcbn1cbmZ1bmN0aW9uIEZlKGEsIGIpIHtcbiAgaWYgKFwiaW5wdXRcIiA9PT0gYSB8fCBcImNoYW5nZVwiID09PSBhKSByZXR1cm4gdGUoYik7XG59XG5mdW5jdGlvbiBHZShhLCBiKSB7XG4gIHJldHVybiBhID09PSBiICYmICgwICE9PSBhIHx8IDEgLyBhID09PSAxIC8gYikgfHwgYSAhPT0gYSAmJiBiICE9PSBiO1xufVxudmFyIEhlID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgT2JqZWN0LmlzID8gT2JqZWN0LmlzIDogR2U7XG5mdW5jdGlvbiBJZShhLCBiKSB7XG4gIGlmIChIZShhLCBiKSkgcmV0dXJuICEwO1xuICBpZiAoXCJvYmplY3RcIiAhPT0gX3R5cGVvZihhKSB8fCBudWxsID09PSBhIHx8IFwib2JqZWN0XCIgIT09IF90eXBlb2YoYikgfHwgbnVsbCA9PT0gYikgcmV0dXJuICExO1xuICB2YXIgYyA9IE9iamVjdC5rZXlzKGEpLFxuICAgIGQgPSBPYmplY3Qua2V5cyhiKTtcbiAgaWYgKGMubGVuZ3RoICE9PSBkLmxlbmd0aCkgcmV0dXJuICExO1xuICBmb3IgKGQgPSAwOyBkIDwgYy5sZW5ndGg7IGQrKykge1xuICAgIHZhciBlID0gY1tkXTtcbiAgICBpZiAoIWphLmNhbGwoYiwgZSkgfHwgIUhlKGFbZV0sIGJbZV0pKSByZXR1cm4gITE7XG4gIH1cbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gSmUoYSkge1xuICBmb3IgKDsgYSAmJiBhLmZpcnN0Q2hpbGQ7KSBhID0gYS5maXJzdENoaWxkO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIEtlKGEsIGIpIHtcbiAgdmFyIGMgPSBKZShhKTtcbiAgYSA9IDA7XG4gIGZvciAodmFyIGQ7IGM7KSB7XG4gICAgaWYgKDMgPT09IGMubm9kZVR5cGUpIHtcbiAgICAgIGQgPSBhICsgYy50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICBpZiAoYSA8PSBiICYmIGQgPj0gYikgcmV0dXJuIHtcbiAgICAgICAgbm9kZTogYyxcbiAgICAgICAgb2Zmc2V0OiBiIC0gYVxuICAgICAgfTtcbiAgICAgIGEgPSBkO1xuICAgIH1cbiAgICBhOiB7XG4gICAgICBmb3IgKDsgYzspIHtcbiAgICAgICAgaWYgKGMubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICBjID0gYy5uZXh0U2libGluZztcbiAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9XG4gICAgICAgIGMgPSBjLnBhcmVudE5vZGU7XG4gICAgICB9XG4gICAgICBjID0gdm9pZCAwO1xuICAgIH1cbiAgICBjID0gSmUoYyk7XG4gIH1cbn1cbmZ1bmN0aW9uIExlKGEsIGIpIHtcbiAgcmV0dXJuIGEgJiYgYiA/IGEgPT09IGIgPyAhMCA6IGEgJiYgMyA9PT0gYS5ub2RlVHlwZSA/ICExIDogYiAmJiAzID09PSBiLm5vZGVUeXBlID8gTGUoYSwgYi5wYXJlbnROb2RlKSA6IFwiY29udGFpbnNcIiBpbiBhID8gYS5jb250YWlucyhiKSA6IGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPyAhIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpICYgMTYpIDogITEgOiAhMTtcbn1cbmZ1bmN0aW9uIE1lKCkge1xuICBmb3IgKHZhciBhID0gd2luZG93LCBiID0gWGEoKTsgYiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBjID0gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIH0gY2F0Y2ggKGQpIHtcbiAgICAgIGMgPSAhMTtcbiAgICB9XG4gICAgaWYgKGMpIGEgPSBiLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztcbiAgICBiID0gWGEoYS5kb2N1bWVudCk7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG5mdW5jdGlvbiBOZShhKSB7XG4gIHZhciBiID0gYSAmJiBhLm5vZGVOYW1lICYmIGEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIGIgJiYgKFwiaW5wdXRcIiA9PT0gYiAmJiAoXCJ0ZXh0XCIgPT09IGEudHlwZSB8fCBcInNlYXJjaFwiID09PSBhLnR5cGUgfHwgXCJ0ZWxcIiA9PT0gYS50eXBlIHx8IFwidXJsXCIgPT09IGEudHlwZSB8fCBcInBhc3N3b3JkXCIgPT09IGEudHlwZSkgfHwgXCJ0ZXh0YXJlYVwiID09PSBiIHx8IFwidHJ1ZVwiID09PSBhLmNvbnRlbnRFZGl0YWJsZSk7XG59XG5mdW5jdGlvbiBPZShhKSB7XG4gIHZhciBiID0gTWUoKSxcbiAgICBjID0gYS5mb2N1c2VkRWxlbSxcbiAgICBkID0gYS5zZWxlY3Rpb25SYW5nZTtcbiAgaWYgKGIgIT09IGMgJiYgYyAmJiBjLm93bmVyRG9jdW1lbnQgJiYgTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgYykpIHtcbiAgICBpZiAobnVsbCAhPT0gZCAmJiBOZShjKSkgaWYgKGIgPSBkLnN0YXJ0LCBhID0gZC5lbmQsIHZvaWQgMCA9PT0gYSAmJiAoYSA9IGIpLCBcInNlbGVjdGlvblN0YXJ0XCIgaW4gYykgYy5zZWxlY3Rpb25TdGFydCA9IGIsIGMuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oYSwgYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYgKGEgPSAoYiA9IGMub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgJiYgYi5kZWZhdWx0VmlldyB8fCB3aW5kb3csIGEuZ2V0U2VsZWN0aW9uKSB7XG4gICAgICBhID0gYS5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIHZhciBlID0gYy50ZXh0Q29udGVudC5sZW5ndGgsXG4gICAgICAgIGYgPSBNYXRoLm1pbihkLnN0YXJ0LCBlKTtcbiAgICAgIGQgPSB2b2lkIDAgPT09IGQuZW5kID8gZiA6IE1hdGgubWluKGQuZW5kLCBlKTtcbiAgICAgICFhLmV4dGVuZCAmJiBmID4gZCAmJiAoZSA9IGQsIGQgPSBmLCBmID0gZSk7XG4gICAgICBlID0gS2UoYywgZik7XG4gICAgICB2YXIgZyA9IEtlKGMsIGQpO1xuICAgICAgZSAmJiBnICYmICgxICE9PSBhLnJhbmdlQ291bnQgfHwgYS5hbmNob3JOb2RlICE9PSBlLm5vZGUgfHwgYS5hbmNob3JPZmZzZXQgIT09IGUub2Zmc2V0IHx8IGEuZm9jdXNOb2RlICE9PSBnLm5vZGUgfHwgYS5mb2N1c09mZnNldCAhPT0gZy5vZmZzZXQpICYmIChiID0gYi5jcmVhdGVSYW5nZSgpLCBiLnNldFN0YXJ0KGUubm9kZSwgZS5vZmZzZXQpLCBhLnJlbW92ZUFsbFJhbmdlcygpLCBmID4gZCA/IChhLmFkZFJhbmdlKGIpLCBhLmV4dGVuZChnLm5vZGUsIGcub2Zmc2V0KSkgOiAoYi5zZXRFbmQoZy5ub2RlLCBnLm9mZnNldCksIGEuYWRkUmFuZ2UoYikpKTtcbiAgICB9XG4gICAgYiA9IFtdO1xuICAgIGZvciAoYSA9IGM7IGEgPSBhLnBhcmVudE5vZGU7KSAxID09PSBhLm5vZGVUeXBlICYmIGIucHVzaCh7XG4gICAgICBlbGVtZW50OiBhLFxuICAgICAgbGVmdDogYS5zY3JvbGxMZWZ0LFxuICAgICAgdG9wOiBhLnNjcm9sbFRvcFxuICAgIH0pO1xuICAgIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGMuZm9jdXMgJiYgYy5mb2N1cygpO1xuICAgIGZvciAoYyA9IDA7IGMgPCBiLmxlbmd0aDsgYysrKSBhID0gYltjXSwgYS5lbGVtZW50LnNjcm9sbExlZnQgPSBhLmxlZnQsIGEuZWxlbWVudC5zY3JvbGxUb3AgPSBhLnRvcDtcbiAgfVxufVxudmFyIFBlID0gaWEgJiYgXCJkb2N1bWVudE1vZGVcIiBpbiBkb2N1bWVudCAmJiAxMSA+PSBkb2N1bWVudC5kb2N1bWVudE1vZGUsXG4gIFFlID0gbnVsbCxcbiAgUmUgPSBudWxsLFxuICBTZSA9IG51bGwsXG4gIFRlID0gITE7XG5mdW5jdGlvbiBVZShhLCBiLCBjKSB7XG4gIHZhciBkID0gYy53aW5kb3cgPT09IGMgPyBjLmRvY3VtZW50IDogOSA9PT0gYy5ub2RlVHlwZSA/IGMgOiBjLm93bmVyRG9jdW1lbnQ7XG4gIFRlIHx8IG51bGwgPT0gUWUgfHwgUWUgIT09IFhhKGQpIHx8IChkID0gUWUsIFwic2VsZWN0aW9uU3RhcnRcIiBpbiBkICYmIE5lKGQpID8gZCA9IHtcbiAgICBzdGFydDogZC5zZWxlY3Rpb25TdGFydCxcbiAgICBlbmQ6IGQuc2VsZWN0aW9uRW5kXG4gIH0gOiAoZCA9IChkLm93bmVyRG9jdW1lbnQgJiYgZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksIGQgPSB7XG4gICAgYW5jaG9yTm9kZTogZC5hbmNob3JOb2RlLFxuICAgIGFuY2hvck9mZnNldDogZC5hbmNob3JPZmZzZXQsXG4gICAgZm9jdXNOb2RlOiBkLmZvY3VzTm9kZSxcbiAgICBmb2N1c09mZnNldDogZC5mb2N1c09mZnNldFxuICB9KSwgU2UgJiYgSWUoU2UsIGQpIHx8IChTZSA9IGQsIGQgPSBvZShSZSwgXCJvblNlbGVjdFwiKSwgMCA8IGQubGVuZ3RoICYmIChiID0gbmV3IHRkKFwib25TZWxlY3RcIiwgXCJzZWxlY3RcIiwgbnVsbCwgYiwgYyksIGEucHVzaCh7XG4gICAgZXZlbnQ6IGIsXG4gICAgbGlzdGVuZXJzOiBkXG4gIH0pLCBiLnRhcmdldCA9IFFlKSkpO1xufVxuZnVuY3Rpb24gVmUoYSwgYikge1xuICB2YXIgYyA9IHt9O1xuICBjW2EudG9Mb3dlckNhc2UoKV0gPSBiLnRvTG93ZXJDYXNlKCk7XG4gIGNbXCJXZWJraXRcIiArIGFdID0gXCJ3ZWJraXRcIiArIGI7XG4gIGNbXCJNb3pcIiArIGFdID0gXCJtb3pcIiArIGI7XG4gIHJldHVybiBjO1xufVxudmFyIFdlID0ge1xuICAgIGFuaW1hdGlvbmVuZDogVmUoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25FbmRcIiksXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiBWZShcIkFuaW1hdGlvblwiLCBcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxcbiAgICBhbmltYXRpb25zdGFydDogVmUoXCJBbmltYXRpb25cIiwgXCJBbmltYXRpb25TdGFydFwiKSxcbiAgICB0cmFuc2l0aW9uZW5kOiBWZShcIlRyYW5zaXRpb25cIiwgXCJUcmFuc2l0aW9uRW5kXCIpXG4gIH0sXG4gIFhlID0ge30sXG4gIFllID0ge307XG5pYSAmJiAoWWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLCBcIkFuaW1hdGlvbkV2ZW50XCIgaW4gd2luZG93IHx8IChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbiwgZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sIGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLCBcIlRyYW5zaXRpb25FdmVudFwiIGluIHdpbmRvdyB8fCBkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtcbmZ1bmN0aW9uIFplKGEpIHtcbiAgaWYgKFhlW2FdKSByZXR1cm4gWGVbYV07XG4gIGlmICghV2VbYV0pIHJldHVybiBhO1xuICB2YXIgYiA9IFdlW2FdLFxuICAgIGM7XG4gIGZvciAoYyBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShjKSAmJiBjIGluIFllKSByZXR1cm4gWGVbYV0gPSBiW2NdO1xuICByZXR1cm4gYTtcbn1cbnZhciAkZSA9IFplKFwiYW5pbWF0aW9uZW5kXCIpLFxuICBhZiA9IFplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLFxuICBiZiA9IFplKFwiYW5pbWF0aW9uc3RhcnRcIiksXG4gIGNmID0gWmUoXCJ0cmFuc2l0aW9uZW5kXCIpLFxuICBkZiA9IG5ldyBNYXAoKSxcbiAgZWYgPSBcImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSwgYikge1xuICBkZi5zZXQoYSwgYik7XG4gIGZhKGIsIFthXSk7XG59XG5mb3IgKHZhciBnZiA9IDA7IGdmIDwgZWYubGVuZ3RoOyBnZisrKSB7XG4gIHZhciBoZiA9IGVmW2dmXSxcbiAgICBqZiA9IGhmLnRvTG93ZXJDYXNlKCksXG4gICAga2YgPSBoZlswXS50b1VwcGVyQ2FzZSgpICsgaGYuc2xpY2UoMSk7XG4gIGZmKGpmLCBcIm9uXCIgKyBrZik7XG59XG5mZigkZSwgXCJvbkFuaW1hdGlvbkVuZFwiKTtcbmZmKGFmLCBcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO1xuZmYoYmYsIFwib25BbmltYXRpb25TdGFydFwiKTtcbmZmKFwiZGJsY2xpY2tcIiwgXCJvbkRvdWJsZUNsaWNrXCIpO1xuZmYoXCJmb2N1c2luXCIsIFwib25Gb2N1c1wiKTtcbmZmKFwiZm9jdXNvdXRcIiwgXCJvbkJsdXJcIik7XG5mZihjZiwgXCJvblRyYW5zaXRpb25FbmRcIik7XG5oYShcIm9uTW91c2VFbnRlclwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5oYShcIm9uTW91c2VMZWF2ZVwiLCBbXCJtb3VzZW91dFwiLCBcIm1vdXNlb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckVudGVyXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsIFtcInBvaW50ZXJvdXRcIiwgXCJwb2ludGVyb3ZlclwiXSk7XG5mYShcIm9uQ2hhbmdlXCIsIFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvblNlbGVjdFwiLCBcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQmVmb3JlSW5wdXRcIiwgW1wiY29tcG9zaXRpb25lbmRcIiwgXCJrZXlwcmVzc1wiLCBcInRleHRJbnB1dFwiLCBcInBhc3RlXCJdKTtcbmZhKFwib25Db21wb3NpdGlvbkVuZFwiLCBcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsIFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIiwgXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG52YXIgbGYgPSBcImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFxuICBtZiA9IG5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLCBiLCBjKSB7XG4gIHZhciBkID0gYS50eXBlIHx8IFwidW5rbm93bi1ldmVudFwiO1xuICBhLmN1cnJlbnRUYXJnZXQgPSBjO1xuICBVYihkLCBiLCB2b2lkIDAsIGEpO1xuICBhLmN1cnJlbnRUYXJnZXQgPSBudWxsO1xufVxuZnVuY3Rpb24gc2UoYSwgYikge1xuICBiID0gMCAhPT0gKGIgJiA0KTtcbiAgZm9yICh2YXIgYyA9IDA7IGMgPCBhLmxlbmd0aDsgYysrKSB7XG4gICAgdmFyIGQgPSBhW2NdLFxuICAgICAgZSA9IGQuZXZlbnQ7XG4gICAgZCA9IGQubGlzdGVuZXJzO1xuICAgIGE6IHtcbiAgICAgIHZhciBmID0gdm9pZCAwO1xuICAgICAgaWYgKGIpIGZvciAodmFyIGcgPSBkLmxlbmd0aCAtIDE7IDAgPD0gZzsgZy0tKSB7XG4gICAgICAgIHZhciBoID0gZFtnXSxcbiAgICAgICAgICBrID0gaC5pbnN0YW5jZSxcbiAgICAgICAgICBsID0gaC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBoID0gaC5saXN0ZW5lcjtcbiAgICAgICAgaWYgKGsgIT09IGYgJiYgZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSBicmVhayBhO1xuICAgICAgICBuZihlLCBoLCBsKTtcbiAgICAgICAgZiA9IGs7XG4gICAgICB9IGVsc2UgZm9yIChnID0gMDsgZyA8IGQubGVuZ3RoOyBnKyspIHtcbiAgICAgICAgaCA9IGRbZ107XG4gICAgICAgIGsgPSBoLmluc3RhbmNlO1xuICAgICAgICBsID0gaC5jdXJyZW50VGFyZ2V0O1xuICAgICAgICBoID0gaC5saXN0ZW5lcjtcbiAgICAgICAgaWYgKGsgIT09IGYgJiYgZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKSBicmVhayBhO1xuICAgICAgICBuZihlLCBoLCBsKTtcbiAgICAgICAgZiA9IGs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChRYikgdGhyb3cgYSA9IFJiLCBRYiA9ICExLCBSYiA9IG51bGwsIGE7XG59XG5mdW5jdGlvbiBEKGEsIGIpIHtcbiAgdmFyIGMgPSBiW29mXTtcbiAgdm9pZCAwID09PSBjICYmIChjID0gYltvZl0gPSBuZXcgU2V0KCkpO1xuICB2YXIgZCA9IGEgKyBcIl9fYnViYmxlXCI7XG4gIGMuaGFzKGQpIHx8IChwZihiLCBhLCAyLCAhMSksIGMuYWRkKGQpKTtcbn1cbmZ1bmN0aW9uIHFmKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSAwO1xuICBiICYmIChkIHw9IDQpO1xuICBwZihjLCBhLCBkLCBiKTtcbn1cbnZhciByZiA9IFwiX3JlYWN0TGlzdGVuaW5nXCIgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtcbmZ1bmN0aW9uIHNmKGEpIHtcbiAgaWYgKCFhW3JmXSkge1xuICAgIGFbcmZdID0gITA7XG4gICAgZGEuZm9yRWFjaChmdW5jdGlvbiAoYikge1xuICAgICAgXCJzZWxlY3Rpb25jaGFuZ2VcIiAhPT0gYiAmJiAobWYuaGFzKGIpIHx8IHFmKGIsICExLCBhKSwgcWYoYiwgITAsIGEpKTtcbiAgICB9KTtcbiAgICB2YXIgYiA9IDkgPT09IGEubm9kZVR5cGUgPyBhIDogYS5vd25lckRvY3VtZW50O1xuICAgIG51bGwgPT09IGIgfHwgYltyZl0gfHwgKGJbcmZdID0gITAsIHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsICExLCBiKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBmKGEsIGIsIGMsIGQpIHtcbiAgc3dpdGNoIChqZChiKSkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciBlID0gZWQ7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBlID0gZ2Q7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZSA9IGZkO1xuICB9XG4gIGMgPSBlLmJpbmQobnVsbCwgYiwgYywgYSk7XG4gIGUgPSB2b2lkIDA7XG4gICFMYiB8fCBcInRvdWNoc3RhcnRcIiAhPT0gYiAmJiBcInRvdWNobW92ZVwiICE9PSBiICYmIFwid2hlZWxcIiAhPT0gYiB8fCAoZSA9ICEwKTtcbiAgZCA/IHZvaWQgMCAhPT0gZSA/IGEuYWRkRXZlbnRMaXN0ZW5lcihiLCBjLCB7XG4gICAgY2FwdHVyZTogITAsXG4gICAgcGFzc2l2ZTogZVxuICB9KSA6IGEuYWRkRXZlbnRMaXN0ZW5lcihiLCBjLCAhMCkgOiB2b2lkIDAgIT09IGUgPyBhLmFkZEV2ZW50TGlzdGVuZXIoYiwgYywge1xuICAgIHBhc3NpdmU6IGVcbiAgfSkgOiBhLmFkZEV2ZW50TGlzdGVuZXIoYiwgYywgITEpO1xufVxuZnVuY3Rpb24gaGQoYSwgYiwgYywgZCwgZSkge1xuICB2YXIgZiA9IGQ7XG4gIGlmICgwID09PSAoYiAmIDEpICYmIDAgPT09IChiICYgMikgJiYgbnVsbCAhPT0gZCkgYTogZm9yICg7Oykge1xuICAgIGlmIChudWxsID09PSBkKSByZXR1cm47XG4gICAgdmFyIGcgPSBkLnRhZztcbiAgICBpZiAoMyA9PT0gZyB8fCA0ID09PSBnKSB7XG4gICAgICB2YXIgaCA9IGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICBpZiAoaCA9PT0gZSB8fCA4ID09PSBoLm5vZGVUeXBlICYmIGgucGFyZW50Tm9kZSA9PT0gZSkgYnJlYWs7XG4gICAgICBpZiAoNCA9PT0gZykgZm9yIChnID0gZC5yZXR1cm47IG51bGwgIT09IGc7KSB7XG4gICAgICAgIHZhciBrID0gZy50YWc7XG4gICAgICAgIGlmICgzID09PSBrIHx8IDQgPT09IGspIGlmIChrID0gZy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbywgayA9PT0gZSB8fCA4ID09PSBrLm5vZGVUeXBlICYmIGsucGFyZW50Tm9kZSA9PT0gZSkgcmV0dXJuO1xuICAgICAgICBnID0gZy5yZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKDsgbnVsbCAhPT0gaDspIHtcbiAgICAgICAgZyA9IFdjKGgpO1xuICAgICAgICBpZiAobnVsbCA9PT0gZykgcmV0dXJuO1xuICAgICAgICBrID0gZy50YWc7XG4gICAgICAgIGlmICg1ID09PSBrIHx8IDYgPT09IGspIHtcbiAgICAgICAgICBkID0gZiA9IGc7XG4gICAgICAgICAgY29udGludWUgYTtcbiAgICAgICAgfVxuICAgICAgICBoID0gaC5wYXJlbnROb2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBkID0gZC5yZXR1cm47XG4gIH1cbiAgSmIoZnVuY3Rpb24gKCkge1xuICAgIHZhciBkID0gZixcbiAgICAgIGUgPSB4YihjKSxcbiAgICAgIGcgPSBbXTtcbiAgICBhOiB7XG4gICAgICB2YXIgaCA9IGRmLmdldChhKTtcbiAgICAgIGlmICh2b2lkIDAgIT09IGgpIHtcbiAgICAgICAgdmFyIGsgPSB0ZCxcbiAgICAgICAgICBuID0gYTtcbiAgICAgICAgc3dpdGNoIChhKSB7XG4gICAgICAgICAgY2FzZSBcImtleXByZXNzXCI6XG4gICAgICAgICAgICBpZiAoMCA9PT0gb2QoYykpIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcbiAgICAgICAgICBjYXNlIFwia2V5dXBcIjpcbiAgICAgICAgICAgIGsgPSBSZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJmb2N1c2luXCI6XG4gICAgICAgICAgICBuID0gXCJmb2N1c1wiO1xuICAgICAgICAgICAgayA9IEZkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcImZvY3Vzb3V0XCI6XG4gICAgICAgICAgICBuID0gXCJibHVyXCI7XG4gICAgICAgICAgICBrID0gRmQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmVmb3JlYmx1clwiOlxuICAgICAgICAgIGNhc2UgXCJhZnRlcmJsdXJcIjpcbiAgICAgICAgICAgIGsgPSBGZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJjbGlja1wiOlxuICAgICAgICAgICAgaWYgKDIgPT09IGMuYnV0dG9uKSBicmVhayBhO1xuICAgICAgICAgIGNhc2UgXCJhdXhjbGlja1wiOlxuICAgICAgICAgIGNhc2UgXCJkYmxjbGlja1wiOlxuICAgICAgICAgIGNhc2UgXCJtb3VzZWRvd25cIjpcbiAgICAgICAgICBjYXNlIFwibW91c2Vtb3ZlXCI6XG4gICAgICAgICAgY2FzZSBcIm1vdXNldXBcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2VvdXRcIjpcbiAgICAgICAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgICAgICBrID0gQmQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZHJhZ1wiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgY2FzZSBcImRyYWdlbnRlclwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnZXhpdFwiOlxuICAgICAgICAgIGNhc2UgXCJkcmFnbGVhdmVcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ292ZXJcIjpcbiAgICAgICAgICBjYXNlIFwiZHJhZ3N0YXJ0XCI6XG4gICAgICAgICAgY2FzZSBcImRyb3BcIjpcbiAgICAgICAgICAgIGsgPSBEZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ0b3VjaGNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaGVuZFwiOlxuICAgICAgICAgIGNhc2UgXCJ0b3VjaG1vdmVcIjpcbiAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgayA9IFZkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAkZTpcbiAgICAgICAgICBjYXNlIGFmOlxuICAgICAgICAgIGNhc2UgYmY6XG4gICAgICAgICAgICBrID0gSGQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIGNmOlxuICAgICAgICAgICAgayA9IFhkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInNjcm9sbFwiOlxuICAgICAgICAgICAgayA9IHZkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIndoZWVsXCI6XG4gICAgICAgICAgICBrID0gWmQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiY29weVwiOlxuICAgICAgICAgIGNhc2UgXCJjdXRcIjpcbiAgICAgICAgICBjYXNlIFwicGFzdGVcIjpcbiAgICAgICAgICAgIGsgPSBKZDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOlxuICAgICAgICAgIGNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpcbiAgICAgICAgICBjYXNlIFwicG9pbnRlcmNhbmNlbFwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyZG93blwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVybW92ZVwiOlxuICAgICAgICAgIGNhc2UgXCJwb2ludGVyb3V0XCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJvdmVyXCI6XG4gICAgICAgICAgY2FzZSBcInBvaW50ZXJ1cFwiOlxuICAgICAgICAgICAgayA9IFRkO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ID0gMCAhPT0gKGIgJiA0KSxcbiAgICAgICAgICBKID0gIXQgJiYgXCJzY3JvbGxcIiA9PT0gYSxcbiAgICAgICAgICB4ID0gdCA/IG51bGwgIT09IGggPyBoICsgXCJDYXB0dXJlXCIgOiBudWxsIDogaDtcbiAgICAgICAgdCA9IFtdO1xuICAgICAgICBmb3IgKHZhciB3ID0gZCwgdTsgbnVsbCAhPT0gdzspIHtcbiAgICAgICAgICB1ID0gdztcbiAgICAgICAgICB2YXIgRiA9IHUuc3RhdGVOb2RlO1xuICAgICAgICAgIDUgPT09IHUudGFnICYmIG51bGwgIT09IEYgJiYgKHUgPSBGLCBudWxsICE9PSB4ICYmIChGID0gS2IodywgeCksIG51bGwgIT0gRiAmJiB0LnB1c2godGYodywgRiwgdSkpKSk7XG4gICAgICAgICAgaWYgKEopIGJyZWFrO1xuICAgICAgICAgIHcgPSB3LnJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAwIDwgdC5sZW5ndGggJiYgKGggPSBuZXcgayhoLCBuLCBudWxsLCBjLCBlKSwgZy5wdXNoKHtcbiAgICAgICAgICBldmVudDogaCxcbiAgICAgICAgICBsaXN0ZW5lcnM6IHRcbiAgICAgICAgfSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoMCA9PT0gKGIgJiA3KSkge1xuICAgICAgYToge1xuICAgICAgICBoID0gXCJtb3VzZW92ZXJcIiA9PT0gYSB8fCBcInBvaW50ZXJvdmVyXCIgPT09IGE7XG4gICAgICAgIGsgPSBcIm1vdXNlb3V0XCIgPT09IGEgfHwgXCJwb2ludGVyb3V0XCIgPT09IGE7XG4gICAgICAgIGlmIChoICYmIGMgIT09IHdiICYmIChuID0gYy5yZWxhdGVkVGFyZ2V0IHx8IGMuZnJvbUVsZW1lbnQpICYmIChXYyhuKSB8fCBuW3VmXSkpIGJyZWFrIGE7XG4gICAgICAgIGlmIChrIHx8IGgpIHtcbiAgICAgICAgICBoID0gZS53aW5kb3cgPT09IGUgPyBlIDogKGggPSBlLm93bmVyRG9jdW1lbnQpID8gaC5kZWZhdWx0VmlldyB8fCBoLnBhcmVudFdpbmRvdyA6IHdpbmRvdztcbiAgICAgICAgICBpZiAoaykge1xuICAgICAgICAgICAgaWYgKG4gPSBjLnJlbGF0ZWRUYXJnZXQgfHwgYy50b0VsZW1lbnQsIGsgPSBkLCBuID0gbiA/IFdjKG4pIDogbnVsbCwgbnVsbCAhPT0gbiAmJiAoSiA9IFZiKG4pLCBuICE9PSBKIHx8IDUgIT09IG4udGFnICYmIDYgIT09IG4udGFnKSkgbiA9IG51bGw7XG4gICAgICAgICAgfSBlbHNlIGsgPSBudWxsLCBuID0gZDtcbiAgICAgICAgICBpZiAoayAhPT0gbikge1xuICAgICAgICAgICAgdCA9IEJkO1xuICAgICAgICAgICAgRiA9IFwib25Nb3VzZUxlYXZlXCI7XG4gICAgICAgICAgICB4ID0gXCJvbk1vdXNlRW50ZXJcIjtcbiAgICAgICAgICAgIHcgPSBcIm1vdXNlXCI7XG4gICAgICAgICAgICBpZiAoXCJwb2ludGVyb3V0XCIgPT09IGEgfHwgXCJwb2ludGVyb3ZlclwiID09PSBhKSB0ID0gVGQsIEYgPSBcIm9uUG9pbnRlckxlYXZlXCIsIHggPSBcIm9uUG9pbnRlckVudGVyXCIsIHcgPSBcInBvaW50ZXJcIjtcbiAgICAgICAgICAgIEogPSBudWxsID09IGsgPyBoIDogdWUoayk7XG4gICAgICAgICAgICB1ID0gbnVsbCA9PSBuID8gaCA6IHVlKG4pO1xuICAgICAgICAgICAgaCA9IG5ldyB0KEYsIHcgKyBcImxlYXZlXCIsIGssIGMsIGUpO1xuICAgICAgICAgICAgaC50YXJnZXQgPSBKO1xuICAgICAgICAgICAgaC5yZWxhdGVkVGFyZ2V0ID0gdTtcbiAgICAgICAgICAgIEYgPSBudWxsO1xuICAgICAgICAgICAgV2MoZSkgPT09IGQgJiYgKHQgPSBuZXcgdCh4LCB3ICsgXCJlbnRlclwiLCBuLCBjLCBlKSwgdC50YXJnZXQgPSB1LCB0LnJlbGF0ZWRUYXJnZXQgPSBKLCBGID0gdCk7XG4gICAgICAgICAgICBKID0gRjtcbiAgICAgICAgICAgIGlmIChrICYmIG4pIGI6IHtcbiAgICAgICAgICAgICAgdCA9IGs7XG4gICAgICAgICAgICAgIHggPSBuO1xuICAgICAgICAgICAgICB3ID0gMDtcbiAgICAgICAgICAgICAgZm9yICh1ID0gdDsgdTsgdSA9IHZmKHUpKSB3Kys7XG4gICAgICAgICAgICAgIHUgPSAwO1xuICAgICAgICAgICAgICBmb3IgKEYgPSB4OyBGOyBGID0gdmYoRikpIHUrKztcbiAgICAgICAgICAgICAgZm9yICg7IDAgPCB3IC0gdTspIHQgPSB2Zih0KSwgdy0tO1xuICAgICAgICAgICAgICBmb3IgKDsgMCA8IHUgLSB3OykgeCA9IHZmKHgpLCB1LS07XG4gICAgICAgICAgICAgIGZvciAoOyB3LS07KSB7XG4gICAgICAgICAgICAgICAgaWYgKHQgPT09IHggfHwgbnVsbCAhPT0geCAmJiB0ID09PSB4LmFsdGVybmF0ZSkgYnJlYWsgYjtcbiAgICAgICAgICAgICAgICB0ID0gdmYodCk7XG4gICAgICAgICAgICAgICAgeCA9IHZmKHgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHQgPSBudWxsO1xuICAgICAgICAgICAgbnVsbCAhPT0gayAmJiB3ZihnLCBoLCBrLCB0LCAhMSk7XG4gICAgICAgICAgICBudWxsICE9PSBuICYmIG51bGwgIT09IEogJiYgd2YoZywgSiwgbiwgdCwgITApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYToge1xuICAgICAgICBoID0gZCA/IHVlKGQpIDogd2luZG93O1xuICAgICAgICBrID0gaC5ub2RlTmFtZSAmJiBoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcInNlbGVjdFwiID09PSBrIHx8IFwiaW5wdXRcIiA9PT0gayAmJiBcImZpbGVcIiA9PT0gaC50eXBlKSB2YXIgbmEgPSB2ZTtlbHNlIGlmIChtZShoKSkge1xuICAgICAgICAgIGlmICh3ZSkgbmEgPSBGZTtlbHNlIHtcbiAgICAgICAgICAgIG5hID0gRGU7XG4gICAgICAgICAgICB2YXIgeGEgPSBDZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSAoayA9IGgubm9kZU5hbWUpICYmIFwiaW5wdXRcIiA9PT0gay50b0xvd2VyQ2FzZSgpICYmIChcImNoZWNrYm94XCIgPT09IGgudHlwZSB8fCBcInJhZGlvXCIgPT09IGgudHlwZSkgJiYgKG5hID0gRWUpO1xuICAgICAgICBpZiAobmEgJiYgKG5hID0gbmEoYSwgZCkpKSB7XG4gICAgICAgICAgbmUoZywgbmEsIGMsIGUpO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgeGEgJiYgeGEoYSwgaCwgZCk7XG4gICAgICAgIFwiZm9jdXNvdXRcIiA9PT0gYSAmJiAoeGEgPSBoLl93cmFwcGVyU3RhdGUpICYmIHhhLmNvbnRyb2xsZWQgJiYgXCJudW1iZXJcIiA9PT0gaC50eXBlICYmIGNiKGgsIFwibnVtYmVyXCIsIGgudmFsdWUpO1xuICAgICAgfVxuICAgICAgeGEgPSBkID8gdWUoZCkgOiB3aW5kb3c7XG4gICAgICBzd2l0Y2ggKGEpIHtcbiAgICAgICAgY2FzZSBcImZvY3VzaW5cIjpcbiAgICAgICAgICBpZiAobWUoeGEpIHx8IFwidHJ1ZVwiID09PSB4YS5jb250ZW50RWRpdGFibGUpIFFlID0geGEsIFJlID0gZCwgU2UgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwiZm9jdXNvdXRcIjpcbiAgICAgICAgICBTZSA9IFJlID0gUWUgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibW91c2Vkb3duXCI6XG4gICAgICAgICAgVGUgPSAhMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNvbnRleHRtZW51XCI6XG4gICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6XG4gICAgICAgIGNhc2UgXCJkcmFnZW5kXCI6XG4gICAgICAgICAgVGUgPSAhMTtcbiAgICAgICAgICBVZShnLCBjLCBlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOlxuICAgICAgICAgIGlmIChQZSkgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJrZXlkb3duXCI6XG4gICAgICAgIGNhc2UgXCJrZXl1cFwiOlxuICAgICAgICAgIFVlKGcsIGMsIGUpO1xuICAgICAgfVxuICAgICAgdmFyICRhO1xuICAgICAgaWYgKGFlKSBiOiB7XG4gICAgICAgIHN3aXRjaCAoYSkge1xuICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XG4gICAgICAgICAgICB2YXIgYmEgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiO1xuICAgICAgICAgICAgYnJlYWsgYjtcbiAgICAgICAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcbiAgICAgICAgICAgIGJhID0gXCJvbkNvbXBvc2l0aW9uRW5kXCI7XG4gICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxuICAgICAgICAgICAgYmEgPSBcIm9uQ29tcG9zaXRpb25VcGRhdGVcIjtcbiAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgIH1cbiAgICAgICAgYmEgPSB2b2lkIDA7XG4gICAgICB9IGVsc2UgaWUgPyBnZShhLCBjKSAmJiAoYmEgPSBcIm9uQ29tcG9zaXRpb25FbmRcIikgOiBcImtleWRvd25cIiA9PT0gYSAmJiAyMjkgPT09IGMua2V5Q29kZSAmJiAoYmEgPSBcIm9uQ29tcG9zaXRpb25TdGFydFwiKTtcbiAgICAgIGJhICYmIChkZSAmJiBcImtvXCIgIT09IGMubG9jYWxlICYmIChpZSB8fCBcIm9uQ29tcG9zaXRpb25TdGFydFwiICE9PSBiYSA/IFwib25Db21wb3NpdGlvbkVuZFwiID09PSBiYSAmJiBpZSAmJiAoJGEgPSBuZCgpKSA6IChrZCA9IGUsIGxkID0gXCJ2YWx1ZVwiIGluIGtkID8ga2QudmFsdWUgOiBrZC50ZXh0Q29udGVudCwgaWUgPSAhMCkpLCB4YSA9IG9lKGQsIGJhKSwgMCA8IHhhLmxlbmd0aCAmJiAoYmEgPSBuZXcgTGQoYmEsIGEsIG51bGwsIGMsIGUpLCBnLnB1c2goe1xuICAgICAgICBldmVudDogYmEsXG4gICAgICAgIGxpc3RlbmVyczogeGFcbiAgICAgIH0pLCAkYSA/IGJhLmRhdGEgPSAkYSA6ICgkYSA9IGhlKGMpLCBudWxsICE9PSAkYSAmJiAoYmEuZGF0YSA9ICRhKSkpKTtcbiAgICAgIGlmICgkYSA9IGNlID8gamUoYSwgYykgOiBrZShhLCBjKSkgZCA9IG9lKGQsIFwib25CZWZvcmVJbnB1dFwiKSwgMCA8IGQubGVuZ3RoICYmIChlID0gbmV3IExkKFwib25CZWZvcmVJbnB1dFwiLCBcImJlZm9yZWlucHV0XCIsIG51bGwsIGMsIGUpLCBnLnB1c2goe1xuICAgICAgICBldmVudDogZSxcbiAgICAgICAgbGlzdGVuZXJzOiBkXG4gICAgICB9KSwgZS5kYXRhID0gJGEpO1xuICAgIH1cbiAgICBzZShnLCBiKTtcbiAgfSk7XG59XG5mdW5jdGlvbiB0ZihhLCBiLCBjKSB7XG4gIHJldHVybiB7XG4gICAgaW5zdGFuY2U6IGEsXG4gICAgbGlzdGVuZXI6IGIsXG4gICAgY3VycmVudFRhcmdldDogY1xuICB9O1xufVxuZnVuY3Rpb24gb2UoYSwgYikge1xuICBmb3IgKHZhciBjID0gYiArIFwiQ2FwdHVyZVwiLCBkID0gW107IG51bGwgIT09IGE7KSB7XG4gICAgdmFyIGUgPSBhLFxuICAgICAgZiA9IGUuc3RhdGVOb2RlO1xuICAgIDUgPT09IGUudGFnICYmIG51bGwgIT09IGYgJiYgKGUgPSBmLCBmID0gS2IoYSwgYyksIG51bGwgIT0gZiAmJiBkLnVuc2hpZnQodGYoYSwgZiwgZSkpLCBmID0gS2IoYSwgYiksIG51bGwgIT0gZiAmJiBkLnB1c2godGYoYSwgZiwgZSkpKTtcbiAgICBhID0gYS5yZXR1cm47XG4gIH1cbiAgcmV0dXJuIGQ7XG59XG5mdW5jdGlvbiB2ZihhKSB7XG4gIGlmIChudWxsID09PSBhKSByZXR1cm4gbnVsbDtcbiAgZG8gYSA9IGEucmV0dXJuOyB3aGlsZSAoYSAmJiA1ICE9PSBhLnRhZyk7XG4gIHJldHVybiBhID8gYSA6IG51bGw7XG59XG5mdW5jdGlvbiB3ZihhLCBiLCBjLCBkLCBlKSB7XG4gIGZvciAodmFyIGYgPSBiLl9yZWFjdE5hbWUsIGcgPSBbXTsgbnVsbCAhPT0gYyAmJiBjICE9PSBkOykge1xuICAgIHZhciBoID0gYyxcbiAgICAgIGsgPSBoLmFsdGVybmF0ZSxcbiAgICAgIGwgPSBoLnN0YXRlTm9kZTtcbiAgICBpZiAobnVsbCAhPT0gayAmJiBrID09PSBkKSBicmVhaztcbiAgICA1ID09PSBoLnRhZyAmJiBudWxsICE9PSBsICYmIChoID0gbCwgZSA/IChrID0gS2IoYywgZiksIG51bGwgIT0gayAmJiBnLnVuc2hpZnQodGYoYywgaywgaCkpKSA6IGUgfHwgKGsgPSBLYihjLCBmKSwgbnVsbCAhPSBrICYmIGcucHVzaCh0ZihjLCBrLCBoKSkpKTtcbiAgICBjID0gYy5yZXR1cm47XG4gIH1cbiAgMCAhPT0gZy5sZW5ndGggJiYgYS5wdXNoKHtcbiAgICBldmVudDogYixcbiAgICBsaXN0ZW5lcnM6IGdcbiAgfSk7XG59XG52YXIgeGYgPSAvXFxyXFxuPy9nLFxuICB5ZiA9IC9cXHUwMDAwfFxcdUZGRkQvZztcbmZ1bmN0aW9uIHpmKGEpIHtcbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSB0eXBlb2YgYSA/IGEgOiBcIlwiICsgYSkucmVwbGFjZSh4ZiwgXCJcXG5cIikucmVwbGFjZSh5ZiwgXCJcIik7XG59XG5mdW5jdGlvbiBBZihhLCBiLCBjKSB7XG4gIGIgPSB6ZihiKTtcbiAgaWYgKHpmKGEpICE9PSBiICYmIGMpIHRocm93IEVycm9yKHAoNDI1KSk7XG59XG5mdW5jdGlvbiBCZigpIHt9XG52YXIgQ2YgPSBudWxsLFxuICBEZiA9IG51bGw7XG5mdW5jdGlvbiBFZihhLCBiKSB7XG4gIHJldHVybiBcInRleHRhcmVhXCIgPT09IGEgfHwgXCJub3NjcmlwdFwiID09PSBhIHx8IFwic3RyaW5nXCIgPT09IHR5cGVvZiBiLmNoaWxkcmVuIHx8IFwibnVtYmVyXCIgPT09IHR5cGVvZiBiLmNoaWxkcmVuIHx8IFwib2JqZWN0XCIgPT09IF90eXBlb2YoYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkgJiYgbnVsbCAhPT0gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCAmJiBudWxsICE9IGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sO1xufVxudmFyIEZmID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygc2V0VGltZW91dCA/IHNldFRpbWVvdXQgOiB2b2lkIDAsXG4gIEdmID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgY2xlYXJUaW1lb3V0ID8gY2xlYXJUaW1lb3V0IDogdm9pZCAwLFxuICBIZiA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFByb21pc2UgPyBQcm9taXNlIDogdm9pZCAwLFxuICBKZiA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHF1ZXVlTWljcm90YXNrID8gcXVldWVNaWNyb3Rhc2sgOiBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgSGYgPyBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpO1xuICB9IDogRmY7XG5mdW5jdGlvbiBJZihhKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHRocm93IGE7XG4gIH0pO1xufVxuZnVuY3Rpb24gS2YoYSwgYikge1xuICB2YXIgYyA9IGIsXG4gICAgZCA9IDA7XG4gIGRvIHtcbiAgICB2YXIgZSA9IGMubmV4dFNpYmxpbmc7XG4gICAgYS5yZW1vdmVDaGlsZChjKTtcbiAgICBpZiAoZSAmJiA4ID09PSBlLm5vZGVUeXBlKSBpZiAoYyA9IGUuZGF0YSwgXCIvJFwiID09PSBjKSB7XG4gICAgICBpZiAoMCA9PT0gZCkge1xuICAgICAgICBhLnJlbW92ZUNoaWxkKGUpO1xuICAgICAgICBiZChiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZC0tO1xuICAgIH0gZWxzZSBcIiRcIiAhPT0gYyAmJiBcIiQ/XCIgIT09IGMgJiYgXCIkIVwiICE9PSBjIHx8IGQrKztcbiAgICBjID0gZTtcbiAgfSB3aGlsZSAoYyk7XG4gIGJkKGIpO1xufVxuZnVuY3Rpb24gTGYoYSkge1xuICBmb3IgKDsgbnVsbCAhPSBhOyBhID0gYS5uZXh0U2libGluZykge1xuICAgIHZhciBiID0gYS5ub2RlVHlwZTtcbiAgICBpZiAoMSA9PT0gYiB8fCAzID09PSBiKSBicmVhaztcbiAgICBpZiAoOCA9PT0gYikge1xuICAgICAgYiA9IGEuZGF0YTtcbiAgICAgIGlmIChcIiRcIiA9PT0gYiB8fCBcIiQhXCIgPT09IGIgfHwgXCIkP1wiID09PSBiKSBicmVhaztcbiAgICAgIGlmIChcIi8kXCIgPT09IGIpIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIE1mKGEpIHtcbiAgYSA9IGEucHJldmlvdXNTaWJsaW5nO1xuICBmb3IgKHZhciBiID0gMDsgYTspIHtcbiAgICBpZiAoOCA9PT0gYS5ub2RlVHlwZSkge1xuICAgICAgdmFyIGMgPSBhLmRhdGE7XG4gICAgICBpZiAoXCIkXCIgPT09IGMgfHwgXCIkIVwiID09PSBjIHx8IFwiJD9cIiA9PT0gYykge1xuICAgICAgICBpZiAoMCA9PT0gYikgcmV0dXJuIGE7XG4gICAgICAgIGItLTtcbiAgICAgIH0gZWxzZSBcIi8kXCIgPT09IGMgJiYgYisrO1xuICAgIH1cbiAgICBhID0gYS5wcmV2aW91c1NpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgTmYgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxcbiAgT2YgPSBcIl9fcmVhY3RGaWJlciRcIiArIE5mLFxuICBQZiA9IFwiX19yZWFjdFByb3BzJFwiICsgTmYsXG4gIHVmID0gXCJfX3JlYWN0Q29udGFpbmVyJFwiICsgTmYsXG4gIG9mID0gXCJfX3JlYWN0RXZlbnRzJFwiICsgTmYsXG4gIFFmID0gXCJfX3JlYWN0TGlzdGVuZXJzJFwiICsgTmYsXG4gIFJmID0gXCJfX3JlYWN0SGFuZGxlcyRcIiArIE5mO1xuZnVuY3Rpb24gV2MoYSkge1xuICB2YXIgYiA9IGFbT2ZdO1xuICBpZiAoYikgcmV0dXJuIGI7XG4gIGZvciAodmFyIGMgPSBhLnBhcmVudE5vZGU7IGM7KSB7XG4gICAgaWYgKGIgPSBjW3VmXSB8fCBjW09mXSkge1xuICAgICAgYyA9IGIuYWx0ZXJuYXRlO1xuICAgICAgaWYgKG51bGwgIT09IGIuY2hpbGQgfHwgbnVsbCAhPT0gYyAmJiBudWxsICE9PSBjLmNoaWxkKSBmb3IgKGEgPSBNZihhKTsgbnVsbCAhPT0gYTspIHtcbiAgICAgICAgaWYgKGMgPSBhW09mXSkgcmV0dXJuIGM7XG4gICAgICAgIGEgPSBNZihhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICBhID0gYztcbiAgICBjID0gYS5wYXJlbnROb2RlO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gQ2IoYSkge1xuICBhID0gYVtPZl0gfHwgYVt1Zl07XG4gIHJldHVybiAhYSB8fCA1ICE9PSBhLnRhZyAmJiA2ICE9PSBhLnRhZyAmJiAxMyAhPT0gYS50YWcgJiYgMyAhPT0gYS50YWcgPyBudWxsIDogYTtcbn1cbmZ1bmN0aW9uIHVlKGEpIHtcbiAgaWYgKDUgPT09IGEudGFnIHx8IDYgPT09IGEudGFnKSByZXR1cm4gYS5zdGF0ZU5vZGU7XG4gIHRocm93IEVycm9yKHAoMzMpKTtcbn1cbmZ1bmN0aW9uIERiKGEpIHtcbiAgcmV0dXJuIGFbUGZdIHx8IG51bGw7XG59XG52YXIgU2YgPSBbXSxcbiAgVGYgPSAtMTtcbmZ1bmN0aW9uIFVmKGEpIHtcbiAgcmV0dXJuIHtcbiAgICBjdXJyZW50OiBhXG4gIH07XG59XG5mdW5jdGlvbiBFKGEpIHtcbiAgMCA+IFRmIHx8IChhLmN1cnJlbnQgPSBTZltUZl0sIFNmW1RmXSA9IG51bGwsIFRmLS0pO1xufVxuZnVuY3Rpb24gRyhhLCBiKSB7XG4gIFRmKys7XG4gIFNmW1RmXSA9IGEuY3VycmVudDtcbiAgYS5jdXJyZW50ID0gYjtcbn1cbnZhciBWZiA9IHt9LFxuICBIID0gVWYoVmYpLFxuICBXZiA9IFVmKCExKSxcbiAgWGYgPSBWZjtcbmZ1bmN0aW9uIFlmKGEsIGIpIHtcbiAgdmFyIGMgPSBhLnR5cGUuY29udGV4dFR5cGVzO1xuICBpZiAoIWMpIHJldHVybiBWZjtcbiAgdmFyIGQgPSBhLnN0YXRlTm9kZTtcbiAgaWYgKGQgJiYgZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0ID09PSBiKSByZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDtcbiAgdmFyIGUgPSB7fSxcbiAgICBmO1xuICBmb3IgKGYgaW4gYykgZVtmXSA9IGJbZl07XG4gIGQgJiYgKGEgPSBhLnN0YXRlTm9kZSwgYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0ID0gYiwgYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCA9IGUpO1xuICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIFpmKGEpIHtcbiAgYSA9IGEuY2hpbGRDb250ZXh0VHlwZXM7XG4gIHJldHVybiBudWxsICE9PSBhICYmIHZvaWQgMCAhPT0gYTtcbn1cbmZ1bmN0aW9uICRmKCkge1xuICBFKFdmKTtcbiAgRShIKTtcbn1cbmZ1bmN0aW9uIGFnKGEsIGIsIGMpIHtcbiAgaWYgKEguY3VycmVudCAhPT0gVmYpIHRocm93IEVycm9yKHAoMTY4KSk7XG4gIEcoSCwgYik7XG4gIEcoV2YsIGMpO1xufVxuZnVuY3Rpb24gYmcoYSwgYiwgYykge1xuICB2YXIgZCA9IGEuc3RhdGVOb2RlO1xuICBiID0gYi5jaGlsZENvbnRleHRUeXBlcztcbiAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KSByZXR1cm4gYztcbiAgZCA9IGQuZ2V0Q2hpbGRDb250ZXh0KCk7XG4gIGZvciAodmFyIGUgaW4gZCkgaWYgKCEoZSBpbiBiKSkgdGhyb3cgRXJyb3IocCgxMDgsIFJhKGEpIHx8IFwiVW5rbm93blwiLCBlKSk7XG4gIHJldHVybiBBKHt9LCBjLCBkKTtcbn1cbmZ1bmN0aW9uIGNnKGEpIHtcbiAgYSA9IChhID0gYS5zdGF0ZU5vZGUpICYmIGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgfHwgVmY7XG4gIFhmID0gSC5jdXJyZW50O1xuICBHKEgsIGEpO1xuICBHKFdmLCBXZi5jdXJyZW50KTtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gZGcoYSwgYiwgYykge1xuICB2YXIgZCA9IGEuc3RhdGVOb2RlO1xuICBpZiAoIWQpIHRocm93IEVycm9yKHAoMTY5KSk7XG4gIGMgPyAoYSA9IGJnKGEsIGIsIFhmKSwgZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCA9IGEsIEUoV2YpLCBFKEgpLCBHKEgsIGEpKSA6IEUoV2YpO1xuICBHKFdmLCBjKTtcbn1cbnZhciBlZyA9IG51bGwsXG4gIGZnID0gITEsXG4gIGdnID0gITE7XG5mdW5jdGlvbiBoZyhhKSB7XG4gIG51bGwgPT09IGVnID8gZWcgPSBbYV0gOiBlZy5wdXNoKGEpO1xufVxuZnVuY3Rpb24gaWcoYSkge1xuICBmZyA9ICEwO1xuICBoZyhhKTtcbn1cbmZ1bmN0aW9uIGpnKCkge1xuICBpZiAoIWdnICYmIG51bGwgIT09IGVnKSB7XG4gICAgZ2cgPSAhMDtcbiAgICB2YXIgYSA9IDAsXG4gICAgICBiID0gQztcbiAgICB0cnkge1xuICAgICAgdmFyIGMgPSBlZztcbiAgICAgIGZvciAoQyA9IDE7IGEgPCBjLmxlbmd0aDsgYSsrKSB7XG4gICAgICAgIHZhciBkID0gY1thXTtcbiAgICAgICAgZG8gZCA9IGQoITApOyB3aGlsZSAobnVsbCAhPT0gZCk7XG4gICAgICB9XG4gICAgICBlZyA9IG51bGw7XG4gICAgICBmZyA9ICExO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG51bGwgIT09IGVnICYmIChlZyA9IGVnLnNsaWNlKGEgKyAxKSksIGFjKGZjLCBqZyksIGU7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIEMgPSBiLCBnZyA9ICExO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbnZhciBrZyA9IFtdLFxuICBsZyA9IDAsXG4gIG1nID0gbnVsbCxcbiAgbmcgPSAwLFxuICBvZyA9IFtdLFxuICBwZyA9IDAsXG4gIHFnID0gbnVsbCxcbiAgcmcgPSAxLFxuICBzZyA9IFwiXCI7XG5mdW5jdGlvbiB0ZyhhLCBiKSB7XG4gIGtnW2xnKytdID0gbmc7XG4gIGtnW2xnKytdID0gbWc7XG4gIG1nID0gYTtcbiAgbmcgPSBiO1xufVxuZnVuY3Rpb24gdWcoYSwgYiwgYykge1xuICBvZ1twZysrXSA9IHJnO1xuICBvZ1twZysrXSA9IHNnO1xuICBvZ1twZysrXSA9IHFnO1xuICBxZyA9IGE7XG4gIHZhciBkID0gcmc7XG4gIGEgPSBzZztcbiAgdmFyIGUgPSAzMiAtIG9jKGQpIC0gMTtcbiAgZCAmPSB+KDEgPDwgZSk7XG4gIGMgKz0gMTtcbiAgdmFyIGYgPSAzMiAtIG9jKGIpICsgZTtcbiAgaWYgKDMwIDwgZikge1xuICAgIHZhciBnID0gZSAtIGUgJSA1O1xuICAgIGYgPSAoZCAmICgxIDw8IGcpIC0gMSkudG9TdHJpbmcoMzIpO1xuICAgIGQgPj49IGc7XG4gICAgZSAtPSBnO1xuICAgIHJnID0gMSA8PCAzMiAtIG9jKGIpICsgZSB8IGMgPDwgZSB8IGQ7XG4gICAgc2cgPSBmICsgYTtcbiAgfSBlbHNlIHJnID0gMSA8PCBmIHwgYyA8PCBlIHwgZCwgc2cgPSBhO1xufVxuZnVuY3Rpb24gdmcoYSkge1xuICBudWxsICE9PSBhLnJldHVybiAmJiAodGcoYSwgMSksIHVnKGEsIDEsIDApKTtcbn1cbmZ1bmN0aW9uIHdnKGEpIHtcbiAgZm9yICg7IGEgPT09IG1nOykgbWcgPSBrZ1stLWxnXSwga2dbbGddID0gbnVsbCwgbmcgPSBrZ1stLWxnXSwga2dbbGddID0gbnVsbDtcbiAgZm9yICg7IGEgPT09IHFnOykgcWcgPSBvZ1stLXBnXSwgb2dbcGddID0gbnVsbCwgc2cgPSBvZ1stLXBnXSwgb2dbcGddID0gbnVsbCwgcmcgPSBvZ1stLXBnXSwgb2dbcGddID0gbnVsbDtcbn1cbnZhciB4ZyA9IG51bGwsXG4gIHlnID0gbnVsbCxcbiAgSSA9ICExLFxuICB6ZyA9IG51bGw7XG5mdW5jdGlvbiBBZyhhLCBiKSB7XG4gIHZhciBjID0gQmcoNSwgbnVsbCwgbnVsbCwgMCk7XG4gIGMuZWxlbWVudFR5cGUgPSBcIkRFTEVURURcIjtcbiAgYy5zdGF0ZU5vZGUgPSBiO1xuICBjLnJldHVybiA9IGE7XG4gIGIgPSBhLmRlbGV0aW9ucztcbiAgbnVsbCA9PT0gYiA/IChhLmRlbGV0aW9ucyA9IFtjXSwgYS5mbGFncyB8PSAxNikgOiBiLnB1c2goYyk7XG59XG5mdW5jdGlvbiBDZyhhLCBiKSB7XG4gIHN3aXRjaCAoYS50YWcpIHtcbiAgICBjYXNlIDU6XG4gICAgICB2YXIgYyA9IGEudHlwZTtcbiAgICAgIGIgPSAxICE9PSBiLm5vZGVUeXBlIHx8IGMudG9Mb3dlckNhc2UoKSAhPT0gYi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID8gbnVsbCA6IGI7XG4gICAgICByZXR1cm4gbnVsbCAhPT0gYiA/IChhLnN0YXRlTm9kZSA9IGIsIHhnID0gYSwgeWcgPSBMZihiLmZpcnN0Q2hpbGQpLCAhMCkgOiAhMTtcbiAgICBjYXNlIDY6XG4gICAgICByZXR1cm4gYiA9IFwiXCIgPT09IGEucGVuZGluZ1Byb3BzIHx8IDMgIT09IGIubm9kZVR5cGUgPyBudWxsIDogYiwgbnVsbCAhPT0gYiA/IChhLnN0YXRlTm9kZSA9IGIsIHhnID0gYSwgeWcgPSBudWxsLCAhMCkgOiAhMTtcbiAgICBjYXNlIDEzOlxuICAgICAgcmV0dXJuIGIgPSA4ICE9PSBiLm5vZGVUeXBlID8gbnVsbCA6IGIsIG51bGwgIT09IGIgPyAoYyA9IG51bGwgIT09IHFnID8ge1xuICAgICAgICBpZDogcmcsXG4gICAgICAgIG92ZXJmbG93OiBzZ1xuICAgICAgfSA6IG51bGwsIGEubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgZGVoeWRyYXRlZDogYixcbiAgICAgICAgdHJlZUNvbnRleHQ6IGMsXG4gICAgICAgIHJldHJ5TGFuZTogMTA3Mzc0MTgyNFxuICAgICAgfSwgYyA9IEJnKDE4LCBudWxsLCBudWxsLCAwKSwgYy5zdGF0ZU5vZGUgPSBiLCBjLnJldHVybiA9IGEsIGEuY2hpbGQgPSBjLCB4ZyA9IGEsIHlnID0gbnVsbCwgITApIDogITE7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAhMTtcbiAgfVxufVxuZnVuY3Rpb24gRGcoYSkge1xuICByZXR1cm4gMCAhPT0gKGEubW9kZSAmIDEpICYmIDAgPT09IChhLmZsYWdzICYgMTI4KTtcbn1cbmZ1bmN0aW9uIEVnKGEpIHtcbiAgaWYgKEkpIHtcbiAgICB2YXIgYiA9IHlnO1xuICAgIGlmIChiKSB7XG4gICAgICB2YXIgYyA9IGI7XG4gICAgICBpZiAoIUNnKGEsIGIpKSB7XG4gICAgICAgIGlmIChEZyhhKSkgdGhyb3cgRXJyb3IocCg0MTgpKTtcbiAgICAgICAgYiA9IExmKGMubmV4dFNpYmxpbmcpO1xuICAgICAgICB2YXIgZCA9IHhnO1xuICAgICAgICBiICYmIENnKGEsIGIpID8gQWcoZCwgYykgOiAoYS5mbGFncyA9IGEuZmxhZ3MgJiAtNDA5NyB8IDIsIEkgPSAhMSwgeGcgPSBhKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKERnKGEpKSB0aHJvdyBFcnJvcihwKDQxOCkpO1xuICAgICAgYS5mbGFncyA9IGEuZmxhZ3MgJiAtNDA5NyB8IDI7XG4gICAgICBJID0gITE7XG4gICAgICB4ZyA9IGE7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBGZyhhKSB7XG4gIGZvciAoYSA9IGEucmV0dXJuOyBudWxsICE9PSBhICYmIDUgIT09IGEudGFnICYmIDMgIT09IGEudGFnICYmIDEzICE9PSBhLnRhZzspIGEgPSBhLnJldHVybjtcbiAgeGcgPSBhO1xufVxuZnVuY3Rpb24gR2coYSkge1xuICBpZiAoYSAhPT0geGcpIHJldHVybiAhMTtcbiAgaWYgKCFJKSByZXR1cm4gRmcoYSksIEkgPSAhMCwgITE7XG4gIHZhciBiO1xuICAoYiA9IDMgIT09IGEudGFnKSAmJiAhKGIgPSA1ICE9PSBhLnRhZykgJiYgKGIgPSBhLnR5cGUsIGIgPSBcImhlYWRcIiAhPT0gYiAmJiBcImJvZHlcIiAhPT0gYiAmJiAhRWYoYS50eXBlLCBhLm1lbW9pemVkUHJvcHMpKTtcbiAgaWYgKGIgJiYgKGIgPSB5ZykpIHtcbiAgICBpZiAoRGcoYSkpIHRocm93IEhnKCksIEVycm9yKHAoNDE4KSk7XG4gICAgZm9yICg7IGI7KSBBZyhhLCBiKSwgYiA9IExmKGIubmV4dFNpYmxpbmcpO1xuICB9XG4gIEZnKGEpO1xuICBpZiAoMTMgPT09IGEudGFnKSB7XG4gICAgYSA9IGEubWVtb2l6ZWRTdGF0ZTtcbiAgICBhID0gbnVsbCAhPT0gYSA/IGEuZGVoeWRyYXRlZCA6IG51bGw7XG4gICAgaWYgKCFhKSB0aHJvdyBFcnJvcihwKDMxNykpO1xuICAgIGE6IHtcbiAgICAgIGEgPSBhLm5leHRTaWJsaW5nO1xuICAgICAgZm9yIChiID0gMDsgYTspIHtcbiAgICAgICAgaWYgKDggPT09IGEubm9kZVR5cGUpIHtcbiAgICAgICAgICB2YXIgYyA9IGEuZGF0YTtcbiAgICAgICAgICBpZiAoXCIvJFwiID09PSBjKSB7XG4gICAgICAgICAgICBpZiAoMCA9PT0gYikge1xuICAgICAgICAgICAgICB5ZyA9IExmKGEubmV4dFNpYmxpbmcpO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYi0tO1xuICAgICAgICAgIH0gZWxzZSBcIiRcIiAhPT0gYyAmJiBcIiQhXCIgIT09IGMgJiYgXCIkP1wiICE9PSBjIHx8IGIrKztcbiAgICAgICAgfVxuICAgICAgICBhID0gYS5uZXh0U2libGluZztcbiAgICAgIH1cbiAgICAgIHlnID0gbnVsbDtcbiAgICB9XG4gIH0gZWxzZSB5ZyA9IHhnID8gTGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpIDogbnVsbDtcbiAgcmV0dXJuICEwO1xufVxuZnVuY3Rpb24gSGcoKSB7XG4gIGZvciAodmFyIGEgPSB5ZzsgYTspIGEgPSBMZihhLm5leHRTaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIElnKCkge1xuICB5ZyA9IHhnID0gbnVsbDtcbiAgSSA9ICExO1xufVxuZnVuY3Rpb24gSmcoYSkge1xuICBudWxsID09PSB6ZyA/IHpnID0gW2FdIDogemcucHVzaChhKTtcbn1cbnZhciBLZyA9IHVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO1xuZnVuY3Rpb24gTGcoYSwgYikge1xuICBpZiAoYSAmJiBhLmRlZmF1bHRQcm9wcykge1xuICAgIGIgPSBBKHt9LCBiKTtcbiAgICBhID0gYS5kZWZhdWx0UHJvcHM7XG4gICAgZm9yICh2YXIgYyBpbiBhKSB2b2lkIDAgPT09IGJbY10gJiYgKGJbY10gPSBhW2NdKTtcbiAgICByZXR1cm4gYjtcbiAgfVxuICByZXR1cm4gYjtcbn1cbnZhciBNZyA9IFVmKG51bGwpLFxuICBOZyA9IG51bGwsXG4gIE9nID0gbnVsbCxcbiAgUGcgPSBudWxsO1xuZnVuY3Rpb24gUWcoKSB7XG4gIFBnID0gT2cgPSBOZyA9IG51bGw7XG59XG5mdW5jdGlvbiBSZyhhKSB7XG4gIHZhciBiID0gTWcuY3VycmVudDtcbiAgRShNZyk7XG4gIGEuX2N1cnJlbnRWYWx1ZSA9IGI7XG59XG5mdW5jdGlvbiBTZyhhLCBiLCBjKSB7XG4gIGZvciAoOyBudWxsICE9PSBhOykge1xuICAgIHZhciBkID0gYS5hbHRlcm5hdGU7XG4gICAgKGEuY2hpbGRMYW5lcyAmIGIpICE9PSBiID8gKGEuY2hpbGRMYW5lcyB8PSBiLCBudWxsICE9PSBkICYmIChkLmNoaWxkTGFuZXMgfD0gYikpIDogbnVsbCAhPT0gZCAmJiAoZC5jaGlsZExhbmVzICYgYikgIT09IGIgJiYgKGQuY2hpbGRMYW5lcyB8PSBiKTtcbiAgICBpZiAoYSA9PT0gYykgYnJlYWs7XG4gICAgYSA9IGEucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBUZyhhLCBiKSB7XG4gIE5nID0gYTtcbiAgUGcgPSBPZyA9IG51bGw7XG4gIGEgPSBhLmRlcGVuZGVuY2llcztcbiAgbnVsbCAhPT0gYSAmJiBudWxsICE9PSBhLmZpcnN0Q29udGV4dCAmJiAoMCAhPT0gKGEubGFuZXMgJiBiKSAmJiAoVWcgPSAhMCksIGEuZmlyc3RDb250ZXh0ID0gbnVsbCk7XG59XG5mdW5jdGlvbiBWZyhhKSB7XG4gIHZhciBiID0gYS5fY3VycmVudFZhbHVlO1xuICBpZiAoUGcgIT09IGEpIGlmIChhID0ge1xuICAgIGNvbnRleHQ6IGEsXG4gICAgbWVtb2l6ZWRWYWx1ZTogYixcbiAgICBuZXh0OiBudWxsXG4gIH0sIG51bGwgPT09IE9nKSB7XG4gICAgaWYgKG51bGwgPT09IE5nKSB0aHJvdyBFcnJvcihwKDMwOCkpO1xuICAgIE9nID0gYTtcbiAgICBOZy5kZXBlbmRlbmNpZXMgPSB7XG4gICAgICBsYW5lczogMCxcbiAgICAgIGZpcnN0Q29udGV4dDogYVxuICAgIH07XG4gIH0gZWxzZSBPZyA9IE9nLm5leHQgPSBhO1xuICByZXR1cm4gYjtcbn1cbnZhciBXZyA9IG51bGw7XG5mdW5jdGlvbiBYZyhhKSB7XG4gIG51bGwgPT09IFdnID8gV2cgPSBbYV0gOiBXZy5wdXNoKGEpO1xufVxuZnVuY3Rpb24gWWcoYSwgYiwgYywgZCkge1xuICB2YXIgZSA9IGIuaW50ZXJsZWF2ZWQ7XG4gIG51bGwgPT09IGUgPyAoYy5uZXh0ID0gYywgWGcoYikpIDogKGMubmV4dCA9IGUubmV4dCwgZS5uZXh0ID0gYyk7XG4gIGIuaW50ZXJsZWF2ZWQgPSBjO1xuICByZXR1cm4gWmcoYSwgZCk7XG59XG5mdW5jdGlvbiBaZyhhLCBiKSB7XG4gIGEubGFuZXMgfD0gYjtcbiAgdmFyIGMgPSBhLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYyAmJiAoYy5sYW5lcyB8PSBiKTtcbiAgYyA9IGE7XG4gIGZvciAoYSA9IGEucmV0dXJuOyBudWxsICE9PSBhOykgYS5jaGlsZExhbmVzIHw9IGIsIGMgPSBhLmFsdGVybmF0ZSwgbnVsbCAhPT0gYyAmJiAoYy5jaGlsZExhbmVzIHw9IGIpLCBjID0gYSwgYSA9IGEucmV0dXJuO1xuICByZXR1cm4gMyA9PT0gYy50YWcgPyBjLnN0YXRlTm9kZSA6IG51bGw7XG59XG52YXIgJGcgPSAhMTtcbmZ1bmN0aW9uIGFoKGEpIHtcbiAgYS51cGRhdGVRdWV1ZSA9IHtcbiAgICBiYXNlU3RhdGU6IGEubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgaW50ZXJsZWF2ZWQ6IG51bGwsXG4gICAgICBsYW5lczogMFxuICAgIH0sXG4gICAgZWZmZWN0czogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gYmgoYSwgYikge1xuICBhID0gYS51cGRhdGVRdWV1ZTtcbiAgYi51cGRhdGVRdWV1ZSA9PT0gYSAmJiAoYi51cGRhdGVRdWV1ZSA9IHtcbiAgICBiYXNlU3RhdGU6IGEuYmFzZVN0YXRlLFxuICAgIGZpcnN0QmFzZVVwZGF0ZTogYS5maXJzdEJhc2VVcGRhdGUsXG4gICAgbGFzdEJhc2VVcGRhdGU6IGEubGFzdEJhc2VVcGRhdGUsXG4gICAgc2hhcmVkOiBhLnNoYXJlZCxcbiAgICBlZmZlY3RzOiBhLmVmZmVjdHNcbiAgfSk7XG59XG5mdW5jdGlvbiBjaChhLCBiKSB7XG4gIHJldHVybiB7XG4gICAgZXZlbnRUaW1lOiBhLFxuICAgIGxhbmU6IGIsXG4gICAgdGFnOiAwLFxuICAgIHBheWxvYWQ6IG51bGwsXG4gICAgY2FsbGJhY2s6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gZGgoYSwgYiwgYykge1xuICB2YXIgZCA9IGEudXBkYXRlUXVldWU7XG4gIGlmIChudWxsID09PSBkKSByZXR1cm4gbnVsbDtcbiAgZCA9IGQuc2hhcmVkO1xuICBpZiAoMCAhPT0gKEsgJiAyKSkge1xuICAgIHZhciBlID0gZC5wZW5kaW5nO1xuICAgIG51bGwgPT09IGUgPyBiLm5leHQgPSBiIDogKGIubmV4dCA9IGUubmV4dCwgZS5uZXh0ID0gYik7XG4gICAgZC5wZW5kaW5nID0gYjtcbiAgICByZXR1cm4gWmcoYSwgYyk7XG4gIH1cbiAgZSA9IGQuaW50ZXJsZWF2ZWQ7XG4gIG51bGwgPT09IGUgPyAoYi5uZXh0ID0gYiwgWGcoZCkpIDogKGIubmV4dCA9IGUubmV4dCwgZS5uZXh0ID0gYik7XG4gIGQuaW50ZXJsZWF2ZWQgPSBiO1xuICByZXR1cm4gWmcoYSwgYyk7XG59XG5mdW5jdGlvbiBlaChhLCBiLCBjKSB7XG4gIGIgPSBiLnVwZGF0ZVF1ZXVlO1xuICBpZiAobnVsbCAhPT0gYiAmJiAoYiA9IGIuc2hhcmVkLCAwICE9PSAoYyAmIDQxOTQyNDApKSkge1xuICAgIHZhciBkID0gYi5sYW5lcztcbiAgICBkICY9IGEucGVuZGluZ0xhbmVzO1xuICAgIGMgfD0gZDtcbiAgICBiLmxhbmVzID0gYztcbiAgICBDYyhhLCBjKTtcbiAgfVxufVxuZnVuY3Rpb24gZmgoYSwgYikge1xuICB2YXIgYyA9IGEudXBkYXRlUXVldWUsXG4gICAgZCA9IGEuYWx0ZXJuYXRlO1xuICBpZiAobnVsbCAhPT0gZCAmJiAoZCA9IGQudXBkYXRlUXVldWUsIGMgPT09IGQpKSB7XG4gICAgdmFyIGUgPSBudWxsLFxuICAgICAgZiA9IG51bGw7XG4gICAgYyA9IGMuZmlyc3RCYXNlVXBkYXRlO1xuICAgIGlmIChudWxsICE9PSBjKSB7XG4gICAgICBkbyB7XG4gICAgICAgIHZhciBnID0ge1xuICAgICAgICAgIGV2ZW50VGltZTogYy5ldmVudFRpbWUsXG4gICAgICAgICAgbGFuZTogYy5sYW5lLFxuICAgICAgICAgIHRhZzogYy50YWcsXG4gICAgICAgICAgcGF5bG9hZDogYy5wYXlsb2FkLFxuICAgICAgICAgIGNhbGxiYWNrOiBjLmNhbGxiYWNrLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgbnVsbCA9PT0gZiA/IGUgPSBmID0gZyA6IGYgPSBmLm5leHQgPSBnO1xuICAgICAgICBjID0gYy5uZXh0O1xuICAgICAgfSB3aGlsZSAobnVsbCAhPT0gYyk7XG4gICAgICBudWxsID09PSBmID8gZSA9IGYgPSBiIDogZiA9IGYubmV4dCA9IGI7XG4gICAgfSBlbHNlIGUgPSBmID0gYjtcbiAgICBjID0ge1xuICAgICAgYmFzZVN0YXRlOiBkLmJhc2VTdGF0ZSxcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZTogZSxcbiAgICAgIGxhc3RCYXNlVXBkYXRlOiBmLFxuICAgICAgc2hhcmVkOiBkLnNoYXJlZCxcbiAgICAgIGVmZmVjdHM6IGQuZWZmZWN0c1xuICAgIH07XG4gICAgYS51cGRhdGVRdWV1ZSA9IGM7XG4gICAgcmV0dXJuO1xuICB9XG4gIGEgPSBjLmxhc3RCYXNlVXBkYXRlO1xuICBudWxsID09PSBhID8gYy5maXJzdEJhc2VVcGRhdGUgPSBiIDogYS5uZXh0ID0gYjtcbiAgYy5sYXN0QmFzZVVwZGF0ZSA9IGI7XG59XG5mdW5jdGlvbiBnaChhLCBiLCBjLCBkKSB7XG4gIHZhciBlID0gYS51cGRhdGVRdWV1ZTtcbiAgJGcgPSAhMTtcbiAgdmFyIGYgPSBlLmZpcnN0QmFzZVVwZGF0ZSxcbiAgICBnID0gZS5sYXN0QmFzZVVwZGF0ZSxcbiAgICBoID0gZS5zaGFyZWQucGVuZGluZztcbiAgaWYgKG51bGwgIT09IGgpIHtcbiAgICBlLnNoYXJlZC5wZW5kaW5nID0gbnVsbDtcbiAgICB2YXIgayA9IGgsXG4gICAgICBsID0gay5uZXh0O1xuICAgIGsubmV4dCA9IG51bGw7XG4gICAgbnVsbCA9PT0gZyA/IGYgPSBsIDogZy5uZXh0ID0gbDtcbiAgICBnID0gaztcbiAgICB2YXIgbSA9IGEuYWx0ZXJuYXRlO1xuICAgIG51bGwgIT09IG0gJiYgKG0gPSBtLnVwZGF0ZVF1ZXVlLCBoID0gbS5sYXN0QmFzZVVwZGF0ZSwgaCAhPT0gZyAmJiAobnVsbCA9PT0gaCA/IG0uZmlyc3RCYXNlVXBkYXRlID0gbCA6IGgubmV4dCA9IGwsIG0ubGFzdEJhc2VVcGRhdGUgPSBrKSk7XG4gIH1cbiAgaWYgKG51bGwgIT09IGYpIHtcbiAgICB2YXIgcSA9IGUuYmFzZVN0YXRlO1xuICAgIGcgPSAwO1xuICAgIG0gPSBsID0gayA9IG51bGw7XG4gICAgaCA9IGY7XG4gICAgZG8ge1xuICAgICAgdmFyIHIgPSBoLmxhbmUsXG4gICAgICAgIHkgPSBoLmV2ZW50VGltZTtcbiAgICAgIGlmICgoZCAmIHIpID09PSByKSB7XG4gICAgICAgIG51bGwgIT09IG0gJiYgKG0gPSBtLm5leHQgPSB7XG4gICAgICAgICAgZXZlbnRUaW1lOiB5LFxuICAgICAgICAgIGxhbmU6IDAsXG4gICAgICAgICAgdGFnOiBoLnRhZyxcbiAgICAgICAgICBwYXlsb2FkOiBoLnBheWxvYWQsXG4gICAgICAgICAgY2FsbGJhY2s6IGguY2FsbGJhY2ssXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9KTtcbiAgICAgICAgYToge1xuICAgICAgICAgIHZhciBuID0gYSxcbiAgICAgICAgICAgIHQgPSBoO1xuICAgICAgICAgIHIgPSBiO1xuICAgICAgICAgIHkgPSBjO1xuICAgICAgICAgIHN3aXRjaCAodC50YWcpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgbiA9IHQucGF5bG9hZDtcbiAgICAgICAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG4pIHtcbiAgICAgICAgICAgICAgICBxID0gbi5jYWxsKHksIHEsIHIpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcSA9IG47XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIG4uZmxhZ3MgPSBuLmZsYWdzICYgLTY1NTM3IHwgMTI4O1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBuID0gdC5wYXlsb2FkO1xuICAgICAgICAgICAgICByID0gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbiA/IG4uY2FsbCh5LCBxLCByKSA6IG47XG4gICAgICAgICAgICAgIGlmIChudWxsID09PSByIHx8IHZvaWQgMCA9PT0gcikgYnJlYWsgYTtcbiAgICAgICAgICAgICAgcSA9IEEoe30sIHEsIHIpO1xuICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAkZyA9ICEwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBudWxsICE9PSBoLmNhbGxiYWNrICYmIDAgIT09IGgubGFuZSAmJiAoYS5mbGFncyB8PSA2NCwgciA9IGUuZWZmZWN0cywgbnVsbCA9PT0gciA/IGUuZWZmZWN0cyA9IFtoXSA6IHIucHVzaChoKSk7XG4gICAgICB9IGVsc2UgeSA9IHtcbiAgICAgICAgZXZlbnRUaW1lOiB5LFxuICAgICAgICBsYW5lOiByLFxuICAgICAgICB0YWc6IGgudGFnLFxuICAgICAgICBwYXlsb2FkOiBoLnBheWxvYWQsXG4gICAgICAgIGNhbGxiYWNrOiBoLmNhbGxiYWNrLFxuICAgICAgICBuZXh0OiBudWxsXG4gICAgICB9LCBudWxsID09PSBtID8gKGwgPSBtID0geSwgayA9IHEpIDogbSA9IG0ubmV4dCA9IHksIGcgfD0gcjtcbiAgICAgIGggPSBoLm5leHQ7XG4gICAgICBpZiAobnVsbCA9PT0gaCkgaWYgKGggPSBlLnNoYXJlZC5wZW5kaW5nLCBudWxsID09PSBoKSBicmVhaztlbHNlIHIgPSBoLCBoID0gci5uZXh0LCByLm5leHQgPSBudWxsLCBlLmxhc3RCYXNlVXBkYXRlID0gciwgZS5zaGFyZWQucGVuZGluZyA9IG51bGw7XG4gICAgfSB3aGlsZSAoMSk7XG4gICAgbnVsbCA9PT0gbSAmJiAoayA9IHEpO1xuICAgIGUuYmFzZVN0YXRlID0gaztcbiAgICBlLmZpcnN0QmFzZVVwZGF0ZSA9IGw7XG4gICAgZS5sYXN0QmFzZVVwZGF0ZSA9IG07XG4gICAgYiA9IGUuc2hhcmVkLmludGVybGVhdmVkO1xuICAgIGlmIChudWxsICE9PSBiKSB7XG4gICAgICBlID0gYjtcbiAgICAgIGRvIGcgfD0gZS5sYW5lLCBlID0gZS5uZXh0OyB3aGlsZSAoZSAhPT0gYik7XG4gICAgfSBlbHNlIG51bGwgPT09IGYgJiYgKGUuc2hhcmVkLmxhbmVzID0gMCk7XG4gICAgaGggfD0gZztcbiAgICBhLmxhbmVzID0gZztcbiAgICBhLm1lbW9pemVkU3RhdGUgPSBxO1xuICB9XG59XG5mdW5jdGlvbiBpaChhLCBiLCBjKSB7XG4gIGEgPSBiLmVmZmVjdHM7XG4gIGIuZWZmZWN0cyA9IG51bGw7XG4gIGlmIChudWxsICE9PSBhKSBmb3IgKGIgPSAwOyBiIDwgYS5sZW5ndGg7IGIrKykge1xuICAgIHZhciBkID0gYVtiXSxcbiAgICAgIGUgPSBkLmNhbGxiYWNrO1xuICAgIGlmIChudWxsICE9PSBlKSB7XG4gICAgICBkLmNhbGxiYWNrID0gbnVsbDtcbiAgICAgIGQgPSBjO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGUpIHRocm93IEVycm9yKHAoMTkxLCBlKSk7XG4gICAgICBlLmNhbGwoZCk7XG4gICAgfVxuICB9XG59XG52YXIgamggPSBuZXcgYWEuQ29tcG9uZW50KCkucmVmcztcbmZ1bmN0aW9uIGtoKGEsIGIsIGMsIGQpIHtcbiAgYiA9IGEubWVtb2l6ZWRTdGF0ZTtcbiAgYyA9IGMoZCwgYik7XG4gIGMgPSBudWxsID09PSBjIHx8IHZvaWQgMCA9PT0gYyA/IGIgOiBBKHt9LCBiLCBjKTtcbiAgYS5tZW1vaXplZFN0YXRlID0gYztcbiAgMCA9PT0gYS5sYW5lcyAmJiAoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBjKTtcbn1cbnZhciBuaCA9IHtcbiAgaXNNb3VudGVkOiBmdW5jdGlvbiBpc01vdW50ZWQoYSkge1xuICAgIHJldHVybiAoYSA9IGEuX3JlYWN0SW50ZXJuYWxzKSA/IFZiKGEpID09PSBhIDogITE7XG4gIH0sXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gZW5xdWV1ZVNldFN0YXRlKGEsIGIsIGMpIHtcbiAgICBhID0gYS5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGQgPSBMKCksXG4gICAgICBlID0gbGgoYSksXG4gICAgICBmID0gY2goZCwgZSk7XG4gICAgZi5wYXlsb2FkID0gYjtcbiAgICB2b2lkIDAgIT09IGMgJiYgbnVsbCAhPT0gYyAmJiAoZi5jYWxsYmFjayA9IGMpO1xuICAgIGIgPSBkaChhLCBmLCBlKTtcbiAgICBudWxsICE9PSBiICYmIChtaChiLCBhLCBlLCBkKSwgZWgoYiwgYSwgZSkpO1xuICB9LFxuICBlbnF1ZXVlUmVwbGFjZVN0YXRlOiBmdW5jdGlvbiBlbnF1ZXVlUmVwbGFjZVN0YXRlKGEsIGIsIGMpIHtcbiAgICBhID0gYS5fcmVhY3RJbnRlcm5hbHM7XG4gICAgdmFyIGQgPSBMKCksXG4gICAgICBlID0gbGgoYSksXG4gICAgICBmID0gY2goZCwgZSk7XG4gICAgZi50YWcgPSAxO1xuICAgIGYucGF5bG9hZCA9IGI7XG4gICAgdm9pZCAwICE9PSBjICYmIG51bGwgIT09IGMgJiYgKGYuY2FsbGJhY2sgPSBjKTtcbiAgICBiID0gZGgoYSwgZiwgZSk7XG4gICAgbnVsbCAhPT0gYiAmJiAobWgoYiwgYSwgZSwgZCksIGVoKGIsIGEsIGUpKTtcbiAgfSxcbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbiBlbnF1ZXVlRm9yY2VVcGRhdGUoYSwgYikge1xuICAgIGEgPSBhLl9yZWFjdEludGVybmFscztcbiAgICB2YXIgYyA9IEwoKSxcbiAgICAgIGQgPSBsaChhKSxcbiAgICAgIGUgPSBjaChjLCBkKTtcbiAgICBlLnRhZyA9IDI7XG4gICAgdm9pZCAwICE9PSBiICYmIG51bGwgIT09IGIgJiYgKGUuY2FsbGJhY2sgPSBiKTtcbiAgICBiID0gZGgoYSwgZSwgZCk7XG4gICAgbnVsbCAhPT0gYiAmJiAobWgoYiwgYSwgZCwgYyksIGVoKGIsIGEsIGQpKTtcbiAgfVxufTtcbmZ1bmN0aW9uIG9oKGEsIGIsIGMsIGQsIGUsIGYsIGcpIHtcbiAgYSA9IGEuc3RhdGVOb2RlO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGUgPyBhLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLCBmLCBnKSA6IGIucHJvdG90eXBlICYmIGIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50ID8gIUllKGMsIGQpIHx8ICFJZShlLCBmKSA6ICEwO1xufVxuZnVuY3Rpb24gcGgoYSwgYiwgYykge1xuICB2YXIgZCA9ICExLFxuICAgIGUgPSBWZjtcbiAgdmFyIGYgPSBiLmNvbnRleHRUeXBlO1xuICBcIm9iamVjdFwiID09PSBfdHlwZW9mKGYpICYmIG51bGwgIT09IGYgPyBmID0gVmcoZikgOiAoZSA9IFpmKGIpID8gWGYgOiBILmN1cnJlbnQsIGQgPSBiLmNvbnRleHRUeXBlcywgZiA9IChkID0gbnVsbCAhPT0gZCAmJiB2b2lkIDAgIT09IGQpID8gWWYoYSwgZSkgOiBWZik7XG4gIGIgPSBuZXcgYihjLCBmKTtcbiAgYS5tZW1vaXplZFN0YXRlID0gbnVsbCAhPT0gYi5zdGF0ZSAmJiB2b2lkIDAgIT09IGIuc3RhdGUgPyBiLnN0YXRlIDogbnVsbDtcbiAgYi51cGRhdGVyID0gbmg7XG4gIGEuc3RhdGVOb2RlID0gYjtcbiAgYi5fcmVhY3RJbnRlcm5hbHMgPSBhO1xuICBkICYmIChhID0gYS5zdGF0ZU5vZGUsIGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCA9IGUsIGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQgPSBmKTtcbiAgcmV0dXJuIGI7XG59XG5mdW5jdGlvbiBxaChhLCBiLCBjLCBkKSB7XG4gIGEgPSBiLnN0YXRlO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiYgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsIGQpO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzICYmIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYywgZCk7XG4gIGIuc3RhdGUgIT09IGEgJiYgbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLCBiLnN0YXRlLCBudWxsKTtcbn1cbmZ1bmN0aW9uIHJoKGEsIGIsIGMsIGQpIHtcbiAgdmFyIGUgPSBhLnN0YXRlTm9kZTtcbiAgZS5wcm9wcyA9IGM7XG4gIGUuc3RhdGUgPSBhLm1lbW9pemVkU3RhdGU7XG4gIGUucmVmcyA9IGpoO1xuICBhaChhKTtcbiAgdmFyIGYgPSBiLmNvbnRleHRUeXBlO1xuICBcIm9iamVjdFwiID09PSBfdHlwZW9mKGYpICYmIG51bGwgIT09IGYgPyBlLmNvbnRleHQgPSBWZyhmKSA6IChmID0gWmYoYikgPyBYZiA6IEguY3VycmVudCwgZS5jb250ZXh0ID0gWWYoYSwgZikpO1xuICBlLnN0YXRlID0gYS5tZW1vaXplZFN0YXRlO1xuICBmID0gYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGYgJiYgKGtoKGEsIGIsIGYsIGMpLCBlLnN0YXRlID0gYS5tZW1vaXplZFN0YXRlKTtcbiAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgfHwgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSB8fCBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQgfHwgKGIgPSBlLnN0YXRlLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCAmJiBlLmNvbXBvbmVudFdpbGxNb3VudCgpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiYgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksIGIgIT09IGUuc3RhdGUgJiYgbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLCBlLnN0YXRlLCBudWxsKSwgZ2goYSwgYywgZSwgZCksIGUuc3RhdGUgPSBhLm1lbW9pemVkU3RhdGUpO1xuICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50ICYmIChhLmZsYWdzIHw9IDQxOTQzMDgpO1xufVxuZnVuY3Rpb24gc2goYSwgYiwgYykge1xuICBhID0gYy5yZWY7XG4gIGlmIChudWxsICE9PSBhICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGEgJiYgXCJvYmplY3RcIiAhPT0gX3R5cGVvZihhKSkge1xuICAgIGlmIChjLl9vd25lcikge1xuICAgICAgYyA9IGMuX293bmVyO1xuICAgICAgaWYgKGMpIHtcbiAgICAgICAgaWYgKDEgIT09IGMudGFnKSB0aHJvdyBFcnJvcihwKDMwOSkpO1xuICAgICAgICB2YXIgZCA9IGMuc3RhdGVOb2RlO1xuICAgICAgfVxuICAgICAgaWYgKCFkKSB0aHJvdyBFcnJvcihwKDE0NywgYSkpO1xuICAgICAgdmFyIGUgPSBkLFxuICAgICAgICBmID0gXCJcIiArIGE7XG4gICAgICBpZiAobnVsbCAhPT0gYiAmJiBudWxsICE9PSBiLnJlZiAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiLnJlZiAmJiBiLnJlZi5fc3RyaW5nUmVmID09PSBmKSByZXR1cm4gYi5yZWY7XG4gICAgICBiID0gZnVuY3Rpb24gYihhKSB7XG4gICAgICAgIHZhciBiID0gZS5yZWZzO1xuICAgICAgICBiID09PSBqaCAmJiAoYiA9IGUucmVmcyA9IHt9KTtcbiAgICAgICAgbnVsbCA9PT0gYSA/IGRlbGV0ZSBiW2ZdIDogYltmXSA9IGE7XG4gICAgICB9O1xuICAgICAgYi5fc3RyaW5nUmVmID0gZjtcbiAgICAgIHJldHVybiBiO1xuICAgIH1cbiAgICBpZiAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIGEpIHRocm93IEVycm9yKHAoMjg0KSk7XG4gICAgaWYgKCFjLl9vd25lcikgdGhyb3cgRXJyb3IocCgyOTAsIGEpKTtcbiAgfVxuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIHRoKGEsIGIpIHtcbiAgYSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTtcbiAgdGhyb3cgRXJyb3IocCgzMSwgXCJbb2JqZWN0IE9iamVjdF1cIiA9PT0gYSA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikgKyBcIn1cIiA6IGEpKTtcbn1cbmZ1bmN0aW9uIHVoKGEpIHtcbiAgdmFyIGIgPSBhLl9pbml0O1xuICByZXR1cm4gYihhLl9wYXlsb2FkKTtcbn1cbmZ1bmN0aW9uIHZoKGEpIHtcbiAgZnVuY3Rpb24gYihiLCBjKSB7XG4gICAgaWYgKGEpIHtcbiAgICAgIHZhciBkID0gYi5kZWxldGlvbnM7XG4gICAgICBudWxsID09PSBkID8gKGIuZGVsZXRpb25zID0gW2NdLCBiLmZsYWdzIHw9IDE2KSA6IGQucHVzaChjKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYyhjLCBkKSB7XG4gICAgaWYgKCFhKSByZXR1cm4gbnVsbDtcbiAgICBmb3IgKDsgbnVsbCAhPT0gZDspIGIoYywgZCksIGQgPSBkLnNpYmxpbmc7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gZChhLCBiKSB7XG4gICAgZm9yIChhID0gbmV3IE1hcCgpOyBudWxsICE9PSBiOykgbnVsbCAhPT0gYi5rZXkgPyBhLnNldChiLmtleSwgYikgOiBhLnNldChiLmluZGV4LCBiKSwgYiA9IGIuc2libGluZztcbiAgICByZXR1cm4gYTtcbiAgfVxuICBmdW5jdGlvbiBlKGEsIGIpIHtcbiAgICBhID0gd2goYSwgYik7XG4gICAgYS5pbmRleCA9IDA7XG4gICAgYS5zaWJsaW5nID0gbnVsbDtcbiAgICByZXR1cm4gYTtcbiAgfVxuICBmdW5jdGlvbiBmKGIsIGMsIGQpIHtcbiAgICBiLmluZGV4ID0gZDtcbiAgICBpZiAoIWEpIHJldHVybiBiLmZsYWdzIHw9IDEwNDg1NzYsIGM7XG4gICAgZCA9IGIuYWx0ZXJuYXRlO1xuICAgIGlmIChudWxsICE9PSBkKSByZXR1cm4gZCA9IGQuaW5kZXgsIGQgPCBjID8gKGIuZmxhZ3MgfD0gMiwgYykgOiBkO1xuICAgIGIuZmxhZ3MgfD0gMjtcbiAgICByZXR1cm4gYztcbiAgfVxuICBmdW5jdGlvbiBnKGIpIHtcbiAgICBhICYmIG51bGwgPT09IGIuYWx0ZXJuYXRlICYmIChiLmZsYWdzIHw9IDIpO1xuICAgIHJldHVybiBiO1xuICB9XG4gIGZ1bmN0aW9uIGgoYSwgYiwgYywgZCkge1xuICAgIGlmIChudWxsID09PSBiIHx8IDYgIT09IGIudGFnKSByZXR1cm4gYiA9IHhoKGMsIGEubW9kZSwgZCksIGIucmV0dXJuID0gYSwgYjtcbiAgICBiID0gZShiLCBjKTtcbiAgICBiLnJldHVybiA9IGE7XG4gICAgcmV0dXJuIGI7XG4gIH1cbiAgZnVuY3Rpb24gayhhLCBiLCBjLCBkKSB7XG4gICAgdmFyIGYgPSBjLnR5cGU7XG4gICAgaWYgKGYgPT09IHlhKSByZXR1cm4gbShhLCBiLCBjLnByb3BzLmNoaWxkcmVuLCBkLCBjLmtleSk7XG4gICAgaWYgKG51bGwgIT09IGIgJiYgKGIuZWxlbWVudFR5cGUgPT09IGYgfHwgXCJvYmplY3RcIiA9PT0gX3R5cGVvZihmKSAmJiBudWxsICE9PSBmICYmIGYuJCR0eXBlb2YgPT09IEhhICYmIHVoKGYpID09PSBiLnR5cGUpKSByZXR1cm4gZCA9IGUoYiwgYy5wcm9wcyksIGQucmVmID0gc2goYSwgYiwgYyksIGQucmV0dXJuID0gYSwgZDtcbiAgICBkID0geWgoYy50eXBlLCBjLmtleSwgYy5wcm9wcywgbnVsbCwgYS5tb2RlLCBkKTtcbiAgICBkLnJlZiA9IHNoKGEsIGIsIGMpO1xuICAgIGQucmV0dXJuID0gYTtcbiAgICByZXR1cm4gZDtcbiAgfVxuICBmdW5jdGlvbiBsKGEsIGIsIGMsIGQpIHtcbiAgICBpZiAobnVsbCA9PT0gYiB8fCA0ICE9PSBiLnRhZyB8fCBiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBjLmNvbnRhaW5lckluZm8gfHwgYi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IGMuaW1wbGVtZW50YXRpb24pIHJldHVybiBiID0gemgoYywgYS5tb2RlLCBkKSwgYi5yZXR1cm4gPSBhLCBiO1xuICAgIGIgPSBlKGIsIGMuY2hpbGRyZW4gfHwgW10pO1xuICAgIGIucmV0dXJuID0gYTtcbiAgICByZXR1cm4gYjtcbiAgfVxuICBmdW5jdGlvbiBtKGEsIGIsIGMsIGQsIGYpIHtcbiAgICBpZiAobnVsbCA9PT0gYiB8fCA3ICE9PSBiLnRhZykgcmV0dXJuIGIgPSBBaChjLCBhLm1vZGUsIGQsIGYpLCBiLnJldHVybiA9IGEsIGI7XG4gICAgYiA9IGUoYiwgYyk7XG4gICAgYi5yZXR1cm4gPSBhO1xuICAgIHJldHVybiBiO1xuICB9XG4gIGZ1bmN0aW9uIHEoYSwgYiwgYykge1xuICAgIGlmIChcInN0cmluZ1wiID09PSB0eXBlb2YgYiAmJiBcIlwiICE9PSBiIHx8IFwibnVtYmVyXCIgPT09IHR5cGVvZiBiKSByZXR1cm4gYiA9IHhoKFwiXCIgKyBiLCBhLm1vZGUsIGMpLCBiLnJldHVybiA9IGEsIGI7XG4gICAgaWYgKFwib2JqZWN0XCIgPT09IF90eXBlb2YoYikgJiYgbnVsbCAhPT0gYikge1xuICAgICAgc3dpdGNoIChiLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgdmE6XG4gICAgICAgICAgcmV0dXJuIGMgPSB5aChiLnR5cGUsIGIua2V5LCBiLnByb3BzLCBudWxsLCBhLm1vZGUsIGMpLCBjLnJlZiA9IHNoKGEsIG51bGwsIGIpLCBjLnJldHVybiA9IGEsIGM7XG4gICAgICAgIGNhc2Ugd2E6XG4gICAgICAgICAgcmV0dXJuIGIgPSB6aChiLCBhLm1vZGUsIGMpLCBiLnJldHVybiA9IGEsIGI7XG4gICAgICAgIGNhc2UgSGE6XG4gICAgICAgICAgdmFyIGQgPSBiLl9pbml0O1xuICAgICAgICAgIHJldHVybiBxKGEsIGQoYi5fcGF5bG9hZCksIGMpO1xuICAgICAgfVxuICAgICAgaWYgKGViKGIpIHx8IEthKGIpKSByZXR1cm4gYiA9IEFoKGIsIGEubW9kZSwgYywgbnVsbCksIGIucmV0dXJuID0gYSwgYjtcbiAgICAgIHRoKGEsIGIpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiByKGEsIGIsIGMsIGQpIHtcbiAgICB2YXIgZSA9IG51bGwgIT09IGIgPyBiLmtleSA6IG51bGw7XG4gICAgaWYgKFwic3RyaW5nXCIgPT09IHR5cGVvZiBjICYmIFwiXCIgIT09IGMgfHwgXCJudW1iZXJcIiA9PT0gdHlwZW9mIGMpIHJldHVybiBudWxsICE9PSBlID8gbnVsbCA6IGgoYSwgYiwgXCJcIiArIGMsIGQpO1xuICAgIGlmIChcIm9iamVjdFwiID09PSBfdHlwZW9mKGMpICYmIG51bGwgIT09IGMpIHtcbiAgICAgIHN3aXRjaCAoYy4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIHZhOlxuICAgICAgICAgIHJldHVybiBjLmtleSA9PT0gZSA/IGsoYSwgYiwgYywgZCkgOiBudWxsO1xuICAgICAgICBjYXNlIHdhOlxuICAgICAgICAgIHJldHVybiBjLmtleSA9PT0gZSA/IGwoYSwgYiwgYywgZCkgOiBudWxsO1xuICAgICAgICBjYXNlIEhhOlxuICAgICAgICAgIHJldHVybiBlID0gYy5faW5pdCwgcihhLCBiLCBlKGMuX3BheWxvYWQpLCBkKTtcbiAgICAgIH1cbiAgICAgIGlmIChlYihjKSB8fCBLYShjKSkgcmV0dXJuIG51bGwgIT09IGUgPyBudWxsIDogbShhLCBiLCBjLCBkLCBudWxsKTtcbiAgICAgIHRoKGEsIGMpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiB5KGEsIGIsIGMsIGQsIGUpIHtcbiAgICBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGQgJiYgXCJcIiAhPT0gZCB8fCBcIm51bWJlclwiID09PSB0eXBlb2YgZCkgcmV0dXJuIGEgPSBhLmdldChjKSB8fCBudWxsLCBoKGIsIGEsIFwiXCIgKyBkLCBlKTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PT0gX3R5cGVvZihkKSAmJiBudWxsICE9PSBkKSB7XG4gICAgICBzd2l0Y2ggKGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSB2YTpcbiAgICAgICAgICByZXR1cm4gYSA9IGEuZ2V0KG51bGwgPT09IGQua2V5ID8gYyA6IGQua2V5KSB8fCBudWxsLCBrKGIsIGEsIGQsIGUpO1xuICAgICAgICBjYXNlIHdhOlxuICAgICAgICAgIHJldHVybiBhID0gYS5nZXQobnVsbCA9PT0gZC5rZXkgPyBjIDogZC5rZXkpIHx8IG51bGwsIGwoYiwgYSwgZCwgZSk7XG4gICAgICAgIGNhc2UgSGE6XG4gICAgICAgICAgdmFyIGYgPSBkLl9pbml0O1xuICAgICAgICAgIHJldHVybiB5KGEsIGIsIGMsIGYoZC5fcGF5bG9hZCksIGUpO1xuICAgICAgfVxuICAgICAgaWYgKGViKGQpIHx8IEthKGQpKSByZXR1cm4gYSA9IGEuZ2V0KGMpIHx8IG51bGwsIG0oYiwgYSwgZCwgZSwgbnVsbCk7XG4gICAgICB0aChiLCBkKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gbihlLCBnLCBoLCBrKSB7XG4gICAgZm9yICh2YXIgbCA9IG51bGwsIG0gPSBudWxsLCB1ID0gZywgdyA9IGcgPSAwLCB4ID0gbnVsbDsgbnVsbCAhPT0gdSAmJiB3IDwgaC5sZW5ndGg7IHcrKykge1xuICAgICAgdS5pbmRleCA+IHcgPyAoeCA9IHUsIHUgPSBudWxsKSA6IHggPSB1LnNpYmxpbmc7XG4gICAgICB2YXIgbiA9IHIoZSwgdSwgaFt3XSwgayk7XG4gICAgICBpZiAobnVsbCA9PT0gbikge1xuICAgICAgICBudWxsID09PSB1ICYmICh1ID0geCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYSAmJiB1ICYmIG51bGwgPT09IG4uYWx0ZXJuYXRlICYmIGIoZSwgdSk7XG4gICAgICBnID0gZihuLCBnLCB3KTtcbiAgICAgIG51bGwgPT09IG0gPyBsID0gbiA6IG0uc2libGluZyA9IG47XG4gICAgICBtID0gbjtcbiAgICAgIHUgPSB4O1xuICAgIH1cbiAgICBpZiAodyA9PT0gaC5sZW5ndGgpIHJldHVybiBjKGUsIHUpLCBJICYmIHRnKGUsIHcpLCBsO1xuICAgIGlmIChudWxsID09PSB1KSB7XG4gICAgICBmb3IgKDsgdyA8IGgubGVuZ3RoOyB3KyspIHUgPSBxKGUsIGhbd10sIGspLCBudWxsICE9PSB1ICYmIChnID0gZih1LCBnLCB3KSwgbnVsbCA9PT0gbSA/IGwgPSB1IDogbS5zaWJsaW5nID0gdSwgbSA9IHUpO1xuICAgICAgSSAmJiB0ZyhlLCB3KTtcbiAgICAgIHJldHVybiBsO1xuICAgIH1cbiAgICBmb3IgKHUgPSBkKGUsIHUpOyB3IDwgaC5sZW5ndGg7IHcrKykgeCA9IHkodSwgZSwgdywgaFt3XSwgayksIG51bGwgIT09IHggJiYgKGEgJiYgbnVsbCAhPT0geC5hbHRlcm5hdGUgJiYgdS5kZWxldGUobnVsbCA9PT0geC5rZXkgPyB3IDogeC5rZXkpLCBnID0gZih4LCBnLCB3KSwgbnVsbCA9PT0gbSA/IGwgPSB4IDogbS5zaWJsaW5nID0geCwgbSA9IHgpO1xuICAgIGEgJiYgdS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gYihlLCBhKTtcbiAgICB9KTtcbiAgICBJICYmIHRnKGUsIHcpO1xuICAgIHJldHVybiBsO1xuICB9XG4gIGZ1bmN0aW9uIHQoZSwgZywgaCwgaykge1xuICAgIHZhciBsID0gS2EoaCk7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGwpIHRocm93IEVycm9yKHAoMTUwKSk7XG4gICAgaCA9IGwuY2FsbChoKTtcbiAgICBpZiAobnVsbCA9PSBoKSB0aHJvdyBFcnJvcihwKDE1MSkpO1xuICAgIGZvciAodmFyIHUgPSBsID0gbnVsbCwgbSA9IGcsIHcgPSBnID0gMCwgeCA9IG51bGwsIG4gPSBoLm5leHQoKTsgbnVsbCAhPT0gbSAmJiAhbi5kb25lOyB3KyssIG4gPSBoLm5leHQoKSkge1xuICAgICAgbS5pbmRleCA+IHcgPyAoeCA9IG0sIG0gPSBudWxsKSA6IHggPSBtLnNpYmxpbmc7XG4gICAgICB2YXIgdCA9IHIoZSwgbSwgbi52YWx1ZSwgayk7XG4gICAgICBpZiAobnVsbCA9PT0gdCkge1xuICAgICAgICBudWxsID09PSBtICYmIChtID0geCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYSAmJiBtICYmIG51bGwgPT09IHQuYWx0ZXJuYXRlICYmIGIoZSwgbSk7XG4gICAgICBnID0gZih0LCBnLCB3KTtcbiAgICAgIG51bGwgPT09IHUgPyBsID0gdCA6IHUuc2libGluZyA9IHQ7XG4gICAgICB1ID0gdDtcbiAgICAgIG0gPSB4O1xuICAgIH1cbiAgICBpZiAobi5kb25lKSByZXR1cm4gYyhlLCBtKSwgSSAmJiB0ZyhlLCB3KSwgbDtcbiAgICBpZiAobnVsbCA9PT0gbSkge1xuICAgICAgZm9yICg7ICFuLmRvbmU7IHcrKywgbiA9IGgubmV4dCgpKSBuID0gcShlLCBuLnZhbHVlLCBrKSwgbnVsbCAhPT0gbiAmJiAoZyA9IGYobiwgZywgdyksIG51bGwgPT09IHUgPyBsID0gbiA6IHUuc2libGluZyA9IG4sIHUgPSBuKTtcbiAgICAgIEkgJiYgdGcoZSwgdyk7XG4gICAgICByZXR1cm4gbDtcbiAgICB9XG4gICAgZm9yIChtID0gZChlLCBtKTsgIW4uZG9uZTsgdysrLCBuID0gaC5uZXh0KCkpIG4gPSB5KG0sIGUsIHcsIG4udmFsdWUsIGspLCBudWxsICE9PSBuICYmIChhICYmIG51bGwgIT09IG4uYWx0ZXJuYXRlICYmIG0uZGVsZXRlKG51bGwgPT09IG4ua2V5ID8gdyA6IG4ua2V5KSwgZyA9IGYobiwgZywgdyksIG51bGwgPT09IHUgPyBsID0gbiA6IHUuc2libGluZyA9IG4sIHUgPSBuKTtcbiAgICBhICYmIG0uZm9yRWFjaChmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGIoZSwgYSk7XG4gICAgfSk7XG4gICAgSSAmJiB0ZyhlLCB3KTtcbiAgICByZXR1cm4gbDtcbiAgfVxuICBmdW5jdGlvbiBKKGEsIGQsIGYsIGgpIHtcbiAgICBcIm9iamVjdFwiID09PSBfdHlwZW9mKGYpICYmIG51bGwgIT09IGYgJiYgZi50eXBlID09PSB5YSAmJiBudWxsID09PSBmLmtleSAmJiAoZiA9IGYucHJvcHMuY2hpbGRyZW4pO1xuICAgIGlmIChcIm9iamVjdFwiID09PSBfdHlwZW9mKGYpICYmIG51bGwgIT09IGYpIHtcbiAgICAgIHN3aXRjaCAoZi4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIHZhOlxuICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSBmLmtleSwgbCA9IGQ7IG51bGwgIT09IGw7KSB7XG4gICAgICAgICAgICAgIGlmIChsLmtleSA9PT0gaykge1xuICAgICAgICAgICAgICAgIGsgPSBmLnR5cGU7XG4gICAgICAgICAgICAgICAgaWYgKGsgPT09IHlhKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoNyA9PT0gbC50YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgYyhhLCBsLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgICBkID0gZShsLCBmLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICAgICAgZC5yZXR1cm4gPSBhO1xuICAgICAgICAgICAgICAgICAgICBhID0gZDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGwuZWxlbWVudFR5cGUgPT09IGsgfHwgXCJvYmplY3RcIiA9PT0gX3R5cGVvZihrKSAmJiBudWxsICE9PSBrICYmIGsuJCR0eXBlb2YgPT09IEhhICYmIHVoKGspID09PSBsLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgIGMoYSwgbC5zaWJsaW5nKTtcbiAgICAgICAgICAgICAgICAgIGQgPSBlKGwsIGYucHJvcHMpO1xuICAgICAgICAgICAgICAgICAgZC5yZWYgPSBzaChhLCBsLCBmKTtcbiAgICAgICAgICAgICAgICAgIGQucmV0dXJuID0gYTtcbiAgICAgICAgICAgICAgICAgIGEgPSBkO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYyhhLCBsKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIGIoYSwgbCk7XG4gICAgICAgICAgICAgIGwgPSBsLnNpYmxpbmc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmLnR5cGUgPT09IHlhID8gKGQgPSBBaChmLnByb3BzLmNoaWxkcmVuLCBhLm1vZGUsIGgsIGYua2V5KSwgZC5yZXR1cm4gPSBhLCBhID0gZCkgOiAoaCA9IHloKGYudHlwZSwgZi5rZXksIGYucHJvcHMsIG51bGwsIGEubW9kZSwgaCksIGgucmVmID0gc2goYSwgZCwgZiksIGgucmV0dXJuID0gYSwgYSA9IGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gZyhhKTtcbiAgICAgICAgY2FzZSB3YTpcbiAgICAgICAgICBhOiB7XG4gICAgICAgICAgICBmb3IgKGwgPSBmLmtleTsgbnVsbCAhPT0gZDspIHtcbiAgICAgICAgICAgICAgaWYgKGQua2V5ID09PSBsKSB7XG4gICAgICAgICAgICAgICAgaWYgKDQgPT09IGQudGFnICYmIGQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gPT09IGYuY29udGFpbmVySW5mbyAmJiBkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiA9PT0gZi5pbXBsZW1lbnRhdGlvbikge1xuICAgICAgICAgICAgICAgICAgYyhhLCBkLnNpYmxpbmcpO1xuICAgICAgICAgICAgICAgICAgZCA9IGUoZCwgZi5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgICAgICAgICBkLnJldHVybiA9IGE7XG4gICAgICAgICAgICAgICAgICBhID0gZDtcbiAgICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGMoYSwgZCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBiKGEsIGQpO1xuICAgICAgICAgICAgICBkID0gZC5zaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZCA9IHpoKGYsIGEubW9kZSwgaCk7XG4gICAgICAgICAgICBkLnJldHVybiA9IGE7XG4gICAgICAgICAgICBhID0gZDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGcoYSk7XG4gICAgICAgIGNhc2UgSGE6XG4gICAgICAgICAgcmV0dXJuIGwgPSBmLl9pbml0LCBKKGEsIGQsIGwoZi5fcGF5bG9hZCksIGgpO1xuICAgICAgfVxuICAgICAgaWYgKGViKGYpKSByZXR1cm4gbihhLCBkLCBmLCBoKTtcbiAgICAgIGlmIChLYShmKSkgcmV0dXJuIHQoYSwgZCwgZiwgaCk7XG4gICAgICB0aChhLCBmKTtcbiAgICB9XG4gICAgcmV0dXJuIFwic3RyaW5nXCIgPT09IHR5cGVvZiBmICYmIFwiXCIgIT09IGYgfHwgXCJudW1iZXJcIiA9PT0gdHlwZW9mIGYgPyAoZiA9IFwiXCIgKyBmLCBudWxsICE9PSBkICYmIDYgPT09IGQudGFnID8gKGMoYSwgZC5zaWJsaW5nKSwgZCA9IGUoZCwgZiksIGQucmV0dXJuID0gYSwgYSA9IGQpIDogKGMoYSwgZCksIGQgPSB4aChmLCBhLm1vZGUsIGgpLCBkLnJldHVybiA9IGEsIGEgPSBkKSwgZyhhKSkgOiBjKGEsIGQpO1xuICB9XG4gIHJldHVybiBKO1xufVxudmFyIEJoID0gdmgoITApLFxuICBDaCA9IHZoKCExKSxcbiAgRGggPSB7fSxcbiAgRWggPSBVZihEaCksXG4gIEZoID0gVWYoRGgpLFxuICBHaCA9IFVmKERoKTtcbmZ1bmN0aW9uIEhoKGEpIHtcbiAgaWYgKGEgPT09IERoKSB0aHJvdyBFcnJvcihwKDE3NCkpO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIEloKGEsIGIpIHtcbiAgRyhHaCwgYik7XG4gIEcoRmgsIGEpO1xuICBHKEVoLCBEaCk7XG4gIGEgPSBiLm5vZGVUeXBlO1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIDk6XG4gICAgY2FzZSAxMTpcbiAgICAgIGIgPSAoYiA9IGIuZG9jdW1lbnRFbGVtZW50KSA/IGIubmFtZXNwYWNlVVJJIDogbGIobnVsbCwgXCJcIik7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYSA9IDggPT09IGEgPyBiLnBhcmVudE5vZGUgOiBiLCBiID0gYS5uYW1lc3BhY2VVUkkgfHwgbnVsbCwgYSA9IGEudGFnTmFtZSwgYiA9IGxiKGIsIGEpO1xuICB9XG4gIEUoRWgpO1xuICBHKEVoLCBiKTtcbn1cbmZ1bmN0aW9uIEpoKCkge1xuICBFKEVoKTtcbiAgRShGaCk7XG4gIEUoR2gpO1xufVxuZnVuY3Rpb24gS2goYSkge1xuICBIaChHaC5jdXJyZW50KTtcbiAgdmFyIGIgPSBIaChFaC5jdXJyZW50KTtcbiAgdmFyIGMgPSBsYihiLCBhLnR5cGUpO1xuICBiICE9PSBjICYmIChHKEZoLCBhKSwgRyhFaCwgYykpO1xufVxuZnVuY3Rpb24gTGgoYSkge1xuICBGaC5jdXJyZW50ID09PSBhICYmIChFKEVoKSwgRShGaCkpO1xufVxudmFyIE0gPSBVZigwKTtcbmZ1bmN0aW9uIE1oKGEpIHtcbiAgZm9yICh2YXIgYiA9IGE7IG51bGwgIT09IGI7KSB7XG4gICAgaWYgKDEzID09PSBiLnRhZykge1xuICAgICAgdmFyIGMgPSBiLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gYyAmJiAoYyA9IGMuZGVoeWRyYXRlZCwgbnVsbCA9PT0gYyB8fCBcIiQ/XCIgPT09IGMuZGF0YSB8fCBcIiQhXCIgPT09IGMuZGF0YSkpIHJldHVybiBiO1xuICAgIH0gZWxzZSBpZiAoMTkgPT09IGIudGFnICYmIHZvaWQgMCAhPT0gYi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKSB7XG4gICAgICBpZiAoMCAhPT0gKGIuZmxhZ3MgJiAxMjgpKSByZXR1cm4gYjtcbiAgICB9IGVsc2UgaWYgKG51bGwgIT09IGIuY2hpbGQpIHtcbiAgICAgIGIuY2hpbGQucmV0dXJuID0gYjtcbiAgICAgIGIgPSBiLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChiID09PSBhKSBicmVhaztcbiAgICBmb3IgKDsgbnVsbCA9PT0gYi5zaWJsaW5nOykge1xuICAgICAgaWYgKG51bGwgPT09IGIucmV0dXJuIHx8IGIucmV0dXJuID09PSBhKSByZXR1cm4gbnVsbDtcbiAgICAgIGIgPSBiLnJldHVybjtcbiAgICB9XG4gICAgYi5zaWJsaW5nLnJldHVybiA9IGIucmV0dXJuO1xuICAgIGIgPSBiLnNpYmxpbmc7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG52YXIgTmggPSBbXTtcbmZ1bmN0aW9uIE9oKCkge1xuICBmb3IgKHZhciBhID0gMDsgYSA8IE5oLmxlbmd0aDsgYSsrKSBOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSA9IG51bGw7XG4gIE5oLmxlbmd0aCA9IDA7XG59XG52YXIgUGggPSB1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFxuICBRaCA9IHVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFxuICBSaCA9IDAsXG4gIE4gPSBudWxsLFxuICBPID0gbnVsbCxcbiAgUCA9IG51bGwsXG4gIFNoID0gITEsXG4gIFRoID0gITEsXG4gIFVoID0gMCxcbiAgVmggPSAwO1xuZnVuY3Rpb24gUSgpIHtcbiAgdGhyb3cgRXJyb3IocCgzMjEpKTtcbn1cbmZ1bmN0aW9uIFdoKGEsIGIpIHtcbiAgaWYgKG51bGwgPT09IGIpIHJldHVybiAhMTtcbiAgZm9yICh2YXIgYyA9IDA7IGMgPCBiLmxlbmd0aCAmJiBjIDwgYS5sZW5ndGg7IGMrKykgaWYgKCFIZShhW2NdLCBiW2NdKSkgcmV0dXJuICExO1xuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBYaChhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIFJoID0gZjtcbiAgTiA9IGI7XG4gIGIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIGIudXBkYXRlUXVldWUgPSBudWxsO1xuICBiLmxhbmVzID0gMDtcbiAgUGguY3VycmVudCA9IG51bGwgPT09IGEgfHwgbnVsbCA9PT0gYS5tZW1vaXplZFN0YXRlID8gWWggOiBaaDtcbiAgYSA9IGMoZCwgZSk7XG4gIGlmIChUaCkge1xuICAgIGYgPSAwO1xuICAgIGRvIHtcbiAgICAgIFRoID0gITE7XG4gICAgICBVaCA9IDA7XG4gICAgICBpZiAoMjUgPD0gZikgdGhyb3cgRXJyb3IocCgzMDEpKTtcbiAgICAgIGYgKz0gMTtcbiAgICAgIFAgPSBPID0gbnVsbDtcbiAgICAgIGIudXBkYXRlUXVldWUgPSBudWxsO1xuICAgICAgUGguY3VycmVudCA9ICRoO1xuICAgICAgYSA9IGMoZCwgZSk7XG4gICAgfSB3aGlsZSAoVGgpO1xuICB9XG4gIFBoLmN1cnJlbnQgPSBhaTtcbiAgYiA9IG51bGwgIT09IE8gJiYgbnVsbCAhPT0gTy5uZXh0O1xuICBSaCA9IDA7XG4gIFAgPSBPID0gTiA9IG51bGw7XG4gIFNoID0gITE7XG4gIGlmIChiKSB0aHJvdyBFcnJvcihwKDMwMCkpO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIGJpKCkge1xuICB2YXIgYSA9IDAgIT09IFVoO1xuICBVaCA9IDA7XG4gIHJldHVybiBhO1xufVxuZnVuY3Rpb24gY2koKSB7XG4gIHZhciBhID0ge1xuICAgIG1lbW9pemVkU3RhdGU6IG51bGwsXG4gICAgYmFzZVN0YXRlOiBudWxsLFxuICAgIGJhc2VRdWV1ZTogbnVsbCxcbiAgICBxdWV1ZTogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIG51bGwgPT09IFAgPyBOLm1lbW9pemVkU3RhdGUgPSBQID0gYSA6IFAgPSBQLm5leHQgPSBhO1xuICByZXR1cm4gUDtcbn1cbmZ1bmN0aW9uIGRpKCkge1xuICBpZiAobnVsbCA9PT0gTykge1xuICAgIHZhciBhID0gTi5hbHRlcm5hdGU7XG4gICAgYSA9IG51bGwgIT09IGEgPyBhLm1lbW9pemVkU3RhdGUgOiBudWxsO1xuICB9IGVsc2UgYSA9IE8ubmV4dDtcbiAgdmFyIGIgPSBudWxsID09PSBQID8gTi5tZW1vaXplZFN0YXRlIDogUC5uZXh0O1xuICBpZiAobnVsbCAhPT0gYikgUCA9IGIsIE8gPSBhO2Vsc2Uge1xuICAgIGlmIChudWxsID09PSBhKSB0aHJvdyBFcnJvcihwKDMxMCkpO1xuICAgIE8gPSBhO1xuICAgIGEgPSB7XG4gICAgICBtZW1vaXplZFN0YXRlOiBPLm1lbW9pemVkU3RhdGUsXG4gICAgICBiYXNlU3RhdGU6IE8uYmFzZVN0YXRlLFxuICAgICAgYmFzZVF1ZXVlOiBPLmJhc2VRdWV1ZSxcbiAgICAgIHF1ZXVlOiBPLnF1ZXVlLFxuICAgICAgbmV4dDogbnVsbFxuICAgIH07XG4gICAgbnVsbCA9PT0gUCA/IE4ubWVtb2l6ZWRTdGF0ZSA9IFAgPSBhIDogUCA9IFAubmV4dCA9IGE7XG4gIH1cbiAgcmV0dXJuIFA7XG59XG5mdW5jdGlvbiBlaShhLCBiKSB7XG4gIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiID8gYihhKSA6IGI7XG59XG5mdW5jdGlvbiBmaShhKSB7XG4gIHZhciBiID0gZGkoKSxcbiAgICBjID0gYi5xdWV1ZTtcbiAgaWYgKG51bGwgPT09IGMpIHRocm93IEVycm9yKHAoMzExKSk7XG4gIGMubGFzdFJlbmRlcmVkUmVkdWNlciA9IGE7XG4gIHZhciBkID0gTyxcbiAgICBlID0gZC5iYXNlUXVldWUsXG4gICAgZiA9IGMucGVuZGluZztcbiAgaWYgKG51bGwgIT09IGYpIHtcbiAgICBpZiAobnVsbCAhPT0gZSkge1xuICAgICAgdmFyIGcgPSBlLm5leHQ7XG4gICAgICBlLm5leHQgPSBmLm5leHQ7XG4gICAgICBmLm5leHQgPSBnO1xuICAgIH1cbiAgICBkLmJhc2VRdWV1ZSA9IGUgPSBmO1xuICAgIGMucGVuZGluZyA9IG51bGw7XG4gIH1cbiAgaWYgKG51bGwgIT09IGUpIHtcbiAgICBmID0gZS5uZXh0O1xuICAgIGQgPSBkLmJhc2VTdGF0ZTtcbiAgICB2YXIgaCA9IGcgPSBudWxsLFxuICAgICAgayA9IG51bGwsXG4gICAgICBsID0gZjtcbiAgICBkbyB7XG4gICAgICB2YXIgbSA9IGwubGFuZTtcbiAgICAgIGlmICgoUmggJiBtKSA9PT0gbSkgbnVsbCAhPT0gayAmJiAoayA9IGsubmV4dCA9IHtcbiAgICAgICAgbGFuZTogMCxcbiAgICAgICAgYWN0aW9uOiBsLmFjdGlvbixcbiAgICAgICAgaGFzRWFnZXJTdGF0ZTogbC5oYXNFYWdlclN0YXRlLFxuICAgICAgICBlYWdlclN0YXRlOiBsLmVhZ2VyU3RhdGUsXG4gICAgICAgIG5leHQ6IG51bGxcbiAgICAgIH0pLCBkID0gbC5oYXNFYWdlclN0YXRlID8gbC5lYWdlclN0YXRlIDogYShkLCBsLmFjdGlvbik7ZWxzZSB7XG4gICAgICAgIHZhciBxID0ge1xuICAgICAgICAgIGxhbmU6IG0sXG4gICAgICAgICAgYWN0aW9uOiBsLmFjdGlvbixcbiAgICAgICAgICBoYXNFYWdlclN0YXRlOiBsLmhhc0VhZ2VyU3RhdGUsXG4gICAgICAgICAgZWFnZXJTdGF0ZTogbC5lYWdlclN0YXRlLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcbiAgICAgICAgbnVsbCA9PT0gayA/IChoID0gayA9IHEsIGcgPSBkKSA6IGsgPSBrLm5leHQgPSBxO1xuICAgICAgICBOLmxhbmVzIHw9IG07XG4gICAgICAgIGhoIHw9IG07XG4gICAgICB9XG4gICAgICBsID0gbC5uZXh0O1xuICAgIH0gd2hpbGUgKG51bGwgIT09IGwgJiYgbCAhPT0gZik7XG4gICAgbnVsbCA9PT0gayA/IGcgPSBkIDogay5uZXh0ID0gaDtcbiAgICBIZShkLCBiLm1lbW9pemVkU3RhdGUpIHx8IChVZyA9ICEwKTtcbiAgICBiLm1lbW9pemVkU3RhdGUgPSBkO1xuICAgIGIuYmFzZVN0YXRlID0gZztcbiAgICBiLmJhc2VRdWV1ZSA9IGs7XG4gICAgYy5sYXN0UmVuZGVyZWRTdGF0ZSA9IGQ7XG4gIH1cbiAgYSA9IGMuaW50ZXJsZWF2ZWQ7XG4gIGlmIChudWxsICE9PSBhKSB7XG4gICAgZSA9IGE7XG4gICAgZG8gZiA9IGUubGFuZSwgTi5sYW5lcyB8PSBmLCBoaCB8PSBmLCBlID0gZS5uZXh0OyB3aGlsZSAoZSAhPT0gYSk7XG4gIH0gZWxzZSBudWxsID09PSBlICYmIChjLmxhbmVzID0gMCk7XG4gIHJldHVybiBbYi5tZW1vaXplZFN0YXRlLCBjLmRpc3BhdGNoXTtcbn1cbmZ1bmN0aW9uIGdpKGEpIHtcbiAgdmFyIGIgPSBkaSgpLFxuICAgIGMgPSBiLnF1ZXVlO1xuICBpZiAobnVsbCA9PT0gYykgdGhyb3cgRXJyb3IocCgzMTEpKTtcbiAgYy5sYXN0UmVuZGVyZWRSZWR1Y2VyID0gYTtcbiAgdmFyIGQgPSBjLmRpc3BhdGNoLFxuICAgIGUgPSBjLnBlbmRpbmcsXG4gICAgZiA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGUpIHtcbiAgICBjLnBlbmRpbmcgPSBudWxsO1xuICAgIHZhciBnID0gZSA9IGUubmV4dDtcbiAgICBkbyBmID0gYShmLCBnLmFjdGlvbiksIGcgPSBnLm5leHQ7IHdoaWxlIChnICE9PSBlKTtcbiAgICBIZShmLCBiLm1lbW9pemVkU3RhdGUpIHx8IChVZyA9ICEwKTtcbiAgICBiLm1lbW9pemVkU3RhdGUgPSBmO1xuICAgIG51bGwgPT09IGIuYmFzZVF1ZXVlICYmIChiLmJhc2VTdGF0ZSA9IGYpO1xuICAgIGMubGFzdFJlbmRlcmVkU3RhdGUgPSBmO1xuICB9XG4gIHJldHVybiBbZiwgZF07XG59XG5mdW5jdGlvbiBoaSgpIHt9XG5mdW5jdGlvbiBpaShhLCBiKSB7XG4gIHZhciBjID0gTixcbiAgICBkID0gZGkoKSxcbiAgICBlID0gYigpLFxuICAgIGYgPSAhSGUoZC5tZW1vaXplZFN0YXRlLCBlKTtcbiAgZiAmJiAoZC5tZW1vaXplZFN0YXRlID0gZSwgVWcgPSAhMCk7XG4gIGQgPSBkLnF1ZXVlO1xuICBqaShraS5iaW5kKG51bGwsIGMsIGQsIGEpLCBbYV0pO1xuICBpZiAoZC5nZXRTbmFwc2hvdCAhPT0gYiB8fCBmIHx8IG51bGwgIT09IFAgJiYgUC5tZW1vaXplZFN0YXRlLnRhZyAmIDEpIHtcbiAgICBjLmZsYWdzIHw9IDIwNDg7XG4gICAgbGkoOSwgbWkuYmluZChudWxsLCBjLCBkLCBlLCBiKSwgdm9pZCAwLCBudWxsKTtcbiAgICBpZiAobnVsbCA9PT0gUikgdGhyb3cgRXJyb3IocCgzNDkpKTtcbiAgICAwICE9PSAoUmggJiAzMCkgfHwgbmkoYywgYiwgZSk7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBuaShhLCBiLCBjKSB7XG4gIGEuZmxhZ3MgfD0gMTYzODQ7XG4gIGEgPSB7XG4gICAgZ2V0U25hcHNob3Q6IGIsXG4gICAgdmFsdWU6IGNcbiAgfTtcbiAgYiA9IE4udXBkYXRlUXVldWU7XG4gIG51bGwgPT09IGIgPyAoYiA9IHtcbiAgICBsYXN0RWZmZWN0OiBudWxsLFxuICAgIHN0b3JlczogbnVsbFxuICB9LCBOLnVwZGF0ZVF1ZXVlID0gYiwgYi5zdG9yZXMgPSBbYV0pIDogKGMgPSBiLnN0b3JlcywgbnVsbCA9PT0gYyA/IGIuc3RvcmVzID0gW2FdIDogYy5wdXNoKGEpKTtcbn1cbmZ1bmN0aW9uIG1pKGEsIGIsIGMsIGQpIHtcbiAgYi52YWx1ZSA9IGM7XG4gIGIuZ2V0U25hcHNob3QgPSBkO1xuICBvaShiKSAmJiBwaShhKTtcbn1cbmZ1bmN0aW9uIGtpKGEsIGIsIGMpIHtcbiAgcmV0dXJuIGMoZnVuY3Rpb24gKCkge1xuICAgIG9pKGIpICYmIHBpKGEpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIG9pKGEpIHtcbiAgdmFyIGIgPSBhLmdldFNuYXBzaG90O1xuICBhID0gYS52YWx1ZTtcbiAgdHJ5IHtcbiAgICB2YXIgYyA9IGIoKTtcbiAgICByZXR1cm4gIUhlKGEsIGMpO1xuICB9IGNhdGNoIChkKSB7XG4gICAgcmV0dXJuICEwO1xuICB9XG59XG5mdW5jdGlvbiBwaShhKSB7XG4gIHZhciBiID0gWmcoYSwgMSk7XG4gIG51bGwgIT09IGIgJiYgbWgoYiwgYSwgMSwgLTEpO1xufVxuZnVuY3Rpb24gcWkoYSkge1xuICB2YXIgYiA9IGNpKCk7XG4gIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGEgJiYgKGEgPSBhKCkpO1xuICBiLm1lbW9pemVkU3RhdGUgPSBiLmJhc2VTdGF0ZSA9IGE7XG4gIGEgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBpbnRlcmxlYXZlZDogbnVsbCxcbiAgICBsYW5lczogMCxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBlaSxcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogYVxuICB9O1xuICBiLnF1ZXVlID0gYTtcbiAgYSA9IGEuZGlzcGF0Y2ggPSByaS5iaW5kKG51bGwsIE4sIGEpO1xuICByZXR1cm4gW2IubWVtb2l6ZWRTdGF0ZSwgYV07XG59XG5mdW5jdGlvbiBsaShhLCBiLCBjLCBkKSB7XG4gIGEgPSB7XG4gICAgdGFnOiBhLFxuICAgIGNyZWF0ZTogYixcbiAgICBkZXN0cm95OiBjLFxuICAgIGRlcHM6IGQsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBiID0gTi51cGRhdGVRdWV1ZTtcbiAgbnVsbCA9PT0gYiA/IChiID0ge1xuICAgIGxhc3RFZmZlY3Q6IG51bGwsXG4gICAgc3RvcmVzOiBudWxsXG4gIH0sIE4udXBkYXRlUXVldWUgPSBiLCBiLmxhc3RFZmZlY3QgPSBhLm5leHQgPSBhKSA6IChjID0gYi5sYXN0RWZmZWN0LCBudWxsID09PSBjID8gYi5sYXN0RWZmZWN0ID0gYS5uZXh0ID0gYSA6IChkID0gYy5uZXh0LCBjLm5leHQgPSBhLCBhLm5leHQgPSBkLCBiLmxhc3RFZmZlY3QgPSBhKSk7XG4gIHJldHVybiBhO1xufVxuZnVuY3Rpb24gc2koKSB7XG4gIHJldHVybiBkaSgpLm1lbW9pemVkU3RhdGU7XG59XG5mdW5jdGlvbiB0aShhLCBiLCBjLCBkKSB7XG4gIHZhciBlID0gY2koKTtcbiAgTi5mbGFncyB8PSBhO1xuICBlLm1lbW9pemVkU3RhdGUgPSBsaSgxIHwgYiwgYywgdm9pZCAwLCB2b2lkIDAgPT09IGQgPyBudWxsIDogZCk7XG59XG5mdW5jdGlvbiB1aShhLCBiLCBjLCBkKSB7XG4gIHZhciBlID0gZGkoKTtcbiAgZCA9IHZvaWQgMCA9PT0gZCA/IG51bGwgOiBkO1xuICB2YXIgZiA9IHZvaWQgMDtcbiAgaWYgKG51bGwgIT09IE8pIHtcbiAgICB2YXIgZyA9IE8ubWVtb2l6ZWRTdGF0ZTtcbiAgICBmID0gZy5kZXN0cm95O1xuICAgIGlmIChudWxsICE9PSBkICYmIFdoKGQsIGcuZGVwcykpIHtcbiAgICAgIGUubWVtb2l6ZWRTdGF0ZSA9IGxpKGIsIGMsIGYsIGQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBOLmZsYWdzIHw9IGE7XG4gIGUubWVtb2l6ZWRTdGF0ZSA9IGxpKDEgfCBiLCBjLCBmLCBkKTtcbn1cbmZ1bmN0aW9uIHZpKGEsIGIpIHtcbiAgcmV0dXJuIHRpKDgzOTA2NTYsIDgsIGEsIGIpO1xufVxuZnVuY3Rpb24gamkoYSwgYikge1xuICByZXR1cm4gdWkoMjA0OCwgOCwgYSwgYik7XG59XG5mdW5jdGlvbiB3aShhLCBiKSB7XG4gIHJldHVybiB1aSg0LCAyLCBhLCBiKTtcbn1cbmZ1bmN0aW9uIHhpKGEsIGIpIHtcbiAgcmV0dXJuIHVpKDQsIDQsIGEsIGIpO1xufVxuZnVuY3Rpb24geWkoYSwgYikge1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYikgcmV0dXJuIGEgPSBhKCksIGIoYSksIGZ1bmN0aW9uICgpIHtcbiAgICBiKG51bGwpO1xuICB9O1xuICBpZiAobnVsbCAhPT0gYiAmJiB2b2lkIDAgIT09IGIpIHJldHVybiBhID0gYSgpLCBiLmN1cnJlbnQgPSBhLCBmdW5jdGlvbiAoKSB7XG4gICAgYi5jdXJyZW50ID0gbnVsbDtcbiAgfTtcbn1cbmZ1bmN0aW9uIHppKGEsIGIsIGMpIHtcbiAgYyA9IG51bGwgIT09IGMgJiYgdm9pZCAwICE9PSBjID8gYy5jb25jYXQoW2FdKSA6IG51bGw7XG4gIHJldHVybiB1aSg0LCA0LCB5aS5iaW5kKG51bGwsIGIsIGEpLCBjKTtcbn1cbmZ1bmN0aW9uIEFpKCkge31cbmZ1bmN0aW9uIEJpKGEsIGIpIHtcbiAgdmFyIGMgPSBkaSgpO1xuICBiID0gdm9pZCAwID09PSBiID8gbnVsbCA6IGI7XG4gIHZhciBkID0gYy5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZCAmJiBudWxsICE9PSBiICYmIFdoKGIsIGRbMV0pKSByZXR1cm4gZFswXTtcbiAgYy5tZW1vaXplZFN0YXRlID0gW2EsIGJdO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIENpKGEsIGIpIHtcbiAgdmFyIGMgPSBkaSgpO1xuICBiID0gdm9pZCAwID09PSBiID8gbnVsbCA6IGI7XG4gIHZhciBkID0gYy5tZW1vaXplZFN0YXRlO1xuICBpZiAobnVsbCAhPT0gZCAmJiBudWxsICE9PSBiICYmIFdoKGIsIGRbMV0pKSByZXR1cm4gZFswXTtcbiAgYSA9IGEoKTtcbiAgYy5tZW1vaXplZFN0YXRlID0gW2EsIGJdO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIERpKGEsIGIsIGMpIHtcbiAgaWYgKDAgPT09IChSaCAmIDIxKSkgcmV0dXJuIGEuYmFzZVN0YXRlICYmIChhLmJhc2VTdGF0ZSA9ICExLCBVZyA9ICEwKSwgYS5tZW1vaXplZFN0YXRlID0gYztcbiAgSGUoYywgYikgfHwgKGMgPSB5YygpLCBOLmxhbmVzIHw9IGMsIGhoIHw9IGMsIGEuYmFzZVN0YXRlID0gITApO1xuICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIEVpKGEsIGIpIHtcbiAgdmFyIGMgPSBDO1xuICBDID0gMCAhPT0gYyAmJiA0ID4gYyA/IGMgOiA0O1xuICBhKCEwKTtcbiAgdmFyIGQgPSBRaC50cmFuc2l0aW9uO1xuICBRaC50cmFuc2l0aW9uID0ge307XG4gIHRyeSB7XG4gICAgYSghMSksIGIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBDID0gYywgUWgudHJhbnNpdGlvbiA9IGQ7XG4gIH1cbn1cbmZ1bmN0aW9uIEZpKCkge1xuICByZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlO1xufVxuZnVuY3Rpb24gR2koYSwgYiwgYykge1xuICB2YXIgZCA9IGxoKGEpO1xuICBjID0ge1xuICAgIGxhbmU6IGQsXG4gICAgYWN0aW9uOiBjLFxuICAgIGhhc0VhZ2VyU3RhdGU6ICExLFxuICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgbmV4dDogbnVsbFxuICB9O1xuICBpZiAoSGkoYSkpIElpKGIsIGMpO2Vsc2UgaWYgKGMgPSBZZyhhLCBiLCBjLCBkKSwgbnVsbCAhPT0gYykge1xuICAgIHZhciBlID0gTCgpO1xuICAgIG1oKGMsIGEsIGQsIGUpO1xuICAgIEppKGMsIGIsIGQpO1xuICB9XG59XG5mdW5jdGlvbiByaShhLCBiLCBjKSB7XG4gIHZhciBkID0gbGgoYSksXG4gICAgZSA9IHtcbiAgICAgIGxhbmU6IGQsXG4gICAgICBhY3Rpb246IGMsXG4gICAgICBoYXNFYWdlclN0YXRlOiAhMSxcbiAgICAgIGVhZ2VyU3RhdGU6IG51bGwsXG4gICAgICBuZXh0OiBudWxsXG4gICAgfTtcbiAgaWYgKEhpKGEpKSBJaShiLCBlKTtlbHNlIHtcbiAgICB2YXIgZiA9IGEuYWx0ZXJuYXRlO1xuICAgIGlmICgwID09PSBhLmxhbmVzICYmIChudWxsID09PSBmIHx8IDAgPT09IGYubGFuZXMpICYmIChmID0gYi5sYXN0UmVuZGVyZWRSZWR1Y2VyLCBudWxsICE9PSBmKSkgdHJ5IHtcbiAgICAgIHZhciBnID0gYi5sYXN0UmVuZGVyZWRTdGF0ZSxcbiAgICAgICAgaCA9IGYoZywgYyk7XG4gICAgICBlLmhhc0VhZ2VyU3RhdGUgPSAhMDtcbiAgICAgIGUuZWFnZXJTdGF0ZSA9IGg7XG4gICAgICBpZiAoSGUoaCwgZykpIHtcbiAgICAgICAgdmFyIGsgPSBiLmludGVybGVhdmVkO1xuICAgICAgICBudWxsID09PSBrID8gKGUubmV4dCA9IGUsIFhnKGIpKSA6IChlLm5leHQgPSBrLm5leHQsIGsubmV4dCA9IGUpO1xuICAgICAgICBiLmludGVybGVhdmVkID0gZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGwpIHt9IGZpbmFsbHkge31cbiAgICBjID0gWWcoYSwgYiwgZSwgZCk7XG4gICAgbnVsbCAhPT0gYyAmJiAoZSA9IEwoKSwgbWgoYywgYSwgZCwgZSksIEppKGMsIGIsIGQpKTtcbiAgfVxufVxuZnVuY3Rpb24gSGkoYSkge1xuICB2YXIgYiA9IGEuYWx0ZXJuYXRlO1xuICByZXR1cm4gYSA9PT0gTiB8fCBudWxsICE9PSBiICYmIGIgPT09IE47XG59XG5mdW5jdGlvbiBJaShhLCBiKSB7XG4gIFRoID0gU2ggPSAhMDtcbiAgdmFyIGMgPSBhLnBlbmRpbmc7XG4gIG51bGwgPT09IGMgPyBiLm5leHQgPSBiIDogKGIubmV4dCA9IGMubmV4dCwgYy5uZXh0ID0gYik7XG4gIGEucGVuZGluZyA9IGI7XG59XG5mdW5jdGlvbiBKaShhLCBiLCBjKSB7XG4gIGlmICgwICE9PSAoYyAmIDQxOTQyNDApKSB7XG4gICAgdmFyIGQgPSBiLmxhbmVzO1xuICAgIGQgJj0gYS5wZW5kaW5nTGFuZXM7XG4gICAgYyB8PSBkO1xuICAgIGIubGFuZXMgPSBjO1xuICAgIENjKGEsIGMpO1xuICB9XG59XG52YXIgYWkgPSB7XG4gICAgcmVhZENvbnRleHQ6IFZnLFxuICAgIHVzZUNhbGxiYWNrOiBRLFxuICAgIHVzZUNvbnRleHQ6IFEsXG4gICAgdXNlRWZmZWN0OiBRLFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IFEsXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiBRLFxuICAgIHVzZUxheW91dEVmZmVjdDogUSxcbiAgICB1c2VNZW1vOiBRLFxuICAgIHVzZVJlZHVjZXI6IFEsXG4gICAgdXNlUmVmOiBRLFxuICAgIHVzZVN0YXRlOiBRLFxuICAgIHVzZURlYnVnVmFsdWU6IFEsXG4gICAgdXNlRGVmZXJyZWRWYWx1ZTogUSxcbiAgICB1c2VUcmFuc2l0aW9uOiBRLFxuICAgIHVzZU11dGFibGVTb3VyY2U6IFEsXG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmU6IFEsXG4gICAgdXNlSWQ6IFEsXG4gICAgdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiAhMVxuICB9LFxuICBZaCA9IHtcbiAgICByZWFkQ29udGV4dDogVmcsXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIHVzZUNhbGxiYWNrKGEsIGIpIHtcbiAgICAgIGNpKCkubWVtb2l6ZWRTdGF0ZSA9IFthLCB2b2lkIDAgPT09IGIgPyBudWxsIDogYl07XG4gICAgICByZXR1cm4gYTtcbiAgICB9LFxuICAgIHVzZUNvbnRleHQ6IFZnLFxuICAgIHVzZUVmZmVjdDogdmksXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gdXNlSW1wZXJhdGl2ZUhhbmRsZShhLCBiLCBjKSB7XG4gICAgICBjID0gbnVsbCAhPT0gYyAmJiB2b2lkIDAgIT09IGMgPyBjLmNvbmNhdChbYV0pIDogbnVsbDtcbiAgICAgIHJldHVybiB0aSg0MTk0MzA4LCA0LCB5aS5iaW5kKG51bGwsIGIsIGEpLCBjKTtcbiAgICB9LFxuICAgIHVzZUxheW91dEVmZmVjdDogZnVuY3Rpb24gdXNlTGF5b3V0RWZmZWN0KGEsIGIpIHtcbiAgICAgIHJldHVybiB0aSg0MTk0MzA4LCA0LCBhLCBiKTtcbiAgICB9LFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gdXNlSW5zZXJ0aW9uRWZmZWN0KGEsIGIpIHtcbiAgICAgIHJldHVybiB0aSg0LCAyLCBhLCBiKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIHVzZU1lbW8oYSwgYikge1xuICAgICAgdmFyIGMgPSBjaSgpO1xuICAgICAgYiA9IHZvaWQgMCA9PT0gYiA/IG51bGwgOiBiO1xuICAgICAgYSA9IGEoKTtcbiAgICAgIGMubWVtb2l6ZWRTdGF0ZSA9IFthLCBiXTtcbiAgICAgIHJldHVybiBhO1xuICAgIH0sXG4gICAgdXNlUmVkdWNlcjogZnVuY3Rpb24gdXNlUmVkdWNlcihhLCBiLCBjKSB7XG4gICAgICB2YXIgZCA9IGNpKCk7XG4gICAgICBiID0gdm9pZCAwICE9PSBjID8gYyhiKSA6IGI7XG4gICAgICBkLm1lbW9pemVkU3RhdGUgPSBkLmJhc2VTdGF0ZSA9IGI7XG4gICAgICBhID0ge1xuICAgICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgICBpbnRlcmxlYXZlZDogbnVsbCxcbiAgICAgICAgbGFuZXM6IDAsXG4gICAgICAgIGRpc3BhdGNoOiBudWxsLFxuICAgICAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBhLFxuICAgICAgICBsYXN0UmVuZGVyZWRTdGF0ZTogYlxuICAgICAgfTtcbiAgICAgIGQucXVldWUgPSBhO1xuICAgICAgYSA9IGEuZGlzcGF0Y2ggPSBHaS5iaW5kKG51bGwsIE4sIGEpO1xuICAgICAgcmV0dXJuIFtkLm1lbW9pemVkU3RhdGUsIGFdO1xuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiB1c2VSZWYoYSkge1xuICAgICAgdmFyIGIgPSBjaSgpO1xuICAgICAgYSA9IHtcbiAgICAgICAgY3VycmVudDogYVxuICAgICAgfTtcbiAgICAgIHJldHVybiBiLm1lbW9pemVkU3RhdGUgPSBhO1xuICAgIH0sXG4gICAgdXNlU3RhdGU6IHFpLFxuICAgIHVzZURlYnVnVmFsdWU6IEFpLFxuICAgIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uIHVzZURlZmVycmVkVmFsdWUoYSkge1xuICAgICAgcmV0dXJuIGNpKCkubWVtb2l6ZWRTdGF0ZSA9IGE7XG4gICAgfSxcbiAgICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiB1c2VUcmFuc2l0aW9uKCkge1xuICAgICAgdmFyIGEgPSBxaSghMSksXG4gICAgICAgIGIgPSBhWzBdO1xuICAgICAgYSA9IEVpLmJpbmQobnVsbCwgYVsxXSk7XG4gICAgICBjaSgpLm1lbW9pemVkU3RhdGUgPSBhO1xuICAgICAgcmV0dXJuIFtiLCBhXTtcbiAgICB9LFxuICAgIHVzZU11dGFibGVTb3VyY2U6IGZ1bmN0aW9uIHVzZU11dGFibGVTb3VyY2UoKSB7fSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gdXNlU3luY0V4dGVybmFsU3RvcmUoYSwgYiwgYykge1xuICAgICAgdmFyIGQgPSBOLFxuICAgICAgICBlID0gY2koKTtcbiAgICAgIGlmIChJKSB7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IGMpIHRocm93IEVycm9yKHAoNDA3KSk7XG4gICAgICAgIGMgPSBjKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjID0gYigpO1xuICAgICAgICBpZiAobnVsbCA9PT0gUikgdGhyb3cgRXJyb3IocCgzNDkpKTtcbiAgICAgICAgMCAhPT0gKFJoICYgMzApIHx8IG5pKGQsIGIsIGMpO1xuICAgICAgfVxuICAgICAgZS5tZW1vaXplZFN0YXRlID0gYztcbiAgICAgIHZhciBmID0ge1xuICAgICAgICB2YWx1ZTogYyxcbiAgICAgICAgZ2V0U25hcHNob3Q6IGJcbiAgICAgIH07XG4gICAgICBlLnF1ZXVlID0gZjtcbiAgICAgIHZpKGtpLmJpbmQobnVsbCwgZCwgZiwgYSksIFthXSk7XG4gICAgICBkLmZsYWdzIHw9IDIwNDg7XG4gICAgICBsaSg5LCBtaS5iaW5kKG51bGwsIGQsIGYsIGMsIGIpLCB2b2lkIDAsIG51bGwpO1xuICAgICAgcmV0dXJuIGM7XG4gICAgfSxcbiAgICB1c2VJZDogZnVuY3Rpb24gdXNlSWQoKSB7XG4gICAgICB2YXIgYSA9IGNpKCksXG4gICAgICAgIGIgPSBSLmlkZW50aWZpZXJQcmVmaXg7XG4gICAgICBpZiAoSSkge1xuICAgICAgICB2YXIgYyA9IHNnO1xuICAgICAgICB2YXIgZCA9IHJnO1xuICAgICAgICBjID0gKGQgJiB+KDEgPDwgMzIgLSBvYyhkKSAtIDEpKS50b1N0cmluZygzMikgKyBjO1xuICAgICAgICBiID0gXCI6XCIgKyBiICsgXCJSXCIgKyBjO1xuICAgICAgICBjID0gVWgrKztcbiAgICAgICAgMCA8IGMgJiYgKGIgKz0gXCJIXCIgKyBjLnRvU3RyaW5nKDMyKSk7XG4gICAgICAgIGIgKz0gXCI6XCI7XG4gICAgICB9IGVsc2UgYyA9IFZoKyssIGIgPSBcIjpcIiArIGIgKyBcInJcIiArIGMudG9TdHJpbmcoMzIpICsgXCI6XCI7XG4gICAgICByZXR1cm4gYS5tZW1vaXplZFN0YXRlID0gYjtcbiAgICB9LFxuICAgIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogITFcbiAgfSxcbiAgWmggPSB7XG4gICAgcmVhZENvbnRleHQ6IFZnLFxuICAgIHVzZUNhbGxiYWNrOiBCaSxcbiAgICB1c2VDb250ZXh0OiBWZyxcbiAgICB1c2VFZmZlY3Q6IGppLFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IHppLFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogd2ksXG4gICAgdXNlTGF5b3V0RWZmZWN0OiB4aSxcbiAgICB1c2VNZW1vOiBDaSxcbiAgICB1c2VSZWR1Y2VyOiBmaSxcbiAgICB1c2VSZWY6IHNpLFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiB1c2VTdGF0ZSgpIHtcbiAgICAgIHJldHVybiBmaShlaSk7XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBBaSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiB1c2VEZWZlcnJlZFZhbHVlKGEpIHtcbiAgICAgIHZhciBiID0gZGkoKTtcbiAgICAgIHJldHVybiBEaShiLCBPLm1lbW9pemVkU3RhdGUsIGEpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gdXNlVHJhbnNpdGlvbigpIHtcbiAgICAgIHZhciBhID0gZmkoZWkpWzBdLFxuICAgICAgICBiID0gZGkoKS5tZW1vaXplZFN0YXRlO1xuICAgICAgcmV0dXJuIFthLCBiXTtcbiAgICB9LFxuICAgIHVzZU11dGFibGVTb3VyY2U6IGhpLFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBpaSxcbiAgICB1c2VJZDogRmksXG4gICAgdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiAhMVxuICB9LFxuICAkaCA9IHtcbiAgICByZWFkQ29udGV4dDogVmcsXG4gICAgdXNlQ2FsbGJhY2s6IEJpLFxuICAgIHVzZUNvbnRleHQ6IFZnLFxuICAgIHVzZUVmZmVjdDogamksXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogemksXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiB3aSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IHhpLFxuICAgIHVzZU1lbW86IENpLFxuICAgIHVzZVJlZHVjZXI6IGdpLFxuICAgIHVzZVJlZjogc2ksXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uIHVzZVN0YXRlKCkge1xuICAgICAgcmV0dXJuIGdpKGVpKTtcbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IEFpLFxuICAgIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uIHVzZURlZmVycmVkVmFsdWUoYSkge1xuICAgICAgdmFyIGIgPSBkaSgpO1xuICAgICAgcmV0dXJuIG51bGwgPT09IE8gPyBiLm1lbW9pemVkU3RhdGUgPSBhIDogRGkoYiwgTy5tZW1vaXplZFN0YXRlLCBhKTtcbiAgICB9LFxuICAgIHVzZVRyYW5zaXRpb246IGZ1bmN0aW9uIHVzZVRyYW5zaXRpb24oKSB7XG4gICAgICB2YXIgYSA9IGdpKGVpKVswXSxcbiAgICAgICAgYiA9IGRpKCkubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHJldHVybiBbYSwgYl07XG4gICAgfSxcbiAgICB1c2VNdXRhYmxlU291cmNlOiBoaSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogaWksXG4gICAgdXNlSWQ6IEZpLFxuICAgIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogITFcbiAgfTtcbmZ1bmN0aW9uIEtpKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgYyA9IFwiXCIsXG4gICAgICBkID0gYjtcbiAgICBkbyBjICs9IFBhKGQpLCBkID0gZC5yZXR1cm47IHdoaWxlIChkKTtcbiAgICB2YXIgZSA9IGM7XG4gIH0gY2F0Y2ggKGYpIHtcbiAgICBlID0gXCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIiArIGYubWVzc2FnZSArIFwiXFxuXCIgKyBmLnN0YWNrO1xuICB9XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IGEsXG4gICAgc291cmNlOiBiLFxuICAgIHN0YWNrOiBlLFxuICAgIGRpZ2VzdDogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gTGkoYSwgYiwgYykge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiBhLFxuICAgIHNvdXJjZTogbnVsbCxcbiAgICBzdGFjazogbnVsbCAhPSBjID8gYyA6IG51bGwsXG4gICAgZGlnZXN0OiBudWxsICE9IGIgPyBiIDogbnVsbFxuICB9O1xufVxuZnVuY3Rpb24gTWkoYSwgYikge1xuICB0cnkge1xuICAgIGNvbnNvbGUuZXJyb3IoYi52YWx1ZSk7XG4gIH0gY2F0Y2ggKGMpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGM7XG4gICAgfSk7XG4gIH1cbn1cbnZhciBOaSA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtNYXAgPyBXZWFrTWFwIDogTWFwO1xuZnVuY3Rpb24gT2koYSwgYiwgYykge1xuICBjID0gY2goLTEsIGMpO1xuICBjLnRhZyA9IDM7XG4gIGMucGF5bG9hZCA9IHtcbiAgICBlbGVtZW50OiBudWxsXG4gIH07XG4gIHZhciBkID0gYi52YWx1ZTtcbiAgYy5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBQaSB8fCAoUGkgPSAhMCwgUWkgPSBkKTtcbiAgICBNaShhLCBiKTtcbiAgfTtcbiAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBSaShhLCBiLCBjKSB7XG4gIGMgPSBjaCgtMSwgYyk7XG4gIGMudGFnID0gMztcbiAgdmFyIGQgPSBhLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO1xuICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZCkge1xuICAgIHZhciBlID0gYi52YWx1ZTtcbiAgICBjLnBheWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZChlKTtcbiAgICB9O1xuICAgIGMuY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBNaShhLCBiKTtcbiAgICB9O1xuICB9XG4gIHZhciBmID0gYS5zdGF0ZU5vZGU7XG4gIG51bGwgIT09IGYgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCAmJiAoYy5jYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICBNaShhLCBiKTtcbiAgICBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBkICYmIChudWxsID09PSBTaSA/IFNpID0gbmV3IFNldChbdGhpc10pIDogU2kuYWRkKHRoaXMpKTtcbiAgICB2YXIgYyA9IGIuc3RhY2s7XG4gICAgdGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLCB7XG4gICAgICBjb21wb25lbnRTdGFjazogbnVsbCAhPT0gYyA/IGMgOiBcIlwiXG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gYztcbn1cbmZ1bmN0aW9uIFRpKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSBhLnBpbmdDYWNoZTtcbiAgaWYgKG51bGwgPT09IGQpIHtcbiAgICBkID0gYS5waW5nQ2FjaGUgPSBuZXcgTmkoKTtcbiAgICB2YXIgZSA9IG5ldyBTZXQoKTtcbiAgICBkLnNldChiLCBlKTtcbiAgfSBlbHNlIGUgPSBkLmdldChiKSwgdm9pZCAwID09PSBlICYmIChlID0gbmV3IFNldCgpLCBkLnNldChiLCBlKSk7XG4gIGUuaGFzKGMpIHx8IChlLmFkZChjKSwgYSA9IFVpLmJpbmQobnVsbCwgYSwgYiwgYyksIGIudGhlbihhLCBhKSk7XG59XG5mdW5jdGlvbiBWaShhKSB7XG4gIGRvIHtcbiAgICB2YXIgYjtcbiAgICBpZiAoYiA9IDEzID09PSBhLnRhZykgYiA9IGEubWVtb2l6ZWRTdGF0ZSwgYiA9IG51bGwgIT09IGIgPyBudWxsICE9PSBiLmRlaHlkcmF0ZWQgPyAhMCA6ICExIDogITA7XG4gICAgaWYgKGIpIHJldHVybiBhO1xuICAgIGEgPSBhLnJldHVybjtcbiAgfSB3aGlsZSAobnVsbCAhPT0gYSk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gV2koYSwgYiwgYywgZCwgZSkge1xuICBpZiAoMCA9PT0gKGEubW9kZSAmIDEpKSByZXR1cm4gYSA9PT0gYiA/IGEuZmxhZ3MgfD0gNjU1MzYgOiAoYS5mbGFncyB8PSAxMjgsIGMuZmxhZ3MgfD0gMTMxMDcyLCBjLmZsYWdzICY9IC01MjgwNSwgMSA9PT0gYy50YWcgJiYgKG51bGwgPT09IGMuYWx0ZXJuYXRlID8gYy50YWcgPSAxNyA6IChiID0gY2goLTEsIDEpLCBiLnRhZyA9IDIsIGRoKGMsIGIsIDEpKSksIGMubGFuZXMgfD0gMSksIGE7XG4gIGEuZmxhZ3MgfD0gNjU1MzY7XG4gIGEubGFuZXMgPSBlO1xuICByZXR1cm4gYTtcbn1cbnZhciBYaSA9IHVhLlJlYWN0Q3VycmVudE93bmVyLFxuICBVZyA9ICExO1xuZnVuY3Rpb24gWWkoYSwgYiwgYywgZCkge1xuICBiLmNoaWxkID0gbnVsbCA9PT0gYSA/IENoKGIsIG51bGwsIGMsIGQpIDogQmgoYiwgYS5jaGlsZCwgYywgZCk7XG59XG5mdW5jdGlvbiBaaShhLCBiLCBjLCBkLCBlKSB7XG4gIGMgPSBjLnJlbmRlcjtcbiAgdmFyIGYgPSBiLnJlZjtcbiAgVGcoYiwgZSk7XG4gIGQgPSBYaChhLCBiLCBjLCBkLCBmLCBlKTtcbiAgYyA9IGJpKCk7XG4gIGlmIChudWxsICE9PSBhICYmICFVZykgcmV0dXJuIGIudXBkYXRlUXVldWUgPSBhLnVwZGF0ZVF1ZXVlLCBiLmZsYWdzICY9IC0yMDUzLCBhLmxhbmVzICY9IH5lLCAkaShhLCBiLCBlKTtcbiAgSSAmJiBjICYmIHZnKGIpO1xuICBiLmZsYWdzIHw9IDE7XG4gIFlpKGEsIGIsIGQsIGUpO1xuICByZXR1cm4gYi5jaGlsZDtcbn1cbmZ1bmN0aW9uIGFqKGEsIGIsIGMsIGQsIGUpIHtcbiAgaWYgKG51bGwgPT09IGEpIHtcbiAgICB2YXIgZiA9IGMudHlwZTtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZiAmJiAhYmooZikgJiYgdm9pZCAwID09PSBmLmRlZmF1bHRQcm9wcyAmJiBudWxsID09PSBjLmNvbXBhcmUgJiYgdm9pZCAwID09PSBjLmRlZmF1bHRQcm9wcykgcmV0dXJuIGIudGFnID0gMTUsIGIudHlwZSA9IGYsIGNqKGEsIGIsIGYsIGQsIGUpO1xuICAgIGEgPSB5aChjLnR5cGUsIG51bGwsIGQsIGIsIGIubW9kZSwgZSk7XG4gICAgYS5yZWYgPSBiLnJlZjtcbiAgICBhLnJldHVybiA9IGI7XG4gICAgcmV0dXJuIGIuY2hpbGQgPSBhO1xuICB9XG4gIGYgPSBhLmNoaWxkO1xuICBpZiAoMCA9PT0gKGEubGFuZXMgJiBlKSkge1xuICAgIHZhciBnID0gZi5tZW1vaXplZFByb3BzO1xuICAgIGMgPSBjLmNvbXBhcmU7XG4gICAgYyA9IG51bGwgIT09IGMgPyBjIDogSWU7XG4gICAgaWYgKGMoZywgZCkgJiYgYS5yZWYgPT09IGIucmVmKSByZXR1cm4gJGkoYSwgYiwgZSk7XG4gIH1cbiAgYi5mbGFncyB8PSAxO1xuICBhID0gd2goZiwgZCk7XG4gIGEucmVmID0gYi5yZWY7XG4gIGEucmV0dXJuID0gYjtcbiAgcmV0dXJuIGIuY2hpbGQgPSBhO1xufVxuZnVuY3Rpb24gY2ooYSwgYiwgYywgZCwgZSkge1xuICBpZiAobnVsbCAhPT0gYSkge1xuICAgIHZhciBmID0gYS5tZW1vaXplZFByb3BzO1xuICAgIGlmIChJZShmLCBkKSAmJiBhLnJlZiA9PT0gYi5yZWYpIGlmIChVZyA9ICExLCBiLnBlbmRpbmdQcm9wcyA9IGQgPSBmLCAwICE9PSAoYS5sYW5lcyAmIGUpKSAwICE9PSAoYS5mbGFncyAmIDEzMTA3MikgJiYgKFVnID0gITApO2Vsc2UgcmV0dXJuIGIubGFuZXMgPSBhLmxhbmVzLCAkaShhLCBiLCBlKTtcbiAgfVxuICByZXR1cm4gZGooYSwgYiwgYywgZCwgZSk7XG59XG5mdW5jdGlvbiBlaihhLCBiLCBjKSB7XG4gIHZhciBkID0gYi5wZW5kaW5nUHJvcHMsXG4gICAgZSA9IGQuY2hpbGRyZW4sXG4gICAgZiA9IG51bGwgIT09IGEgPyBhLm1lbW9pemVkU3RhdGUgOiBudWxsO1xuICBpZiAoXCJoaWRkZW5cIiA9PT0gZC5tb2RlKSB7XG4gICAgaWYgKDAgPT09IChiLm1vZGUgJiAxKSkgYi5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgYmFzZUxhbmVzOiAwLFxuICAgICAgY2FjaGVQb29sOiBudWxsLFxuICAgICAgdHJhbnNpdGlvbnM6IG51bGxcbiAgICB9LCBHKGZqLCBnaiksIGdqIHw9IGM7ZWxzZSB7XG4gICAgICBpZiAoMCA9PT0gKGMgJiAxMDczNzQxODI0KSkgcmV0dXJuIGEgPSBudWxsICE9PSBmID8gZi5iYXNlTGFuZXMgfCBjIDogYywgYi5sYW5lcyA9IGIuY2hpbGRMYW5lcyA9IDEwNzM3NDE4MjQsIGIubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICAgICAgYmFzZUxhbmVzOiBhLFxuICAgICAgICBjYWNoZVBvb2w6IG51bGwsXG4gICAgICAgIHRyYW5zaXRpb25zOiBudWxsXG4gICAgICB9LCBiLnVwZGF0ZVF1ZXVlID0gbnVsbCwgRyhmaiwgZ2opLCBnaiB8PSBhLCBudWxsO1xuICAgICAgYi5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgICBiYXNlTGFuZXM6IDAsXG4gICAgICAgIGNhY2hlUG9vbDogbnVsbCxcbiAgICAgICAgdHJhbnNpdGlvbnM6IG51bGxcbiAgICAgIH07XG4gICAgICBkID0gbnVsbCAhPT0gZiA/IGYuYmFzZUxhbmVzIDogYztcbiAgICAgIEcoZmosIGdqKTtcbiAgICAgIGdqIHw9IGQ7XG4gICAgfVxuICB9IGVsc2UgbnVsbCAhPT0gZiA/IChkID0gZi5iYXNlTGFuZXMgfCBjLCBiLm1lbW9pemVkU3RhdGUgPSBudWxsKSA6IGQgPSBjLCBHKGZqLCBnaiksIGdqIHw9IGQ7XG4gIFlpKGEsIGIsIGUsIGMpO1xuICByZXR1cm4gYi5jaGlsZDtcbn1cbmZ1bmN0aW9uIGhqKGEsIGIpIHtcbiAgdmFyIGMgPSBiLnJlZjtcbiAgaWYgKG51bGwgPT09IGEgJiYgbnVsbCAhPT0gYyB8fCBudWxsICE9PSBhICYmIGEucmVmICE9PSBjKSBiLmZsYWdzIHw9IDUxMiwgYi5mbGFncyB8PSAyMDk3MTUyO1xufVxuZnVuY3Rpb24gZGooYSwgYiwgYywgZCwgZSkge1xuICB2YXIgZiA9IFpmKGMpID8gWGYgOiBILmN1cnJlbnQ7XG4gIGYgPSBZZihiLCBmKTtcbiAgVGcoYiwgZSk7XG4gIGMgPSBYaChhLCBiLCBjLCBkLCBmLCBlKTtcbiAgZCA9IGJpKCk7XG4gIGlmIChudWxsICE9PSBhICYmICFVZykgcmV0dXJuIGIudXBkYXRlUXVldWUgPSBhLnVwZGF0ZVF1ZXVlLCBiLmZsYWdzICY9IC0yMDUzLCBhLmxhbmVzICY9IH5lLCAkaShhLCBiLCBlKTtcbiAgSSAmJiBkICYmIHZnKGIpO1xuICBiLmZsYWdzIHw9IDE7XG4gIFlpKGEsIGIsIGMsIGUpO1xuICByZXR1cm4gYi5jaGlsZDtcbn1cbmZ1bmN0aW9uIGlqKGEsIGIsIGMsIGQsIGUpIHtcbiAgaWYgKFpmKGMpKSB7XG4gICAgdmFyIGYgPSAhMDtcbiAgICBjZyhiKTtcbiAgfSBlbHNlIGYgPSAhMTtcbiAgVGcoYiwgZSk7XG4gIGlmIChudWxsID09PSBiLnN0YXRlTm9kZSkgamooYSwgYiksIHBoKGIsIGMsIGQpLCByaChiLCBjLCBkLCBlKSwgZCA9ICEwO2Vsc2UgaWYgKG51bGwgPT09IGEpIHtcbiAgICB2YXIgZyA9IGIuc3RhdGVOb2RlLFxuICAgICAgaCA9IGIubWVtb2l6ZWRQcm9wcztcbiAgICBnLnByb3BzID0gaDtcbiAgICB2YXIgayA9IGcuY29udGV4dCxcbiAgICAgIGwgPSBjLmNvbnRleHRUeXBlO1xuICAgIFwib2JqZWN0XCIgPT09IF90eXBlb2YobCkgJiYgbnVsbCAhPT0gbCA/IGwgPSBWZyhsKSA6IChsID0gWmYoYykgPyBYZiA6IEguY3VycmVudCwgbCA9IFlmKGIsIGwpKTtcbiAgICB2YXIgbSA9IGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLFxuICAgICAgcSA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIG0gfHwgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcbiAgICBxIHx8IFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIHx8IChoICE9PSBkIHx8IGsgIT09IGwpICYmIHFoKGIsIGcsIGQsIGwpO1xuICAgICRnID0gITE7XG4gICAgdmFyIHIgPSBiLm1lbW9pemVkU3RhdGU7XG4gICAgZy5zdGF0ZSA9IHI7XG4gICAgZ2goYiwgZCwgZywgZSk7XG4gICAgayA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICBoICE9PSBkIHx8IHIgIT09IGsgfHwgV2YuY3VycmVudCB8fCAkZyA/IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBtICYmIChraChiLCBjLCBtLCBkKSwgayA9IGIubWVtb2l6ZWRTdGF0ZSksIChoID0gJGcgfHwgb2goYiwgYywgaCwgZCwgciwgaywgbCkpID8gKHEgfHwgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50IHx8IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCAmJiBnLmNvbXBvbmVudFdpbGxNb3VudCgpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgJiYgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50ICYmIChiLmZsYWdzIHw9IDQxOTQzMDgpKSA6IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50ICYmIChiLmZsYWdzIHw9IDQxOTQzMDgpLCBiLm1lbW9pemVkUHJvcHMgPSBkLCBiLm1lbW9pemVkU3RhdGUgPSBrKSwgZy5wcm9wcyA9IGQsIGcuc3RhdGUgPSBrLCBnLmNvbnRleHQgPSBsLCBkID0gaCkgOiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCAmJiAoYi5mbGFncyB8PSA0MTk0MzA4KSwgZCA9ICExKTtcbiAgfSBlbHNlIHtcbiAgICBnID0gYi5zdGF0ZU5vZGU7XG4gICAgYmgoYSwgYik7XG4gICAgaCA9IGIubWVtb2l6ZWRQcm9wcztcbiAgICBsID0gYi50eXBlID09PSBiLmVsZW1lbnRUeXBlID8gaCA6IExnKGIudHlwZSwgaCk7XG4gICAgZy5wcm9wcyA9IGw7XG4gICAgcSA9IGIucGVuZGluZ1Byb3BzO1xuICAgIHIgPSBnLmNvbnRleHQ7XG4gICAgayA9IGMuY29udGV4dFR5cGU7XG4gICAgXCJvYmplY3RcIiA9PT0gX3R5cGVvZihrKSAmJiBudWxsICE9PSBrID8gayA9IFZnKGspIDogKGsgPSBaZihjKSA/IFhmIDogSC5jdXJyZW50LCBrID0gWWYoYiwgaykpO1xuICAgIHZhciB5ID0gYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gICAgKG0gPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB5IHx8IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpIHx8IFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIHx8IChoICE9PSBxIHx8IHIgIT09IGspICYmIHFoKGIsIGcsIGQsIGspO1xuICAgICRnID0gITE7XG4gICAgciA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICBnLnN0YXRlID0gcjtcbiAgICBnaChiLCBkLCBnLCBlKTtcbiAgICB2YXIgbiA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICBoICE9PSBxIHx8IHIgIT09IG4gfHwgV2YuY3VycmVudCB8fCAkZyA/IChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiB5ICYmIChraChiLCBjLCB5LCBkKSwgbiA9IGIubWVtb2l6ZWRTdGF0ZSksIChsID0gJGcgfHwgb2goYiwgYywgbCwgZCwgciwgbiwgaykgfHwgITEpID8gKG0gfHwgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSAmJiBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUgfHwgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSAmJiBnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCwgbiwgayksIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgJiYgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLCBuLCBrKSksIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlICYmIChiLmZsYWdzIHw9IDQpLCBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlICYmIChiLmZsYWdzIHw9IDEwMjQpKSA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSB8fCBoID09PSBhLm1lbW9pemVkUHJvcHMgJiYgciA9PT0gYS5tZW1vaXplZFN0YXRlIHx8IChiLmZsYWdzIHw9IDQpLCBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8IGggPT09IGEubWVtb2l6ZWRQcm9wcyAmJiByID09PSBhLm1lbW9pemVkU3RhdGUgfHwgKGIuZmxhZ3MgfD0gMTAyNCksIGIubWVtb2l6ZWRQcm9wcyA9IGQsIGIubWVtb2l6ZWRTdGF0ZSA9IG4pLCBnLnByb3BzID0gZCwgZy5zdGF0ZSA9IG4sIGcuY29udGV4dCA9IGssIGQgPSBsKSA6IChcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSB8fCBoID09PSBhLm1lbW9pemVkUHJvcHMgJiYgciA9PT0gYS5tZW1vaXplZFN0YXRlIHx8IChiLmZsYWdzIHw9IDQpLCBcImZ1bmN0aW9uXCIgIT09IHR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlIHx8IGggPT09IGEubWVtb2l6ZWRQcm9wcyAmJiByID09PSBhLm1lbW9pemVkU3RhdGUgfHwgKGIuZmxhZ3MgfD0gMTAyNCksIGQgPSAhMSk7XG4gIH1cbiAgcmV0dXJuIGtqKGEsIGIsIGMsIGQsIGYsIGUpO1xufVxuZnVuY3Rpb24ga2ooYSwgYiwgYywgZCwgZSwgZikge1xuICBoaihhLCBiKTtcbiAgdmFyIGcgPSAwICE9PSAoYi5mbGFncyAmIDEyOCk7XG4gIGlmICghZCAmJiAhZykgcmV0dXJuIGUgJiYgZGcoYiwgYywgITEpLCAkaShhLCBiLCBmKTtcbiAgZCA9IGIuc3RhdGVOb2RlO1xuICBYaS5jdXJyZW50ID0gYjtcbiAgdmFyIGggPSBnICYmIFwiZnVuY3Rpb25cIiAhPT0gdHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID8gbnVsbCA6IGQucmVuZGVyKCk7XG4gIGIuZmxhZ3MgfD0gMTtcbiAgbnVsbCAhPT0gYSAmJiBnID8gKGIuY2hpbGQgPSBCaChiLCBhLmNoaWxkLCBudWxsLCBmKSwgYi5jaGlsZCA9IEJoKGIsIG51bGwsIGgsIGYpKSA6IFlpKGEsIGIsIGgsIGYpO1xuICBiLm1lbW9pemVkU3RhdGUgPSBkLnN0YXRlO1xuICBlICYmIGRnKGIsIGMsICEwKTtcbiAgcmV0dXJuIGIuY2hpbGQ7XG59XG5mdW5jdGlvbiBsaihhKSB7XG4gIHZhciBiID0gYS5zdGF0ZU5vZGU7XG4gIGIucGVuZGluZ0NvbnRleHQgPyBhZyhhLCBiLnBlbmRpbmdDb250ZXh0LCBiLnBlbmRpbmdDb250ZXh0ICE9PSBiLmNvbnRleHQpIDogYi5jb250ZXh0ICYmIGFnKGEsIGIuY29udGV4dCwgITEpO1xuICBJaChhLCBiLmNvbnRhaW5lckluZm8pO1xufVxuZnVuY3Rpb24gbWooYSwgYiwgYywgZCwgZSkge1xuICBJZygpO1xuICBKZyhlKTtcbiAgYi5mbGFncyB8PSAyNTY7XG4gIFlpKGEsIGIsIGMsIGQpO1xuICByZXR1cm4gYi5jaGlsZDtcbn1cbnZhciBuaiA9IHtcbiAgZGVoeWRyYXRlZDogbnVsbCxcbiAgdHJlZUNvbnRleHQ6IG51bGwsXG4gIHJldHJ5TGFuZTogMFxufTtcbmZ1bmN0aW9uIG9qKGEpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlTGFuZXM6IGEsXG4gICAgY2FjaGVQb29sOiBudWxsLFxuICAgIHRyYW5zaXRpb25zOiBudWxsXG4gIH07XG59XG5mdW5jdGlvbiBwaihhLCBiLCBjKSB7XG4gIHZhciBkID0gYi5wZW5kaW5nUHJvcHMsXG4gICAgZSA9IE0uY3VycmVudCxcbiAgICBmID0gITEsXG4gICAgZyA9IDAgIT09IChiLmZsYWdzICYgMTI4KSxcbiAgICBoO1xuICAoaCA9IGcpIHx8IChoID0gbnVsbCAhPT0gYSAmJiBudWxsID09PSBhLm1lbW9pemVkU3RhdGUgPyAhMSA6IDAgIT09IChlICYgMikpO1xuICBpZiAoaCkgZiA9ICEwLCBiLmZsYWdzICY9IC0xMjk7ZWxzZSBpZiAobnVsbCA9PT0gYSB8fCBudWxsICE9PSBhLm1lbW9pemVkU3RhdGUpIGUgfD0gMTtcbiAgRyhNLCBlICYgMSk7XG4gIGlmIChudWxsID09PSBhKSB7XG4gICAgRWcoYik7XG4gICAgYSA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICBpZiAobnVsbCAhPT0gYSAmJiAoYSA9IGEuZGVoeWRyYXRlZCwgbnVsbCAhPT0gYSkpIHJldHVybiAwID09PSAoYi5tb2RlICYgMSkgPyBiLmxhbmVzID0gMSA6IFwiJCFcIiA9PT0gYS5kYXRhID8gYi5sYW5lcyA9IDggOiBiLmxhbmVzID0gMTA3Mzc0MTgyNCwgbnVsbDtcbiAgICBnID0gZC5jaGlsZHJlbjtcbiAgICBhID0gZC5mYWxsYmFjaztcbiAgICByZXR1cm4gZiA/IChkID0gYi5tb2RlLCBmID0gYi5jaGlsZCwgZyA9IHtcbiAgICAgIG1vZGU6IFwiaGlkZGVuXCIsXG4gICAgICBjaGlsZHJlbjogZ1xuICAgIH0sIDAgPT09IChkICYgMSkgJiYgbnVsbCAhPT0gZiA/IChmLmNoaWxkTGFuZXMgPSAwLCBmLnBlbmRpbmdQcm9wcyA9IGcpIDogZiA9IHFqKGcsIGQsIDAsIG51bGwpLCBhID0gQWgoYSwgZCwgYywgbnVsbCksIGYucmV0dXJuID0gYiwgYS5yZXR1cm4gPSBiLCBmLnNpYmxpbmcgPSBhLCBiLmNoaWxkID0gZiwgYi5jaGlsZC5tZW1vaXplZFN0YXRlID0gb2ooYyksIGIubWVtb2l6ZWRTdGF0ZSA9IG5qLCBhKSA6IHJqKGIsIGcpO1xuICB9XG4gIGUgPSBhLm1lbW9pemVkU3RhdGU7XG4gIGlmIChudWxsICE9PSBlICYmIChoID0gZS5kZWh5ZHJhdGVkLCBudWxsICE9PSBoKSkgcmV0dXJuIHNqKGEsIGIsIGcsIGQsIGgsIGUsIGMpO1xuICBpZiAoZikge1xuICAgIGYgPSBkLmZhbGxiYWNrO1xuICAgIGcgPSBiLm1vZGU7XG4gICAgZSA9IGEuY2hpbGQ7XG4gICAgaCA9IGUuc2libGluZztcbiAgICB2YXIgayA9IHtcbiAgICAgIG1vZGU6IFwiaGlkZGVuXCIsXG4gICAgICBjaGlsZHJlbjogZC5jaGlsZHJlblxuICAgIH07XG4gICAgMCA9PT0gKGcgJiAxKSAmJiBiLmNoaWxkICE9PSBlID8gKGQgPSBiLmNoaWxkLCBkLmNoaWxkTGFuZXMgPSAwLCBkLnBlbmRpbmdQcm9wcyA9IGssIGIuZGVsZXRpb25zID0gbnVsbCkgOiAoZCA9IHdoKGUsIGspLCBkLnN1YnRyZWVGbGFncyA9IGUuc3VidHJlZUZsYWdzICYgMTQ2ODAwNjQpO1xuICAgIG51bGwgIT09IGggPyBmID0gd2goaCwgZikgOiAoZiA9IEFoKGYsIGcsIGMsIG51bGwpLCBmLmZsYWdzIHw9IDIpO1xuICAgIGYucmV0dXJuID0gYjtcbiAgICBkLnJldHVybiA9IGI7XG4gICAgZC5zaWJsaW5nID0gZjtcbiAgICBiLmNoaWxkID0gZDtcbiAgICBkID0gZjtcbiAgICBmID0gYi5jaGlsZDtcbiAgICBnID0gYS5jaGlsZC5tZW1vaXplZFN0YXRlO1xuICAgIGcgPSBudWxsID09PSBnID8gb2ooYykgOiB7XG4gICAgICBiYXNlTGFuZXM6IGcuYmFzZUxhbmVzIHwgYyxcbiAgICAgIGNhY2hlUG9vbDogbnVsbCxcbiAgICAgIHRyYW5zaXRpb25zOiBnLnRyYW5zaXRpb25zXG4gICAgfTtcbiAgICBmLm1lbW9pemVkU3RhdGUgPSBnO1xuICAgIGYuY2hpbGRMYW5lcyA9IGEuY2hpbGRMYW5lcyAmIH5jO1xuICAgIGIubWVtb2l6ZWRTdGF0ZSA9IG5qO1xuICAgIHJldHVybiBkO1xuICB9XG4gIGYgPSBhLmNoaWxkO1xuICBhID0gZi5zaWJsaW5nO1xuICBkID0gd2goZiwge1xuICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgIGNoaWxkcmVuOiBkLmNoaWxkcmVuXG4gIH0pO1xuICAwID09PSAoYi5tb2RlICYgMSkgJiYgKGQubGFuZXMgPSBjKTtcbiAgZC5yZXR1cm4gPSBiO1xuICBkLnNpYmxpbmcgPSBudWxsO1xuICBudWxsICE9PSBhICYmIChjID0gYi5kZWxldGlvbnMsIG51bGwgPT09IGMgPyAoYi5kZWxldGlvbnMgPSBbYV0sIGIuZmxhZ3MgfD0gMTYpIDogYy5wdXNoKGEpKTtcbiAgYi5jaGlsZCA9IGQ7XG4gIGIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHJldHVybiBkO1xufVxuZnVuY3Rpb24gcmooYSwgYikge1xuICBiID0gcWooe1xuICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgIGNoaWxkcmVuOiBiXG4gIH0sIGEubW9kZSwgMCwgbnVsbCk7XG4gIGIucmV0dXJuID0gYTtcbiAgcmV0dXJuIGEuY2hpbGQgPSBiO1xufVxuZnVuY3Rpb24gdGooYSwgYiwgYywgZCkge1xuICBudWxsICE9PSBkICYmIEpnKGQpO1xuICBCaChiLCBhLmNoaWxkLCBudWxsLCBjKTtcbiAgYSA9IHJqKGIsIGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTtcbiAgYS5mbGFncyB8PSAyO1xuICBiLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIHNqKGEsIGIsIGMsIGQsIGUsIGYsIGcpIHtcbiAgaWYgKGMpIHtcbiAgICBpZiAoYi5mbGFncyAmIDI1NikgcmV0dXJuIGIuZmxhZ3MgJj0gLTI1NywgZCA9IExpKEVycm9yKHAoNDIyKSkpLCB0aihhLCBiLCBnLCBkKTtcbiAgICBpZiAobnVsbCAhPT0gYi5tZW1vaXplZFN0YXRlKSByZXR1cm4gYi5jaGlsZCA9IGEuY2hpbGQsIGIuZmxhZ3MgfD0gMTI4LCBudWxsO1xuICAgIGYgPSBkLmZhbGxiYWNrO1xuICAgIGUgPSBiLm1vZGU7XG4gICAgZCA9IHFqKHtcbiAgICAgIG1vZGU6IFwidmlzaWJsZVwiLFxuICAgICAgY2hpbGRyZW46IGQuY2hpbGRyZW5cbiAgICB9LCBlLCAwLCBudWxsKTtcbiAgICBmID0gQWgoZiwgZSwgZywgbnVsbCk7XG4gICAgZi5mbGFncyB8PSAyO1xuICAgIGQucmV0dXJuID0gYjtcbiAgICBmLnJldHVybiA9IGI7XG4gICAgZC5zaWJsaW5nID0gZjtcbiAgICBiLmNoaWxkID0gZDtcbiAgICAwICE9PSAoYi5tb2RlICYgMSkgJiYgQmgoYiwgYS5jaGlsZCwgbnVsbCwgZyk7XG4gICAgYi5jaGlsZC5tZW1vaXplZFN0YXRlID0gb2ooZyk7XG4gICAgYi5tZW1vaXplZFN0YXRlID0gbmo7XG4gICAgcmV0dXJuIGY7XG4gIH1cbiAgaWYgKDAgPT09IChiLm1vZGUgJiAxKSkgcmV0dXJuIHRqKGEsIGIsIGcsIG51bGwpO1xuICBpZiAoXCIkIVwiID09PSBlLmRhdGEpIHtcbiAgICBkID0gZS5uZXh0U2libGluZyAmJiBlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG4gICAgaWYgKGQpIHZhciBoID0gZC5kZ3N0O1xuICAgIGQgPSBoO1xuICAgIGYgPSBFcnJvcihwKDQxOSkpO1xuICAgIGQgPSBMaShmLCBkLCB2b2lkIDApO1xuICAgIHJldHVybiB0aihhLCBiLCBnLCBkKTtcbiAgfVxuICBoID0gMCAhPT0gKGcgJiBhLmNoaWxkTGFuZXMpO1xuICBpZiAoVWcgfHwgaCkge1xuICAgIGQgPSBSO1xuICAgIGlmIChudWxsICE9PSBkKSB7XG4gICAgICBzd2l0Y2ggKGcgJiAtZykge1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgZSA9IDI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgZSA9IDg7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNjQ6XG4gICAgICAgIGNhc2UgMTI4OlxuICAgICAgICBjYXNlIDI1NjpcbiAgICAgICAgY2FzZSA1MTI6XG4gICAgICAgIGNhc2UgMTAyNDpcbiAgICAgICAgY2FzZSAyMDQ4OlxuICAgICAgICBjYXNlIDQwOTY6XG4gICAgICAgIGNhc2UgODE5MjpcbiAgICAgICAgY2FzZSAxNjM4NDpcbiAgICAgICAgY2FzZSAzMjc2ODpcbiAgICAgICAgY2FzZSA2NTUzNjpcbiAgICAgICAgY2FzZSAxMzEwNzI6XG4gICAgICAgIGNhc2UgMjYyMTQ0OlxuICAgICAgICBjYXNlIDUyNDI4ODpcbiAgICAgICAgY2FzZSAxMDQ4NTc2OlxuICAgICAgICBjYXNlIDIwOTcxNTI6XG4gICAgICAgIGNhc2UgNDE5NDMwNDpcbiAgICAgICAgY2FzZSA4Mzg4NjA4OlxuICAgICAgICBjYXNlIDE2Nzc3MjE2OlxuICAgICAgICBjYXNlIDMzNTU0NDMyOlxuICAgICAgICBjYXNlIDY3MTA4ODY0OlxuICAgICAgICAgIGUgPSAzMjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgICAgICAgZSA9IDI2ODQzNTQ1NjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBlID0gMDtcbiAgICAgIH1cbiAgICAgIGUgPSAwICE9PSAoZSAmIChkLnN1c3BlbmRlZExhbmVzIHwgZykpID8gMCA6IGU7XG4gICAgICAwICE9PSBlICYmIGUgIT09IGYucmV0cnlMYW5lICYmIChmLnJldHJ5TGFuZSA9IGUsIFpnKGEsIGUpLCBtaChkLCBhLCBlLCAtMSkpO1xuICAgIH1cbiAgICB1aigpO1xuICAgIGQgPSBMaShFcnJvcihwKDQyMSkpKTtcbiAgICByZXR1cm4gdGooYSwgYiwgZywgZCk7XG4gIH1cbiAgaWYgKFwiJD9cIiA9PT0gZS5kYXRhKSByZXR1cm4gYi5mbGFncyB8PSAxMjgsIGIuY2hpbGQgPSBhLmNoaWxkLCBiID0gdmouYmluZChudWxsLCBhKSwgZS5fcmVhY3RSZXRyeSA9IGIsIG51bGw7XG4gIGEgPSBmLnRyZWVDb250ZXh0O1xuICB5ZyA9IExmKGUubmV4dFNpYmxpbmcpO1xuICB4ZyA9IGI7XG4gIEkgPSAhMDtcbiAgemcgPSBudWxsO1xuICBudWxsICE9PSBhICYmIChvZ1twZysrXSA9IHJnLCBvZ1twZysrXSA9IHNnLCBvZ1twZysrXSA9IHFnLCByZyA9IGEuaWQsIHNnID0gYS5vdmVyZmxvdywgcWcgPSBiKTtcbiAgYiA9IHJqKGIsIGQuY2hpbGRyZW4pO1xuICBiLmZsYWdzIHw9IDQwOTY7XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gd2ooYSwgYiwgYykge1xuICBhLmxhbmVzIHw9IGI7XG4gIHZhciBkID0gYS5hbHRlcm5hdGU7XG4gIG51bGwgIT09IGQgJiYgKGQubGFuZXMgfD0gYik7XG4gIFNnKGEucmV0dXJuLCBiLCBjKTtcbn1cbmZ1bmN0aW9uIHhqKGEsIGIsIGMsIGQsIGUpIHtcbiAgdmFyIGYgPSBhLm1lbW9pemVkU3RhdGU7XG4gIG51bGwgPT09IGYgPyBhLm1lbW9pemVkU3RhdGUgPSB7XG4gICAgaXNCYWNrd2FyZHM6IGIsXG4gICAgcmVuZGVyaW5nOiBudWxsLFxuICAgIHJlbmRlcmluZ1N0YXJ0VGltZTogMCxcbiAgICBsYXN0OiBkLFxuICAgIHRhaWw6IGMsXG4gICAgdGFpbE1vZGU6IGVcbiAgfSA6IChmLmlzQmFja3dhcmRzID0gYiwgZi5yZW5kZXJpbmcgPSBudWxsLCBmLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDAsIGYubGFzdCA9IGQsIGYudGFpbCA9IGMsIGYudGFpbE1vZGUgPSBlKTtcbn1cbmZ1bmN0aW9uIHlqKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSBiLnBlbmRpbmdQcm9wcyxcbiAgICBlID0gZC5yZXZlYWxPcmRlcixcbiAgICBmID0gZC50YWlsO1xuICBZaShhLCBiLCBkLmNoaWxkcmVuLCBjKTtcbiAgZCA9IE0uY3VycmVudDtcbiAgaWYgKDAgIT09IChkICYgMikpIGQgPSBkICYgMSB8IDIsIGIuZmxhZ3MgfD0gMTI4O2Vsc2Uge1xuICAgIGlmIChudWxsICE9PSBhICYmIDAgIT09IChhLmZsYWdzICYgMTI4KSkgYTogZm9yIChhID0gYi5jaGlsZDsgbnVsbCAhPT0gYTspIHtcbiAgICAgIGlmICgxMyA9PT0gYS50YWcpIG51bGwgIT09IGEubWVtb2l6ZWRTdGF0ZSAmJiB3aihhLCBjLCBiKTtlbHNlIGlmICgxOSA9PT0gYS50YWcpIHdqKGEsIGMsIGIpO2Vsc2UgaWYgKG51bGwgIT09IGEuY2hpbGQpIHtcbiAgICAgICAgYS5jaGlsZC5yZXR1cm4gPSBhO1xuICAgICAgICBhID0gYS5jaGlsZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoYSA9PT0gYikgYnJlYWsgYTtcbiAgICAgIGZvciAoOyBudWxsID09PSBhLnNpYmxpbmc7KSB7XG4gICAgICAgIGlmIChudWxsID09PSBhLnJldHVybiB8fCBhLnJldHVybiA9PT0gYikgYnJlYWsgYTtcbiAgICAgICAgYSA9IGEucmV0dXJuO1xuICAgICAgfVxuICAgICAgYS5zaWJsaW5nLnJldHVybiA9IGEucmV0dXJuO1xuICAgICAgYSA9IGEuc2libGluZztcbiAgICB9XG4gICAgZCAmPSAxO1xuICB9XG4gIEcoTSwgZCk7XG4gIGlmICgwID09PSAoYi5tb2RlICYgMSkpIGIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7ZWxzZSBzd2l0Y2ggKGUpIHtcbiAgICBjYXNlIFwiZm9yd2FyZHNcIjpcbiAgICAgIGMgPSBiLmNoaWxkO1xuICAgICAgZm9yIChlID0gbnVsbDsgbnVsbCAhPT0gYzspIGEgPSBjLmFsdGVybmF0ZSwgbnVsbCAhPT0gYSAmJiBudWxsID09PSBNaChhKSAmJiAoZSA9IGMpLCBjID0gYy5zaWJsaW5nO1xuICAgICAgYyA9IGU7XG4gICAgICBudWxsID09PSBjID8gKGUgPSBiLmNoaWxkLCBiLmNoaWxkID0gbnVsbCkgOiAoZSA9IGMuc2libGluZywgYy5zaWJsaW5nID0gbnVsbCk7XG4gICAgICB4aihiLCAhMSwgZSwgYywgZik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYmFja3dhcmRzXCI6XG4gICAgICBjID0gbnVsbDtcbiAgICAgIGUgPSBiLmNoaWxkO1xuICAgICAgZm9yIChiLmNoaWxkID0gbnVsbDsgbnVsbCAhPT0gZTspIHtcbiAgICAgICAgYSA9IGUuYWx0ZXJuYXRlO1xuICAgICAgICBpZiAobnVsbCAhPT0gYSAmJiBudWxsID09PSBNaChhKSkge1xuICAgICAgICAgIGIuY2hpbGQgPSBlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGEgPSBlLnNpYmxpbmc7XG4gICAgICAgIGUuc2libGluZyA9IGM7XG4gICAgICAgIGMgPSBlO1xuICAgICAgICBlID0gYTtcbiAgICAgIH1cbiAgICAgIHhqKGIsICEwLCBjLCBudWxsLCBmKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJ0b2dldGhlclwiOlxuICAgICAgeGooYiwgITEsIG51bGwsIG51bGwsIHZvaWQgMCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYi5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfVxuICByZXR1cm4gYi5jaGlsZDtcbn1cbmZ1bmN0aW9uIGpqKGEsIGIpIHtcbiAgMCA9PT0gKGIubW9kZSAmIDEpICYmIG51bGwgIT09IGEgJiYgKGEuYWx0ZXJuYXRlID0gbnVsbCwgYi5hbHRlcm5hdGUgPSBudWxsLCBiLmZsYWdzIHw9IDIpO1xufVxuZnVuY3Rpb24gJGkoYSwgYiwgYykge1xuICBudWxsICE9PSBhICYmIChiLmRlcGVuZGVuY2llcyA9IGEuZGVwZW5kZW5jaWVzKTtcbiAgaGggfD0gYi5sYW5lcztcbiAgaWYgKDAgPT09IChjICYgYi5jaGlsZExhbmVzKSkgcmV0dXJuIG51bGw7XG4gIGlmIChudWxsICE9PSBhICYmIGIuY2hpbGQgIT09IGEuY2hpbGQpIHRocm93IEVycm9yKHAoMTUzKSk7XG4gIGlmIChudWxsICE9PSBiLmNoaWxkKSB7XG4gICAgYSA9IGIuY2hpbGQ7XG4gICAgYyA9IHdoKGEsIGEucGVuZGluZ1Byb3BzKTtcbiAgICBiLmNoaWxkID0gYztcbiAgICBmb3IgKGMucmV0dXJuID0gYjsgbnVsbCAhPT0gYS5zaWJsaW5nOykgYSA9IGEuc2libGluZywgYyA9IGMuc2libGluZyA9IHdoKGEsIGEucGVuZGluZ1Byb3BzKSwgYy5yZXR1cm4gPSBiO1xuICAgIGMuc2libGluZyA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGIuY2hpbGQ7XG59XG5mdW5jdGlvbiB6aihhLCBiLCBjKSB7XG4gIHN3aXRjaCAoYi50YWcpIHtcbiAgICBjYXNlIDM6XG4gICAgICBsaihiKTtcbiAgICAgIElnKCk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDU6XG4gICAgICBLaChiKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIFpmKGIudHlwZSkgJiYgY2coYik7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBJaChiLCBiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTA6XG4gICAgICB2YXIgZCA9IGIudHlwZS5fY29udGV4dCxcbiAgICAgICAgZSA9IGIubWVtb2l6ZWRQcm9wcy52YWx1ZTtcbiAgICAgIEcoTWcsIGQuX2N1cnJlbnRWYWx1ZSk7XG4gICAgICBkLl9jdXJyZW50VmFsdWUgPSBlO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIGQgPSBiLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gZCkge1xuICAgICAgICBpZiAobnVsbCAhPT0gZC5kZWh5ZHJhdGVkKSByZXR1cm4gRyhNLCBNLmN1cnJlbnQgJiAxKSwgYi5mbGFncyB8PSAxMjgsIG51bGw7XG4gICAgICAgIGlmICgwICE9PSAoYyAmIGIuY2hpbGQuY2hpbGRMYW5lcykpIHJldHVybiBwaihhLCBiLCBjKTtcbiAgICAgICAgRyhNLCBNLmN1cnJlbnQgJiAxKTtcbiAgICAgICAgYSA9ICRpKGEsIGIsIGMpO1xuICAgICAgICByZXR1cm4gbnVsbCAhPT0gYSA/IGEuc2libGluZyA6IG51bGw7XG4gICAgICB9XG4gICAgICBHKE0sIE0uY3VycmVudCAmIDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxOTpcbiAgICAgIGQgPSAwICE9PSAoYyAmIGIuY2hpbGRMYW5lcyk7XG4gICAgICBpZiAoMCAhPT0gKGEuZmxhZ3MgJiAxMjgpKSB7XG4gICAgICAgIGlmIChkKSByZXR1cm4geWooYSwgYiwgYyk7XG4gICAgICAgIGIuZmxhZ3MgfD0gMTI4O1xuICAgICAgfVxuICAgICAgZSA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIG51bGwgIT09IGUgJiYgKGUucmVuZGVyaW5nID0gbnVsbCwgZS50YWlsID0gbnVsbCwgZS5sYXN0RWZmZWN0ID0gbnVsbCk7XG4gICAgICBHKE0sIE0uY3VycmVudCk7XG4gICAgICBpZiAoZCkgYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gYi5sYW5lcyA9IDAsIGVqKGEsIGIsIGMpO1xuICB9XG4gIHJldHVybiAkaShhLCBiLCBjKTtcbn1cbnZhciBBaiwgQmosIENqLCBEajtcbkFqID0gZnVuY3Rpb24gQWooYSwgYikge1xuICBmb3IgKHZhciBjID0gYi5jaGlsZDsgbnVsbCAhPT0gYzspIHtcbiAgICBpZiAoNSA9PT0gYy50YWcgfHwgNiA9PT0gYy50YWcpIGEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYgKDQgIT09IGMudGFnICYmIG51bGwgIT09IGMuY2hpbGQpIHtcbiAgICAgIGMuY2hpbGQucmV0dXJuID0gYztcbiAgICAgIGMgPSBjLmNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChjID09PSBiKSBicmVhaztcbiAgICBmb3IgKDsgbnVsbCA9PT0gYy5zaWJsaW5nOykge1xuICAgICAgaWYgKG51bGwgPT09IGMucmV0dXJuIHx8IGMucmV0dXJuID09PSBiKSByZXR1cm47XG4gICAgICBjID0gYy5yZXR1cm47XG4gICAgfVxuICAgIGMuc2libGluZy5yZXR1cm4gPSBjLnJldHVybjtcbiAgICBjID0gYy5zaWJsaW5nO1xuICB9XG59O1xuQmogPSBmdW5jdGlvbiBCaigpIHt9O1xuQ2ogPSBmdW5jdGlvbiBDaihhLCBiLCBjLCBkKSB7XG4gIHZhciBlID0gYS5tZW1vaXplZFByb3BzO1xuICBpZiAoZSAhPT0gZCkge1xuICAgIGEgPSBiLnN0YXRlTm9kZTtcbiAgICBIaChFaC5jdXJyZW50KTtcbiAgICB2YXIgZiA9IG51bGw7XG4gICAgc3dpdGNoIChjKSB7XG4gICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgZSA9IFlhKGEsIGUpO1xuICAgICAgICBkID0gWWEoYSwgZCk7XG4gICAgICAgIGYgPSBbXTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgIGUgPSBBKHt9LCBlLCB7XG4gICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICB9KTtcbiAgICAgICAgZCA9IEEoe30sIGQsIHtcbiAgICAgICAgICB2YWx1ZTogdm9pZCAwXG4gICAgICAgIH0pO1xuICAgICAgICBmID0gW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgIGUgPSBnYihhLCBlKTtcbiAgICAgICAgZCA9IGdiKGEsIGQpO1xuICAgICAgICBmID0gW107XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgZS5vbkNsaWNrICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGQub25DbGljayAmJiAoYS5vbmNsaWNrID0gQmYpO1xuICAgIH1cbiAgICB1YihjLCBkKTtcbiAgICB2YXIgZztcbiAgICBjID0gbnVsbDtcbiAgICBmb3IgKGwgaW4gZSkgaWYgKCFkLmhhc093blByb3BlcnR5KGwpICYmIGUuaGFzT3duUHJvcGVydHkobCkgJiYgbnVsbCAhPSBlW2xdKSBpZiAoXCJzdHlsZVwiID09PSBsKSB7XG4gICAgICB2YXIgaCA9IGVbbF07XG4gICAgICBmb3IgKGcgaW4gaCkgaC5oYXNPd25Qcm9wZXJ0eShnKSAmJiAoYyB8fCAoYyA9IHt9KSwgY1tnXSA9IFwiXCIpO1xuICAgIH0gZWxzZSBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIgIT09IGwgJiYgXCJjaGlsZHJlblwiICE9PSBsICYmIFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIgIT09IGwgJiYgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiAhPT0gbCAmJiBcImF1dG9Gb2N1c1wiICE9PSBsICYmIChlYS5oYXNPd25Qcm9wZXJ0eShsKSA/IGYgfHwgKGYgPSBbXSkgOiAoZiA9IGYgfHwgW10pLnB1c2gobCwgbnVsbCkpO1xuICAgIGZvciAobCBpbiBkKSB7XG4gICAgICB2YXIgayA9IGRbbF07XG4gICAgICBoID0gbnVsbCAhPSBlID8gZVtsXSA6IHZvaWQgMDtcbiAgICAgIGlmIChkLmhhc093blByb3BlcnR5KGwpICYmIGsgIT09IGggJiYgKG51bGwgIT0gayB8fCBudWxsICE9IGgpKSBpZiAoXCJzdHlsZVwiID09PSBsKSB7XG4gICAgICAgIGlmIChoKSB7XG4gICAgICAgICAgZm9yIChnIGluIGgpICFoLmhhc093blByb3BlcnR5KGcpIHx8IGsgJiYgay5oYXNPd25Qcm9wZXJ0eShnKSB8fCAoYyB8fCAoYyA9IHt9KSwgY1tnXSA9IFwiXCIpO1xuICAgICAgICAgIGZvciAoZyBpbiBrKSBrLmhhc093blByb3BlcnR5KGcpICYmIGhbZ10gIT09IGtbZ10gJiYgKGMgfHwgKGMgPSB7fSksIGNbZ10gPSBrW2ddKTtcbiAgICAgICAgfSBlbHNlIGMgfHwgKGYgfHwgKGYgPSBbXSksIGYucHVzaChsLCBjKSksIGMgPSBrO1xuICAgICAgfSBlbHNlIFwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiA9PT0gbCA/IChrID0gayA/IGsuX19odG1sIDogdm9pZCAwLCBoID0gaCA/IGguX19odG1sIDogdm9pZCAwLCBudWxsICE9IGsgJiYgaCAhPT0gayAmJiAoZiA9IGYgfHwgW10pLnB1c2gobCwgaykpIDogXCJjaGlsZHJlblwiID09PSBsID8gXCJzdHJpbmdcIiAhPT0gdHlwZW9mIGsgJiYgXCJudW1iZXJcIiAhPT0gdHlwZW9mIGsgfHwgKGYgPSBmIHx8IFtdKS5wdXNoKGwsIFwiXCIgKyBrKSA6IFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIgIT09IGwgJiYgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiAhPT0gbCAmJiAoZWEuaGFzT3duUHJvcGVydHkobCkgPyAobnVsbCAhPSBrICYmIFwib25TY3JvbGxcIiA9PT0gbCAmJiBEKFwic2Nyb2xsXCIsIGEpLCBmIHx8IGggPT09IGsgfHwgKGYgPSBbXSkpIDogKGYgPSBmIHx8IFtdKS5wdXNoKGwsIGspKTtcbiAgICB9XG4gICAgYyAmJiAoZiA9IGYgfHwgW10pLnB1c2goXCJzdHlsZVwiLCBjKTtcbiAgICB2YXIgbCA9IGY7XG4gICAgaWYgKGIudXBkYXRlUXVldWUgPSBsKSBiLmZsYWdzIHw9IDQ7XG4gIH1cbn07XG5EaiA9IGZ1bmN0aW9uIERqKGEsIGIsIGMsIGQpIHtcbiAgYyAhPT0gZCAmJiAoYi5mbGFncyB8PSA0KTtcbn07XG5mdW5jdGlvbiBFaihhLCBiKSB7XG4gIGlmICghSSkgc3dpdGNoIChhLnRhaWxNb2RlKSB7XG4gICAgY2FzZSBcImhpZGRlblwiOlxuICAgICAgYiA9IGEudGFpbDtcbiAgICAgIGZvciAodmFyIGMgPSBudWxsOyBudWxsICE9PSBiOykgbnVsbCAhPT0gYi5hbHRlcm5hdGUgJiYgKGMgPSBiKSwgYiA9IGIuc2libGluZztcbiAgICAgIG51bGwgPT09IGMgPyBhLnRhaWwgPSBudWxsIDogYy5zaWJsaW5nID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjb2xsYXBzZWRcIjpcbiAgICAgIGMgPSBhLnRhaWw7XG4gICAgICBmb3IgKHZhciBkID0gbnVsbDsgbnVsbCAhPT0gYzspIG51bGwgIT09IGMuYWx0ZXJuYXRlICYmIChkID0gYyksIGMgPSBjLnNpYmxpbmc7XG4gICAgICBudWxsID09PSBkID8gYiB8fCBudWxsID09PSBhLnRhaWwgPyBhLnRhaWwgPSBudWxsIDogYS50YWlsLnNpYmxpbmcgPSBudWxsIDogZC5zaWJsaW5nID0gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gUyhhKSB7XG4gIHZhciBiID0gbnVsbCAhPT0gYS5hbHRlcm5hdGUgJiYgYS5hbHRlcm5hdGUuY2hpbGQgPT09IGEuY2hpbGQsXG4gICAgYyA9IDAsXG4gICAgZCA9IDA7XG4gIGlmIChiKSBmb3IgKHZhciBlID0gYS5jaGlsZDsgbnVsbCAhPT0gZTspIGMgfD0gZS5sYW5lcyB8IGUuY2hpbGRMYW5lcywgZCB8PSBlLnN1YnRyZWVGbGFncyAmIDE0NjgwMDY0LCBkIHw9IGUuZmxhZ3MgJiAxNDY4MDA2NCwgZS5yZXR1cm4gPSBhLCBlID0gZS5zaWJsaW5nO2Vsc2UgZm9yIChlID0gYS5jaGlsZDsgbnVsbCAhPT0gZTspIGMgfD0gZS5sYW5lcyB8IGUuY2hpbGRMYW5lcywgZCB8PSBlLnN1YnRyZWVGbGFncywgZCB8PSBlLmZsYWdzLCBlLnJldHVybiA9IGEsIGUgPSBlLnNpYmxpbmc7XG4gIGEuc3VidHJlZUZsYWdzIHw9IGQ7XG4gIGEuY2hpbGRMYW5lcyA9IGM7XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gRmooYSwgYiwgYykge1xuICB2YXIgZCA9IGIucGVuZGluZ1Byb3BzO1xuICB3ZyhiKTtcbiAgc3dpdGNoIChiLnRhZykge1xuICAgIGNhc2UgMjpcbiAgICBjYXNlIDE2OlxuICAgIGNhc2UgMTU6XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSA3OlxuICAgIGNhc2UgODpcbiAgICBjYXNlIDEyOlxuICAgIGNhc2UgOTpcbiAgICBjYXNlIDE0OlxuICAgICAgcmV0dXJuIFMoYiksIG51bGw7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIFpmKGIudHlwZSkgJiYgJGYoKSwgUyhiKSwgbnVsbDtcbiAgICBjYXNlIDM6XG4gICAgICBkID0gYi5zdGF0ZU5vZGU7XG4gICAgICBKaCgpO1xuICAgICAgRShXZik7XG4gICAgICBFKEgpO1xuICAgICAgT2goKTtcbiAgICAgIGQucGVuZGluZ0NvbnRleHQgJiYgKGQuY29udGV4dCA9IGQucGVuZGluZ0NvbnRleHQsIGQucGVuZGluZ0NvbnRleHQgPSBudWxsKTtcbiAgICAgIGlmIChudWxsID09PSBhIHx8IG51bGwgPT09IGEuY2hpbGQpIEdnKGIpID8gYi5mbGFncyB8PSA0IDogbnVsbCA9PT0gYSB8fCBhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkICYmIDAgPT09IChiLmZsYWdzICYgMjU2KSB8fCAoYi5mbGFncyB8PSAxMDI0LCBudWxsICE9PSB6ZyAmJiAoR2ooemcpLCB6ZyA9IG51bGwpKTtcbiAgICAgIEJqKGEsIGIpO1xuICAgICAgUyhiKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgNTpcbiAgICAgIExoKGIpO1xuICAgICAgdmFyIGUgPSBIaChHaC5jdXJyZW50KTtcbiAgICAgIGMgPSBiLnR5cGU7XG4gICAgICBpZiAobnVsbCAhPT0gYSAmJiBudWxsICE9IGIuc3RhdGVOb2RlKSBDaihhLCBiLCBjLCBkLCBlKSwgYS5yZWYgIT09IGIucmVmICYmIChiLmZsYWdzIHw9IDUxMiwgYi5mbGFncyB8PSAyMDk3MTUyKTtlbHNlIHtcbiAgICAgICAgaWYgKCFkKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGIuc3RhdGVOb2RlKSB0aHJvdyBFcnJvcihwKDE2NikpO1xuICAgICAgICAgIFMoYik7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgYSA9IEhoKEVoLmN1cnJlbnQpO1xuICAgICAgICBpZiAoR2coYikpIHtcbiAgICAgICAgICBkID0gYi5zdGF0ZU5vZGU7XG4gICAgICAgICAgYyA9IGIudHlwZTtcbiAgICAgICAgICB2YXIgZiA9IGIubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICBkW09mXSA9IGI7XG4gICAgICAgICAgZFtQZl0gPSBmO1xuICAgICAgICAgIGEgPSAwICE9PSAoYi5tb2RlICYgMSk7XG4gICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIFwiZGlhbG9nXCI6XG4gICAgICAgICAgICAgIEQoXCJjYW5jZWxcIiwgZCk7XG4gICAgICAgICAgICAgIEQoXCJjbG9zZVwiLCBkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaWZyYW1lXCI6XG4gICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICBjYXNlIFwiZW1iZWRcIjpcbiAgICAgICAgICAgICAgRChcImxvYWRcIiwgZCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZpZGVvXCI6XG4gICAgICAgICAgICBjYXNlIFwiYXVkaW9cIjpcbiAgICAgICAgICAgICAgZm9yIChlID0gMDsgZSA8IGxmLmxlbmd0aDsgZSsrKSBEKGxmW2VdLCBkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic291cmNlXCI6XG4gICAgICAgICAgICAgIEQoXCJlcnJvclwiLCBkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgICAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgICAgICAgIEQoXCJlcnJvclwiLCBkKTtcbiAgICAgICAgICAgICAgRChcImxvYWRcIiwgZCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImRldGFpbHNcIjpcbiAgICAgICAgICAgICAgRChcInRvZ2dsZVwiLCBkKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICAgICAgWmEoZCwgZik7XG4gICAgICAgICAgICAgIEQoXCJpbnZhbGlkXCIsIGQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgZC5fd3JhcHBlclN0YXRlID0ge1xuICAgICAgICAgICAgICAgIHdhc011bHRpcGxlOiAhIWYubXVsdGlwbGVcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgRChcImludmFsaWRcIiwgZCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInRleHRhcmVhXCI6XG4gICAgICAgICAgICAgIGhiKGQsIGYpLCBEKFwiaW52YWxpZFwiLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdWIoYywgZik7XG4gICAgICAgICAgZSA9IG51bGw7XG4gICAgICAgICAgZm9yICh2YXIgZyBpbiBmKSBpZiAoZi5oYXNPd25Qcm9wZXJ0eShnKSkge1xuICAgICAgICAgICAgdmFyIGggPSBmW2ddO1xuICAgICAgICAgICAgXCJjaGlsZHJlblwiID09PSBnID8gXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGggPyBkLnRleHRDb250ZW50ICE9PSBoICYmICghMCAhPT0gZi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgJiYgQWYoZC50ZXh0Q29udGVudCwgaCwgYSksIGUgPSBbXCJjaGlsZHJlblwiLCBoXSkgOiBcIm51bWJlclwiID09PSB0eXBlb2YgaCAmJiBkLnRleHRDb250ZW50ICE9PSBcIlwiICsgaCAmJiAoITAgIT09IGYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nICYmIEFmKGQudGV4dENvbnRlbnQsIGgsIGEpLCBlID0gW1wiY2hpbGRyZW5cIiwgXCJcIiArIGhdKSA6IGVhLmhhc093blByb3BlcnR5KGcpICYmIG51bGwgIT0gaCAmJiBcIm9uU2Nyb2xsXCIgPT09IGcgJiYgRChcInNjcm9sbFwiLCBkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICAgICAgVmEoZCk7XG4gICAgICAgICAgICAgIGRiKGQsIGYsICEwKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgVmEoZCk7XG4gICAgICAgICAgICAgIGpiKGQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBmLm9uQ2xpY2sgJiYgKGQub25jbGljayA9IEJmKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZCA9IGU7XG4gICAgICAgICAgYi51cGRhdGVRdWV1ZSA9IGQ7XG4gICAgICAgICAgbnVsbCAhPT0gZCAmJiAoYi5mbGFncyB8PSA0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnID0gOSA9PT0gZS5ub2RlVHlwZSA/IGUgOiBlLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgPT09IGEgJiYgKGEgPSBrYihjKSk7XG4gICAgICAgICAgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgPT09IGEgPyBcInNjcmlwdFwiID09PSBjID8gKGEgPSBnLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIGEuaW5uZXJIVE1MID0gXCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIiwgYSA9IGEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSkgOiBcInN0cmluZ1wiID09PSB0eXBlb2YgZC5pcyA/IGEgPSBnLmNyZWF0ZUVsZW1lbnQoYywge1xuICAgICAgICAgICAgaXM6IGQuaXNcbiAgICAgICAgICB9KSA6IChhID0gZy5jcmVhdGVFbGVtZW50KGMpLCBcInNlbGVjdFwiID09PSBjICYmIChnID0gYSwgZC5tdWx0aXBsZSA/IGcubXVsdGlwbGUgPSAhMCA6IGQuc2l6ZSAmJiAoZy5zaXplID0gZC5zaXplKSkpIDogYSA9IGcuY3JlYXRlRWxlbWVudE5TKGEsIGMpO1xuICAgICAgICAgIGFbT2ZdID0gYjtcbiAgICAgICAgICBhW1BmXSA9IGQ7XG4gICAgICAgICAgQWooYSwgYiwgITEsICExKTtcbiAgICAgICAgICBiLnN0YXRlTm9kZSA9IGE7XG4gICAgICAgICAgYToge1xuICAgICAgICAgICAgZyA9IHZiKGMsIGQpO1xuICAgICAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICAgIGNhc2UgXCJkaWFsb2dcIjpcbiAgICAgICAgICAgICAgICBEKFwiY2FuY2VsXCIsIGEpO1xuICAgICAgICAgICAgICAgIEQoXCJjbG9zZVwiLCBhKTtcbiAgICAgICAgICAgICAgICBlID0gZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImlmcmFtZVwiOlxuICAgICAgICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJlbWJlZFwiOlxuICAgICAgICAgICAgICAgIEQoXCJsb2FkXCIsIGEpO1xuICAgICAgICAgICAgICAgIGUgPSBkO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidmlkZW9cIjpcbiAgICAgICAgICAgICAgY2FzZSBcImF1ZGlvXCI6XG4gICAgICAgICAgICAgICAgZm9yIChlID0gMDsgZSA8IGxmLmxlbmd0aDsgZSsrKSBEKGxmW2VdLCBhKTtcbiAgICAgICAgICAgICAgICBlID0gZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcInNvdXJjZVwiOlxuICAgICAgICAgICAgICAgIEQoXCJlcnJvclwiLCBhKTtcbiAgICAgICAgICAgICAgICBlID0gZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICAgICAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgICAgICAgICAgY2FzZSBcImxpbmtcIjpcbiAgICAgICAgICAgICAgICBEKFwiZXJyb3JcIiwgYSk7XG4gICAgICAgICAgICAgICAgRChcImxvYWRcIiwgYSk7XG4gICAgICAgICAgICAgICAgZSA9IGQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJkZXRhaWxzXCI6XG4gICAgICAgICAgICAgICAgRChcInRvZ2dsZVwiLCBhKTtcbiAgICAgICAgICAgICAgICBlID0gZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICAgICAgWmEoYSwgZCk7XG4gICAgICAgICAgICAgICAgZSA9IFlhKGEsIGQpO1xuICAgICAgICAgICAgICAgIEQoXCJpbnZhbGlkXCIsIGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwib3B0aW9uXCI6XG4gICAgICAgICAgICAgICAgZSA9IGQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICBhLl93cmFwcGVyU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICB3YXNNdWx0aXBsZTogISFkLm11bHRpcGxlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBlID0gQSh7fSwgZCwge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IHZvaWQgMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIEQoXCJpbnZhbGlkXCIsIGEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgICBoYihhLCBkKTtcbiAgICAgICAgICAgICAgICBlID0gZ2IoYSwgZCk7XG4gICAgICAgICAgICAgICAgRChcImludmFsaWRcIiwgYSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZSA9IGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1YihjLCBlKTtcbiAgICAgICAgICAgIGggPSBlO1xuICAgICAgICAgICAgZm9yIChmIGluIGgpIGlmIChoLmhhc093blByb3BlcnR5KGYpKSB7XG4gICAgICAgICAgICAgIHZhciBrID0gaFtmXTtcbiAgICAgICAgICAgICAgXCJzdHlsZVwiID09PSBmID8gc2IoYSwgaykgOiBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIgPT09IGYgPyAoayA9IGsgPyBrLl9faHRtbCA6IHZvaWQgMCwgbnVsbCAhPSBrICYmIG5iKGEsIGspKSA6IFwiY2hpbGRyZW5cIiA9PT0gZiA/IFwic3RyaW5nXCIgPT09IHR5cGVvZiBrID8gKFwidGV4dGFyZWFcIiAhPT0gYyB8fCBcIlwiICE9PSBrKSAmJiBvYihhLCBrKSA6IFwibnVtYmVyXCIgPT09IHR5cGVvZiBrICYmIG9iKGEsIFwiXCIgKyBrKSA6IFwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIgIT09IGYgJiYgXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiAhPT0gZiAmJiBcImF1dG9Gb2N1c1wiICE9PSBmICYmIChlYS5oYXNPd25Qcm9wZXJ0eShmKSA/IG51bGwgIT0gayAmJiBcIm9uU2Nyb2xsXCIgPT09IGYgJiYgRChcInNjcm9sbFwiLCBhKSA6IG51bGwgIT0gayAmJiB0YShhLCBmLCBrLCBnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICAgICAgVmEoYSk7XG4gICAgICAgICAgICAgICAgZGIoYSwgZCwgITEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgICBWYShhKTtcbiAgICAgICAgICAgICAgICBqYihhKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxuICAgICAgICAgICAgICAgIG51bGwgIT0gZC52YWx1ZSAmJiBhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwiXCIgKyBTYShkLnZhbHVlKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcbiAgICAgICAgICAgICAgICBhLm11bHRpcGxlID0gISFkLm11bHRpcGxlO1xuICAgICAgICAgICAgICAgIGYgPSBkLnZhbHVlO1xuICAgICAgICAgICAgICAgIG51bGwgIT0gZiA/IGZiKGEsICEhZC5tdWx0aXBsZSwgZiwgITEpIDogbnVsbCAhPSBkLmRlZmF1bHRWYWx1ZSAmJiBmYihhLCAhIWQubXVsdGlwbGUsIGQuZGVmYXVsdFZhbHVlLCAhMCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZS5vbkNsaWNrICYmIChhLm9uY2xpY2sgPSBCZik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICAgICAgY2FzZSBcImJ1dHRvblwiOlxuICAgICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgICAgICAgICAgICBkID0gISFkLmF1dG9Gb2N1cztcbiAgICAgICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgICAgICBjYXNlIFwiaW1nXCI6XG4gICAgICAgICAgICAgICAgZCA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgZCA9ICExO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBkICYmIChiLmZsYWdzIHw9IDQpO1xuICAgICAgICB9XG4gICAgICAgIG51bGwgIT09IGIucmVmICYmIChiLmZsYWdzIHw9IDUxMiwgYi5mbGFncyB8PSAyMDk3MTUyKTtcbiAgICAgIH1cbiAgICAgIFMoYik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDY6XG4gICAgICBpZiAoYSAmJiBudWxsICE9IGIuc3RhdGVOb2RlKSBEaihhLCBiLCBhLm1lbW9pemVkUHJvcHMsIGQpO2Vsc2Uge1xuICAgICAgICBpZiAoXCJzdHJpbmdcIiAhPT0gdHlwZW9mIGQgJiYgbnVsbCA9PT0gYi5zdGF0ZU5vZGUpIHRocm93IEVycm9yKHAoMTY2KSk7XG4gICAgICAgIGMgPSBIaChHaC5jdXJyZW50KTtcbiAgICAgICAgSGgoRWguY3VycmVudCk7XG4gICAgICAgIGlmIChHZyhiKSkge1xuICAgICAgICAgIGQgPSBiLnN0YXRlTm9kZTtcbiAgICAgICAgICBjID0gYi5tZW1vaXplZFByb3BzO1xuICAgICAgICAgIGRbT2ZdID0gYjtcbiAgICAgICAgICBpZiAoZiA9IGQubm9kZVZhbHVlICE9PSBjKSBpZiAoYSA9IHhnLCBudWxsICE9PSBhKSBzd2l0Y2ggKGEudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIEFmKGQubm9kZVZhbHVlLCBjLCAwICE9PSAoYS5tb2RlICYgMSkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgITAgIT09IGEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgJiYgQWYoZC5ub2RlVmFsdWUsIGMsIDAgIT09IChhLm1vZGUgJiAxKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGYgJiYgKGIuZmxhZ3MgfD0gNCk7XG4gICAgICAgIH0gZWxzZSBkID0gKDkgPT09IGMubm9kZVR5cGUgPyBjIDogYy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSwgZFtPZl0gPSBiLCBiLnN0YXRlTm9kZSA9IGQ7XG4gICAgICB9XG4gICAgICBTKGIpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgY2FzZSAxMzpcbiAgICAgIEUoTSk7XG4gICAgICBkID0gYi5tZW1vaXplZFN0YXRlO1xuICAgICAgaWYgKG51bGwgPT09IGEgfHwgbnVsbCAhPT0gYS5tZW1vaXplZFN0YXRlICYmIG51bGwgIT09IGEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKSB7XG4gICAgICAgIGlmIChJICYmIG51bGwgIT09IHlnICYmIDAgIT09IChiLm1vZGUgJiAxKSAmJiAwID09PSAoYi5mbGFncyAmIDEyOCkpIEhnKCksIElnKCksIGIuZmxhZ3MgfD0gOTg1NjAsIGYgPSAhMTtlbHNlIGlmIChmID0gR2coYiksIG51bGwgIT09IGQgJiYgbnVsbCAhPT0gZC5kZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgaWYgKG51bGwgPT09IGEpIHtcbiAgICAgICAgICAgIGlmICghZikgdGhyb3cgRXJyb3IocCgzMTgpKTtcbiAgICAgICAgICAgIGYgPSBiLm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgICBmID0gbnVsbCAhPT0gZiA/IGYuZGVoeWRyYXRlZCA6IG51bGw7XG4gICAgICAgICAgICBpZiAoIWYpIHRocm93IEVycm9yKHAoMzE3KSk7XG4gICAgICAgICAgICBmW09mXSA9IGI7XG4gICAgICAgICAgfSBlbHNlIElnKCksIDAgPT09IChiLmZsYWdzICYgMTI4KSAmJiAoYi5tZW1vaXplZFN0YXRlID0gbnVsbCksIGIuZmxhZ3MgfD0gNDtcbiAgICAgICAgICBTKGIpO1xuICAgICAgICAgIGYgPSAhMTtcbiAgICAgICAgfSBlbHNlIG51bGwgIT09IHpnICYmIChHaih6ZyksIHpnID0gbnVsbCksIGYgPSAhMDtcbiAgICAgICAgaWYgKCFmKSByZXR1cm4gYi5mbGFncyAmIDY1NTM2ID8gYiA6IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoMCAhPT0gKGIuZmxhZ3MgJiAxMjgpKSByZXR1cm4gYi5sYW5lcyA9IGMsIGI7XG4gICAgICBkID0gbnVsbCAhPT0gZDtcbiAgICAgIGQgIT09IChudWxsICE9PSBhICYmIG51bGwgIT09IGEubWVtb2l6ZWRTdGF0ZSkgJiYgZCAmJiAoYi5jaGlsZC5mbGFncyB8PSA4MTkyLCAwICE9PSAoYi5tb2RlICYgMSkgJiYgKG51bGwgPT09IGEgfHwgMCAhPT0gKE0uY3VycmVudCAmIDEpID8gMCA9PT0gVCAmJiAoVCA9IDMpIDogdWooKSkpO1xuICAgICAgbnVsbCAhPT0gYi51cGRhdGVRdWV1ZSAmJiAoYi5mbGFncyB8PSA0KTtcbiAgICAgIFMoYik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gSmgoKSwgQmooYSwgYiksIG51bGwgPT09IGEgJiYgc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksIFMoYiksIG51bGw7XG4gICAgY2FzZSAxMDpcbiAgICAgIHJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLCBTKGIpLCBudWxsO1xuICAgIGNhc2UgMTc6XG4gICAgICByZXR1cm4gWmYoYi50eXBlKSAmJiAkZigpLCBTKGIpLCBudWxsO1xuICAgIGNhc2UgMTk6XG4gICAgICBFKE0pO1xuICAgICAgZiA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIGlmIChudWxsID09PSBmKSByZXR1cm4gUyhiKSwgbnVsbDtcbiAgICAgIGQgPSAwICE9PSAoYi5mbGFncyAmIDEyOCk7XG4gICAgICBnID0gZi5yZW5kZXJpbmc7XG4gICAgICBpZiAobnVsbCA9PT0gZykge1xuICAgICAgICBpZiAoZCkgRWooZiwgITEpO2Vsc2Uge1xuICAgICAgICAgIGlmICgwICE9PSBUIHx8IG51bGwgIT09IGEgJiYgMCAhPT0gKGEuZmxhZ3MgJiAxMjgpKSBmb3IgKGEgPSBiLmNoaWxkOyBudWxsICE9PSBhOykge1xuICAgICAgICAgICAgZyA9IE1oKGEpO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGcpIHtcbiAgICAgICAgICAgICAgYi5mbGFncyB8PSAxMjg7XG4gICAgICAgICAgICAgIEVqKGYsICExKTtcbiAgICAgICAgICAgICAgZCA9IGcudXBkYXRlUXVldWU7XG4gICAgICAgICAgICAgIG51bGwgIT09IGQgJiYgKGIudXBkYXRlUXVldWUgPSBkLCBiLmZsYWdzIHw9IDQpO1xuICAgICAgICAgICAgICBiLnN1YnRyZWVGbGFncyA9IDA7XG4gICAgICAgICAgICAgIGQgPSBjO1xuICAgICAgICAgICAgICBmb3IgKGMgPSBiLmNoaWxkOyBudWxsICE9PSBjOykgZiA9IGMsIGEgPSBkLCBmLmZsYWdzICY9IDE0NjgwMDY2LCBnID0gZi5hbHRlcm5hdGUsIG51bGwgPT09IGcgPyAoZi5jaGlsZExhbmVzID0gMCwgZi5sYW5lcyA9IGEsIGYuY2hpbGQgPSBudWxsLCBmLnN1YnRyZWVGbGFncyA9IDAsIGYubWVtb2l6ZWRQcm9wcyA9IG51bGwsIGYubWVtb2l6ZWRTdGF0ZSA9IG51bGwsIGYudXBkYXRlUXVldWUgPSBudWxsLCBmLmRlcGVuZGVuY2llcyA9IG51bGwsIGYuc3RhdGVOb2RlID0gbnVsbCkgOiAoZi5jaGlsZExhbmVzID0gZy5jaGlsZExhbmVzLCBmLmxhbmVzID0gZy5sYW5lcywgZi5jaGlsZCA9IGcuY2hpbGQsIGYuc3VidHJlZUZsYWdzID0gMCwgZi5kZWxldGlvbnMgPSBudWxsLCBmLm1lbW9pemVkUHJvcHMgPSBnLm1lbW9pemVkUHJvcHMsIGYubWVtb2l6ZWRTdGF0ZSA9IGcubWVtb2l6ZWRTdGF0ZSwgZi51cGRhdGVRdWV1ZSA9IGcudXBkYXRlUXVldWUsIGYudHlwZSA9IGcudHlwZSwgYSA9IGcuZGVwZW5kZW5jaWVzLCBmLmRlcGVuZGVuY2llcyA9IG51bGwgPT09IGEgPyBudWxsIDoge1xuICAgICAgICAgICAgICAgIGxhbmVzOiBhLmxhbmVzLFxuICAgICAgICAgICAgICAgIGZpcnN0Q29udGV4dDogYS5maXJzdENvbnRleHRcbiAgICAgICAgICAgICAgfSksIGMgPSBjLnNpYmxpbmc7XG4gICAgICAgICAgICAgIEcoTSwgTS5jdXJyZW50ICYgMSB8IDIpO1xuICAgICAgICAgICAgICByZXR1cm4gYi5jaGlsZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEgPSBhLnNpYmxpbmc7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bGwgIT09IGYudGFpbCAmJiBCKCkgPiBIaiAmJiAoYi5mbGFncyB8PSAxMjgsIGQgPSAhMCwgRWooZiwgITEpLCBiLmxhbmVzID0gNDE5NDMwNCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZCkgaWYgKGEgPSBNaChnKSwgbnVsbCAhPT0gYSkge1xuICAgICAgICAgIGlmIChiLmZsYWdzIHw9IDEyOCwgZCA9ICEwLCBjID0gYS51cGRhdGVRdWV1ZSwgbnVsbCAhPT0gYyAmJiAoYi51cGRhdGVRdWV1ZSA9IGMsIGIuZmxhZ3MgfD0gNCksIEVqKGYsICEwKSwgbnVsbCA9PT0gZi50YWlsICYmIFwiaGlkZGVuXCIgPT09IGYudGFpbE1vZGUgJiYgIWcuYWx0ZXJuYXRlICYmICFJKSByZXR1cm4gUyhiKSwgbnVsbDtcbiAgICAgICAgfSBlbHNlIDIgKiBCKCkgLSBmLnJlbmRlcmluZ1N0YXJ0VGltZSA+IEhqICYmIDEwNzM3NDE4MjQgIT09IGMgJiYgKGIuZmxhZ3MgfD0gMTI4LCBkID0gITAsIEVqKGYsICExKSwgYi5sYW5lcyA9IDQxOTQzMDQpO1xuICAgICAgICBmLmlzQmFja3dhcmRzID8gKGcuc2libGluZyA9IGIuY2hpbGQsIGIuY2hpbGQgPSBnKSA6IChjID0gZi5sYXN0LCBudWxsICE9PSBjID8gYy5zaWJsaW5nID0gZyA6IGIuY2hpbGQgPSBnLCBmLmxhc3QgPSBnKTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsICE9PSBmLnRhaWwpIHJldHVybiBiID0gZi50YWlsLCBmLnJlbmRlcmluZyA9IGIsIGYudGFpbCA9IGIuc2libGluZywgZi5yZW5kZXJpbmdTdGFydFRpbWUgPSBCKCksIGIuc2libGluZyA9IG51bGwsIGMgPSBNLmN1cnJlbnQsIEcoTSwgZCA/IGMgJiAxIHwgMiA6IGMgJiAxKSwgYjtcbiAgICAgIFMoYik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gSWooKSwgZCA9IG51bGwgIT09IGIubWVtb2l6ZWRTdGF0ZSwgbnVsbCAhPT0gYSAmJiBudWxsICE9PSBhLm1lbW9pemVkU3RhdGUgIT09IGQgJiYgKGIuZmxhZ3MgfD0gODE5MiksIGQgJiYgMCAhPT0gKGIubW9kZSAmIDEpID8gMCAhPT0gKGdqICYgMTA3Mzc0MTgyNCkgJiYgKFMoYiksIGIuc3VidHJlZUZsYWdzICYgNiAmJiAoYi5mbGFncyB8PSA4MTkyKSkgOiBTKGIpLCBudWxsO1xuICAgIGNhc2UgMjQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICBjYXNlIDI1OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdGhyb3cgRXJyb3IocCgxNTYsIGIudGFnKSk7XG59XG5mdW5jdGlvbiBKaihhLCBiKSB7XG4gIHdnKGIpO1xuICBzd2l0Y2ggKGIudGFnKSB7XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIFpmKGIudHlwZSkgJiYgJGYoKSwgYSA9IGIuZmxhZ3MsIGEgJiA2NTUzNiA/IChiLmZsYWdzID0gYSAmIC02NTUzNyB8IDEyOCwgYikgOiBudWxsO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBKaCgpLCBFKFdmKSwgRShIKSwgT2goKSwgYSA9IGIuZmxhZ3MsIDAgIT09IChhICYgNjU1MzYpICYmIDAgPT09IChhICYgMTI4KSA/IChiLmZsYWdzID0gYSAmIC02NTUzNyB8IDEyOCwgYikgOiBudWxsO1xuICAgIGNhc2UgNTpcbiAgICAgIHJldHVybiBMaChiKSwgbnVsbDtcbiAgICBjYXNlIDEzOlxuICAgICAgRShNKTtcbiAgICAgIGEgPSBiLm1lbW9pemVkU3RhdGU7XG4gICAgICBpZiAobnVsbCAhPT0gYSAmJiBudWxsICE9PSBhLmRlaHlkcmF0ZWQpIHtcbiAgICAgICAgaWYgKG51bGwgPT09IGIuYWx0ZXJuYXRlKSB0aHJvdyBFcnJvcihwKDM0MCkpO1xuICAgICAgICBJZygpO1xuICAgICAgfVxuICAgICAgYSA9IGIuZmxhZ3M7XG4gICAgICByZXR1cm4gYSAmIDY1NTM2ID8gKGIuZmxhZ3MgPSBhICYgLTY1NTM3IHwgMTI4LCBiKSA6IG51bGw7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiBFKE0pLCBudWxsO1xuICAgIGNhc2UgNDpcbiAgICAgIHJldHVybiBKaCgpLCBudWxsO1xuICAgIGNhc2UgMTA6XG4gICAgICByZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSwgbnVsbDtcbiAgICBjYXNlIDIyOlxuICAgIGNhc2UgMjM6XG4gICAgICByZXR1cm4gSWooKSwgbnVsbDtcbiAgICBjYXNlIDI0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG52YXIgS2ogPSAhMSxcbiAgVSA9ICExLFxuICBMaiA9IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIFdlYWtTZXQgPyBXZWFrU2V0IDogU2V0LFxuICBWID0gbnVsbDtcbmZ1bmN0aW9uIE1qKGEsIGIpIHtcbiAgdmFyIGMgPSBhLnJlZjtcbiAgaWYgKG51bGwgIT09IGMpIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjKSB0cnkge1xuICAgIGMobnVsbCk7XG4gIH0gY2F0Y2ggKGQpIHtcbiAgICBXKGEsIGIsIGQpO1xuICB9IGVsc2UgYy5jdXJyZW50ID0gbnVsbDtcbn1cbmZ1bmN0aW9uIE5qKGEsIGIsIGMpIHtcbiAgdHJ5IHtcbiAgICBjKCk7XG4gIH0gY2F0Y2ggKGQpIHtcbiAgICBXKGEsIGIsIGQpO1xuICB9XG59XG52YXIgT2ogPSAhMTtcbmZ1bmN0aW9uIFBqKGEsIGIpIHtcbiAgQ2YgPSBkZDtcbiAgYSA9IE1lKCk7XG4gIGlmIChOZShhKSkge1xuICAgIGlmIChcInNlbGVjdGlvblN0YXJ0XCIgaW4gYSkgdmFyIGMgPSB7XG4gICAgICBzdGFydDogYS5zZWxlY3Rpb25TdGFydCxcbiAgICAgIGVuZDogYS5zZWxlY3Rpb25FbmRcbiAgICB9O2Vsc2UgYToge1xuICAgICAgYyA9IChjID0gYS5vd25lckRvY3VtZW50KSAmJiBjLmRlZmF1bHRWaWV3IHx8IHdpbmRvdztcbiAgICAgIHZhciBkID0gYy5nZXRTZWxlY3Rpb24gJiYgYy5nZXRTZWxlY3Rpb24oKTtcbiAgICAgIGlmIChkICYmIDAgIT09IGQucmFuZ2VDb3VudCkge1xuICAgICAgICBjID0gZC5hbmNob3JOb2RlO1xuICAgICAgICB2YXIgZSA9IGQuYW5jaG9yT2Zmc2V0LFxuICAgICAgICAgIGYgPSBkLmZvY3VzTm9kZTtcbiAgICAgICAgZCA9IGQuZm9jdXNPZmZzZXQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYy5ub2RlVHlwZSwgZi5ub2RlVHlwZTtcbiAgICAgICAgfSBjYXRjaCAoRikge1xuICAgICAgICAgIGMgPSBudWxsO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGcgPSAwLFxuICAgICAgICAgIGggPSAtMSxcbiAgICAgICAgICBrID0gLTEsXG4gICAgICAgICAgbCA9IDAsXG4gICAgICAgICAgbSA9IDAsXG4gICAgICAgICAgcSA9IGEsXG4gICAgICAgICAgciA9IG51bGw7XG4gICAgICAgIGI6IGZvciAoOzspIHtcbiAgICAgICAgICBmb3IgKHZhciB5OzspIHtcbiAgICAgICAgICAgIHEgIT09IGMgfHwgMCAhPT0gZSAmJiAzICE9PSBxLm5vZGVUeXBlIHx8IChoID0gZyArIGUpO1xuICAgICAgICAgICAgcSAhPT0gZiB8fCAwICE9PSBkICYmIDMgIT09IHEubm9kZVR5cGUgfHwgKGsgPSBnICsgZCk7XG4gICAgICAgICAgICAzID09PSBxLm5vZGVUeXBlICYmIChnICs9IHEubm9kZVZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gKHkgPSBxLmZpcnN0Q2hpbGQpKSBicmVhaztcbiAgICAgICAgICAgIHIgPSBxO1xuICAgICAgICAgICAgcSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGlmIChxID09PSBhKSBicmVhayBiO1xuICAgICAgICAgICAgciA9PT0gYyAmJiArK2wgPT09IGUgJiYgKGggPSBnKTtcbiAgICAgICAgICAgIHIgPT09IGYgJiYgKyttID09PSBkICYmIChrID0gZyk7XG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gKHkgPSBxLm5leHRTaWJsaW5nKSkgYnJlYWs7XG4gICAgICAgICAgICBxID0gcjtcbiAgICAgICAgICAgIHIgPSBxLnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHEgPSB5O1xuICAgICAgICB9XG4gICAgICAgIGMgPSAtMSA9PT0gaCB8fCAtMSA9PT0gayA/IG51bGwgOiB7XG4gICAgICAgICAgc3RhcnQ6IGgsXG4gICAgICAgICAgZW5kOiBrXG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgYyA9IG51bGw7XG4gICAgfVxuICAgIGMgPSBjIHx8IHtcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiAwXG4gICAgfTtcbiAgfSBlbHNlIGMgPSBudWxsO1xuICBEZiA9IHtcbiAgICBmb2N1c2VkRWxlbTogYSxcbiAgICBzZWxlY3Rpb25SYW5nZTogY1xuICB9O1xuICBkZCA9ICExO1xuICBmb3IgKFYgPSBiOyBudWxsICE9PSBWOykgaWYgKGIgPSBWLCBhID0gYi5jaGlsZCwgMCAhPT0gKGIuc3VidHJlZUZsYWdzICYgMTAyOCkgJiYgbnVsbCAhPT0gYSkgYS5yZXR1cm4gPSBiLCBWID0gYTtlbHNlIGZvciAoOyBudWxsICE9PSBWOykge1xuICAgIGIgPSBWO1xuICAgIHRyeSB7XG4gICAgICB2YXIgbiA9IGIuYWx0ZXJuYXRlO1xuICAgICAgaWYgKDAgIT09IChiLmZsYWdzICYgMTAyNCkpIHN3aXRjaCAoYi50YWcpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICBjYXNlIDExOlxuICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKG51bGwgIT09IG4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gbi5tZW1vaXplZFByb3BzLFxuICAgICAgICAgICAgICBKID0gbi5tZW1vaXplZFN0YXRlLFxuICAgICAgICAgICAgICB4ID0gYi5zdGF0ZU5vZGUsXG4gICAgICAgICAgICAgIHcgPSB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGUgPT09IGIudHlwZSA/IHQgOiBMZyhiLnR5cGUsIHQpLCBKKTtcbiAgICAgICAgICAgIHguX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUgPSB3O1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHZhciB1ID0gYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAxID09PSB1Lm5vZGVUeXBlID8gdS50ZXh0Q29udGVudCA9IFwiXCIgOiA5ID09PSB1Lm5vZGVUeXBlICYmIHUuZG9jdW1lbnRFbGVtZW50ICYmIHUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDU6XG4gICAgICAgIGNhc2UgNjpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKHAoMTYzKSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoRikge1xuICAgICAgVyhiLCBiLnJldHVybiwgRik7XG4gICAgfVxuICAgIGEgPSBiLnNpYmxpbmc7XG4gICAgaWYgKG51bGwgIT09IGEpIHtcbiAgICAgIGEucmV0dXJuID0gYi5yZXR1cm47XG4gICAgICBWID0gYTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBWID0gYi5yZXR1cm47XG4gIH1cbiAgbiA9IE9qO1xuICBPaiA9ICExO1xuICByZXR1cm4gbjtcbn1cbmZ1bmN0aW9uIFFqKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSBiLnVwZGF0ZVF1ZXVlO1xuICBkID0gbnVsbCAhPT0gZCA/IGQubGFzdEVmZmVjdCA6IG51bGw7XG4gIGlmIChudWxsICE9PSBkKSB7XG4gICAgdmFyIGUgPSBkID0gZC5uZXh0O1xuICAgIGRvIHtcbiAgICAgIGlmICgoZS50YWcgJiBhKSA9PT0gYSkge1xuICAgICAgICB2YXIgZiA9IGUuZGVzdHJveTtcbiAgICAgICAgZS5kZXN0cm95ID0gdm9pZCAwO1xuICAgICAgICB2b2lkIDAgIT09IGYgJiYgTmooYiwgYywgZik7XG4gICAgICB9XG4gICAgICBlID0gZS5uZXh0O1xuICAgIH0gd2hpbGUgKGUgIT09IGQpO1xuICB9XG59XG5mdW5jdGlvbiBSaihhLCBiKSB7XG4gIGIgPSBiLnVwZGF0ZVF1ZXVlO1xuICBiID0gbnVsbCAhPT0gYiA/IGIubGFzdEVmZmVjdCA6IG51bGw7XG4gIGlmIChudWxsICE9PSBiKSB7XG4gICAgdmFyIGMgPSBiID0gYi5uZXh0O1xuICAgIGRvIHtcbiAgICAgIGlmICgoYy50YWcgJiBhKSA9PT0gYSkge1xuICAgICAgICB2YXIgZCA9IGMuY3JlYXRlO1xuICAgICAgICBjLmRlc3Ryb3kgPSBkKCk7XG4gICAgICB9XG4gICAgICBjID0gYy5uZXh0O1xuICAgIH0gd2hpbGUgKGMgIT09IGIpO1xuICB9XG59XG5mdW5jdGlvbiBTaihhKSB7XG4gIHZhciBiID0gYS5yZWY7XG4gIGlmIChudWxsICE9PSBiKSB7XG4gICAgdmFyIGMgPSBhLnN0YXRlTm9kZTtcbiAgICBzd2l0Y2ggKGEudGFnKSB7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIGEgPSBjO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGEgPSBjO1xuICAgIH1cbiAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiID8gYihhKSA6IGIuY3VycmVudCA9IGE7XG4gIH1cbn1cbmZ1bmN0aW9uIFRqKGEpIHtcbiAgdmFyIGIgPSBhLmFsdGVybmF0ZTtcbiAgbnVsbCAhPT0gYiAmJiAoYS5hbHRlcm5hdGUgPSBudWxsLCBUaihiKSk7XG4gIGEuY2hpbGQgPSBudWxsO1xuICBhLmRlbGV0aW9ucyA9IG51bGw7XG4gIGEuc2libGluZyA9IG51bGw7XG4gIDUgPT09IGEudGFnICYmIChiID0gYS5zdGF0ZU5vZGUsIG51bGwgIT09IGIgJiYgKGRlbGV0ZSBiW09mXSwgZGVsZXRlIGJbUGZdLCBkZWxldGUgYltvZl0sIGRlbGV0ZSBiW1FmXSwgZGVsZXRlIGJbUmZdKSk7XG4gIGEuc3RhdGVOb2RlID0gbnVsbDtcbiAgYS5yZXR1cm4gPSBudWxsO1xuICBhLmRlcGVuZGVuY2llcyA9IG51bGw7XG4gIGEubWVtb2l6ZWRQcm9wcyA9IG51bGw7XG4gIGEubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIGEucGVuZGluZ1Byb3BzID0gbnVsbDtcbiAgYS5zdGF0ZU5vZGUgPSBudWxsO1xuICBhLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbn1cbmZ1bmN0aW9uIFVqKGEpIHtcbiAgcmV0dXJuIDUgPT09IGEudGFnIHx8IDMgPT09IGEudGFnIHx8IDQgPT09IGEudGFnO1xufVxuZnVuY3Rpb24gVmooYSkge1xuICBhOiBmb3IgKDs7KSB7XG4gICAgZm9yICg7IG51bGwgPT09IGEuc2libGluZzspIHtcbiAgICAgIGlmIChudWxsID09PSBhLnJldHVybiB8fCBVaihhLnJldHVybikpIHJldHVybiBudWxsO1xuICAgICAgYSA9IGEucmV0dXJuO1xuICAgIH1cbiAgICBhLnNpYmxpbmcucmV0dXJuID0gYS5yZXR1cm47XG4gICAgZm9yIChhID0gYS5zaWJsaW5nOyA1ICE9PSBhLnRhZyAmJiA2ICE9PSBhLnRhZyAmJiAxOCAhPT0gYS50YWc7KSB7XG4gICAgICBpZiAoYS5mbGFncyAmIDIpIGNvbnRpbnVlIGE7XG4gICAgICBpZiAobnVsbCA9PT0gYS5jaGlsZCB8fCA0ID09PSBhLnRhZykgY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuID0gYSwgYSA9IGEuY2hpbGQ7XG4gICAgfVxuICAgIGlmICghKGEuZmxhZ3MgJiAyKSkgcmV0dXJuIGEuc3RhdGVOb2RlO1xuICB9XG59XG5mdW5jdGlvbiBXaihhLCBiLCBjKSB7XG4gIHZhciBkID0gYS50YWc7XG4gIGlmICg1ID09PSBkIHx8IDYgPT09IGQpIGEgPSBhLnN0YXRlTm9kZSwgYiA/IDggPT09IGMubm9kZVR5cGUgPyBjLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsIGIpIDogYy5pbnNlcnRCZWZvcmUoYSwgYikgOiAoOCA9PT0gYy5ub2RlVHlwZSA/IChiID0gYy5wYXJlbnROb2RlLCBiLmluc2VydEJlZm9yZShhLCBjKSkgOiAoYiA9IGMsIGIuYXBwZW5kQ2hpbGQoYSkpLCBjID0gYy5fcmVhY3RSb290Q29udGFpbmVyLCBudWxsICE9PSBjICYmIHZvaWQgMCAhPT0gYyB8fCBudWxsICE9PSBiLm9uY2xpY2sgfHwgKGIub25jbGljayA9IEJmKSk7ZWxzZSBpZiAoNCAhPT0gZCAmJiAoYSA9IGEuY2hpbGQsIG51bGwgIT09IGEpKSBmb3IgKFdqKGEsIGIsIGMpLCBhID0gYS5zaWJsaW5nOyBudWxsICE9PSBhOykgV2ooYSwgYiwgYyksIGEgPSBhLnNpYmxpbmc7XG59XG5mdW5jdGlvbiBYaihhLCBiLCBjKSB7XG4gIHZhciBkID0gYS50YWc7XG4gIGlmICg1ID09PSBkIHx8IDYgPT09IGQpIGEgPSBhLnN0YXRlTm9kZSwgYiA/IGMuaW5zZXJ0QmVmb3JlKGEsIGIpIDogYy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmICg0ICE9PSBkICYmIChhID0gYS5jaGlsZCwgbnVsbCAhPT0gYSkpIGZvciAoWGooYSwgYiwgYyksIGEgPSBhLnNpYmxpbmc7IG51bGwgIT09IGE7KSBYaihhLCBiLCBjKSwgYSA9IGEuc2libGluZztcbn1cbnZhciBYID0gbnVsbCxcbiAgWWogPSAhMTtcbmZ1bmN0aW9uIFpqKGEsIGIsIGMpIHtcbiAgZm9yIChjID0gYy5jaGlsZDsgbnVsbCAhPT0gYzspIGFrKGEsIGIsIGMpLCBjID0gYy5zaWJsaW5nO1xufVxuZnVuY3Rpb24gYWsoYSwgYiwgYykge1xuICBpZiAobGMgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpIHRyeSB7XG4gICAgbGMub25Db21taXRGaWJlclVubW91bnQoa2MsIGMpO1xuICB9IGNhdGNoIChoKSB7fVxuICBzd2l0Y2ggKGMudGFnKSB7XG4gICAgY2FzZSA1OlxuICAgICAgVSB8fCBNaihjLCBiKTtcbiAgICBjYXNlIDY6XG4gICAgICB2YXIgZCA9IFgsXG4gICAgICAgIGUgPSBZajtcbiAgICAgIFggPSBudWxsO1xuICAgICAgWmooYSwgYiwgYyk7XG4gICAgICBYID0gZDtcbiAgICAgIFlqID0gZTtcbiAgICAgIG51bGwgIT09IFggJiYgKFlqID8gKGEgPSBYLCBjID0gYy5zdGF0ZU5vZGUsIDggPT09IGEubm9kZVR5cGUgPyBhLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYykgOiBhLnJlbW92ZUNoaWxkKGMpKSA6IFgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTg6XG4gICAgICBudWxsICE9PSBYICYmIChZaiA/IChhID0gWCwgYyA9IGMuc3RhdGVOb2RlLCA4ID09PSBhLm5vZGVUeXBlID8gS2YoYS5wYXJlbnROb2RlLCBjKSA6IDEgPT09IGEubm9kZVR5cGUgJiYgS2YoYSwgYyksIGJkKGEpKSA6IEtmKFgsIGMuc3RhdGVOb2RlKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBkID0gWDtcbiAgICAgIGUgPSBZajtcbiAgICAgIFggPSBjLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICAgICAgWWogPSAhMDtcbiAgICAgIFpqKGEsIGIsIGMpO1xuICAgICAgWCA9IGQ7XG4gICAgICBZaiA9IGU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDA6XG4gICAgY2FzZSAxMTpcbiAgICBjYXNlIDE0OlxuICAgIGNhc2UgMTU6XG4gICAgICBpZiAoIVUgJiYgKGQgPSBjLnVwZGF0ZVF1ZXVlLCBudWxsICE9PSBkICYmIChkID0gZC5sYXN0RWZmZWN0LCBudWxsICE9PSBkKSkpIHtcbiAgICAgICAgZSA9IGQgPSBkLm5leHQ7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICB2YXIgZiA9IGUsXG4gICAgICAgICAgICBnID0gZi5kZXN0cm95O1xuICAgICAgICAgIGYgPSBmLnRhZztcbiAgICAgICAgICB2b2lkIDAgIT09IGcgJiYgKDAgIT09IChmICYgMikgPyBOaihjLCBiLCBnKSA6IDAgIT09IChmICYgNCkgJiYgTmooYywgYiwgZykpO1xuICAgICAgICAgIGUgPSBlLm5leHQ7XG4gICAgICAgIH0gd2hpbGUgKGUgIT09IGQpO1xuICAgICAgfVxuICAgICAgWmooYSwgYiwgYyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBpZiAoIVUgJiYgKE1qKGMsIGIpLCBkID0gYy5zdGF0ZU5vZGUsIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKSB0cnkge1xuICAgICAgICBkLnByb3BzID0gYy5tZW1vaXplZFByb3BzLCBkLnN0YXRlID0gYy5tZW1vaXplZFN0YXRlLCBkLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICB9IGNhdGNoIChoKSB7XG4gICAgICAgIFcoYywgYiwgaCk7XG4gICAgICB9XG4gICAgICBaaihhLCBiLCBjKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjE6XG4gICAgICBaaihhLCBiLCBjKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBjLm1vZGUgJiAxID8gKFUgPSAoZCA9IFUpIHx8IG51bGwgIT09IGMubWVtb2l6ZWRTdGF0ZSwgWmooYSwgYiwgYyksIFUgPSBkKSA6IFpqKGEsIGIsIGMpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIFpqKGEsIGIsIGMpO1xuICB9XG59XG5mdW5jdGlvbiBiayhhKSB7XG4gIHZhciBiID0gYS51cGRhdGVRdWV1ZTtcbiAgaWYgKG51bGwgIT09IGIpIHtcbiAgICBhLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgICB2YXIgYyA9IGEuc3RhdGVOb2RlO1xuICAgIG51bGwgPT09IGMgJiYgKGMgPSBhLnN0YXRlTm9kZSA9IG5ldyBMaigpKTtcbiAgICBiLmZvckVhY2goZnVuY3Rpb24gKGIpIHtcbiAgICAgIHZhciBkID0gY2suYmluZChudWxsLCBhLCBiKTtcbiAgICAgIGMuaGFzKGIpIHx8IChjLmFkZChiKSwgYi50aGVuKGQsIGQpKTtcbiAgICB9KTtcbiAgfVxufVxuZnVuY3Rpb24gZGsoYSwgYikge1xuICB2YXIgYyA9IGIuZGVsZXRpb25zO1xuICBpZiAobnVsbCAhPT0gYykgZm9yICh2YXIgZCA9IDA7IGQgPCBjLmxlbmd0aDsgZCsrKSB7XG4gICAgdmFyIGUgPSBjW2RdO1xuICAgIHRyeSB7XG4gICAgICB2YXIgZiA9IGEsXG4gICAgICAgIGcgPSBiLFxuICAgICAgICBoID0gZztcbiAgICAgIGE6IGZvciAoOyBudWxsICE9PSBoOykge1xuICAgICAgICBzd2l0Y2ggKGgudGFnKSB7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgWCA9IGguc3RhdGVOb2RlO1xuICAgICAgICAgICAgWWogPSAhMTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgWCA9IGguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG4gICAgICAgICAgICBZaiA9ICEwO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBYID0gaC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIFlqID0gITA7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICB9XG4gICAgICAgIGggPSBoLnJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09PSBYKSB0aHJvdyBFcnJvcihwKDE2MCkpO1xuICAgICAgYWsoZiwgZywgZSk7XG4gICAgICBYID0gbnVsbDtcbiAgICAgIFlqID0gITE7XG4gICAgICB2YXIgayA9IGUuYWx0ZXJuYXRlO1xuICAgICAgbnVsbCAhPT0gayAmJiAoay5yZXR1cm4gPSBudWxsKTtcbiAgICAgIGUucmV0dXJuID0gbnVsbDtcbiAgICB9IGNhdGNoIChsKSB7XG4gICAgICBXKGUsIGIsIGwpO1xuICAgIH1cbiAgfVxuICBpZiAoYi5zdWJ0cmVlRmxhZ3MgJiAxMjg1NCkgZm9yIChiID0gYi5jaGlsZDsgbnVsbCAhPT0gYjspIGVrKGIsIGEpLCBiID0gYi5zaWJsaW5nO1xufVxuZnVuY3Rpb24gZWsoYSwgYikge1xuICB2YXIgYyA9IGEuYWx0ZXJuYXRlLFxuICAgIGQgPSBhLmZsYWdzO1xuICBzd2l0Y2ggKGEudGFnKSB7XG4gICAgY2FzZSAwOlxuICAgIGNhc2UgMTE6XG4gICAgY2FzZSAxNDpcbiAgICBjYXNlIDE1OlxuICAgICAgZGsoYiwgYSk7XG4gICAgICBmayhhKTtcbiAgICAgIGlmIChkICYgNCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIFFqKDMsIGEsIGEucmV0dXJuKSwgUmooMywgYSk7XG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICBXKGEsIGEucmV0dXJuLCB0KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIFFqKDUsIGEsIGEucmV0dXJuKTtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgIFcoYSwgYS5yZXR1cm4sIHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE6XG4gICAgICBkayhiLCBhKTtcbiAgICAgIGZrKGEpO1xuICAgICAgZCAmIDUxMiAmJiBudWxsICE9PSBjICYmIE1qKGMsIGMucmV0dXJuKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgNTpcbiAgICAgIGRrKGIsIGEpO1xuICAgICAgZmsoYSk7XG4gICAgICBkICYgNTEyICYmIG51bGwgIT09IGMgJiYgTWooYywgYy5yZXR1cm4pO1xuICAgICAgaWYgKGEuZmxhZ3MgJiAzMikge1xuICAgICAgICB2YXIgZSA9IGEuc3RhdGVOb2RlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9iKGUsIFwiXCIpO1xuICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgVyhhLCBhLnJldHVybiwgdCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChkICYgNCAmJiAoZSA9IGEuc3RhdGVOb2RlLCBudWxsICE9IGUpKSB7XG4gICAgICAgIHZhciBmID0gYS5tZW1vaXplZFByb3BzLFxuICAgICAgICAgIGcgPSBudWxsICE9PSBjID8gYy5tZW1vaXplZFByb3BzIDogZixcbiAgICAgICAgICBoID0gYS50eXBlLFxuICAgICAgICAgIGsgPSBhLnVwZGF0ZVF1ZXVlO1xuICAgICAgICBhLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgICAgICAgaWYgKG51bGwgIT09IGspIHRyeSB7XG4gICAgICAgICAgXCJpbnB1dFwiID09PSBoICYmIFwicmFkaW9cIiA9PT0gZi50eXBlICYmIG51bGwgIT0gZi5uYW1lICYmIGFiKGUsIGYpO1xuICAgICAgICAgIHZiKGgsIGcpO1xuICAgICAgICAgIHZhciBsID0gdmIoaCwgZik7XG4gICAgICAgICAgZm9yIChnID0gMDsgZyA8IGsubGVuZ3RoOyBnICs9IDIpIHtcbiAgICAgICAgICAgIHZhciBtID0ga1tnXSxcbiAgICAgICAgICAgICAgcSA9IGtbZyArIDFdO1xuICAgICAgICAgICAgXCJzdHlsZVwiID09PSBtID8gc2IoZSwgcSkgOiBcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIgPT09IG0gPyBuYihlLCBxKSA6IFwiY2hpbGRyZW5cIiA9PT0gbSA/IG9iKGUsIHEpIDogdGEoZSwgbSwgcSwgbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAoaCkge1xuICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICAgIGJiKGUsIGYpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgICAgICAgICBpYihlLCBmKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2VsZWN0XCI6XG4gICAgICAgICAgICAgIHZhciByID0gZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO1xuICAgICAgICAgICAgICBlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUgPSAhIWYubXVsdGlwbGU7XG4gICAgICAgICAgICAgIHZhciB5ID0gZi52YWx1ZTtcbiAgICAgICAgICAgICAgbnVsbCAhPSB5ID8gZmIoZSwgISFmLm11bHRpcGxlLCB5LCAhMSkgOiByICE9PSAhIWYubXVsdGlwbGUgJiYgKG51bGwgIT0gZi5kZWZhdWx0VmFsdWUgPyBmYihlLCAhIWYubXVsdGlwbGUsIGYuZGVmYXVsdFZhbHVlLCAhMCkgOiBmYihlLCAhIWYubXVsdGlwbGUsIGYubXVsdGlwbGUgPyBbXSA6IFwiXCIsICExKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVbUGZdID0gZjtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgIFcoYSwgYS5yZXR1cm4sIHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDY6XG4gICAgICBkayhiLCBhKTtcbiAgICAgIGZrKGEpO1xuICAgICAgaWYgKGQgJiA0KSB7XG4gICAgICAgIGlmIChudWxsID09PSBhLnN0YXRlTm9kZSkgdGhyb3cgRXJyb3IocCgxNjIpKTtcbiAgICAgICAgZSA9IGEuc3RhdGVOb2RlO1xuICAgICAgICBmID0gYS5tZW1vaXplZFByb3BzO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGUubm9kZVZhbHVlID0gZjtcbiAgICAgICAgfSBjYXRjaCAodCkge1xuICAgICAgICAgIFcoYSwgYS5yZXR1cm4sIHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDM6XG4gICAgICBkayhiLCBhKTtcbiAgICAgIGZrKGEpO1xuICAgICAgaWYgKGQgJiA0ICYmIG51bGwgIT09IGMgJiYgYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCkgdHJ5IHtcbiAgICAgICAgYmQoYi5jb250YWluZXJJbmZvKTtcbiAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgVyhhLCBhLnJldHVybiwgdCk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBkayhiLCBhKTtcbiAgICAgIGZrKGEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxMzpcbiAgICAgIGRrKGIsIGEpO1xuICAgICAgZmsoYSk7XG4gICAgICBlID0gYS5jaGlsZDtcbiAgICAgIGUuZmxhZ3MgJiA4MTkyICYmIChmID0gbnVsbCAhPT0gZS5tZW1vaXplZFN0YXRlLCBlLnN0YXRlTm9kZS5pc0hpZGRlbiA9IGYsICFmIHx8IG51bGwgIT09IGUuYWx0ZXJuYXRlICYmIG51bGwgIT09IGUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgfHwgKGdrID0gQigpKSk7XG4gICAgICBkICYgNCAmJiBiayhhKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjI6XG4gICAgICBtID0gbnVsbCAhPT0gYyAmJiBudWxsICE9PSBjLm1lbW9pemVkU3RhdGU7XG4gICAgICBhLm1vZGUgJiAxID8gKFUgPSAobCA9IFUpIHx8IG0sIGRrKGIsIGEpLCBVID0gbCkgOiBkayhiLCBhKTtcbiAgICAgIGZrKGEpO1xuICAgICAgaWYgKGQgJiA4MTkyKSB7XG4gICAgICAgIGwgPSBudWxsICE9PSBhLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIGlmICgoYS5zdGF0ZU5vZGUuaXNIaWRkZW4gPSBsKSAmJiAhbSAmJiAwICE9PSAoYS5tb2RlICYgMSkpIGZvciAoViA9IGEsIG0gPSBhLmNoaWxkOyBudWxsICE9PSBtOykge1xuICAgICAgICAgIGZvciAocSA9IFYgPSBtOyBudWxsICE9PSBWOykge1xuICAgICAgICAgICAgciA9IFY7XG4gICAgICAgICAgICB5ID0gci5jaGlsZDtcbiAgICAgICAgICAgIHN3aXRjaCAoci50YWcpIHtcbiAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICBjYXNlIDE1OlxuICAgICAgICAgICAgICAgIFFqKDQsIHIsIHIucmV0dXJuKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIE1qKHIsIHIucmV0dXJuKTtcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KSB7XG4gICAgICAgICAgICAgICAgICBkID0gcjtcbiAgICAgICAgICAgICAgICAgIGMgPSByLnJldHVybjtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGIgPSBkLCBuLnByb3BzID0gYi5tZW1vaXplZFByb3BzLCBuLnN0YXRlID0gYi5tZW1vaXplZFN0YXRlLCBuLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XG4gICAgICAgICAgICAgICAgICAgIFcoZCwgYywgdCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgTWoociwgci5yZXR1cm4pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDIyOlxuICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSByLm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgIGhrKHEpO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbnVsbCAhPT0geSA/ICh5LnJldHVybiA9IHIsIFYgPSB5KSA6IGhrKHEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtID0gbS5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGE6IGZvciAobSA9IG51bGwsIHEgPSBhOzspIHtcbiAgICAgICAgICBpZiAoNSA9PT0gcS50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBtKSB7XG4gICAgICAgICAgICAgIG0gPSBxO1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGUgPSBxLnN0YXRlTm9kZSwgbCA/IChmID0gZS5zdHlsZSwgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZi5zZXRQcm9wZXJ0eSA/IGYuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsIFwibm9uZVwiLCBcImltcG9ydGFudFwiKSA6IGYuZGlzcGxheSA9IFwibm9uZVwiKSA6IChoID0gcS5zdGF0ZU5vZGUsIGsgPSBxLm1lbW9pemVkUHJvcHMuc3R5bGUsIGcgPSB2b2lkIDAgIT09IGsgJiYgbnVsbCAhPT0gayAmJiBrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKSA/IGsuZGlzcGxheSA6IG51bGwsIGguc3R5bGUuZGlzcGxheSA9IHJiKFwiZGlzcGxheVwiLCBnKSk7XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgICBXKGEsIGEucmV0dXJuLCB0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoNiA9PT0gcS50YWcpIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBtKSB0cnkge1xuICAgICAgICAgICAgICBxLnN0YXRlTm9kZS5ub2RlVmFsdWUgPSBsID8gXCJcIiA6IHEubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgICAgICAgICAgVyhhLCBhLnJldHVybiwgdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICgoMjIgIT09IHEudGFnICYmIDIzICE9PSBxLnRhZyB8fCBudWxsID09PSBxLm1lbW9pemVkU3RhdGUgfHwgcSA9PT0gYSkgJiYgbnVsbCAhPT0gcS5jaGlsZCkge1xuICAgICAgICAgICAgcS5jaGlsZC5yZXR1cm4gPSBxO1xuICAgICAgICAgICAgcSA9IHEuY2hpbGQ7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHEgPT09IGEpIGJyZWFrIGE7XG4gICAgICAgICAgZm9yICg7IG51bGwgPT09IHEuc2libGluZzspIHtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBxLnJldHVybiB8fCBxLnJldHVybiA9PT0gYSkgYnJlYWsgYTtcbiAgICAgICAgICAgIG0gPT09IHEgJiYgKG0gPSBudWxsKTtcbiAgICAgICAgICAgIHEgPSBxLnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbSA9PT0gcSAmJiAobSA9IG51bGwpO1xuICAgICAgICAgIHEuc2libGluZy5yZXR1cm4gPSBxLnJldHVybjtcbiAgICAgICAgICBxID0gcS5zaWJsaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIDE5OlxuICAgICAgZGsoYiwgYSk7XG4gICAgICBmayhhKTtcbiAgICAgIGQgJiA0ICYmIGJrKGEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAyMTpcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBkayhiLCBhKSwgZmsoYSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZrKGEpIHtcbiAgdmFyIGIgPSBhLmZsYWdzO1xuICBpZiAoYiAmIDIpIHtcbiAgICB0cnkge1xuICAgICAgYToge1xuICAgICAgICBmb3IgKHZhciBjID0gYS5yZXR1cm47IG51bGwgIT09IGM7KSB7XG4gICAgICAgICAgaWYgKFVqKGMpKSB7XG4gICAgICAgICAgICB2YXIgZCA9IGM7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjID0gYy5yZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgRXJyb3IocCgxNjApKTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoZC50YWcpIHtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBlID0gZC5zdGF0ZU5vZGU7XG4gICAgICAgICAgZC5mbGFncyAmIDMyICYmIChvYihlLCBcIlwiKSwgZC5mbGFncyAmPSAtMzMpO1xuICAgICAgICAgIHZhciBmID0gVmooYSk7XG4gICAgICAgICAgWGooYSwgZiwgZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHZhciBnID0gZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxcbiAgICAgICAgICAgIGggPSBWaihhKTtcbiAgICAgICAgICBXaihhLCBoLCBnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBFcnJvcihwKDE2MSkpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgIFcoYSwgYS5yZXR1cm4sIGspO1xuICAgIH1cbiAgICBhLmZsYWdzICY9IC0zO1xuICB9XG4gIGIgJiA0MDk2ICYmIChhLmZsYWdzICY9IC00MDk3KTtcbn1cbmZ1bmN0aW9uIGlrKGEsIGIsIGMpIHtcbiAgViA9IGE7XG4gIGprKGEsIGIsIGMpO1xufVxuZnVuY3Rpb24gamsoYSwgYiwgYykge1xuICBmb3IgKHZhciBkID0gMCAhPT0gKGEubW9kZSAmIDEpOyBudWxsICE9PSBWOykge1xuICAgIHZhciBlID0gVixcbiAgICAgIGYgPSBlLmNoaWxkO1xuICAgIGlmICgyMiA9PT0gZS50YWcgJiYgZCkge1xuICAgICAgdmFyIGcgPSBudWxsICE9PSBlLm1lbW9pemVkU3RhdGUgfHwgS2o7XG4gICAgICBpZiAoIWcpIHtcbiAgICAgICAgdmFyIGggPSBlLmFsdGVybmF0ZSxcbiAgICAgICAgICBrID0gbnVsbCAhPT0gaCAmJiBudWxsICE9PSBoLm1lbW9pemVkU3RhdGUgfHwgVTtcbiAgICAgICAgaCA9IEtqO1xuICAgICAgICB2YXIgbCA9IFU7XG4gICAgICAgIEtqID0gZztcbiAgICAgICAgaWYgKChVID0gaykgJiYgIWwpIGZvciAoViA9IGU7IG51bGwgIT09IFY7KSBnID0gViwgayA9IGcuY2hpbGQsIDIyID09PSBnLnRhZyAmJiBudWxsICE9PSBnLm1lbW9pemVkU3RhdGUgPyBrayhlKSA6IG51bGwgIT09IGsgPyAoay5yZXR1cm4gPSBnLCBWID0gaykgOiBrayhlKTtcbiAgICAgICAgZm9yICg7IG51bGwgIT09IGY7KSBWID0gZiwgamsoZiwgYiwgYyksIGYgPSBmLnNpYmxpbmc7XG4gICAgICAgIFYgPSBlO1xuICAgICAgICBLaiA9IGg7XG4gICAgICAgIFUgPSBsO1xuICAgICAgfVxuICAgICAgbGsoYSwgYiwgYyk7XG4gICAgfSBlbHNlIDAgIT09IChlLnN1YnRyZWVGbGFncyAmIDg3NzIpICYmIG51bGwgIT09IGYgPyAoZi5yZXR1cm4gPSBlLCBWID0gZikgOiBsayhhLCBiLCBjKTtcbiAgfVxufVxuZnVuY3Rpb24gbGsoYSkge1xuICBmb3IgKDsgbnVsbCAhPT0gVjspIHtcbiAgICB2YXIgYiA9IFY7XG4gICAgaWYgKDAgIT09IChiLmZsYWdzICYgODc3MikpIHtcbiAgICAgIHZhciBjID0gYi5hbHRlcm5hdGU7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoMCAhPT0gKGIuZmxhZ3MgJiA4NzcyKSkgc3dpdGNoIChiLnRhZykge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICBVIHx8IFJqKDUsIGIpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdmFyIGQgPSBiLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGlmIChiLmZsYWdzICYgNCAmJiAhVSkgaWYgKG51bGwgPT09IGMpIGQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNlIHtcbiAgICAgICAgICAgICAgdmFyIGUgPSBiLmVsZW1lbnRUeXBlID09PSBiLnR5cGUgPyBjLm1lbW9pemVkUHJvcHMgOiBMZyhiLnR5cGUsIGMubWVtb2l6ZWRQcm9wcyk7XG4gICAgICAgICAgICAgIGQuY29tcG9uZW50RGlkVXBkYXRlKGUsIGMubWVtb2l6ZWRTdGF0ZSwgZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgZiA9IGIudXBkYXRlUXVldWU7XG4gICAgICAgICAgICBudWxsICE9PSBmICYmIGloKGIsIGYsIGQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgdmFyIGcgPSBiLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgICAgaWYgKG51bGwgIT09IGcpIHtcbiAgICAgICAgICAgICAgYyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChudWxsICE9PSBiLmNoaWxkKSBzd2l0Y2ggKGIuY2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgYyA9IGIuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgYyA9IGIuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGloKGIsIGcsIGMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdmFyIGggPSBiLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIGlmIChudWxsID09PSBjICYmIGIuZmxhZ3MgJiA0KSB7XG4gICAgICAgICAgICAgIGMgPSBoO1xuICAgICAgICAgICAgICB2YXIgayA9IGIubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICAgICAgc3dpdGNoIChiLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFwiYnV0dG9uXCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcImlucHV0XCI6XG4gICAgICAgICAgICAgICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJ0ZXh0YXJlYVwiOlxuICAgICAgICAgICAgICAgICAgay5hdXRvRm9jdXMgJiYgYy5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcImltZ1wiOlxuICAgICAgICAgICAgICAgICAgay5zcmMgJiYgKGMuc3JjID0gay5zcmMpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgIGlmIChudWxsID09PSBiLm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgdmFyIGwgPSBiLmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGwubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gbSkge1xuICAgICAgICAgICAgICAgICAgdmFyIHEgPSBtLmRlaHlkcmF0ZWQ7XG4gICAgICAgICAgICAgICAgICBudWxsICE9PSBxICYmIGJkKHEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAxOTpcbiAgICAgICAgICBjYXNlIDE3OlxuICAgICAgICAgIGNhc2UgMjE6XG4gICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICBjYXNlIDIzOlxuICAgICAgICAgIGNhc2UgMjU6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgRXJyb3IocCgxNjMpKTtcbiAgICAgICAgfVxuICAgICAgICBVIHx8IGIuZmxhZ3MgJiA1MTIgJiYgU2ooYik7XG4gICAgICB9IGNhdGNoIChyKSB7XG4gICAgICAgIFcoYiwgYi5yZXR1cm4sIHIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYiA9PT0gYSkge1xuICAgICAgViA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYyA9IGIuc2libGluZztcbiAgICBpZiAobnVsbCAhPT0gYykge1xuICAgICAgYy5yZXR1cm4gPSBiLnJldHVybjtcbiAgICAgIFYgPSBjO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIFYgPSBiLnJldHVybjtcbiAgfVxufVxuZnVuY3Rpb24gaGsoYSkge1xuICBmb3IgKDsgbnVsbCAhPT0gVjspIHtcbiAgICB2YXIgYiA9IFY7XG4gICAgaWYgKGIgPT09IGEpIHtcbiAgICAgIFYgPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBjID0gYi5zaWJsaW5nO1xuICAgIGlmIChudWxsICE9PSBjKSB7XG4gICAgICBjLnJldHVybiA9IGIucmV0dXJuO1xuICAgICAgViA9IGM7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgViA9IGIucmV0dXJuO1xuICB9XG59XG5mdW5jdGlvbiBrayhhKSB7XG4gIGZvciAoOyBudWxsICE9PSBWOykge1xuICAgIHZhciBiID0gVjtcbiAgICB0cnkge1xuICAgICAgc3dpdGNoIChiLnRhZykge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgdmFyIGMgPSBiLnJldHVybjtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgUmooNCwgYik7XG4gICAgICAgICAgfSBjYXRjaCAoaykge1xuICAgICAgICAgICAgVyhiLCBjLCBrKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB2YXIgZCA9IGIuc3RhdGVOb2RlO1xuICAgICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KSB7XG4gICAgICAgICAgICB2YXIgZSA9IGIucmV0dXJuO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZC5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoaykge1xuICAgICAgICAgICAgICBXKGIsIGUsIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZiA9IGIucmV0dXJuO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBTaihiKTtcbiAgICAgICAgICB9IGNhdGNoIChrKSB7XG4gICAgICAgICAgICBXKGIsIGYsIGspO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHZhciBnID0gYi5yZXR1cm47XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFNqKGIpO1xuICAgICAgICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgICAgICAgIFcoYiwgZywgayk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGspIHtcbiAgICAgIFcoYiwgYi5yZXR1cm4sIGspO1xuICAgIH1cbiAgICBpZiAoYiA9PT0gYSkge1xuICAgICAgViA9IG51bGw7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdmFyIGggPSBiLnNpYmxpbmc7XG4gICAgaWYgKG51bGwgIT09IGgpIHtcbiAgICAgIGgucmV0dXJuID0gYi5yZXR1cm47XG4gICAgICBWID0gaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBWID0gYi5yZXR1cm47XG4gIH1cbn1cbnZhciBtayA9IE1hdGguY2VpbCxcbiAgbmsgPSB1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFxuICBvayA9IHVhLlJlYWN0Q3VycmVudE93bmVyLFxuICBwayA9IHVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFxuICBLID0gMCxcbiAgUiA9IG51bGwsXG4gIFkgPSBudWxsLFxuICBaID0gMCxcbiAgZ2ogPSAwLFxuICBmaiA9IFVmKDApLFxuICBUID0gMCxcbiAgcWsgPSBudWxsLFxuICBoaCA9IDAsXG4gIHJrID0gMCxcbiAgc2sgPSAwLFxuICB0ayA9IG51bGwsXG4gIHVrID0gbnVsbCxcbiAgZ2sgPSAwLFxuICBIaiA9IEluZmluaXR5LFxuICB2ayA9IG51bGwsXG4gIFBpID0gITEsXG4gIFFpID0gbnVsbCxcbiAgU2kgPSBudWxsLFxuICB3ayA9ICExLFxuICB4ayA9IG51bGwsXG4gIHlrID0gMCxcbiAgemsgPSAwLFxuICBBayA9IG51bGwsXG4gIEJrID0gLTEsXG4gIENrID0gMDtcbmZ1bmN0aW9uIEwoKSB7XG4gIHJldHVybiAwICE9PSAoSyAmIDYpID8gQigpIDogLTEgIT09IEJrID8gQmsgOiBCayA9IEIoKTtcbn1cbmZ1bmN0aW9uIGxoKGEpIHtcbiAgaWYgKDAgPT09IChhLm1vZGUgJiAxKSkgcmV0dXJuIDE7XG4gIGlmICgwICE9PSAoSyAmIDIpICYmIDAgIT09IFopIHJldHVybiBaICYgLVo7XG4gIGlmIChudWxsICE9PSBLZy50cmFuc2l0aW9uKSByZXR1cm4gMCA9PT0gQ2sgJiYgKENrID0geWMoKSksIENrO1xuICBhID0gQztcbiAgaWYgKDAgIT09IGEpIHJldHVybiBhO1xuICBhID0gd2luZG93LmV2ZW50O1xuICBhID0gdm9pZCAwID09PSBhID8gMTYgOiBqZChhLnR5cGUpO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIG1oKGEsIGIsIGMsIGQpIHtcbiAgaWYgKDUwIDwgemspIHRocm93IHprID0gMCwgQWsgPSBudWxsLCBFcnJvcihwKDE4NSkpO1xuICBBYyhhLCBjLCBkKTtcbiAgaWYgKDAgPT09IChLICYgMikgfHwgYSAhPT0gUikgYSA9PT0gUiAmJiAoMCA9PT0gKEsgJiAyKSAmJiAocmsgfD0gYyksIDQgPT09IFQgJiYgRGsoYSwgWikpLCBFayhhLCBkKSwgMSA9PT0gYyAmJiAwID09PSBLICYmIDAgPT09IChiLm1vZGUgJiAxKSAmJiAoSGogPSBCKCkgKyA1MDAsIGZnICYmIGpnKCkpO1xufVxuZnVuY3Rpb24gRWsoYSwgYikge1xuICB2YXIgYyA9IGEuY2FsbGJhY2tOb2RlO1xuICB3YyhhLCBiKTtcbiAgdmFyIGQgPSB1YyhhLCBhID09PSBSID8gWiA6IDApO1xuICBpZiAoMCA9PT0gZCkgbnVsbCAhPT0gYyAmJiBiYyhjKSwgYS5jYWxsYmFja05vZGUgPSBudWxsLCBhLmNhbGxiYWNrUHJpb3JpdHkgPSAwO2Vsc2UgaWYgKGIgPSBkICYgLWQsIGEuY2FsbGJhY2tQcmlvcml0eSAhPT0gYikge1xuICAgIG51bGwgIT0gYyAmJiBiYyhjKTtcbiAgICBpZiAoMSA9PT0gYikgMCA9PT0gYS50YWcgPyBpZyhGay5iaW5kKG51bGwsIGEpKSA6IGhnKEZrLmJpbmQobnVsbCwgYSkpLCBKZihmdW5jdGlvbiAoKSB7XG4gICAgICAwID09PSAoSyAmIDYpICYmIGpnKCk7XG4gICAgfSksIGMgPSBudWxsO2Vsc2Uge1xuICAgICAgc3dpdGNoIChEYyhkKSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgYyA9IGZjO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgYyA9IGdjO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE2OlxuICAgICAgICAgIGMgPSBoYztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1MzY4NzA5MTI6XG4gICAgICAgICAgYyA9IGpjO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGMgPSBoYztcbiAgICAgIH1cbiAgICAgIGMgPSBHayhjLCBIay5iaW5kKG51bGwsIGEpKTtcbiAgICB9XG4gICAgYS5jYWxsYmFja1ByaW9yaXR5ID0gYjtcbiAgICBhLmNhbGxiYWNrTm9kZSA9IGM7XG4gIH1cbn1cbmZ1bmN0aW9uIEhrKGEsIGIpIHtcbiAgQmsgPSAtMTtcbiAgQ2sgPSAwO1xuICBpZiAoMCAhPT0gKEsgJiA2KSkgdGhyb3cgRXJyb3IocCgzMjcpKTtcbiAgdmFyIGMgPSBhLmNhbGxiYWNrTm9kZTtcbiAgaWYgKElrKCkgJiYgYS5jYWxsYmFja05vZGUgIT09IGMpIHJldHVybiBudWxsO1xuICB2YXIgZCA9IHVjKGEsIGEgPT09IFIgPyBaIDogMCk7XG4gIGlmICgwID09PSBkKSByZXR1cm4gbnVsbDtcbiAgaWYgKDAgIT09IChkICYgMzApIHx8IDAgIT09IChkICYgYS5leHBpcmVkTGFuZXMpIHx8IGIpIGIgPSBKayhhLCBkKTtlbHNlIHtcbiAgICBiID0gZDtcbiAgICB2YXIgZSA9IEs7XG4gICAgSyB8PSAyO1xuICAgIHZhciBmID0gS2soKTtcbiAgICBpZiAoUiAhPT0gYSB8fCBaICE9PSBiKSB2ayA9IG51bGwsIEhqID0gQigpICsgNTAwLCBMayhhLCBiKTtcbiAgICBkbyB0cnkge1xuICAgICAgTWsoKTtcbiAgICAgIGJyZWFrO1xuICAgIH0gY2F0Y2ggKGgpIHtcbiAgICAgIE5rKGEsIGgpO1xuICAgIH0gd2hpbGUgKDEpO1xuICAgIFFnKCk7XG4gICAgbmsuY3VycmVudCA9IGY7XG4gICAgSyA9IGU7XG4gICAgbnVsbCAhPT0gWSA/IGIgPSAwIDogKFIgPSBudWxsLCBaID0gMCwgYiA9IFQpO1xuICB9XG4gIGlmICgwICE9PSBiKSB7XG4gICAgMiA9PT0gYiAmJiAoZSA9IHhjKGEpLCAwICE9PSBlICYmIChkID0gZSwgYiA9IE9rKGEsIGUpKSk7XG4gICAgaWYgKDEgPT09IGIpIHRocm93IGMgPSBxaywgTGsoYSwgMCksIERrKGEsIGQpLCBFayhhLCBCKCkpLCBjO1xuICAgIGlmICg2ID09PSBiKSBEayhhLCBkKTtlbHNlIHtcbiAgICAgIGUgPSBhLmN1cnJlbnQuYWx0ZXJuYXRlO1xuICAgICAgaWYgKDAgPT09IChkICYgMzApICYmICFQayhlKSAmJiAoYiA9IEprKGEsIGQpLCAyID09PSBiICYmIChmID0geGMoYSksIDAgIT09IGYgJiYgKGQgPSBmLCBiID0gT2soYSwgZikpKSwgMSA9PT0gYikpIHRocm93IGMgPSBxaywgTGsoYSwgMCksIERrKGEsIGQpLCBFayhhLCBCKCkpLCBjO1xuICAgICAgYS5maW5pc2hlZFdvcmsgPSBlO1xuICAgICAgYS5maW5pc2hlZExhbmVzID0gZDtcbiAgICAgIHN3aXRjaCAoYikge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICB0aHJvdyBFcnJvcihwKDM0NSkpO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgUWsoYSwgdWssIHZrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIERrKGEsIGQpO1xuICAgICAgICAgIGlmICgoZCAmIDEzMDAyMzQyNCkgPT09IGQgJiYgKGIgPSBnayArIDUwMCAtIEIoKSwgMTAgPCBiKSkge1xuICAgICAgICAgICAgaWYgKDAgIT09IHVjKGEsIDApKSBicmVhaztcbiAgICAgICAgICAgIGUgPSBhLnN1c3BlbmRlZExhbmVzO1xuICAgICAgICAgICAgaWYgKChlICYgZCkgIT09IGQpIHtcbiAgICAgICAgICAgICAgTCgpO1xuICAgICAgICAgICAgICBhLnBpbmdlZExhbmVzIHw9IGEuc3VzcGVuZGVkTGFuZXMgJiBlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGEudGltZW91dEhhbmRsZSA9IEZmKFFrLmJpbmQobnVsbCwgYSwgdWssIHZrKSwgYik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgUWsoYSwgdWssIHZrKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIERrKGEsIGQpO1xuICAgICAgICAgIGlmICgoZCAmIDQxOTQyNDApID09PSBkKSBicmVhaztcbiAgICAgICAgICBiID0gYS5ldmVudFRpbWVzO1xuICAgICAgICAgIGZvciAoZSA9IC0xOyAwIDwgZDspIHtcbiAgICAgICAgICAgIHZhciBnID0gMzEgLSBvYyhkKTtcbiAgICAgICAgICAgIGYgPSAxIDw8IGc7XG4gICAgICAgICAgICBnID0gYltnXTtcbiAgICAgICAgICAgIGcgPiBlICYmIChlID0gZyk7XG4gICAgICAgICAgICBkICY9IH5mO1xuICAgICAgICAgIH1cbiAgICAgICAgICBkID0gZTtcbiAgICAgICAgICBkID0gQigpIC0gZDtcbiAgICAgICAgICBkID0gKDEyMCA+IGQgPyAxMjAgOiA0ODAgPiBkID8gNDgwIDogMTA4MCA+IGQgPyAxMDgwIDogMTkyMCA+IGQgPyAxOTIwIDogM0UzID4gZCA/IDNFMyA6IDQzMjAgPiBkID8gNDMyMCA6IDE5NjAgKiBtayhkIC8gMTk2MCkpIC0gZDtcbiAgICAgICAgICBpZiAoMTAgPCBkKSB7XG4gICAgICAgICAgICBhLnRpbWVvdXRIYW5kbGUgPSBGZihRay5iaW5kKG51bGwsIGEsIHVrLCB2ayksIGQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIFFrKGEsIHVrLCB2ayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICBRayhhLCB1aywgdmspO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IEVycm9yKHAoMzI5KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIEVrKGEsIEIoKSk7XG4gIHJldHVybiBhLmNhbGxiYWNrTm9kZSA9PT0gYyA/IEhrLmJpbmQobnVsbCwgYSkgOiBudWxsO1xufVxuZnVuY3Rpb24gT2soYSwgYikge1xuICB2YXIgYyA9IHRrO1xuICBhLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQgJiYgKExrKGEsIGIpLmZsYWdzIHw9IDI1Nik7XG4gIGEgPSBKayhhLCBiKTtcbiAgMiAhPT0gYSAmJiAoYiA9IHVrLCB1ayA9IGMsIG51bGwgIT09IGIgJiYgR2ooYikpO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIEdqKGEpIHtcbiAgbnVsbCA9PT0gdWsgPyB1ayA9IGEgOiB1ay5wdXNoLmFwcGx5KHVrLCBhKTtcbn1cbmZ1bmN0aW9uIFBrKGEpIHtcbiAgZm9yICh2YXIgYiA9IGE7Oykge1xuICAgIGlmIChiLmZsYWdzICYgMTYzODQpIHtcbiAgICAgIHZhciBjID0gYi51cGRhdGVRdWV1ZTtcbiAgICAgIGlmIChudWxsICE9PSBjICYmIChjID0gYy5zdG9yZXMsIG51bGwgIT09IGMpKSBmb3IgKHZhciBkID0gMDsgZCA8IGMubGVuZ3RoOyBkKyspIHtcbiAgICAgICAgdmFyIGUgPSBjW2RdLFxuICAgICAgICAgIGYgPSBlLmdldFNuYXBzaG90O1xuICAgICAgICBlID0gZS52YWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIUhlKGYoKSwgZSkpIHJldHVybiAhMTtcbiAgICAgICAgfSBjYXRjaCAoZykge1xuICAgICAgICAgIHJldHVybiAhMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjID0gYi5jaGlsZDtcbiAgICBpZiAoYi5zdWJ0cmVlRmxhZ3MgJiAxNjM4NCAmJiBudWxsICE9PSBjKSBjLnJldHVybiA9IGIsIGIgPSBjO2Vsc2Uge1xuICAgICAgaWYgKGIgPT09IGEpIGJyZWFrO1xuICAgICAgZm9yICg7IG51bGwgPT09IGIuc2libGluZzspIHtcbiAgICAgICAgaWYgKG51bGwgPT09IGIucmV0dXJuIHx8IGIucmV0dXJuID09PSBhKSByZXR1cm4gITA7XG4gICAgICAgIGIgPSBiLnJldHVybjtcbiAgICAgIH1cbiAgICAgIGIuc2libGluZy5yZXR1cm4gPSBiLnJldHVybjtcbiAgICAgIGIgPSBiLnNpYmxpbmc7XG4gICAgfVxuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIERrKGEsIGIpIHtcbiAgYiAmPSB+c2s7XG4gIGIgJj0gfnJrO1xuICBhLnN1c3BlbmRlZExhbmVzIHw9IGI7XG4gIGEucGluZ2VkTGFuZXMgJj0gfmI7XG4gIGZvciAoYSA9IGEuZXhwaXJhdGlvblRpbWVzOyAwIDwgYjspIHtcbiAgICB2YXIgYyA9IDMxIC0gb2MoYiksXG4gICAgICBkID0gMSA8PCBjO1xuICAgIGFbY10gPSAtMTtcbiAgICBiICY9IH5kO1xuICB9XG59XG5mdW5jdGlvbiBGayhhKSB7XG4gIGlmICgwICE9PSAoSyAmIDYpKSB0aHJvdyBFcnJvcihwKDMyNykpO1xuICBJaygpO1xuICB2YXIgYiA9IHVjKGEsIDApO1xuICBpZiAoMCA9PT0gKGIgJiAxKSkgcmV0dXJuIEVrKGEsIEIoKSksIG51bGw7XG4gIHZhciBjID0gSmsoYSwgYik7XG4gIGlmICgwICE9PSBhLnRhZyAmJiAyID09PSBjKSB7XG4gICAgdmFyIGQgPSB4YyhhKTtcbiAgICAwICE9PSBkICYmIChiID0gZCwgYyA9IE9rKGEsIGQpKTtcbiAgfVxuICBpZiAoMSA9PT0gYykgdGhyb3cgYyA9IHFrLCBMayhhLCAwKSwgRGsoYSwgYiksIEVrKGEsIEIoKSksIGM7XG4gIGlmICg2ID09PSBjKSB0aHJvdyBFcnJvcihwKDM0NSkpO1xuICBhLmZpbmlzaGVkV29yayA9IGEuY3VycmVudC5hbHRlcm5hdGU7XG4gIGEuZmluaXNoZWRMYW5lcyA9IGI7XG4gIFFrKGEsIHVrLCB2ayk7XG4gIEVrKGEsIEIoKSk7XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gUmsoYSwgYikge1xuICB2YXIgYyA9IEs7XG4gIEsgfD0gMTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gYShiKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBLID0gYywgMCA9PT0gSyAmJiAoSGogPSBCKCkgKyA1MDAsIGZnICYmIGpnKCkpO1xuICB9XG59XG5mdW5jdGlvbiBTayhhKSB7XG4gIG51bGwgIT09IHhrICYmIDAgPT09IHhrLnRhZyAmJiAwID09PSAoSyAmIDYpICYmIElrKCk7XG4gIHZhciBiID0gSztcbiAgSyB8PSAxO1xuICB2YXIgYyA9IHBrLnRyYW5zaXRpb24sXG4gICAgZCA9IEM7XG4gIHRyeSB7XG4gICAgaWYgKHBrLnRyYW5zaXRpb24gPSBudWxsLCBDID0gMSwgYSkgcmV0dXJuIGEoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBDID0gZCwgcGsudHJhbnNpdGlvbiA9IGMsIEsgPSBiLCAwID09PSAoSyAmIDYpICYmIGpnKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIElqKCkge1xuICBnaiA9IGZqLmN1cnJlbnQ7XG4gIEUoZmopO1xufVxuZnVuY3Rpb24gTGsoYSwgYikge1xuICBhLmZpbmlzaGVkV29yayA9IG51bGw7XG4gIGEuZmluaXNoZWRMYW5lcyA9IDA7XG4gIHZhciBjID0gYS50aW1lb3V0SGFuZGxlO1xuICAtMSAhPT0gYyAmJiAoYS50aW1lb3V0SGFuZGxlID0gLTEsIEdmKGMpKTtcbiAgaWYgKG51bGwgIT09IFkpIGZvciAoYyA9IFkucmV0dXJuOyBudWxsICE9PSBjOykge1xuICAgIHZhciBkID0gYztcbiAgICB3ZyhkKTtcbiAgICBzd2l0Y2ggKGQudGFnKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGQgPSBkLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7XG4gICAgICAgIG51bGwgIT09IGQgJiYgdm9pZCAwICE9PSBkICYmICRmKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICBKaCgpO1xuICAgICAgICBFKFdmKTtcbiAgICAgICAgRShIKTtcbiAgICAgICAgT2goKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIExoKGQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgSmgoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICBFKE0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTk6XG4gICAgICAgIEUoTSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAxMDpcbiAgICAgICAgUmcoZC50eXBlLl9jb250ZXh0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDIyOlxuICAgICAgY2FzZSAyMzpcbiAgICAgICAgSWooKTtcbiAgICB9XG4gICAgYyA9IGMucmV0dXJuO1xuICB9XG4gIFIgPSBhO1xuICBZID0gYSA9IHdoKGEuY3VycmVudCwgbnVsbCk7XG4gIFogPSBnaiA9IGI7XG4gIFQgPSAwO1xuICBxayA9IG51bGw7XG4gIHNrID0gcmsgPSBoaCA9IDA7XG4gIHVrID0gdGsgPSBudWxsO1xuICBpZiAobnVsbCAhPT0gV2cpIHtcbiAgICBmb3IgKGIgPSAwOyBiIDwgV2cubGVuZ3RoOyBiKyspIGlmIChjID0gV2dbYl0sIGQgPSBjLmludGVybGVhdmVkLCBudWxsICE9PSBkKSB7XG4gICAgICBjLmludGVybGVhdmVkID0gbnVsbDtcbiAgICAgIHZhciBlID0gZC5uZXh0LFxuICAgICAgICBmID0gYy5wZW5kaW5nO1xuICAgICAgaWYgKG51bGwgIT09IGYpIHtcbiAgICAgICAgdmFyIGcgPSBmLm5leHQ7XG4gICAgICAgIGYubmV4dCA9IGU7XG4gICAgICAgIGQubmV4dCA9IGc7XG4gICAgICB9XG4gICAgICBjLnBlbmRpbmcgPSBkO1xuICAgIH1cbiAgICBXZyA9IG51bGw7XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBOayhhLCBiKSB7XG4gIGRvIHtcbiAgICB2YXIgYyA9IFk7XG4gICAgdHJ5IHtcbiAgICAgIFFnKCk7XG4gICAgICBQaC5jdXJyZW50ID0gYWk7XG4gICAgICBpZiAoU2gpIHtcbiAgICAgICAgZm9yICh2YXIgZCA9IE4ubWVtb2l6ZWRTdGF0ZTsgbnVsbCAhPT0gZDspIHtcbiAgICAgICAgICB2YXIgZSA9IGQucXVldWU7XG4gICAgICAgICAgbnVsbCAhPT0gZSAmJiAoZS5wZW5kaW5nID0gbnVsbCk7XG4gICAgICAgICAgZCA9IGQubmV4dDtcbiAgICAgICAgfVxuICAgICAgICBTaCA9ICExO1xuICAgICAgfVxuICAgICAgUmggPSAwO1xuICAgICAgUCA9IE8gPSBOID0gbnVsbDtcbiAgICAgIFRoID0gITE7XG4gICAgICBVaCA9IDA7XG4gICAgICBvay5jdXJyZW50ID0gbnVsbDtcbiAgICAgIGlmIChudWxsID09PSBjIHx8IG51bGwgPT09IGMucmV0dXJuKSB7XG4gICAgICAgIFQgPSAxO1xuICAgICAgICBxayA9IGI7XG4gICAgICAgIFkgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGE6IHtcbiAgICAgICAgdmFyIGYgPSBhLFxuICAgICAgICAgIGcgPSBjLnJldHVybixcbiAgICAgICAgICBoID0gYyxcbiAgICAgICAgICBrID0gYjtcbiAgICAgICAgYiA9IFo7XG4gICAgICAgIGguZmxhZ3MgfD0gMzI3Njg7XG4gICAgICAgIGlmIChudWxsICE9PSBrICYmIFwib2JqZWN0XCIgPT09IF90eXBlb2YoaykgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2Ygay50aGVuKSB7XG4gICAgICAgICAgdmFyIGwgPSBrLFxuICAgICAgICAgICAgbSA9IGgsXG4gICAgICAgICAgICBxID0gbS50YWc7XG4gICAgICAgICAgaWYgKDAgPT09IChtLm1vZGUgJiAxKSAmJiAoMCA9PT0gcSB8fCAxMSA9PT0gcSB8fCAxNSA9PT0gcSkpIHtcbiAgICAgICAgICAgIHZhciByID0gbS5hbHRlcm5hdGU7XG4gICAgICAgICAgICByID8gKG0udXBkYXRlUXVldWUgPSByLnVwZGF0ZVF1ZXVlLCBtLm1lbW9pemVkU3RhdGUgPSByLm1lbW9pemVkU3RhdGUsIG0ubGFuZXMgPSByLmxhbmVzKSA6IChtLnVwZGF0ZVF1ZXVlID0gbnVsbCwgbS5tZW1vaXplZFN0YXRlID0gbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciB5ID0gVmkoZyk7XG4gICAgICAgICAgaWYgKG51bGwgIT09IHkpIHtcbiAgICAgICAgICAgIHkuZmxhZ3MgJj0gLTI1NztcbiAgICAgICAgICAgIFdpKHksIGcsIGgsIGYsIGIpO1xuICAgICAgICAgICAgeS5tb2RlICYgMSAmJiBUaShmLCBsLCBiKTtcbiAgICAgICAgICAgIGIgPSB5O1xuICAgICAgICAgICAgayA9IGw7XG4gICAgICAgICAgICB2YXIgbiA9IGIudXBkYXRlUXVldWU7XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gbikge1xuICAgICAgICAgICAgICB2YXIgdCA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgdC5hZGQoayk7XG4gICAgICAgICAgICAgIGIudXBkYXRlUXVldWUgPSB0O1xuICAgICAgICAgICAgfSBlbHNlIG4uYWRkKGspO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKDAgPT09IChiICYgMSkpIHtcbiAgICAgICAgICAgICAgVGkoZiwgbCwgYik7XG4gICAgICAgICAgICAgIHVqKCk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBrID0gRXJyb3IocCg0MjYpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoSSAmJiBoLm1vZGUgJiAxKSB7XG4gICAgICAgICAgdmFyIEogPSBWaShnKTtcbiAgICAgICAgICBpZiAobnVsbCAhPT0gSikge1xuICAgICAgICAgICAgMCA9PT0gKEouZmxhZ3MgJiA2NTUzNikgJiYgKEouZmxhZ3MgfD0gMjU2KTtcbiAgICAgICAgICAgIFdpKEosIGcsIGgsIGYsIGIpO1xuICAgICAgICAgICAgSmcoS2koaywgaCkpO1xuICAgICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZiA9IGsgPSBLaShrLCBoKTtcbiAgICAgICAgNCAhPT0gVCAmJiAoVCA9IDIpO1xuICAgICAgICBudWxsID09PSB0ayA/IHRrID0gW2ZdIDogdGsucHVzaChmKTtcbiAgICAgICAgZiA9IGc7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzd2l0Y2ggKGYudGFnKSB7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgIGYuZmxhZ3MgfD0gNjU1MzY7XG4gICAgICAgICAgICAgIGIgJj0gLWI7XG4gICAgICAgICAgICAgIGYubGFuZXMgfD0gYjtcbiAgICAgICAgICAgICAgdmFyIHggPSBPaShmLCBrLCBiKTtcbiAgICAgICAgICAgICAgZmgoZiwgeCk7XG4gICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgIGggPSBrO1xuICAgICAgICAgICAgICB2YXIgdyA9IGYudHlwZSxcbiAgICAgICAgICAgICAgICB1ID0gZi5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgIGlmICgwID09PSAoZi5mbGFncyAmIDEyOCkgJiYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIHx8IG51bGwgIT09IHUgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCAmJiAobnVsbCA9PT0gU2kgfHwgIVNpLmhhcyh1KSkpKSB7XG4gICAgICAgICAgICAgICAgZi5mbGFncyB8PSA2NTUzNjtcbiAgICAgICAgICAgICAgICBiICY9IC1iO1xuICAgICAgICAgICAgICAgIGYubGFuZXMgfD0gYjtcbiAgICAgICAgICAgICAgICB2YXIgRiA9IFJpKGYsIGgsIGIpO1xuICAgICAgICAgICAgICAgIGZoKGYsIEYpO1xuICAgICAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZiA9IGYucmV0dXJuO1xuICAgICAgICB9IHdoaWxlIChudWxsICE9PSBmKTtcbiAgICAgIH1cbiAgICAgIFRrKGMpO1xuICAgIH0gY2F0Y2ggKG5hKSB7XG4gICAgICBiID0gbmE7XG4gICAgICBZID09PSBjICYmIG51bGwgIT09IGMgJiYgKFkgPSBjID0gYy5yZXR1cm4pO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9IHdoaWxlICgxKTtcbn1cbmZ1bmN0aW9uIEtrKCkge1xuICB2YXIgYSA9IG5rLmN1cnJlbnQ7XG4gIG5rLmN1cnJlbnQgPSBhaTtcbiAgcmV0dXJuIG51bGwgPT09IGEgPyBhaSA6IGE7XG59XG5mdW5jdGlvbiB1aigpIHtcbiAgaWYgKDAgPT09IFQgfHwgMyA9PT0gVCB8fCAyID09PSBUKSBUID0gNDtcbiAgbnVsbCA9PT0gUiB8fCAwID09PSAoaGggJiAyNjg0MzU0NTUpICYmIDAgPT09IChyayAmIDI2ODQzNTQ1NSkgfHwgRGsoUiwgWik7XG59XG5mdW5jdGlvbiBKayhhLCBiKSB7XG4gIHZhciBjID0gSztcbiAgSyB8PSAyO1xuICB2YXIgZCA9IEtrKCk7XG4gIGlmIChSICE9PSBhIHx8IFogIT09IGIpIHZrID0gbnVsbCwgTGsoYSwgYik7XG4gIGRvIHRyeSB7XG4gICAgVWsoKTtcbiAgICBicmVhaztcbiAgfSBjYXRjaCAoZSkge1xuICAgIE5rKGEsIGUpO1xuICB9IHdoaWxlICgxKTtcbiAgUWcoKTtcbiAgSyA9IGM7XG4gIG5rLmN1cnJlbnQgPSBkO1xuICBpZiAobnVsbCAhPT0gWSkgdGhyb3cgRXJyb3IocCgyNjEpKTtcbiAgUiA9IG51bGw7XG4gIFogPSAwO1xuICByZXR1cm4gVDtcbn1cbmZ1bmN0aW9uIFVrKCkge1xuICBmb3IgKDsgbnVsbCAhPT0gWTspIFZrKFkpO1xufVxuZnVuY3Rpb24gTWsoKSB7XG4gIGZvciAoOyBudWxsICE9PSBZICYmICFjYygpOykgVmsoWSk7XG59XG5mdW5jdGlvbiBWayhhKSB7XG4gIHZhciBiID0gV2soYS5hbHRlcm5hdGUsIGEsIGdqKTtcbiAgYS5tZW1vaXplZFByb3BzID0gYS5wZW5kaW5nUHJvcHM7XG4gIG51bGwgPT09IGIgPyBUayhhKSA6IFkgPSBiO1xuICBvay5jdXJyZW50ID0gbnVsbDtcbn1cbmZ1bmN0aW9uIFRrKGEpIHtcbiAgdmFyIGIgPSBhO1xuICBkbyB7XG4gICAgdmFyIGMgPSBiLmFsdGVybmF0ZTtcbiAgICBhID0gYi5yZXR1cm47XG4gICAgaWYgKDAgPT09IChiLmZsYWdzICYgMzI3NjgpKSB7XG4gICAgICBpZiAoYyA9IEZqKGMsIGIsIGdqKSwgbnVsbCAhPT0gYykge1xuICAgICAgICBZID0gYztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjID0gSmooYywgYik7XG4gICAgICBpZiAobnVsbCAhPT0gYykge1xuICAgICAgICBjLmZsYWdzICY9IDMyNzY3O1xuICAgICAgICBZID0gYztcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG51bGwgIT09IGEpIGEuZmxhZ3MgfD0gMzI3NjgsIGEuc3VidHJlZUZsYWdzID0gMCwgYS5kZWxldGlvbnMgPSBudWxsO2Vsc2Uge1xuICAgICAgICBUID0gNjtcbiAgICAgICAgWSA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IGIuc2libGluZztcbiAgICBpZiAobnVsbCAhPT0gYikge1xuICAgICAgWSA9IGI7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFkgPSBiID0gYTtcbiAgfSB3aGlsZSAobnVsbCAhPT0gYik7XG4gIDAgPT09IFQgJiYgKFQgPSA1KTtcbn1cbmZ1bmN0aW9uIFFrKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSBDLFxuICAgIGUgPSBway50cmFuc2l0aW9uO1xuICB0cnkge1xuICAgIHBrLnRyYW5zaXRpb24gPSBudWxsLCBDID0gMSwgWGsoYSwgYiwgYywgZCk7XG4gIH0gZmluYWxseSB7XG4gICAgcGsudHJhbnNpdGlvbiA9IGUsIEMgPSBkO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gWGsoYSwgYiwgYywgZCkge1xuICBkbyBJaygpOyB3aGlsZSAobnVsbCAhPT0geGspO1xuICBpZiAoMCAhPT0gKEsgJiA2KSkgdGhyb3cgRXJyb3IocCgzMjcpKTtcbiAgYyA9IGEuZmluaXNoZWRXb3JrO1xuICB2YXIgZSA9IGEuZmluaXNoZWRMYW5lcztcbiAgaWYgKG51bGwgPT09IGMpIHJldHVybiBudWxsO1xuICBhLmZpbmlzaGVkV29yayA9IG51bGw7XG4gIGEuZmluaXNoZWRMYW5lcyA9IDA7XG4gIGlmIChjID09PSBhLmN1cnJlbnQpIHRocm93IEVycm9yKHAoMTc3KSk7XG4gIGEuY2FsbGJhY2tOb2RlID0gbnVsbDtcbiAgYS5jYWxsYmFja1ByaW9yaXR5ID0gMDtcbiAgdmFyIGYgPSBjLmxhbmVzIHwgYy5jaGlsZExhbmVzO1xuICBCYyhhLCBmKTtcbiAgYSA9PT0gUiAmJiAoWSA9IFIgPSBudWxsLCBaID0gMCk7XG4gIDAgPT09IChjLnN1YnRyZWVGbGFncyAmIDIwNjQpICYmIDAgPT09IChjLmZsYWdzICYgMjA2NCkgfHwgd2sgfHwgKHdrID0gITAsIEdrKGhjLCBmdW5jdGlvbiAoKSB7XG4gICAgSWsoKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSkpO1xuICBmID0gMCAhPT0gKGMuZmxhZ3MgJiAxNTk5MCk7XG4gIGlmICgwICE9PSAoYy5zdWJ0cmVlRmxhZ3MgJiAxNTk5MCkgfHwgZikge1xuICAgIGYgPSBway50cmFuc2l0aW9uO1xuICAgIHBrLnRyYW5zaXRpb24gPSBudWxsO1xuICAgIHZhciBnID0gQztcbiAgICBDID0gMTtcbiAgICB2YXIgaCA9IEs7XG4gICAgSyB8PSA0O1xuICAgIG9rLmN1cnJlbnQgPSBudWxsO1xuICAgIFBqKGEsIGMpO1xuICAgIGVrKGMsIGEpO1xuICAgIE9lKERmKTtcbiAgICBkZCA9ICEhQ2Y7XG4gICAgRGYgPSBDZiA9IG51bGw7XG4gICAgYS5jdXJyZW50ID0gYztcbiAgICBpayhjLCBhLCBlKTtcbiAgICBkYygpO1xuICAgIEsgPSBoO1xuICAgIEMgPSBnO1xuICAgIHBrLnRyYW5zaXRpb24gPSBmO1xuICB9IGVsc2UgYS5jdXJyZW50ID0gYztcbiAgd2sgJiYgKHdrID0gITEsIHhrID0gYSwgeWsgPSBlKTtcbiAgZiA9IGEucGVuZGluZ0xhbmVzO1xuICAwID09PSBmICYmIChTaSA9IG51bGwpO1xuICBtYyhjLnN0YXRlTm9kZSwgZCk7XG4gIEVrKGEsIEIoKSk7XG4gIGlmIChudWxsICE9PSBiKSBmb3IgKGQgPSBhLm9uUmVjb3ZlcmFibGVFcnJvciwgYyA9IDA7IGMgPCBiLmxlbmd0aDsgYysrKSBlID0gYltjXSwgZChlLnZhbHVlLCB7XG4gICAgY29tcG9uZW50U3RhY2s6IGUuc3RhY2ssXG4gICAgZGlnZXN0OiBlLmRpZ2VzdFxuICB9KTtcbiAgaWYgKFBpKSB0aHJvdyBQaSA9ICExLCBhID0gUWksIFFpID0gbnVsbCwgYTtcbiAgMCAhPT0gKHlrICYgMSkgJiYgMCAhPT0gYS50YWcgJiYgSWsoKTtcbiAgZiA9IGEucGVuZGluZ0xhbmVzO1xuICAwICE9PSAoZiAmIDEpID8gYSA9PT0gQWsgPyB6aysrIDogKHprID0gMCwgQWsgPSBhKSA6IHprID0gMDtcbiAgamcoKTtcbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBJaygpIHtcbiAgaWYgKG51bGwgIT09IHhrKSB7XG4gICAgdmFyIGEgPSBEYyh5ayksXG4gICAgICBiID0gcGsudHJhbnNpdGlvbixcbiAgICAgIGMgPSBDO1xuICAgIHRyeSB7XG4gICAgICBway50cmFuc2l0aW9uID0gbnVsbDtcbiAgICAgIEMgPSAxNiA+IGEgPyAxNiA6IGE7XG4gICAgICBpZiAobnVsbCA9PT0geGspIHZhciBkID0gITE7ZWxzZSB7XG4gICAgICAgIGEgPSB4aztcbiAgICAgICAgeGsgPSBudWxsO1xuICAgICAgICB5ayA9IDA7XG4gICAgICAgIGlmICgwICE9PSAoSyAmIDYpKSB0aHJvdyBFcnJvcihwKDMzMSkpO1xuICAgICAgICB2YXIgZSA9IEs7XG4gICAgICAgIEsgfD0gNDtcbiAgICAgICAgZm9yIChWID0gYS5jdXJyZW50OyBudWxsICE9PSBWOykge1xuICAgICAgICAgIHZhciBmID0gVixcbiAgICAgICAgICAgIGcgPSBmLmNoaWxkO1xuICAgICAgICAgIGlmICgwICE9PSAoVi5mbGFncyAmIDE2KSkge1xuICAgICAgICAgICAgdmFyIGggPSBmLmRlbGV0aW9ucztcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBoKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgaC5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHZhciBsID0gaFtrXTtcbiAgICAgICAgICAgICAgICBmb3IgKFYgPSBsOyBudWxsICE9PSBWOykge1xuICAgICAgICAgICAgICAgICAgdmFyIG0gPSBWO1xuICAgICAgICAgICAgICAgICAgc3dpdGNoIChtLnRhZykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICAgICAgUWooOCwgbSwgZik7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB2YXIgcSA9IG0uY2hpbGQ7XG4gICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gcSkgcS5yZXR1cm4gPSBtLCBWID0gcTtlbHNlIGZvciAoOyBudWxsICE9PSBWOykge1xuICAgICAgICAgICAgICAgICAgICBtID0gVjtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHIgPSBtLnNpYmxpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgeSA9IG0ucmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBUaihtKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG0gPT09IGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICBWID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gcikge1xuICAgICAgICAgICAgICAgICAgICAgIHIucmV0dXJuID0geTtcbiAgICAgICAgICAgICAgICAgICAgICBWID0gcjtcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBWID0geTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIG4gPSBmLmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgaWYgKG51bGwgIT09IG4pIHtcbiAgICAgICAgICAgICAgICB2YXIgdCA9IG4uY2hpbGQ7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IHQpIHtcbiAgICAgICAgICAgICAgICAgIG4uY2hpbGQgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgSiA9IHQuc2libGluZztcbiAgICAgICAgICAgICAgICAgICAgdC5zaWJsaW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdCA9IEo7XG4gICAgICAgICAgICAgICAgICB9IHdoaWxlIChudWxsICE9PSB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgViA9IGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgwICE9PSAoZi5zdWJ0cmVlRmxhZ3MgJiAyMDY0KSAmJiBudWxsICE9PSBnKSBnLnJldHVybiA9IGYsIFYgPSBnO2Vsc2UgYjogZm9yICg7IG51bGwgIT09IFY7KSB7XG4gICAgICAgICAgICBmID0gVjtcbiAgICAgICAgICAgIGlmICgwICE9PSAoZi5mbGFncyAmIDIwNDgpKSBzd2l0Y2ggKGYudGFnKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICBRaig5LCBmLCBmLnJldHVybik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgeCA9IGYuc2libGluZztcbiAgICAgICAgICAgIGlmIChudWxsICE9PSB4KSB7XG4gICAgICAgICAgICAgIHgucmV0dXJuID0gZi5yZXR1cm47XG4gICAgICAgICAgICAgIFYgPSB4O1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgViA9IGYucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdyA9IGEuY3VycmVudDtcbiAgICAgICAgZm9yIChWID0gdzsgbnVsbCAhPT0gVjspIHtcbiAgICAgICAgICBnID0gVjtcbiAgICAgICAgICB2YXIgdSA9IGcuY2hpbGQ7XG4gICAgICAgICAgaWYgKDAgIT09IChnLnN1YnRyZWVGbGFncyAmIDIwNjQpICYmIG51bGwgIT09IHUpIHUucmV0dXJuID0gZywgViA9IHU7ZWxzZSBiOiBmb3IgKGcgPSB3OyBudWxsICE9PSBWOykge1xuICAgICAgICAgICAgaCA9IFY7XG4gICAgICAgICAgICBpZiAoMCAhPT0gKGguZmxhZ3MgJiAyMDQ4KSkgdHJ5IHtcbiAgICAgICAgICAgICAgc3dpdGNoIChoLnRhZykge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgIGNhc2UgMTU6XG4gICAgICAgICAgICAgICAgICBSaig5LCBoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAobmEpIHtcbiAgICAgICAgICAgICAgVyhoLCBoLnJldHVybiwgbmEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGggPT09IGcpIHtcbiAgICAgICAgICAgICAgViA9IG51bGw7XG4gICAgICAgICAgICAgIGJyZWFrIGI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgRiA9IGguc2libGluZztcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBGKSB7XG4gICAgICAgICAgICAgIEYucmV0dXJuID0gaC5yZXR1cm47XG4gICAgICAgICAgICAgIFYgPSBGO1xuICAgICAgICAgICAgICBicmVhayBiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgViA9IGgucmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBLID0gZTtcbiAgICAgICAgamcoKTtcbiAgICAgICAgaWYgKGxjICYmIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCkgdHJ5IHtcbiAgICAgICAgICBsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsIGEpO1xuICAgICAgICB9IGNhdGNoIChuYSkge31cbiAgICAgICAgZCA9ICEwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGQ7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIEMgPSBjLCBway50cmFuc2l0aW9uID0gYjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuICExO1xufVxuZnVuY3Rpb24gWWsoYSwgYiwgYykge1xuICBiID0gS2koYywgYik7XG4gIGIgPSBPaShhLCBiLCAxKTtcbiAgYSA9IGRoKGEsIGIsIDEpO1xuICBiID0gTCgpO1xuICBudWxsICE9PSBhICYmIChBYyhhLCAxLCBiKSwgRWsoYSwgYikpO1xufVxuZnVuY3Rpb24gVyhhLCBiLCBjKSB7XG4gIGlmICgzID09PSBhLnRhZykgWWsoYSwgYSwgYyk7ZWxzZSBmb3IgKDsgbnVsbCAhPT0gYjspIHtcbiAgICBpZiAoMyA9PT0gYi50YWcpIHtcbiAgICAgIFlrKGIsIGEsIGMpO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmICgxID09PSBiLnRhZykge1xuICAgICAgdmFyIGQgPSBiLnN0YXRlTm9kZTtcbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIHx8IFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2ggJiYgKG51bGwgPT09IFNpIHx8ICFTaS5oYXMoZCkpKSB7XG4gICAgICAgIGEgPSBLaShjLCBhKTtcbiAgICAgICAgYSA9IFJpKGIsIGEsIDEpO1xuICAgICAgICBiID0gZGgoYiwgYSwgMSk7XG4gICAgICAgIGEgPSBMKCk7XG4gICAgICAgIG51bGwgIT09IGIgJiYgKEFjKGIsIDEsIGEpLCBFayhiLCBhKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBiID0gYi5yZXR1cm47XG4gIH1cbn1cbmZ1bmN0aW9uIFVpKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSBhLnBpbmdDYWNoZTtcbiAgbnVsbCAhPT0gZCAmJiBkLmRlbGV0ZShiKTtcbiAgYiA9IEwoKTtcbiAgYS5waW5nZWRMYW5lcyB8PSBhLnN1c3BlbmRlZExhbmVzICYgYztcbiAgUiA9PT0gYSAmJiAoWiAmIGMpID09PSBjICYmICg0ID09PSBUIHx8IDMgPT09IFQgJiYgKFogJiAxMzAwMjM0MjQpID09PSBaICYmIDUwMCA+IEIoKSAtIGdrID8gTGsoYSwgMCkgOiBzayB8PSBjKTtcbiAgRWsoYSwgYik7XG59XG5mdW5jdGlvbiBaayhhLCBiKSB7XG4gIDAgPT09IGIgJiYgKDAgPT09IChhLm1vZGUgJiAxKSA/IGIgPSAxIDogKGIgPSBzYywgc2MgPDw9IDEsIDAgPT09IChzYyAmIDEzMDAyMzQyNCkgJiYgKHNjID0gNDE5NDMwNCkpKTtcbiAgdmFyIGMgPSBMKCk7XG4gIGEgPSBaZyhhLCBiKTtcbiAgbnVsbCAhPT0gYSAmJiAoQWMoYSwgYiwgYyksIEVrKGEsIGMpKTtcbn1cbmZ1bmN0aW9uIHZqKGEpIHtcbiAgdmFyIGIgPSBhLm1lbW9pemVkU3RhdGUsXG4gICAgYyA9IDA7XG4gIG51bGwgIT09IGIgJiYgKGMgPSBiLnJldHJ5TGFuZSk7XG4gIFprKGEsIGMpO1xufVxuZnVuY3Rpb24gY2soYSwgYikge1xuICB2YXIgYyA9IDA7XG4gIHN3aXRjaCAoYS50YWcpIHtcbiAgICBjYXNlIDEzOlxuICAgICAgdmFyIGQgPSBhLnN0YXRlTm9kZTtcbiAgICAgIHZhciBlID0gYS5tZW1vaXplZFN0YXRlO1xuICAgICAgbnVsbCAhPT0gZSAmJiAoYyA9IGUucmV0cnlMYW5lKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTk6XG4gICAgICBkID0gYS5zdGF0ZU5vZGU7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgRXJyb3IocCgzMTQpKTtcbiAgfVxuICBudWxsICE9PSBkICYmIGQuZGVsZXRlKGIpO1xuICBaayhhLCBjKTtcbn1cbnZhciBXaztcbldrID0gZnVuY3Rpb24gV2soYSwgYiwgYykge1xuICBpZiAobnVsbCAhPT0gYSkge1xuICAgIGlmIChhLm1lbW9pemVkUHJvcHMgIT09IGIucGVuZGluZ1Byb3BzIHx8IFdmLmN1cnJlbnQpIFVnID0gITA7ZWxzZSB7XG4gICAgICBpZiAoMCA9PT0gKGEubGFuZXMgJiBjKSAmJiAwID09PSAoYi5mbGFncyAmIDEyOCkpIHJldHVybiBVZyA9ICExLCB6aihhLCBiLCBjKTtcbiAgICAgIFVnID0gMCAhPT0gKGEuZmxhZ3MgJiAxMzEwNzIpID8gITAgOiAhMTtcbiAgICB9XG4gIH0gZWxzZSBVZyA9ICExLCBJICYmIDAgIT09IChiLmZsYWdzICYgMTA0ODU3NikgJiYgdWcoYiwgbmcsIGIuaW5kZXgpO1xuICBiLmxhbmVzID0gMDtcbiAgc3dpdGNoIChiLnRhZykge1xuICAgIGNhc2UgMjpcbiAgICAgIHZhciBkID0gYi50eXBlO1xuICAgICAgamooYSwgYik7XG4gICAgICBhID0gYi5wZW5kaW5nUHJvcHM7XG4gICAgICB2YXIgZSA9IFlmKGIsIEguY3VycmVudCk7XG4gICAgICBUZyhiLCBjKTtcbiAgICAgIGUgPSBYaChudWxsLCBiLCBkLCBhLCBlLCBjKTtcbiAgICAgIHZhciBmID0gYmkoKTtcbiAgICAgIGIuZmxhZ3MgfD0gMTtcbiAgICAgIFwib2JqZWN0XCIgPT09IF90eXBlb2YoZSkgJiYgbnVsbCAhPT0gZSAmJiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlLnJlbmRlciAmJiB2b2lkIDAgPT09IGUuJCR0eXBlb2YgPyAoYi50YWcgPSAxLCBiLm1lbW9pemVkU3RhdGUgPSBudWxsLCBiLnVwZGF0ZVF1ZXVlID0gbnVsbCwgWmYoZCkgPyAoZiA9ICEwLCBjZyhiKSkgOiBmID0gITEsIGIubWVtb2l6ZWRTdGF0ZSA9IG51bGwgIT09IGUuc3RhdGUgJiYgdm9pZCAwICE9PSBlLnN0YXRlID8gZS5zdGF0ZSA6IG51bGwsIGFoKGIpLCBlLnVwZGF0ZXIgPSBuaCwgYi5zdGF0ZU5vZGUgPSBlLCBlLl9yZWFjdEludGVybmFscyA9IGIsIHJoKGIsIGQsIGEsIGMpLCBiID0ga2oobnVsbCwgYiwgZCwgITAsIGYsIGMpKSA6IChiLnRhZyA9IDAsIEkgJiYgZiAmJiB2ZyhiKSwgWWkobnVsbCwgYiwgZSwgYyksIGIgPSBiLmNoaWxkKTtcbiAgICAgIHJldHVybiBiO1xuICAgIGNhc2UgMTY6XG4gICAgICBkID0gYi5lbGVtZW50VHlwZTtcbiAgICAgIGE6IHtcbiAgICAgICAgamooYSwgYik7XG4gICAgICAgIGEgPSBiLnBlbmRpbmdQcm9wcztcbiAgICAgICAgZSA9IGQuX2luaXQ7XG4gICAgICAgIGQgPSBlKGQuX3BheWxvYWQpO1xuICAgICAgICBiLnR5cGUgPSBkO1xuICAgICAgICBlID0gYi50YWcgPSAkayhkKTtcbiAgICAgICAgYSA9IExnKGQsIGEpO1xuICAgICAgICBzd2l0Y2ggKGUpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBiID0gZGoobnVsbCwgYiwgZCwgYSwgYyk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGIgPSBpaihudWxsLCBiLCBkLCBhLCBjKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIGIgPSBaaShudWxsLCBiLCBkLCBhLCBjKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgY2FzZSAxNDpcbiAgICAgICAgICAgIGIgPSBhaihudWxsLCBiLCBkLCBMZyhkLnR5cGUsIGEpLCBjKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgRXJyb3IocCgzMDYsIGQsIFwiXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiO1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBkID0gYi50eXBlLCBlID0gYi5wZW5kaW5nUHJvcHMsIGUgPSBiLmVsZW1lbnRUeXBlID09PSBkID8gZSA6IExnKGQsIGUpLCBkaihhLCBiLCBkLCBlLCBjKTtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gZCA9IGIudHlwZSwgZSA9IGIucGVuZGluZ1Byb3BzLCBlID0gYi5lbGVtZW50VHlwZSA9PT0gZCA/IGUgOiBMZyhkLCBlKSwgaWooYSwgYiwgZCwgZSwgYyk7XG4gICAgY2FzZSAzOlxuICAgICAgYToge1xuICAgICAgICBsaihiKTtcbiAgICAgICAgaWYgKG51bGwgPT09IGEpIHRocm93IEVycm9yKHAoMzg3KSk7XG4gICAgICAgIGQgPSBiLnBlbmRpbmdQcm9wcztcbiAgICAgICAgZiA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgZSA9IGYuZWxlbWVudDtcbiAgICAgICAgYmgoYSwgYik7XG4gICAgICAgIGdoKGIsIGQsIG51bGwsIGMpO1xuICAgICAgICB2YXIgZyA9IGIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgZCA9IGcuZWxlbWVudDtcbiAgICAgICAgaWYgKGYuaXNEZWh5ZHJhdGVkKSB7XG4gICAgICAgICAgaWYgKGYgPSB7XG4gICAgICAgICAgICBlbGVtZW50OiBkLFxuICAgICAgICAgICAgaXNEZWh5ZHJhdGVkOiAhMSxcbiAgICAgICAgICAgIGNhY2hlOiBnLmNhY2hlLFxuICAgICAgICAgICAgcGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczogZy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLFxuICAgICAgICAgICAgdHJhbnNpdGlvbnM6IGcudHJhbnNpdGlvbnNcbiAgICAgICAgICB9LCBiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZSA9IGYsIGIubWVtb2l6ZWRTdGF0ZSA9IGYsIGIuZmxhZ3MgJiAyNTYpIHtcbiAgICAgICAgICAgIGUgPSBLaShFcnJvcihwKDQyMykpLCBiKTtcbiAgICAgICAgICAgIGIgPSBtaihhLCBiLCBkLCBjLCBlKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkICE9PSBlKSB7XG4gICAgICAgICAgICBlID0gS2koRXJyb3IocCg0MjQpKSwgYik7XG4gICAgICAgICAgICBiID0gbWooYSwgYiwgZCwgYywgZSk7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH0gZWxzZSBmb3IgKHlnID0gTGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSwgeGcgPSBiLCBJID0gITAsIHpnID0gbnVsbCwgYyA9IENoKGIsIG51bGwsIGQsIGMpLCBiLmNoaWxkID0gYzsgYzspIGMuZmxhZ3MgPSBjLmZsYWdzICYgLTMgfCA0MDk2LCBjID0gYy5zaWJsaW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIElnKCk7XG4gICAgICAgICAgaWYgKGQgPT09IGUpIHtcbiAgICAgICAgICAgIGIgPSAkaShhLCBiLCBjKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICAgIFlpKGEsIGIsIGQsIGMpO1xuICAgICAgICB9XG4gICAgICAgIGIgPSBiLmNoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGI7XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIEtoKGIpLCBudWxsID09PSBhICYmIEVnKGIpLCBkID0gYi50eXBlLCBlID0gYi5wZW5kaW5nUHJvcHMsIGYgPSBudWxsICE9PSBhID8gYS5tZW1vaXplZFByb3BzIDogbnVsbCwgZyA9IGUuY2hpbGRyZW4sIEVmKGQsIGUpID8gZyA9IG51bGwgOiBudWxsICE9PSBmICYmIEVmKGQsIGYpICYmIChiLmZsYWdzIHw9IDMyKSwgaGooYSwgYiksIFlpKGEsIGIsIGcsIGMpLCBiLmNoaWxkO1xuICAgIGNhc2UgNjpcbiAgICAgIHJldHVybiBudWxsID09PSBhICYmIEVnKGIpLCBudWxsO1xuICAgIGNhc2UgMTM6XG4gICAgICByZXR1cm4gcGooYSwgYiwgYyk7XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIEloKGIsIGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLCBkID0gYi5wZW5kaW5nUHJvcHMsIG51bGwgPT09IGEgPyBiLmNoaWxkID0gQmgoYiwgbnVsbCwgZCwgYykgOiBZaShhLCBiLCBkLCBjKSwgYi5jaGlsZDtcbiAgICBjYXNlIDExOlxuICAgICAgcmV0dXJuIGQgPSBiLnR5cGUsIGUgPSBiLnBlbmRpbmdQcm9wcywgZSA9IGIuZWxlbWVudFR5cGUgPT09IGQgPyBlIDogTGcoZCwgZSksIFppKGEsIGIsIGQsIGUsIGMpO1xuICAgIGNhc2UgNzpcbiAgICAgIHJldHVybiBZaShhLCBiLCBiLnBlbmRpbmdQcm9wcywgYyksIGIuY2hpbGQ7XG4gICAgY2FzZSA4OlxuICAgICAgcmV0dXJuIFlpKGEsIGIsIGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBjKSwgYi5jaGlsZDtcbiAgICBjYXNlIDEyOlxuICAgICAgcmV0dXJuIFlpKGEsIGIsIGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLCBjKSwgYi5jaGlsZDtcbiAgICBjYXNlIDEwOlxuICAgICAgYToge1xuICAgICAgICBkID0gYi50eXBlLl9jb250ZXh0O1xuICAgICAgICBlID0gYi5wZW5kaW5nUHJvcHM7XG4gICAgICAgIGYgPSBiLm1lbW9pemVkUHJvcHM7XG4gICAgICAgIGcgPSBlLnZhbHVlO1xuICAgICAgICBHKE1nLCBkLl9jdXJyZW50VmFsdWUpO1xuICAgICAgICBkLl9jdXJyZW50VmFsdWUgPSBnO1xuICAgICAgICBpZiAobnVsbCAhPT0gZikgaWYgKEhlKGYudmFsdWUsIGcpKSB7XG4gICAgICAgICAgaWYgKGYuY2hpbGRyZW4gPT09IGUuY2hpbGRyZW4gJiYgIVdmLmN1cnJlbnQpIHtcbiAgICAgICAgICAgIGIgPSAkaShhLCBiLCBjKTtcbiAgICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgZm9yIChmID0gYi5jaGlsZCwgbnVsbCAhPT0gZiAmJiAoZi5yZXR1cm4gPSBiKTsgbnVsbCAhPT0gZjspIHtcbiAgICAgICAgICB2YXIgaCA9IGYuZGVwZW5kZW5jaWVzO1xuICAgICAgICAgIGlmIChudWxsICE9PSBoKSB7XG4gICAgICAgICAgICBnID0gZi5jaGlsZDtcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSBoLmZpcnN0Q29udGV4dDsgbnVsbCAhPT0gazspIHtcbiAgICAgICAgICAgICAgaWYgKGsuY29udGV4dCA9PT0gZCkge1xuICAgICAgICAgICAgICAgIGlmICgxID09PSBmLnRhZykge1xuICAgICAgICAgICAgICAgICAgayA9IGNoKC0xLCBjICYgLWMpO1xuICAgICAgICAgICAgICAgICAgay50YWcgPSAyO1xuICAgICAgICAgICAgICAgICAgdmFyIGwgPSBmLnVwZGF0ZVF1ZXVlO1xuICAgICAgICAgICAgICAgICAgaWYgKG51bGwgIT09IGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbCA9IGwuc2hhcmVkO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGwucGVuZGluZztcbiAgICAgICAgICAgICAgICAgICAgbnVsbCA9PT0gbSA/IGsubmV4dCA9IGsgOiAoay5uZXh0ID0gbS5uZXh0LCBtLm5leHQgPSBrKTtcbiAgICAgICAgICAgICAgICAgICAgbC5wZW5kaW5nID0gaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZi5sYW5lcyB8PSBjO1xuICAgICAgICAgICAgICAgIGsgPSBmLmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgICBudWxsICE9PSBrICYmIChrLmxhbmVzIHw9IGMpO1xuICAgICAgICAgICAgICAgIFNnKGYucmV0dXJuLCBjLCBiKTtcbiAgICAgICAgICAgICAgICBoLmxhbmVzIHw9IGM7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgayA9IGsubmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKDEwID09PSBmLnRhZykgZyA9IGYudHlwZSA9PT0gYi50eXBlID8gbnVsbCA6IGYuY2hpbGQ7ZWxzZSBpZiAoMTggPT09IGYudGFnKSB7XG4gICAgICAgICAgICBnID0gZi5yZXR1cm47XG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gZykgdGhyb3cgRXJyb3IocCgzNDEpKTtcbiAgICAgICAgICAgIGcubGFuZXMgfD0gYztcbiAgICAgICAgICAgIGggPSBnLmFsdGVybmF0ZTtcbiAgICAgICAgICAgIG51bGwgIT09IGggJiYgKGgubGFuZXMgfD0gYyk7XG4gICAgICAgICAgICBTZyhnLCBjLCBiKTtcbiAgICAgICAgICAgIGcgPSBmLnNpYmxpbmc7XG4gICAgICAgICAgfSBlbHNlIGcgPSBmLmNoaWxkO1xuICAgICAgICAgIGlmIChudWxsICE9PSBnKSBnLnJldHVybiA9IGY7ZWxzZSBmb3IgKGcgPSBmOyBudWxsICE9PSBnOykge1xuICAgICAgICAgICAgaWYgKGcgPT09IGIpIHtcbiAgICAgICAgICAgICAgZyA9IG51bGw7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZiA9IGcuc2libGluZztcbiAgICAgICAgICAgIGlmIChudWxsICE9PSBmKSB7XG4gICAgICAgICAgICAgIGYucmV0dXJuID0gZy5yZXR1cm47XG4gICAgICAgICAgICAgIGcgPSBmO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGcgPSBnLnJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZiA9IGc7XG4gICAgICAgIH1cbiAgICAgICAgWWkoYSwgYiwgZS5jaGlsZHJlbiwgYyk7XG4gICAgICAgIGIgPSBiLmNoaWxkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGI7XG4gICAgY2FzZSA5OlxuICAgICAgcmV0dXJuIGUgPSBiLnR5cGUsIGQgPSBiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbiwgVGcoYiwgYyksIGUgPSBWZyhlKSwgZCA9IGQoZSksIGIuZmxhZ3MgfD0gMSwgWWkoYSwgYiwgZCwgYyksIGIuY2hpbGQ7XG4gICAgY2FzZSAxNDpcbiAgICAgIHJldHVybiBkID0gYi50eXBlLCBlID0gTGcoZCwgYi5wZW5kaW5nUHJvcHMpLCBlID0gTGcoZC50eXBlLCBlKSwgYWooYSwgYiwgZCwgZSwgYyk7XG4gICAgY2FzZSAxNTpcbiAgICAgIHJldHVybiBjaihhLCBiLCBiLnR5cGUsIGIucGVuZGluZ1Byb3BzLCBjKTtcbiAgICBjYXNlIDE3OlxuICAgICAgcmV0dXJuIGQgPSBiLnR5cGUsIGUgPSBiLnBlbmRpbmdQcm9wcywgZSA9IGIuZWxlbWVudFR5cGUgPT09IGQgPyBlIDogTGcoZCwgZSksIGpqKGEsIGIpLCBiLnRhZyA9IDEsIFpmKGQpID8gKGEgPSAhMCwgY2coYikpIDogYSA9ICExLCBUZyhiLCBjKSwgcGgoYiwgZCwgZSksIHJoKGIsIGQsIGUsIGMpLCBraihudWxsLCBiLCBkLCAhMCwgYSwgYyk7XG4gICAgY2FzZSAxOTpcbiAgICAgIHJldHVybiB5aihhLCBiLCBjKTtcbiAgICBjYXNlIDIyOlxuICAgICAgcmV0dXJuIGVqKGEsIGIsIGMpO1xuICB9XG4gIHRocm93IEVycm9yKHAoMTU2LCBiLnRhZykpO1xufTtcbmZ1bmN0aW9uIEdrKGEsIGIpIHtcbiAgcmV0dXJuIGFjKGEsIGIpO1xufVxuZnVuY3Rpb24gYWwoYSwgYiwgYywgZCkge1xuICB0aGlzLnRhZyA9IGE7XG4gIHRoaXMua2V5ID0gYztcbiAgdGhpcy5zaWJsaW5nID0gdGhpcy5jaGlsZCA9IHRoaXMucmV0dXJuID0gdGhpcy5zdGF0ZU5vZGUgPSB0aGlzLnR5cGUgPSB0aGlzLmVsZW1lbnRUeXBlID0gbnVsbDtcbiAgdGhpcy5pbmRleCA9IDA7XG4gIHRoaXMucmVmID0gbnVsbDtcbiAgdGhpcy5wZW5kaW5nUHJvcHMgPSBiO1xuICB0aGlzLmRlcGVuZGVuY2llcyA9IHRoaXMubWVtb2l6ZWRTdGF0ZSA9IHRoaXMudXBkYXRlUXVldWUgPSB0aGlzLm1lbW9pemVkUHJvcHMgPSBudWxsO1xuICB0aGlzLm1vZGUgPSBkO1xuICB0aGlzLnN1YnRyZWVGbGFncyA9IHRoaXMuZmxhZ3MgPSAwO1xuICB0aGlzLmRlbGV0aW9ucyA9IG51bGw7XG4gIHRoaXMuY2hpbGRMYW5lcyA9IHRoaXMubGFuZXMgPSAwO1xuICB0aGlzLmFsdGVybmF0ZSA9IG51bGw7XG59XG5mdW5jdGlvbiBCZyhhLCBiLCBjLCBkKSB7XG4gIHJldHVybiBuZXcgYWwoYSwgYiwgYywgZCk7XG59XG5mdW5jdGlvbiBiaihhKSB7XG4gIGEgPSBhLnByb3RvdHlwZTtcbiAgcmV0dXJuICEoIWEgfHwgIWEuaXNSZWFjdENvbXBvbmVudCk7XG59XG5mdW5jdGlvbiAkayhhKSB7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhKSByZXR1cm4gYmooYSkgPyAxIDogMDtcbiAgaWYgKHZvaWQgMCAhPT0gYSAmJiBudWxsICE9PSBhKSB7XG4gICAgYSA9IGEuJCR0eXBlb2Y7XG4gICAgaWYgKGEgPT09IERhKSByZXR1cm4gMTE7XG4gICAgaWYgKGEgPT09IEdhKSByZXR1cm4gMTQ7XG4gIH1cbiAgcmV0dXJuIDI7XG59XG5mdW5jdGlvbiB3aChhLCBiKSB7XG4gIHZhciBjID0gYS5hbHRlcm5hdGU7XG4gIG51bGwgPT09IGMgPyAoYyA9IEJnKGEudGFnLCBiLCBhLmtleSwgYS5tb2RlKSwgYy5lbGVtZW50VHlwZSA9IGEuZWxlbWVudFR5cGUsIGMudHlwZSA9IGEudHlwZSwgYy5zdGF0ZU5vZGUgPSBhLnN0YXRlTm9kZSwgYy5hbHRlcm5hdGUgPSBhLCBhLmFsdGVybmF0ZSA9IGMpIDogKGMucGVuZGluZ1Byb3BzID0gYiwgYy50eXBlID0gYS50eXBlLCBjLmZsYWdzID0gMCwgYy5zdWJ0cmVlRmxhZ3MgPSAwLCBjLmRlbGV0aW9ucyA9IG51bGwpO1xuICBjLmZsYWdzID0gYS5mbGFncyAmIDE0NjgwMDY0O1xuICBjLmNoaWxkTGFuZXMgPSBhLmNoaWxkTGFuZXM7XG4gIGMubGFuZXMgPSBhLmxhbmVzO1xuICBjLmNoaWxkID0gYS5jaGlsZDtcbiAgYy5tZW1vaXplZFByb3BzID0gYS5tZW1vaXplZFByb3BzO1xuICBjLm1lbW9pemVkU3RhdGUgPSBhLm1lbW9pemVkU3RhdGU7XG4gIGMudXBkYXRlUXVldWUgPSBhLnVwZGF0ZVF1ZXVlO1xuICBiID0gYS5kZXBlbmRlbmNpZXM7XG4gIGMuZGVwZW5kZW5jaWVzID0gbnVsbCA9PT0gYiA/IG51bGwgOiB7XG4gICAgbGFuZXM6IGIubGFuZXMsXG4gICAgZmlyc3RDb250ZXh0OiBiLmZpcnN0Q29udGV4dFxuICB9O1xuICBjLnNpYmxpbmcgPSBhLnNpYmxpbmc7XG4gIGMuaW5kZXggPSBhLmluZGV4O1xuICBjLnJlZiA9IGEucmVmO1xuICByZXR1cm4gYztcbn1cbmZ1bmN0aW9uIHloKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIGcgPSAyO1xuICBkID0gYTtcbiAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGEpIGJqKGEpICYmIChnID0gMSk7ZWxzZSBpZiAoXCJzdHJpbmdcIiA9PT0gdHlwZW9mIGEpIGcgPSA1O2Vsc2UgYTogc3dpdGNoIChhKSB7XG4gICAgY2FzZSB5YTpcbiAgICAgIHJldHVybiBBaChjLmNoaWxkcmVuLCBlLCBmLCBiKTtcbiAgICBjYXNlIHphOlxuICAgICAgZyA9IDg7XG4gICAgICBlIHw9IDg7XG4gICAgICBicmVhaztcbiAgICBjYXNlIEFhOlxuICAgICAgcmV0dXJuIGEgPSBCZygxMiwgYywgYiwgZSB8IDIpLCBhLmVsZW1lbnRUeXBlID0gQWEsIGEubGFuZXMgPSBmLCBhO1xuICAgIGNhc2UgRWE6XG4gICAgICByZXR1cm4gYSA9IEJnKDEzLCBjLCBiLCBlKSwgYS5lbGVtZW50VHlwZSA9IEVhLCBhLmxhbmVzID0gZiwgYTtcbiAgICBjYXNlIEZhOlxuICAgICAgcmV0dXJuIGEgPSBCZygxOSwgYywgYiwgZSksIGEuZWxlbWVudFR5cGUgPSBGYSwgYS5sYW5lcyA9IGYsIGE7XG4gICAgY2FzZSBJYTpcbiAgICAgIHJldHVybiBxaihjLCBlLCBmLCBiKTtcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKFwib2JqZWN0XCIgPT09IF90eXBlb2YoYSkgJiYgbnVsbCAhPT0gYSkgc3dpdGNoIChhLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgQmE6XG4gICAgICAgICAgZyA9IDEwO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIGNhc2UgQ2E6XG4gICAgICAgICAgZyA9IDk7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgY2FzZSBEYTpcbiAgICAgICAgICBnID0gMTE7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgY2FzZSBHYTpcbiAgICAgICAgICBnID0gMTQ7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgY2FzZSBIYTpcbiAgICAgICAgICBnID0gMTY7XG4gICAgICAgICAgZCA9IG51bGw7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgIH1cbiAgICAgIHRocm93IEVycm9yKHAoMTMwLCBudWxsID09IGEgPyBhIDogX3R5cGVvZihhKSwgXCJcIikpO1xuICB9XG4gIGIgPSBCZyhnLCBjLCBiLCBlKTtcbiAgYi5lbGVtZW50VHlwZSA9IGE7XG4gIGIudHlwZSA9IGQ7XG4gIGIubGFuZXMgPSBmO1xuICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIEFoKGEsIGIsIGMsIGQpIHtcbiAgYSA9IEJnKDcsIGEsIGQsIGIpO1xuICBhLmxhbmVzID0gYztcbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBxaihhLCBiLCBjLCBkKSB7XG4gIGEgPSBCZygyMiwgYSwgZCwgYik7XG4gIGEuZWxlbWVudFR5cGUgPSBJYTtcbiAgYS5sYW5lcyA9IGM7XG4gIGEuc3RhdGVOb2RlID0ge1xuICAgIGlzSGlkZGVuOiAhMVxuICB9O1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIHhoKGEsIGIsIGMpIHtcbiAgYSA9IEJnKDYsIGEsIG51bGwsIGIpO1xuICBhLmxhbmVzID0gYztcbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiB6aChhLCBiLCBjKSB7XG4gIGIgPSBCZyg0LCBudWxsICE9PSBhLmNoaWxkcmVuID8gYS5jaGlsZHJlbiA6IFtdLCBhLmtleSwgYik7XG4gIGIubGFuZXMgPSBjO1xuICBiLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBhLmNvbnRhaW5lckluZm8sXG4gICAgcGVuZGluZ0NoaWxkcmVuOiBudWxsLFxuICAgIGltcGxlbWVudGF0aW9uOiBhLmltcGxlbWVudGF0aW9uXG4gIH07XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gYmwoYSwgYiwgYywgZCwgZSkge1xuICB0aGlzLnRhZyA9IGI7XG4gIHRoaXMuY29udGFpbmVySW5mbyA9IGE7XG4gIHRoaXMuZmluaXNoZWRXb3JrID0gdGhpcy5waW5nQ2FjaGUgPSB0aGlzLmN1cnJlbnQgPSB0aGlzLnBlbmRpbmdDaGlsZHJlbiA9IG51bGw7XG4gIHRoaXMudGltZW91dEhhbmRsZSA9IC0xO1xuICB0aGlzLmNhbGxiYWNrTm9kZSA9IHRoaXMucGVuZGluZ0NvbnRleHQgPSB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLmNhbGxiYWNrUHJpb3JpdHkgPSAwO1xuICB0aGlzLmV2ZW50VGltZXMgPSB6YygwKTtcbiAgdGhpcy5leHBpcmF0aW9uVGltZXMgPSB6YygtMSk7XG4gIHRoaXMuZW50YW5nbGVkTGFuZXMgPSB0aGlzLmZpbmlzaGVkTGFuZXMgPSB0aGlzLm11dGFibGVSZWFkTGFuZXMgPSB0aGlzLmV4cGlyZWRMYW5lcyA9IHRoaXMucGluZ2VkTGFuZXMgPSB0aGlzLnN1c3BlbmRlZExhbmVzID0gdGhpcy5wZW5kaW5nTGFuZXMgPSAwO1xuICB0aGlzLmVudGFuZ2xlbWVudHMgPSB6YygwKTtcbiAgdGhpcy5pZGVudGlmaWVyUHJlZml4ID0gZDtcbiAgdGhpcy5vblJlY292ZXJhYmxlRXJyb3IgPSBlO1xuICB0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEgPSBudWxsO1xufVxuZnVuY3Rpb24gY2woYSwgYiwgYywgZCwgZSwgZiwgZywgaCwgaykge1xuICBhID0gbmV3IGJsKGEsIGIsIGMsIGgsIGspO1xuICAxID09PSBiID8gKGIgPSAxLCAhMCA9PT0gZiAmJiAoYiB8PSA4KSkgOiBiID0gMDtcbiAgZiA9IEJnKDMsIG51bGwsIG51bGwsIGIpO1xuICBhLmN1cnJlbnQgPSBmO1xuICBmLnN0YXRlTm9kZSA9IGE7XG4gIGYubWVtb2l6ZWRTdGF0ZSA9IHtcbiAgICBlbGVtZW50OiBkLFxuICAgIGlzRGVoeWRyYXRlZDogYyxcbiAgICBjYWNoZTogbnVsbCxcbiAgICB0cmFuc2l0aW9uczogbnVsbCxcbiAgICBwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOiBudWxsXG4gIH07XG4gIGFoKGYpO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIGRsKGEsIGIsIGMpIHtcbiAgdmFyIGQgPSAzIDwgYXJndW1lbnRzLmxlbmd0aCAmJiB2b2lkIDAgIT09IGFyZ3VtZW50c1szXSA/IGFyZ3VtZW50c1szXSA6IG51bGw7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IHdhLFxuICAgIGtleTogbnVsbCA9PSBkID8gbnVsbCA6IFwiXCIgKyBkLFxuICAgIGNoaWxkcmVuOiBhLFxuICAgIGNvbnRhaW5lckluZm86IGIsXG4gICAgaW1wbGVtZW50YXRpb246IGNcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsKGEpIHtcbiAgaWYgKCFhKSByZXR1cm4gVmY7XG4gIGEgPSBhLl9yZWFjdEludGVybmFscztcbiAgYToge1xuICAgIGlmIChWYihhKSAhPT0gYSB8fCAxICE9PSBhLnRhZykgdGhyb3cgRXJyb3IocCgxNzApKTtcbiAgICB2YXIgYiA9IGE7XG4gICAgZG8ge1xuICAgICAgc3dpdGNoIChiLnRhZykge1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgYiA9IGIuc3RhdGVOb2RlLmNvbnRleHQ7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChaZihiLnR5cGUpKSB7XG4gICAgICAgICAgICBiID0gYi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7XG4gICAgICAgICAgICBicmVhayBhO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGIgPSBiLnJldHVybjtcbiAgICB9IHdoaWxlIChudWxsICE9PSBiKTtcbiAgICB0aHJvdyBFcnJvcihwKDE3MSkpO1xuICB9XG4gIGlmICgxID09PSBhLnRhZykge1xuICAgIHZhciBjID0gYS50eXBlO1xuICAgIGlmIChaZihjKSkgcmV0dXJuIGJnKGEsIGMsIGIpO1xuICB9XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gZmwoYSwgYiwgYywgZCwgZSwgZiwgZywgaCwgaykge1xuICBhID0gY2woYywgZCwgITAsIGEsIGUsIGYsIGcsIGgsIGspO1xuICBhLmNvbnRleHQgPSBlbChudWxsKTtcbiAgYyA9IGEuY3VycmVudDtcbiAgZCA9IEwoKTtcbiAgZSA9IGxoKGMpO1xuICBmID0gY2goZCwgZSk7XG4gIGYuY2FsbGJhY2sgPSB2b2lkIDAgIT09IGIgJiYgbnVsbCAhPT0gYiA/IGIgOiBudWxsO1xuICBkaChjLCBmLCBlKTtcbiAgYS5jdXJyZW50LmxhbmVzID0gZTtcbiAgQWMoYSwgZSwgZCk7XG4gIEVrKGEsIGQpO1xuICByZXR1cm4gYTtcbn1cbmZ1bmN0aW9uIGdsKGEsIGIsIGMsIGQpIHtcbiAgdmFyIGUgPSBiLmN1cnJlbnQsXG4gICAgZiA9IEwoKSxcbiAgICBnID0gbGgoZSk7XG4gIGMgPSBlbChjKTtcbiAgbnVsbCA9PT0gYi5jb250ZXh0ID8gYi5jb250ZXh0ID0gYyA6IGIucGVuZGluZ0NvbnRleHQgPSBjO1xuICBiID0gY2goZiwgZyk7XG4gIGIucGF5bG9hZCA9IHtcbiAgICBlbGVtZW50OiBhXG4gIH07XG4gIGQgPSB2b2lkIDAgPT09IGQgPyBudWxsIDogZDtcbiAgbnVsbCAhPT0gZCAmJiAoYi5jYWxsYmFjayA9IGQpO1xuICBhID0gZGgoZSwgYiwgZyk7XG4gIG51bGwgIT09IGEgJiYgKG1oKGEsIGUsIGcsIGYpLCBlaChhLCBlLCBnKSk7XG4gIHJldHVybiBnO1xufVxuZnVuY3Rpb24gaGwoYSkge1xuICBhID0gYS5jdXJyZW50O1xuICBpZiAoIWEuY2hpbGQpIHJldHVybiBudWxsO1xuICBzd2l0Y2ggKGEuY2hpbGQudGFnKSB7XG4gICAgY2FzZSA1OlxuICAgICAgcmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7XG4gIH1cbn1cbmZ1bmN0aW9uIGlsKGEsIGIpIHtcbiAgYSA9IGEubWVtb2l6ZWRTdGF0ZTtcbiAgaWYgKG51bGwgIT09IGEgJiYgbnVsbCAhPT0gYS5kZWh5ZHJhdGVkKSB7XG4gICAgdmFyIGMgPSBhLnJldHJ5TGFuZTtcbiAgICBhLnJldHJ5TGFuZSA9IDAgIT09IGMgJiYgYyA8IGIgPyBjIDogYjtcbiAgfVxufVxuZnVuY3Rpb24gamwoYSwgYikge1xuICBpbChhLCBiKTtcbiAgKGEgPSBhLmFsdGVybmF0ZSkgJiYgaWwoYSwgYik7XG59XG5mdW5jdGlvbiBrbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG52YXIgbGwgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiByZXBvcnRFcnJvciA/IHJlcG9ydEVycm9yIDogZnVuY3Rpb24gKGEpIHtcbiAgY29uc29sZS5lcnJvcihhKTtcbn07XG5mdW5jdGlvbiBtbChhKSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGE7XG59XG5ubC5wcm90b3R5cGUucmVuZGVyID0gbWwucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChhKSB7XG4gIHZhciBiID0gdGhpcy5faW50ZXJuYWxSb290O1xuICBpZiAobnVsbCA9PT0gYikgdGhyb3cgRXJyb3IocCg0MDkpKTtcbiAgZ2woYSwgYiwgbnVsbCwgbnVsbCk7XG59O1xubmwucHJvdG90eXBlLnVubW91bnQgPSBtbC5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGEgPSB0aGlzLl9pbnRlcm5hbFJvb3Q7XG4gIGlmIChudWxsICE9PSBhKSB7XG4gICAgdGhpcy5faW50ZXJuYWxSb290ID0gbnVsbDtcbiAgICB2YXIgYiA9IGEuY29udGFpbmVySW5mbztcbiAgICBTayhmdW5jdGlvbiAoKSB7XG4gICAgICBnbChudWxsLCBhLCBudWxsLCBudWxsKTtcbiAgICB9KTtcbiAgICBiW3VmXSA9IG51bGw7XG4gIH1cbn07XG5mdW5jdGlvbiBubChhKSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGE7XG59XG5ubC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24gPSBmdW5jdGlvbiAoYSkge1xuICBpZiAoYSkge1xuICAgIHZhciBiID0gSGMoKTtcbiAgICBhID0ge1xuICAgICAgYmxvY2tlZE9uOiBudWxsLFxuICAgICAgdGFyZ2V0OiBhLFxuICAgICAgcHJpb3JpdHk6IGJcbiAgICB9O1xuICAgIGZvciAodmFyIGMgPSAwOyBjIDwgUWMubGVuZ3RoICYmIDAgIT09IGIgJiYgYiA8IFFjW2NdLnByaW9yaXR5OyBjKyspO1xuICAgIFFjLnNwbGljZShjLCAwLCBhKTtcbiAgICAwID09PSBjICYmIFZjKGEpO1xuICB9XG59O1xuZnVuY3Rpb24gb2woYSkge1xuICByZXR1cm4gISghYSB8fCAxICE9PSBhLm5vZGVUeXBlICYmIDkgIT09IGEubm9kZVR5cGUgJiYgMTEgIT09IGEubm9kZVR5cGUpO1xufVxuZnVuY3Rpb24gcGwoYSkge1xuICByZXR1cm4gISghYSB8fCAxICE9PSBhLm5vZGVUeXBlICYmIDkgIT09IGEubm9kZVR5cGUgJiYgMTEgIT09IGEubm9kZVR5cGUgJiYgKDggIT09IGEubm9kZVR5cGUgfHwgXCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIgIT09IGEubm9kZVZhbHVlKSk7XG59XG5mdW5jdGlvbiBxbCgpIHt9XG5mdW5jdGlvbiBybChhLCBiLCBjLCBkLCBlKSB7XG4gIGlmIChlKSB7XG4gICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGQpIHtcbiAgICAgIHZhciBmID0gZDtcbiAgICAgIGQgPSBmdW5jdGlvbiBkKCkge1xuICAgICAgICB2YXIgYSA9IGhsKGcpO1xuICAgICAgICBmLmNhbGwoYSk7XG4gICAgICB9O1xuICAgIH1cbiAgICB2YXIgZyA9IGZsKGIsIGQsIGEsIDAsIG51bGwsICExLCAhMSwgXCJcIiwgcWwpO1xuICAgIGEuX3JlYWN0Um9vdENvbnRhaW5lciA9IGc7XG4gICAgYVt1Zl0gPSBnLmN1cnJlbnQ7XG4gICAgc2YoOCA9PT0gYS5ub2RlVHlwZSA/IGEucGFyZW50Tm9kZSA6IGEpO1xuICAgIFNrKCk7XG4gICAgcmV0dXJuIGc7XG4gIH1cbiAgZm9yICg7IGUgPSBhLmxhc3RDaGlsZDspIGEucmVtb3ZlQ2hpbGQoZSk7XG4gIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkKSB7XG4gICAgdmFyIGggPSBkO1xuICAgIGQgPSBmdW5jdGlvbiBkKCkge1xuICAgICAgdmFyIGEgPSBobChrKTtcbiAgICAgIGguY2FsbChhKTtcbiAgICB9O1xuICB9XG4gIHZhciBrID0gY2woYSwgMCwgITEsIG51bGwsIG51bGwsICExLCAhMSwgXCJcIiwgcWwpO1xuICBhLl9yZWFjdFJvb3RDb250YWluZXIgPSBrO1xuICBhW3VmXSA9IGsuY3VycmVudDtcbiAgc2YoOCA9PT0gYS5ub2RlVHlwZSA/IGEucGFyZW50Tm9kZSA6IGEpO1xuICBTayhmdW5jdGlvbiAoKSB7XG4gICAgZ2woYiwgaywgYywgZCk7XG4gIH0pO1xuICByZXR1cm4gaztcbn1cbmZ1bmN0aW9uIHNsKGEsIGIsIGMsIGQsIGUpIHtcbiAgdmFyIGYgPSBjLl9yZWFjdFJvb3RDb250YWluZXI7XG4gIGlmIChmKSB7XG4gICAgdmFyIGcgPSBmO1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlKSB7XG4gICAgICB2YXIgaCA9IGU7XG4gICAgICBlID0gZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgdmFyIGEgPSBobChnKTtcbiAgICAgICAgaC5jYWxsKGEpO1xuICAgICAgfTtcbiAgICB9XG4gICAgZ2woYiwgZywgYSwgZSk7XG4gIH0gZWxzZSBnID0gcmwoYywgYiwgYSwgZSwgZCk7XG4gIHJldHVybiBobChnKTtcbn1cbkVjID0gZnVuY3Rpb24gRWMoYSkge1xuICBzd2l0Y2ggKGEudGFnKSB7XG4gICAgY2FzZSAzOlxuICAgICAgdmFyIGIgPSBhLnN0YXRlTm9kZTtcbiAgICAgIGlmIChiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpIHtcbiAgICAgICAgdmFyIGMgPSB0YyhiLnBlbmRpbmdMYW5lcyk7XG4gICAgICAgIDAgIT09IGMgJiYgKENjKGIsIGMgfCAxKSwgRWsoYiwgQigpKSwgMCA9PT0gKEsgJiA2KSAmJiAoSGogPSBCKCkgKyA1MDAsIGpnKCkpKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTM6XG4gICAgICBTayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBiID0gWmcoYSwgMSk7XG4gICAgICAgIGlmIChudWxsICE9PSBiKSB7XG4gICAgICAgICAgdmFyIGMgPSBMKCk7XG4gICAgICAgICAgbWgoYiwgYSwgMSwgYyk7XG4gICAgICAgIH1cbiAgICAgIH0pLCBqbChhLCAxKTtcbiAgfVxufTtcbkZjID0gZnVuY3Rpb24gRmMoYSkge1xuICBpZiAoMTMgPT09IGEudGFnKSB7XG4gICAgdmFyIGIgPSBaZyhhLCAxMzQyMTc3MjgpO1xuICAgIGlmIChudWxsICE9PSBiKSB7XG4gICAgICB2YXIgYyA9IEwoKTtcbiAgICAgIG1oKGIsIGEsIDEzNDIxNzcyOCwgYyk7XG4gICAgfVxuICAgIGpsKGEsIDEzNDIxNzcyOCk7XG4gIH1cbn07XG5HYyA9IGZ1bmN0aW9uIEdjKGEpIHtcbiAgaWYgKDEzID09PSBhLnRhZykge1xuICAgIHZhciBiID0gbGgoYSksXG4gICAgICBjID0gWmcoYSwgYik7XG4gICAgaWYgKG51bGwgIT09IGMpIHtcbiAgICAgIHZhciBkID0gTCgpO1xuICAgICAgbWgoYywgYSwgYiwgZCk7XG4gICAgfVxuICAgIGpsKGEsIGIpO1xuICB9XG59O1xuSGMgPSBmdW5jdGlvbiBIYygpIHtcbiAgcmV0dXJuIEM7XG59O1xuSWMgPSBmdW5jdGlvbiBJYyhhLCBiKSB7XG4gIHZhciBjID0gQztcbiAgdHJ5IHtcbiAgICByZXR1cm4gQyA9IGEsIGIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBDID0gYztcbiAgfVxufTtcbnliID0gZnVuY3Rpb24geWIoYSwgYiwgYykge1xuICBzd2l0Y2ggKGIpIHtcbiAgICBjYXNlIFwiaW5wdXRcIjpcbiAgICAgIGJiKGEsIGMpO1xuICAgICAgYiA9IGMubmFtZTtcbiAgICAgIGlmIChcInJhZGlvXCIgPT09IGMudHlwZSAmJiBudWxsICE9IGIpIHtcbiAgICAgICAgZm9yIChjID0gYTsgYy5wYXJlbnROb2RlOykgYyA9IGMucGFyZW50Tm9kZTtcbiAgICAgICAgYyA9IGMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIgKyBKU09OLnN0cmluZ2lmeShcIlwiICsgYikgKyAnXVt0eXBlPVwicmFkaW9cIl0nKTtcbiAgICAgICAgZm9yIChiID0gMDsgYiA8IGMubGVuZ3RoOyBiKyspIHtcbiAgICAgICAgICB2YXIgZCA9IGNbYl07XG4gICAgICAgICAgaWYgKGQgIT09IGEgJiYgZC5mb3JtID09PSBhLmZvcm0pIHtcbiAgICAgICAgICAgIHZhciBlID0gRGIoZCk7XG4gICAgICAgICAgICBpZiAoIWUpIHRocm93IEVycm9yKHAoOTApKTtcbiAgICAgICAgICAgIFdhKGQpO1xuICAgICAgICAgICAgYmIoZCwgZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwidGV4dGFyZWFcIjpcbiAgICAgIGliKGEsIGMpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInNlbGVjdFwiOlxuICAgICAgYiA9IGMudmFsdWUsIG51bGwgIT0gYiAmJiBmYihhLCAhIWMubXVsdGlwbGUsIGIsICExKTtcbiAgfVxufTtcbkdiID0gUms7XG5IYiA9IFNrO1xudmFyIHRsID0ge1xuICAgIHVzaW5nQ2xpZW50RW50cnlQb2ludDogITEsXG4gICAgRXZlbnRzOiBbQ2IsIHVlLCBEYiwgRWIsIEZiLCBSa11cbiAgfSxcbiAgdWwgPSB7XG4gICAgZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6IFdjLFxuICAgIGJ1bmRsZVR5cGU6IDAsXG4gICAgdmVyc2lvbjogXCIxOC4yLjBcIixcbiAgICByZW5kZXJlclBhY2thZ2VOYW1lOiBcInJlYWN0LWRvbVwiXG4gIH07XG52YXIgdmwgPSB7XG4gIGJ1bmRsZVR5cGU6IHVsLmJ1bmRsZVR5cGUsXG4gIHZlcnNpb246IHVsLnZlcnNpb24sXG4gIHJlbmRlcmVyUGFja2FnZU5hbWU6IHVsLnJlbmRlcmVyUGFja2FnZU5hbWUsXG4gIHJlbmRlcmVyQ29uZmlnOiB1bC5yZW5kZXJlckNvbmZpZyxcbiAgb3ZlcnJpZGVIb29rU3RhdGU6IG51bGwsXG4gIG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDogbnVsbCxcbiAgb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOiBudWxsLFxuICBvdmVycmlkZVByb3BzOiBudWxsLFxuICBvdmVycmlkZVByb3BzRGVsZXRlUGF0aDogbnVsbCxcbiAgb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6IG51bGwsXG4gIHNldEVycm9ySGFuZGxlcjogbnVsbCxcbiAgc2V0U3VzcGVuc2VIYW5kbGVyOiBudWxsLFxuICBzY2hlZHVsZVVwZGF0ZTogbnVsbCxcbiAgY3VycmVudERpc3BhdGNoZXJSZWY6IHVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsXG4gIGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOiBmdW5jdGlvbiBmaW5kSG9zdEluc3RhbmNlQnlGaWJlcihhKSB7XG4gICAgYSA9IFpiKGEpO1xuICAgIHJldHVybiBudWxsID09PSBhID8gbnVsbCA6IGEuc3RhdGVOb2RlO1xuICB9LFxuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogdWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UgfHwga2wsXG4gIGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDogbnVsbCxcbiAgc2NoZWR1bGVSZWZyZXNoOiBudWxsLFxuICBzY2hlZHVsZVJvb3Q6IG51bGwsXG4gIHNldFJlZnJlc2hIYW5kbGVyOiBudWxsLFxuICBnZXRDdXJyZW50RmliZXI6IG51bGwsXG4gIHJlY29uY2lsZXJWZXJzaW9uOiBcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiXG59O1xuaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pIHtcbiAgdmFyIHdsID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoIXdsLmlzRGlzYWJsZWQgJiYgd2wuc3VwcG9ydHNGaWJlcikgdHJ5IHtcbiAgICBrYyA9IHdsLmluamVjdCh2bCksIGxjID0gd2w7XG4gIH0gY2F0Y2ggKGEpIHt9XG59XG5leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gdGw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjID0gMiA8IGFyZ3VtZW50cy5sZW5ndGggJiYgdm9pZCAwICE9PSBhcmd1bWVudHNbMl0gPyBhcmd1bWVudHNbMl0gOiBudWxsO1xuICBpZiAoIW9sKGIpKSB0aHJvdyBFcnJvcihwKDIwMCkpO1xuICByZXR1cm4gZGwoYSwgYiwgbnVsbCwgYyk7XG59O1xuZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKCFvbChhKSkgdGhyb3cgRXJyb3IocCgyOTkpKTtcbiAgdmFyIGMgPSAhMSxcbiAgICBkID0gXCJcIixcbiAgICBlID0gbGw7XG4gIG51bGwgIT09IGIgJiYgdm9pZCAwICE9PSBiICYmICghMCA9PT0gYi51bnN0YWJsZV9zdHJpY3RNb2RlICYmIChjID0gITApLCB2b2lkIDAgIT09IGIuaWRlbnRpZmllclByZWZpeCAmJiAoZCA9IGIuaWRlbnRpZmllclByZWZpeCksIHZvaWQgMCAhPT0gYi5vblJlY292ZXJhYmxlRXJyb3IgJiYgKGUgPSBiLm9uUmVjb3ZlcmFibGVFcnJvcikpO1xuICBiID0gY2woYSwgMSwgITEsIG51bGwsIG51bGwsIGMsICExLCBkLCBlKTtcbiAgYVt1Zl0gPSBiLmN1cnJlbnQ7XG4gIHNmKDggPT09IGEubm9kZVR5cGUgPyBhLnBhcmVudE5vZGUgOiBhKTtcbiAgcmV0dXJuIG5ldyBtbChiKTtcbn07XG5leHBvcnRzLmZpbmRET01Ob2RlID0gZnVuY3Rpb24gKGEpIHtcbiAgaWYgKG51bGwgPT0gYSkgcmV0dXJuIG51bGw7XG4gIGlmICgxID09PSBhLm5vZGVUeXBlKSByZXR1cm4gYTtcbiAgdmFyIGIgPSBhLl9yZWFjdEludGVybmFscztcbiAgaWYgKHZvaWQgMCA9PT0gYikge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhLnJlbmRlcikgdGhyb3cgRXJyb3IocCgxODgpKTtcbiAgICBhID0gT2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7XG4gICAgdGhyb3cgRXJyb3IocCgyNjgsIGEpKTtcbiAgfVxuICBhID0gWmIoYik7XG4gIGEgPSBudWxsID09PSBhID8gbnVsbCA6IGEuc3RhdGVOb2RlO1xuICByZXR1cm4gYTtcbn07XG5leHBvcnRzLmZsdXNoU3luYyA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBTayhhKTtcbn07XG5leHBvcnRzLmh5ZHJhdGUgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICBpZiAoIXBsKGIpKSB0aHJvdyBFcnJvcihwKDIwMCkpO1xuICByZXR1cm4gc2wobnVsbCwgYSwgYiwgITAsIGMpO1xufTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbiAoYSwgYiwgYykge1xuICBpZiAoIW9sKGEpKSB0aHJvdyBFcnJvcihwKDQwNSkpO1xuICB2YXIgZCA9IG51bGwgIT0gYyAmJiBjLmh5ZHJhdGVkU291cmNlcyB8fCBudWxsLFxuICAgIGUgPSAhMSxcbiAgICBmID0gXCJcIixcbiAgICBnID0gbGw7XG4gIG51bGwgIT09IGMgJiYgdm9pZCAwICE9PSBjICYmICghMCA9PT0gYy51bnN0YWJsZV9zdHJpY3RNb2RlICYmIChlID0gITApLCB2b2lkIDAgIT09IGMuaWRlbnRpZmllclByZWZpeCAmJiAoZiA9IGMuaWRlbnRpZmllclByZWZpeCksIHZvaWQgMCAhPT0gYy5vblJlY292ZXJhYmxlRXJyb3IgJiYgKGcgPSBjLm9uUmVjb3ZlcmFibGVFcnJvcikpO1xuICBiID0gZmwoYiwgbnVsbCwgYSwgMSwgbnVsbCAhPSBjID8gYyA6IG51bGwsIGUsICExLCBmLCBnKTtcbiAgYVt1Zl0gPSBiLmN1cnJlbnQ7XG4gIHNmKGEpO1xuICBpZiAoZCkgZm9yIChhID0gMDsgYSA8IGQubGVuZ3RoOyBhKyspIGMgPSBkW2FdLCBlID0gYy5fZ2V0VmVyc2lvbiwgZSA9IGUoYy5fc291cmNlKSwgbnVsbCA9PSBiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEgPyBiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEgPSBbYywgZV0gOiBiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLCBlKTtcbiAgcmV0dXJuIG5ldyBubChiKTtcbn07XG5leHBvcnRzLnJlbmRlciA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gIGlmICghcGwoYikpIHRocm93IEVycm9yKHAoMjAwKSk7XG4gIHJldHVybiBzbChudWxsLCBhLCBiLCAhMSwgYyk7XG59O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlID0gZnVuY3Rpb24gKGEpIHtcbiAgaWYgKCFwbChhKSkgdGhyb3cgRXJyb3IocCg0MCkpO1xuICByZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyID8gKFNrKGZ1bmN0aW9uICgpIHtcbiAgICBzbChudWxsLCBudWxsLCBhLCAhMSwgZnVuY3Rpb24gKCkge1xuICAgICAgYS5fcmVhY3RSb290Q29udGFpbmVyID0gbnVsbDtcbiAgICAgIGFbdWZdID0gbnVsbDtcbiAgICB9KTtcbiAgfSksICEwKSA6ICExO1xufTtcbmV4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSBSaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkge1xuICBpZiAoIXBsKGMpKSB0aHJvdyBFcnJvcihwKDIwMCkpO1xuICBpZiAobnVsbCA9PSBhIHx8IHZvaWQgMCA9PT0gYS5fcmVhY3RJbnRlcm5hbHMpIHRocm93IEVycm9yKHAoMzgpKTtcbiAgcmV0dXJuIHNsKGEsIGIsIGMsICExLCBkKTtcbn07XG5leHBvcnRzLnZlcnNpb24gPSBcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIG0gPSByZXF1aXJlKCdyZWFjdC1kb20nKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IG0uY3JlYXRlUm9vdDtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IG0uaHlkcmF0ZVJvb3Q7XG59IGVsc2Uge1xuICB2YXIgaSA9IG0uX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG4gIGV4cG9ydHMuY3JlYXRlUm9vdCA9IGZ1bmN0aW9uIChjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uIChjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn0iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cbnZhciBsID0gU3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksXG4gIG4gPSBTeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLFxuICBwID0gU3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLFxuICBxID0gU3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLFxuICByID0gU3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLFxuICB0ID0gU3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLFxuICB1ID0gU3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksXG4gIHYgPSBTeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksXG4gIHcgPSBTeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksXG4gIHggPSBTeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxcbiAgeSA9IFN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLFxuICB6ID0gU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24gQShhKSB7XG4gIGlmIChudWxsID09PSBhIHx8IFwib2JqZWN0XCIgIT09IF90eXBlb2YoYSkpIHJldHVybiBudWxsO1xuICBhID0geiAmJiBhW3pdIHx8IGFbXCJAQGl0ZXJhdG9yXCJdO1xuICByZXR1cm4gXCJmdW5jdGlvblwiID09PSB0eXBlb2YgYSA/IGEgOiBudWxsO1xufVxudmFyIEIgPSB7XG4gICAgaXNNb3VudGVkOiBmdW5jdGlvbiBpc01vdW50ZWQoKSB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfSxcbiAgICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIGVucXVldWVGb3JjZVVwZGF0ZSgpIHt9LFxuICAgIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIGVucXVldWVSZXBsYWNlU3RhdGUoKSB7fSxcbiAgICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIGVucXVldWVTZXRTdGF0ZSgpIHt9XG4gIH0sXG4gIEMgPSBPYmplY3QuYXNzaWduLFxuICBEID0ge307XG5mdW5jdGlvbiBFKGEsIGIsIGUpIHtcbiAgdGhpcy5wcm9wcyA9IGE7XG4gIHRoaXMuY29udGV4dCA9IGI7XG4gIHRoaXMucmVmcyA9IEQ7XG4gIHRoaXMudXBkYXRlciA9IGUgfHwgQjtcbn1cbkUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQgPSB7fTtcbkUucHJvdG90eXBlLnNldFN0YXRlID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgaWYgKFwib2JqZWN0XCIgIT09IF90eXBlb2YoYSkgJiYgXCJmdW5jdGlvblwiICE9PSB0eXBlb2YgYSAmJiBudWxsICE9IGEpIHRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsIGEsIGIsIFwic2V0U3RhdGVcIik7XG59O1xuRS5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoYSkge1xuICB0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsIGEsIFwiZm9yY2VVcGRhdGVcIik7XG59O1xuZnVuY3Rpb24gRigpIHt9XG5GLnByb3RvdHlwZSA9IEUucHJvdG90eXBlO1xuZnVuY3Rpb24gRyhhLCBiLCBlKSB7XG4gIHRoaXMucHJvcHMgPSBhO1xuICB0aGlzLmNvbnRleHQgPSBiO1xuICB0aGlzLnJlZnMgPSBEO1xuICB0aGlzLnVwZGF0ZXIgPSBlIHx8IEI7XG59XG52YXIgSCA9IEcucHJvdG90eXBlID0gbmV3IEYoKTtcbkguY29uc3RydWN0b3IgPSBHO1xuQyhILCBFLnByb3RvdHlwZSk7XG5ILmlzUHVyZVJlYWN0Q29tcG9uZW50ID0gITA7XG52YXIgSSA9IEFycmF5LmlzQXJyYXksXG4gIEogPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuICBLID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfSxcbiAgTCA9IHtcbiAgICBrZXk6ICEwLFxuICAgIHJlZjogITAsXG4gICAgX19zZWxmOiAhMCxcbiAgICBfX3NvdXJjZTogITBcbiAgfTtcbmZ1bmN0aW9uIE0oYSwgYiwgZSkge1xuICB2YXIgZCxcbiAgICBjID0ge30sXG4gICAgayA9IG51bGwsXG4gICAgaCA9IG51bGw7XG4gIGlmIChudWxsICE9IGIpIGZvciAoZCBpbiB2b2lkIDAgIT09IGIucmVmICYmIChoID0gYi5yZWYpLCB2b2lkIDAgIT09IGIua2V5ICYmIChrID0gXCJcIiArIGIua2V5KSwgYikgSi5jYWxsKGIsIGQpICYmICFMLmhhc093blByb3BlcnR5KGQpICYmIChjW2RdID0gYltkXSk7XG4gIHZhciBnID0gYXJndW1lbnRzLmxlbmd0aCAtIDI7XG4gIGlmICgxID09PSBnKSBjLmNoaWxkcmVuID0gZTtlbHNlIGlmICgxIDwgZykge1xuICAgIGZvciAodmFyIGYgPSBBcnJheShnKSwgbSA9IDA7IG0gPCBnOyBtKyspIGZbbV0gPSBhcmd1bWVudHNbbSArIDJdO1xuICAgIGMuY2hpbGRyZW4gPSBmO1xuICB9XG4gIGlmIChhICYmIGEuZGVmYXVsdFByb3BzKSBmb3IgKGQgaW4gZyA9IGEuZGVmYXVsdFByb3BzLCBnKSB2b2lkIDAgPT09IGNbZF0gJiYgKGNbZF0gPSBnW2RdKTtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogbCxcbiAgICB0eXBlOiBhLFxuICAgIGtleTogayxcbiAgICByZWY6IGgsXG4gICAgcHJvcHM6IGMsXG4gICAgX293bmVyOiBLLmN1cnJlbnRcbiAgfTtcbn1cbmZ1bmN0aW9uIE4oYSwgYikge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBsLFxuICAgIHR5cGU6IGEudHlwZSxcbiAgICBrZXk6IGIsXG4gICAgcmVmOiBhLnJlZixcbiAgICBwcm9wczogYS5wcm9wcyxcbiAgICBfb3duZXI6IGEuX293bmVyXG4gIH07XG59XG5mdW5jdGlvbiBPKGEpIHtcbiAgcmV0dXJuIFwib2JqZWN0XCIgPT09IF90eXBlb2YoYSkgJiYgbnVsbCAhPT0gYSAmJiBhLiQkdHlwZW9mID09PSBsO1xufVxuZnVuY3Rpb24gZXNjYXBlKGEpIHtcbiAgdmFyIGIgPSB7XG4gICAgXCI9XCI6IFwiPTBcIixcbiAgICBcIjpcIjogXCI9MlwiXG4gIH07XG4gIHJldHVybiBcIiRcIiArIGEucmVwbGFjZSgvWz06XS9nLCBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBiW2FdO1xuICB9KTtcbn1cbnZhciBQID0gL1xcLysvZztcbmZ1bmN0aW9uIFEoYSwgYikge1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gX3R5cGVvZihhKSAmJiBudWxsICE9PSBhICYmIG51bGwgIT0gYS5rZXkgPyBlc2NhcGUoXCJcIiArIGEua2V5KSA6IGIudG9TdHJpbmcoMzYpO1xufVxuZnVuY3Rpb24gUihhLCBiLCBlLCBkLCBjKSB7XG4gIHZhciBrID0gX3R5cGVvZihhKTtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IGsgfHwgXCJib29sZWFuXCIgPT09IGspIGEgPSBudWxsO1xuICB2YXIgaCA9ICExO1xuICBpZiAobnVsbCA9PT0gYSkgaCA9ICEwO2Vsc2Ugc3dpdGNoIChrKSB7XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIGggPSAhMDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIHN3aXRjaCAoYS4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIGw6XG4gICAgICAgIGNhc2UgbjpcbiAgICAgICAgICBoID0gITA7XG4gICAgICB9XG4gIH1cbiAgaWYgKGgpIHJldHVybiBoID0gYSwgYyA9IGMoaCksIGEgPSBcIlwiID09PSBkID8gXCIuXCIgKyBRKGgsIDApIDogZCwgSShjKSA/IChlID0gXCJcIiwgbnVsbCAhPSBhICYmIChlID0gYS5yZXBsYWNlKFAsIFwiJCYvXCIpICsgXCIvXCIpLCBSKGMsIGIsIGUsIFwiXCIsIGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGE7XG4gIH0pKSA6IG51bGwgIT0gYyAmJiAoTyhjKSAmJiAoYyA9IE4oYywgZSArICghYy5rZXkgfHwgaCAmJiBoLmtleSA9PT0gYy5rZXkgPyBcIlwiIDogKFwiXCIgKyBjLmtleSkucmVwbGFjZShQLCBcIiQmL1wiKSArIFwiL1wiKSArIGEpKSwgYi5wdXNoKGMpKSwgMTtcbiAgaCA9IDA7XG4gIGQgPSBcIlwiID09PSBkID8gXCIuXCIgOiBkICsgXCI6XCI7XG4gIGlmIChJKGEpKSBmb3IgKHZhciBnID0gMDsgZyA8IGEubGVuZ3RoOyBnKyspIHtcbiAgICBrID0gYVtnXTtcbiAgICB2YXIgZiA9IGQgKyBRKGssIGcpO1xuICAgIGggKz0gUihrLCBiLCBlLCBmLCBjKTtcbiAgfSBlbHNlIGlmIChmID0gQShhKSwgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZikgZm9yIChhID0gZi5jYWxsKGEpLCBnID0gMDsgIShrID0gYS5uZXh0KCkpLmRvbmU7KSBrID0gay52YWx1ZSwgZiA9IGQgKyBRKGssIGcrKyksIGggKz0gUihrLCBiLCBlLCBmLCBjKTtlbHNlIGlmIChcIm9iamVjdFwiID09PSBrKSB0aHJvdyBiID0gU3RyaW5nKGEpLCBFcnJvcihcIk9iamVjdHMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkIChmb3VuZDogXCIgKyAoXCJbb2JqZWN0IE9iamVjdF1cIiA9PT0gYiA/IFwib2JqZWN0IHdpdGgga2V5cyB7XCIgKyBPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikgKyBcIn1cIiA6IGIpICsgXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO1xuICByZXR1cm4gaDtcbn1cbmZ1bmN0aW9uIFMoYSwgYiwgZSkge1xuICBpZiAobnVsbCA9PSBhKSByZXR1cm4gYTtcbiAgdmFyIGQgPSBbXSxcbiAgICBjID0gMDtcbiAgUihhLCBkLCBcIlwiLCBcIlwiLCBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBiLmNhbGwoZSwgYSwgYysrKTtcbiAgfSk7XG4gIHJldHVybiBkO1xufVxuZnVuY3Rpb24gVChhKSB7XG4gIGlmICgtMSA9PT0gYS5fc3RhdHVzKSB7XG4gICAgdmFyIGIgPSBhLl9yZXN1bHQ7XG4gICAgYiA9IGIoKTtcbiAgICBiLnRoZW4oZnVuY3Rpb24gKGIpIHtcbiAgICAgIGlmICgwID09PSBhLl9zdGF0dXMgfHwgLTEgPT09IGEuX3N0YXR1cykgYS5fc3RhdHVzID0gMSwgYS5fcmVzdWx0ID0gYjtcbiAgICB9LCBmdW5jdGlvbiAoYikge1xuICAgICAgaWYgKDAgPT09IGEuX3N0YXR1cyB8fCAtMSA9PT0gYS5fc3RhdHVzKSBhLl9zdGF0dXMgPSAyLCBhLl9yZXN1bHQgPSBiO1xuICAgIH0pO1xuICAgIC0xID09PSBhLl9zdGF0dXMgJiYgKGEuX3N0YXR1cyA9IDAsIGEuX3Jlc3VsdCA9IGIpO1xuICB9XG4gIGlmICgxID09PSBhLl9zdGF0dXMpIHJldHVybiBhLl9yZXN1bHQuZGVmYXVsdDtcbiAgdGhyb3cgYS5fcmVzdWx0O1xufVxudmFyIFUgPSB7XG4gICAgY3VycmVudDogbnVsbFxuICB9LFxuICBWID0ge1xuICAgIHRyYW5zaXRpb246IG51bGxcbiAgfSxcbiAgVyA9IHtcbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyOiBVLFxuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOiBWLFxuICAgIFJlYWN0Q3VycmVudE93bmVyOiBLXG4gIH07XG5leHBvcnRzLkNoaWxkcmVuID0ge1xuICBtYXA6IFMsXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goYSwgYiwgZSkge1xuICAgIFMoYSwgZnVuY3Rpb24gKCkge1xuICAgICAgYi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH0sIGUpO1xuICB9LFxuICBjb3VudDogZnVuY3Rpb24gY291bnQoYSkge1xuICAgIHZhciBiID0gMDtcbiAgICBTKGEsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGIrKztcbiAgICB9KTtcbiAgICByZXR1cm4gYjtcbiAgfSxcbiAgdG9BcnJheTogZnVuY3Rpb24gdG9BcnJheShhKSB7XG4gICAgcmV0dXJuIFMoYSwgZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH0pIHx8IFtdO1xuICB9LFxuICBvbmx5OiBmdW5jdGlvbiBvbmx5KGEpIHtcbiAgICBpZiAoIU8oYSkpIHRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO1xuICAgIHJldHVybiBhO1xuICB9XG59O1xuZXhwb3J0cy5Db21wb25lbnQgPSBFO1xuZXhwb3J0cy5GcmFnbWVudCA9IHA7XG5leHBvcnRzLlByb2ZpbGVyID0gcjtcbmV4cG9ydHMuUHVyZUNvbXBvbmVudCA9IEc7XG5leHBvcnRzLlN0cmljdE1vZGUgPSBxO1xuZXhwb3J0cy5TdXNwZW5zZSA9IHc7XG5leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEID0gVztcbmV4cG9ydHMuY2xvbmVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGUpIHtcbiAgaWYgKG51bGwgPT09IGEgfHwgdm9pZCAwID09PSBhKSB0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiICsgYSArIFwiLlwiKTtcbiAgdmFyIGQgPSBDKHt9LCBhLnByb3BzKSxcbiAgICBjID0gYS5rZXksXG4gICAgayA9IGEucmVmLFxuICAgIGggPSBhLl9vd25lcjtcbiAgaWYgKG51bGwgIT0gYikge1xuICAgIHZvaWQgMCAhPT0gYi5yZWYgJiYgKGsgPSBiLnJlZiwgaCA9IEsuY3VycmVudCk7XG4gICAgdm9pZCAwICE9PSBiLmtleSAmJiAoYyA9IFwiXCIgKyBiLmtleSk7XG4gICAgaWYgKGEudHlwZSAmJiBhLnR5cGUuZGVmYXVsdFByb3BzKSB2YXIgZyA9IGEudHlwZS5kZWZhdWx0UHJvcHM7XG4gICAgZm9yIChmIGluIGIpIEouY2FsbChiLCBmKSAmJiAhTC5oYXNPd25Qcm9wZXJ0eShmKSAmJiAoZFtmXSA9IHZvaWQgMCA9PT0gYltmXSAmJiB2b2lkIDAgIT09IGcgPyBnW2ZdIDogYltmXSk7XG4gIH1cbiAgdmFyIGYgPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcbiAgaWYgKDEgPT09IGYpIGQuY2hpbGRyZW4gPSBlO2Vsc2UgaWYgKDEgPCBmKSB7XG4gICAgZyA9IEFycmF5KGYpO1xuICAgIGZvciAodmFyIG0gPSAwOyBtIDwgZjsgbSsrKSBnW21dID0gYXJndW1lbnRzW20gKyAyXTtcbiAgICBkLmNoaWxkcmVuID0gZztcbiAgfVxuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiBsLFxuICAgIHR5cGU6IGEudHlwZSxcbiAgICBrZXk6IGMsXG4gICAgcmVmOiBrLFxuICAgIHByb3BzOiBkLFxuICAgIF9vd25lcjogaFxuICB9O1xufTtcbmV4cG9ydHMuY3JlYXRlQ29udGV4dCA9IGZ1bmN0aW9uIChhKSB7XG4gIGEgPSB7XG4gICAgJCR0eXBlb2Y6IHUsXG4gICAgX2N1cnJlbnRWYWx1ZTogYSxcbiAgICBfY3VycmVudFZhbHVlMjogYSxcbiAgICBfdGhyZWFkQ291bnQ6IDAsXG4gICAgUHJvdmlkZXI6IG51bGwsXG4gICAgQ29uc3VtZXI6IG51bGwsXG4gICAgX2RlZmF1bHRWYWx1ZTogbnVsbCxcbiAgICBfZ2xvYmFsTmFtZTogbnVsbFxuICB9O1xuICBhLlByb3ZpZGVyID0ge1xuICAgICQkdHlwZW9mOiB0LFxuICAgIF9jb250ZXh0OiBhXG4gIH07XG4gIHJldHVybiBhLkNvbnN1bWVyID0gYTtcbn07XG5leHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBNO1xuZXhwb3J0cy5jcmVhdGVGYWN0b3J5ID0gZnVuY3Rpb24gKGEpIHtcbiAgdmFyIGIgPSBNLmJpbmQobnVsbCwgYSk7XG4gIGIudHlwZSA9IGE7XG4gIHJldHVybiBiO1xufTtcbmV4cG9ydHMuY3JlYXRlUmVmID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcbn07XG5leHBvcnRzLmZvcndhcmRSZWYgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4ge1xuICAgICQkdHlwZW9mOiB2LFxuICAgIHJlbmRlcjogYVxuICB9O1xufTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnQgPSBPO1xuZXhwb3J0cy5sYXp5ID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogeSxcbiAgICBfcGF5bG9hZDoge1xuICAgICAgX3N0YXR1czogLTEsXG4gICAgICBfcmVzdWx0OiBhXG4gICAgfSxcbiAgICBfaW5pdDogVFxuICB9O1xufTtcbmV4cG9ydHMubWVtbyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiB7XG4gICAgJCR0eXBlb2Y6IHgsXG4gICAgdHlwZTogYSxcbiAgICBjb21wYXJlOiB2b2lkIDAgPT09IGIgPyBudWxsIDogYlxuICB9O1xufTtcbmV4cG9ydHMuc3RhcnRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKGEpIHtcbiAgdmFyIGIgPSBWLnRyYW5zaXRpb247XG4gIFYudHJhbnNpdGlvbiA9IHt9O1xuICB0cnkge1xuICAgIGEoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBWLnRyYW5zaXRpb24gPSBiO1xuICB9XG59O1xuZXhwb3J0cy51bnN0YWJsZV9hY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7XG59O1xuZXhwb3J0cy51c2VDYWxsYmFjayA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSwgYik7XG59O1xuZXhwb3J0cy51c2VDb250ZXh0ID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VDb250ZXh0KGEpO1xufTtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpO1xufTtcbmV4cG9ydHMudXNlRWZmZWN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VFZmZlY3QoYSwgYik7XG59O1xuZXhwb3J0cy51c2VJZCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VJZCgpO1xufTtcbmV4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZSA9IGZ1bmN0aW9uIChhLCBiLCBlKSB7XG4gIHJldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLCBiLCBlKTtcbn07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHJldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsIGIpO1xufTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0ID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSwgYik7XG59O1xuZXhwb3J0cy51c2VNZW1vID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsIGIpO1xufTtcbmV4cG9ydHMudXNlUmVkdWNlciA9IGZ1bmN0aW9uIChhLCBiLCBlKSB7XG4gIHJldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLCBiLCBlKTtcbn07XG5leHBvcnRzLnVzZVJlZiA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpO1xufTtcbmV4cG9ydHMudXNlU3RhdGUgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gVS5jdXJyZW50LnVzZVN0YXRlKGEpO1xufTtcbmV4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmUgPSBmdW5jdGlvbiAoYSwgYiwgZSkge1xuICByZXR1cm4gVS5jdXJyZW50LnVzZVN5bmNFeHRlcm5hbFN0b3JlKGEsIGIsIGUpO1xufTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCk7XG59O1xuZXhwb3J0cy52ZXJzaW9uID0gXCIxOC4yLjBcIjsiLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn0iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5mdW5jdGlvbiBmKGEsIGIpIHtcbiAgdmFyIGMgPSBhLmxlbmd0aDtcbiAgYS5wdXNoKGIpO1xuICBhOiBmb3IgKDsgMCA8IGM7KSB7XG4gICAgdmFyIGQgPSBjIC0gMSA+Pj4gMSxcbiAgICAgIGUgPSBhW2RdO1xuICAgIGlmICgwIDwgZyhlLCBiKSkgYVtkXSA9IGIsIGFbY10gPSBlLCBjID0gZDtlbHNlIGJyZWFrIGE7XG4gIH1cbn1cbmZ1bmN0aW9uIGgoYSkge1xuICByZXR1cm4gMCA9PT0gYS5sZW5ndGggPyBudWxsIDogYVswXTtcbn1cbmZ1bmN0aW9uIGsoYSkge1xuICBpZiAoMCA9PT0gYS5sZW5ndGgpIHJldHVybiBudWxsO1xuICB2YXIgYiA9IGFbMF0sXG4gICAgYyA9IGEucG9wKCk7XG4gIGlmIChjICE9PSBiKSB7XG4gICAgYVswXSA9IGM7XG4gICAgYTogZm9yICh2YXIgZCA9IDAsIGUgPSBhLmxlbmd0aCwgdyA9IGUgPj4+IDE7IGQgPCB3Oykge1xuICAgICAgdmFyIG0gPSAyICogKGQgKyAxKSAtIDEsXG4gICAgICAgIEMgPSBhW21dLFxuICAgICAgICBuID0gbSArIDEsXG4gICAgICAgIHggPSBhW25dO1xuICAgICAgaWYgKDAgPiBnKEMsIGMpKSBuIDwgZSAmJiAwID4gZyh4LCBDKSA/IChhW2RdID0geCwgYVtuXSA9IGMsIGQgPSBuKSA6IChhW2RdID0gQywgYVttXSA9IGMsIGQgPSBtKTtlbHNlIGlmIChuIDwgZSAmJiAwID4gZyh4LCBjKSkgYVtkXSA9IHgsIGFbbl0gPSBjLCBkID0gbjtlbHNlIGJyZWFrIGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gZyhhLCBiKSB7XG4gIHZhciBjID0gYS5zb3J0SW5kZXggLSBiLnNvcnRJbmRleDtcbiAgcmV0dXJuIDAgIT09IGMgPyBjIDogYS5pZCAtIGIuaWQ7XG59XG5pZiAoXCJvYmplY3RcIiA9PT0gKHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHBlcmZvcm1hbmNlKSkgJiYgXCJmdW5jdGlvblwiID09PSB0eXBlb2YgcGVyZm9ybWFuY2Uubm93KSB7XG4gIHZhciBsID0gcGVyZm9ybWFuY2U7XG4gIGV4cG9ydHMudW5zdGFibGVfbm93ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBsLm5vdygpO1xuICB9O1xufSBlbHNlIHtcbiAgdmFyIHAgPSBEYXRlLFxuICAgIHEgPSBwLm5vdygpO1xuICBleHBvcnRzLnVuc3RhYmxlX25vdyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcC5ub3coKSAtIHE7XG4gIH07XG59XG52YXIgciA9IFtdLFxuICB0ID0gW10sXG4gIHUgPSAxLFxuICB2ID0gbnVsbCxcbiAgeSA9IDMsXG4gIHogPSAhMSxcbiAgQSA9ICExLFxuICBCID0gITEsXG4gIEQgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBzZXRUaW1lb3V0ID8gc2V0VGltZW91dCA6IG51bGwsXG4gIEUgPSBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBjbGVhclRpbWVvdXQgPyBjbGVhclRpbWVvdXQgOiBudWxsLFxuICBGID0gXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHNldEltbWVkaWF0ZSA/IHNldEltbWVkaWF0ZSA6IG51bGw7XG5cInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbmF2aWdhdG9yICYmIHZvaWQgMCAhPT0gbmF2aWdhdG9yLnNjaGVkdWxpbmcgJiYgdm9pZCAwICE9PSBuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyAmJiBuYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZy5iaW5kKG5hdmlnYXRvci5zY2hlZHVsaW5nKTtcbmZ1bmN0aW9uIEcoYSkge1xuICBmb3IgKHZhciBiID0gaCh0KTsgbnVsbCAhPT0gYjspIHtcbiAgICBpZiAobnVsbCA9PT0gYi5jYWxsYmFjaykgayh0KTtlbHNlIGlmIChiLnN0YXJ0VGltZSA8PSBhKSBrKHQpLCBiLnNvcnRJbmRleCA9IGIuZXhwaXJhdGlvblRpbWUsIGYociwgYik7ZWxzZSBicmVhaztcbiAgICBiID0gaCh0KTtcbiAgfVxufVxuZnVuY3Rpb24gSChhKSB7XG4gIEIgPSAhMTtcbiAgRyhhKTtcbiAgaWYgKCFBKSBpZiAobnVsbCAhPT0gaChyKSkgQSA9ICEwLCBJKEopO2Vsc2Uge1xuICAgIHZhciBiID0gaCh0KTtcbiAgICBudWxsICE9PSBiICYmIEsoSCwgYi5zdGFydFRpbWUgLSBhKTtcbiAgfVxufVxuZnVuY3Rpb24gSihhLCBiKSB7XG4gIEEgPSAhMTtcbiAgQiAmJiAoQiA9ICExLCBFKEwpLCBMID0gLTEpO1xuICB6ID0gITA7XG4gIHZhciBjID0geTtcbiAgdHJ5IHtcbiAgICBHKGIpO1xuICAgIGZvciAodiA9IGgocik7IG51bGwgIT09IHYgJiYgKCEodi5leHBpcmF0aW9uVGltZSA+IGIpIHx8IGEgJiYgIU0oKSk7KSB7XG4gICAgICB2YXIgZCA9IHYuY2FsbGJhY2s7XG4gICAgICBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YgZCkge1xuICAgICAgICB2LmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgeSA9IHYucHJpb3JpdHlMZXZlbDtcbiAgICAgICAgdmFyIGUgPSBkKHYuZXhwaXJhdGlvblRpbWUgPD0gYik7XG4gICAgICAgIGIgPSBleHBvcnRzLnVuc3RhYmxlX25vdygpO1xuICAgICAgICBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBlID8gdi5jYWxsYmFjayA9IGUgOiB2ID09PSBoKHIpICYmIGsocik7XG4gICAgICAgIEcoYik7XG4gICAgICB9IGVsc2UgayhyKTtcbiAgICAgIHYgPSBoKHIpO1xuICAgIH1cbiAgICBpZiAobnVsbCAhPT0gdikgdmFyIHcgPSAhMDtlbHNlIHtcbiAgICAgIHZhciBtID0gaCh0KTtcbiAgICAgIG51bGwgIT09IG0gJiYgSyhILCBtLnN0YXJ0VGltZSAtIGIpO1xuICAgICAgdyA9ICExO1xuICAgIH1cbiAgICByZXR1cm4gdztcbiAgfSBmaW5hbGx5IHtcbiAgICB2ID0gbnVsbCwgeSA9IGMsIHogPSAhMTtcbiAgfVxufVxudmFyIE4gPSAhMSxcbiAgTyA9IG51bGwsXG4gIEwgPSAtMSxcbiAgUCA9IDUsXG4gIFEgPSAtMTtcbmZ1bmN0aW9uIE0oKSB7XG4gIHJldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpIC0gUSA8IFAgPyAhMSA6ICEwO1xufVxuZnVuY3Rpb24gUigpIHtcbiAgaWYgKG51bGwgIT09IE8pIHtcbiAgICB2YXIgYSA9IGV4cG9ydHMudW5zdGFibGVfbm93KCk7XG4gICAgUSA9IGE7XG4gICAgdmFyIGIgPSAhMDtcbiAgICB0cnkge1xuICAgICAgYiA9IE8oITAsIGEpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBiID8gUygpIDogKE4gPSAhMSwgTyA9IG51bGwpO1xuICAgIH1cbiAgfSBlbHNlIE4gPSAhMTtcbn1cbnZhciBTO1xuaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIEYpIFMgPSBmdW5jdGlvbiBTKCkge1xuICBGKFIpO1xufTtlbHNlIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgTWVzc2FnZUNoYW5uZWwpIHtcbiAgdmFyIFQgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKSxcbiAgICBVID0gVC5wb3J0MjtcbiAgVC5wb3J0MS5vbm1lc3NhZ2UgPSBSO1xuICBTID0gZnVuY3Rpb24gUygpIHtcbiAgICBVLnBvc3RNZXNzYWdlKG51bGwpO1xuICB9O1xufSBlbHNlIFMgPSBmdW5jdGlvbiBTKCkge1xuICBEKFIsIDApO1xufTtcbmZ1bmN0aW9uIEkoYSkge1xuICBPID0gYTtcbiAgTiB8fCAoTiA9ICEwLCBTKCkpO1xufVxuZnVuY3Rpb24gSyhhLCBiKSB7XG4gIEwgPSBEKGZ1bmN0aW9uICgpIHtcbiAgICBhKGV4cG9ydHMudW5zdGFibGVfbm93KCkpO1xuICB9LCBiKTtcbn1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5ID0gNTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkgPSAxO1xuZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eSA9IDQ7XG5leHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5ID0gMztcbmV4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nID0gbnVsbDtcbmV4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkgPSAyO1xuZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayA9IGZ1bmN0aW9uIChhKSB7XG4gIGEuY2FsbGJhY2sgPSBudWxsO1xufTtcbmV4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gIEEgfHwgeiB8fCAoQSA9ICEwLCBJKEopKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlID0gZnVuY3Rpb24gKGEpIHtcbiAgMCA+IGEgfHwgMTI1IDwgYSA/IGNvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIikgOiBQID0gMCA8IGEgPyBNYXRoLmZsb29yKDFFMyAvIGEpIDogNTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4geTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gaChyKTtcbn07XG5leHBvcnRzLnVuc3RhYmxlX25leHQgPSBmdW5jdGlvbiAoYSkge1xuICBzd2l0Y2ggKHkpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICAgIHZhciBiID0gMztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBiID0geTtcbiAgfVxuICB2YXIgYyA9IHk7XG4gIHkgPSBiO1xuICB0cnkge1xuICAgIHJldHVybiBhKCk7XG4gIH0gZmluYWxseSB7XG4gICAgeSA9IGM7XG4gIH1cbn07XG5leHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uID0gZnVuY3Rpb24gKCkge307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludCA9IGZ1bmN0aW9uICgpIHt9O1xuZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkgPSBmdW5jdGlvbiAoYSwgYikge1xuICBzd2l0Y2ggKGEpIHtcbiAgICBjYXNlIDE6XG4gICAgY2FzZSAyOlxuICAgIGNhc2UgMzpcbiAgICBjYXNlIDQ6XG4gICAgY2FzZSA1OlxuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGEgPSAzO1xuICB9XG4gIHZhciBjID0geTtcbiAgeSA9IGE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGIoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICB5ID0gYztcbiAgfVxufTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gIHZhciBkID0gZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcbiAgXCJvYmplY3RcIiA9PT0gX3R5cGVvZihjKSAmJiBudWxsICE9PSBjID8gKGMgPSBjLmRlbGF5LCBjID0gXCJudW1iZXJcIiA9PT0gdHlwZW9mIGMgJiYgMCA8IGMgPyBkICsgYyA6IGQpIDogYyA9IGQ7XG4gIHN3aXRjaCAoYSkge1xuICAgIGNhc2UgMTpcbiAgICAgIHZhciBlID0gLTE7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDI6XG4gICAgICBlID0gMjUwO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA1OlxuICAgICAgZSA9IDEwNzM3NDE4MjM7XG4gICAgICBicmVhaztcbiAgICBjYXNlIDQ6XG4gICAgICBlID0gMUU0O1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIGUgPSA1RTM7XG4gIH1cbiAgZSA9IGMgKyBlO1xuICBhID0ge1xuICAgIGlkOiB1KyssXG4gICAgY2FsbGJhY2s6IGIsXG4gICAgcHJpb3JpdHlMZXZlbDogYSxcbiAgICBzdGFydFRpbWU6IGMsXG4gICAgZXhwaXJhdGlvblRpbWU6IGUsXG4gICAgc29ydEluZGV4OiAtMVxuICB9O1xuICBjID4gZCA/IChhLnNvcnRJbmRleCA9IGMsIGYodCwgYSksIG51bGwgPT09IGgocikgJiYgYSA9PT0gaCh0KSAmJiAoQiA/IChFKEwpLCBMID0gLTEpIDogQiA9ICEwLCBLKEgsIGMgLSBkKSkpIDogKGEuc29ydEluZGV4ID0gZSwgZihyLCBhKSwgQSB8fCB6IHx8IChBID0gITAsIEkoSikpKTtcbiAgcmV0dXJuIGE7XG59O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCA9IE07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjayA9IGZ1bmN0aW9uIChhKSB7XG4gIHZhciBiID0geTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYyA9IHk7XG4gICAgeSA9IGI7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHkgPSBjO1xuICAgIH1cbiAgfTtcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn0iLCJ2YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBBc3NlcnQ6IElzQ2FsbGFibGUoYXJndW1lbnQpIGlzIHRydWVgXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICBpZiAoaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhhcmd1bWVudCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG59O1xuIiwidmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgQXNzZXJ0OiBJc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSBpcyB0cnVlYFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzQ29uc3RydWN0b3IoYXJndW1lbnQpKSByZXR1cm4gYXJndW1lbnQ7XG4gIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBjb25zdHJ1Y3RvcicpO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG5cbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmICh0eXBlb2YgYXJndW1lbnQgPT0gJ29iamVjdCcgfHwgaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArICRTdHJpbmcoYXJndW1lbnQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHkoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xuXG4vLyBgQWR2YW5jZVN0cmluZ0luZGV4YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGNoYXJBdChTLCBpbmRleCkubGVuZ3RoIDogMSk7XG59O1xuIiwidmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkge1xuICBpZiAoaXNQcm90b3R5cGVPZihQcm90b3R5cGUsIGl0KSkgcmV0dXJuIGl0O1xuICB0aHJvdyAkVHlwZUVycm9yKCdJbmNvcnJlY3QgaW52b2NhdGlvbicpO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgaWYgKGlzT2JqZWN0KGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50O1xuICB0aHJvdyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG59O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBBcnJheUJ1ZmZlciAhPSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT0gJ3VuZGVmaW5lZCc7XG4iLCIvLyBGRjI2LSBidWc6IEFycmF5QnVmZmVycyBhcmUgbm9uLWV4dGVuc2libGUsIGJ1dCBPYmplY3QuaXNFeHRlbnNpYmxlIGRvZXMgbm90IHJlcG9ydCBpdFxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyID09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNleHRlbnNpYmxlLCBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIGlmIChPYmplY3QuaXNFeHRlbnNpYmxlKGJ1ZmZlcikpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShidWZmZXIsICdhJywgeyB2YWx1ZTogOCB9KTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTkFUSVZFX0FSUkFZX0JVRkZFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItYmFzaWMtZGV0ZWN0aW9uJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgSW50OEFycmF5UHJvdG90eXBlID0gSW50OEFycmF5ICYmIEludDhBcnJheS5wcm90b3R5cGU7XG52YXIgVWludDhDbGFtcGVkQXJyYXkgPSBnbG9iYWwuVWludDhDbGFtcGVkQXJyYXk7XG52YXIgVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OENsYW1wZWRBcnJheSAmJiBVaW50OENsYW1wZWRBcnJheS5wcm90b3R5cGU7XG52YXIgVHlwZWRBcnJheSA9IEludDhBcnJheSAmJiBnZXRQcm90b3R5cGVPZihJbnQ4QXJyYXkpO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXlQcm90b3R5cGUgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5UHJvdG90eXBlKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IHVpZCgnVFlQRURfQVJSQVlfVEFHJyk7XG52YXIgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IgPSAnVHlwZWRBcnJheUNvbnN0cnVjdG9yJztcbi8vIEZpeGluZyBuYXRpdmUgdHlwZWQgYXJyYXlzIGluIE9wZXJhIFByZXN0byBjcmFzaGVzIHRoZSBicm93c2VyLCBzZWUgIzU5NVxudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBOQVRJVkVfQVJSQVlfQlVGRkVSICYmICEhc2V0UHJvdG90eXBlT2YgJiYgY2xhc3NvZihnbG9iYWwub3BlcmEpICE9PSAnT3BlcmEnO1xudmFyIFRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCA9IGZhbHNlO1xudmFyIE5BTUUsIENvbnN0cnVjdG9yLCBQcm90b3R5cGU7XG5cbnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgSW50OEFycmF5OiAxLFxuICBVaW50OEFycmF5OiAxLFxuICBVaW50OENsYW1wZWRBcnJheTogMSxcbiAgSW50MTZBcnJheTogMixcbiAgVWludDE2QXJyYXk6IDIsXG4gIEludDMyQXJyYXk6IDQsXG4gIFVpbnQzMkFycmF5OiA0LFxuICBGbG9hdDMyQXJyYXk6IDQsXG4gIEZsb2F0NjRBcnJheTogOFxufTtcblxudmFyIEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHtcbiAgQmlnSW50NjRBcnJheTogOCxcbiAgQmlnVWludDY0QXJyYXk6IDhcbn07XG5cbnZhciBpc1ZpZXcgPSBmdW5jdGlvbiBpc1ZpZXcoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiBmYWxzZTtcbiAgdmFyIGtsYXNzID0gY2xhc3NvZihpdCk7XG4gIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3J1xuICAgIHx8IGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpXG4gICAgfHwgaGFzT3duKEJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCwga2xhc3MpO1xufTtcblxudmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGVPZihpdCk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pKSByZXR1cm47XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvdG8pO1xuICByZXR1cm4gKHN0YXRlICYmIGhhc093bihzdGF0ZSwgVFlQRURfQVJSQVlfQ09OU1RSVUNUT1IpKSA/IHN0YXRlW1RZUEVEX0FSUkFZX0NPTlNUUlVDVE9SXSA6IGdldFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcihwcm90byk7XG59O1xuXG52YXIgaXNUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gZmFsc2U7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4gaGFzT3duKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcylcbiAgICB8fCBoYXNPd24oQmlnSW50QXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBrbGFzcyk7XG59O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzVHlwZWRBcnJheShpdCkpIHJldHVybiBpdDtcbiAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGEgdHlwZWQgYXJyYXknKTtcbn07XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKEMpIHtcbiAgaWYgKGlzQ2FsbGFibGUoQykgJiYgKCFzZXRQcm90b3R5cGVPZiB8fCBpc1Byb3RvdHlwZU9mKFR5cGVkQXJyYXksIEMpKSkgcmV0dXJuIEM7XG4gIHRocm93IFR5cGVFcnJvcih0cnlUb1N0cmluZyhDKSArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkgY29uc3RydWN0b3InKTtcbn07XG5cbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCwgb3B0aW9ucykge1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChmb3JjZWQpIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXNPd24oVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSwgS0VZKSkgdHJ5IHtcbiAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV07XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIG9sZCBXZWJLaXQgYnVnIC0gc29tZSBtZXRob2RzIGFyZSBub24tY29uZmlndXJhYmxlXG4gICAgICB0cnkge1xuICAgICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlW0tFWV0gPSBwcm9wZXJ0eTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gICAgfVxuICB9XG4gIGlmICghVHlwZWRBcnJheVByb3RvdHlwZVtLRVldIHx8IGZvcmNlZCkge1xuICAgIGRlZmluZUJ1aWx0SW4oVHlwZWRBcnJheVByb3RvdHlwZSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eVxuICAgICAgOiBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIEludDhBcnJheVByb3RvdHlwZVtLRVldIHx8IHByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcblxudmFyIGV4cG9ydFR5cGVkQXJyYXlTdGF0aWNNZXRob2QgPSBmdW5jdGlvbiAoS0VZLCBwcm9wZXJ0eSwgZm9yY2VkKSB7XG4gIHZhciBBUlJBWSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm47XG4gIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgIGlmIChmb3JjZWQpIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07XG4gICAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhc093bihUeXBlZEFycmF5Q29uc3RydWN0b3IsIEtFWSkpIHRyeSB7XG4gICAgICAgIGRlbGV0ZSBUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9XG4gICAgaWYgKCFUeXBlZEFycmF5W0tFWV0gfHwgZm9yY2VkKSB7XG4gICAgICAvLyBWOCB+IENocm9tZSA0OS01MCBgJVR5cGVkQXJyYXklYCBtZXRob2RzIGFyZSBub24td3JpdGFibGUgbm9uLWNvbmZpZ3VyYWJsZVxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUJ1aWx0SW4oVHlwZWRBcnJheSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eSA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgVHlwZWRBcnJheVtLRVldIHx8IHByb3BlcnR5KTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICB9IGVsc2UgcmV0dXJuO1xuICB9XG4gIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldO1xuICAgIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7XG4gICAgICBkZWZpbmVCdWlsdEluKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7XG4gICAgfVxuICB9XG59O1xuXG5mb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgZW5mb3JjZUludGVybmFsU3RhdGUoUHJvdG90eXBlKVtUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUl0gPSBDb25zdHJ1Y3RvcjtcbiAgZWxzZSBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gZmFsc2U7XG59XG5cbmZvciAoTkFNRSBpbiBCaWdJbnRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgQ29uc3RydWN0b3IgPSBnbG9iYWxbTkFNRV07XG4gIFByb3RvdHlwZSA9IENvbnN0cnVjdG9yICYmIENvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgaWYgKFByb3RvdHlwZSkgZW5mb3JjZUludGVybmFsU3RhdGUoUHJvdG90eXBlKVtUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUl0gPSBDb25zdHJ1Y3Rvcjtcbn1cblxuLy8gV2ViS2l0IGJ1ZyAtIHR5cGVkIGFycmF5cyBjb25zdHJ1Y3RvcnMgcHJvdG90eXBlIGlzIE9iamVjdC5wcm90b3R5cGVcbmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhaXNDYWxsYWJsZShUeXBlZEFycmF5KSB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdyAtLSBzYWZlXG4gIFR5cGVkQXJyYXkgPSBmdW5jdGlvbiBUeXBlZEFycmF5KCkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTtcbiAgfTtcbiAgaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MpIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkge1xuICAgIGlmIChnbG9iYWxbTkFNRV0pIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXSwgVHlwZWRBcnJheSk7XG4gIH1cbn1cblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFUeXBlZEFycmF5UHJvdG90eXBlIHx8IFR5cGVkQXJyYXlQcm90b3R5cGUgPT09IE9iamVjdFByb3RvdHlwZSkge1xuICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheS5wcm90b3R5cGU7XG4gIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKSBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHtcbiAgICBpZiAoZ2xvYmFsW05BTUVdKSBzZXRQcm90b3R5cGVPZihnbG9iYWxbTkFNRV0ucHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbiAgfVxufVxuXG4vLyBXZWJLaXQgYnVnIC0gb25lIG1vcmUgb2JqZWN0IGluIFVpbnQ4Q2xhbXBlZEFycmF5IHByb3RvdHlwZSBjaGFpblxuaWYgKE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUpICE9PSBUeXBlZEFycmF5UHJvdG90eXBlKSB7XG4gIHNldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlLCBUeXBlZEFycmF5UHJvdG90eXBlKTtcbn1cblxuaWYgKERFU0NSSVBUT1JTICYmICFoYXNPd24oVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEID0gdHJ1ZTtcbiAgZGVmaW5lUHJvcGVydHkoVHlwZWRBcnJheVByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgeyBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodGhpcykgPyB0aGlzW1RZUEVEX0FSUkFZX1RBR10gOiB1bmRlZmluZWQ7XG4gIH0gfSk7XG4gIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgaWYgKGdsb2JhbFtOQU1FXSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MsXG4gIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUVVJUkVEICYmIFRZUEVEX0FSUkFZX1RBRyxcbiAgYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LFxuICBhVHlwZWRBcnJheUNvbnN0cnVjdG9yOiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yLFxuICBleHBvcnRUeXBlZEFycmF5TWV0aG9kOiBleHBvcnRUeXBlZEFycmF5TWV0aG9kLFxuICBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kOiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kLFxuICBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3I6IGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvcixcbiAgaXNWaWV3OiBpc1ZpZXcsXG4gIGlzVHlwZWRBcnJheTogaXNUeXBlZEFycmF5LFxuICBUeXBlZEFycmF5OiBUeXBlZEFycmF5LFxuICBUeXBlZEFycmF5UHJvdG90eXBlOiBUeXBlZEFycmF5UHJvdG90eXBlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLWJhc2ljLWRldGVjdGlvbicpO1xudmFyIEZ1bmN0aW9uTmFtZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW5zID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4Jyk7XG52YXIgSUVFRTc1NCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZWVlNzU0Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1maWxsJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLlBST1BFUjtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IEZ1bmN0aW9uTmFtZS5DT05GSUdVUkFCTEU7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xudmFyIERBVEFfVklFVyA9ICdEYXRhVmlldyc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCc7XG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXgnO1xudmFyIE5hdGl2ZUFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XG52YXIgJEFycmF5QnVmZmVyID0gTmF0aXZlQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXIgJiYgJEFycmF5QnVmZmVyW1BST1RPVFlQRV07XG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XG52YXIgRGF0YVZpZXdQcm90b3R5cGUgPSAkRGF0YVZpZXcgJiYgJERhdGFWaWV3W1BST1RPVFlQRV07XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbnZhciBBcnJheSA9IGdsb2JhbC5BcnJheTtcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgZmlsbCA9IHVuY3VycnlUaGlzKGFycmF5RmlsbCk7XG52YXIgcmV2ZXJzZSA9IHVuY3VycnlUaGlzKFtdLnJldmVyc2UpO1xuXG52YXIgcGFja0lFRUU3NTQgPSBJRUVFNzU0LnBhY2s7XG52YXIgdW5wYWNrSUVFRTc1NCA9IElFRUU3NTQudW5wYWNrO1xuXG52YXIgcGFja0ludDggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIHJldHVybiBbbnVtYmVyICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDE2ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRl07XG59O1xuXG52YXIgcGFja0ludDMyID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gW251bWJlciAmIDB4RkYsIG51bWJlciA+PiA4ICYgMHhGRiwgbnVtYmVyID4+IDE2ICYgMHhGRiwgbnVtYmVyID4+IDI0ICYgMHhGRl07XG59O1xuXG52YXIgdW5wYWNrSW50MzIgPSBmdW5jdGlvbiAoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXJbM10gPDwgMjQgfCBidWZmZXJbMl0gPDwgMTYgfCBidWZmZXJbMV0gPDwgOCB8IGJ1ZmZlclswXTtcbn07XG5cbnZhciBwYWNrRmxvYXQzMiA9IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KG51bWJlciwgMjMsIDQpO1xufTtcblxudmFyIHBhY2tGbG9hdDY0ID0gZnVuY3Rpb24gKG51bWJlcikge1xuICByZXR1cm4gcGFja0lFRUU3NTQobnVtYmVyLCA1MiwgOCk7XG59O1xuXG52YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBrZXkpIHtcbiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3JbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKVtrZXldOyB9IH0pO1xufTtcblxudmFyIGdldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgoaW5kZXgpO1xuICB2YXIgc3RvcmUgPSBnZXRJbnRlcm5hbFN0YXRlKHZpZXcpO1xuICBpZiAoaW50SW5kZXggKyBjb3VudCA+IHN0b3JlLmJ5dGVMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xuICB2YXIgYnl0ZXMgPSBnZXRJbnRlcm5hbFN0YXRlKHN0b3JlLmJ1ZmZlcikuYnl0ZXM7XG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgc3RvcmUuYnl0ZU9mZnNldDtcbiAgdmFyIHBhY2sgPSBhcnJheVNsaWNlKGJ5dGVzLCBzdGFydCwgc3RhcnQgKyBjb3VudCk7XG4gIHJldHVybiBpc0xpdHRsZUVuZGlhbiA/IHBhY2sgOiByZXZlcnNlKHBhY2spO1xufTtcblxudmFyIHNldCA9IGZ1bmN0aW9uICh2aWV3LCBjb3VudCwgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KGluZGV4KTtcbiAgdmFyIHN0b3JlID0gZ2V0SW50ZXJuYWxTdGF0ZSh2aWV3KTtcbiAgaWYgKGludEluZGV4ICsgY291bnQgPiBzdG9yZS5ieXRlTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcbiAgdmFyIGJ5dGVzID0gZ2V0SW50ZXJuYWxTdGF0ZShzdG9yZS5idWZmZXIpLmJ5dGVzO1xuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHN0b3JlLmJ5dGVPZmZzZXQ7XG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIGJ5dGVzW3N0YXJ0ICsgaV0gPSBwYWNrW2lzTGl0dGxlRW5kaWFuID8gaSA6IGNvdW50IC0gaSAtIDFdO1xufTtcblxuaWYgKCFOQVRJVkVfQVJSQVlfQlVGRkVSKSB7XG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xuICAgIGFuSW5zdGFuY2UodGhpcywgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnl0ZXM6IGZpbGwoQXJyYXkoYnl0ZUxlbmd0aCksIDApLFxuICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aFxuICAgIH0pO1xuICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XG4gIH07XG5cbiAgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXTtcblxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIERhdGFWaWV3UHJvdG90eXBlKTtcbiAgICBhbkluc3RhbmNlKGJ1ZmZlciwgQXJyYXlCdWZmZXJQcm90b3R5cGUpO1xuICAgIHZhciBidWZmZXJMZW5ndGggPSBnZXRJbnRlcm5hbFN0YXRlKGJ1ZmZlcikuYnl0ZUxlbmd0aDtcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShieXRlT2Zmc2V0KTtcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIG9mZnNldCcpO1xuICAgIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID09PSB1bmRlZmluZWQgPyBidWZmZXJMZW5ndGggLSBvZmZzZXQgOiB0b0xlbmd0aChieXRlTGVuZ3RoKTtcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgYnVmZmVyOiBidWZmZXIsXG4gICAgICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoLFxuICAgICAgYnl0ZU9mZnNldDogb2Zmc2V0XG4gICAgfSk7XG4gICAgaWYgKCFERVNDUklQVE9SUykge1xuICAgICAgdGhpcy5idWZmZXIgPSBidWZmZXI7XG4gICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgfTtcblxuICBEYXRhVmlld1Byb3RvdHlwZSA9ICREYXRhVmlld1tQUk9UT1RZUEVdO1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J1ZmZlcicpO1xuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgJ2J5dGVPZmZzZXQnKTtcbiAgfVxuXG4gIGRlZmluZUJ1aWx0SW5zKERhdGFWaWV3UHJvdG90eXBlLCB7XG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xuICAgIH0sXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XG4gICAgfSxcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcbiAgICB9LFxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xuICAgIH0sXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKTtcbiAgICB9LFxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHJldHVybiB1bnBhY2tJbnQzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpKSA+Pj4gMDtcbiAgICB9LFxuICAgIGdldEZsb2F0MzI6IGZ1bmN0aW9uIGdldEZsb2F0MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSwgMjMpO1xuICAgIH0sXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICByZXR1cm4gdW5wYWNrSUVFRTc1NChnZXQodGhpcywgOCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpLCA1Mik7XG4gICAgfSxcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0ludDgsIHZhbHVlKTtcbiAgICB9LFxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJbnQ4LCB2YWx1ZSk7XG4gICAgfSxcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSW50MTYsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gICAgfSxcbiAgICBzZXRVaW50MTY6IGZ1bmN0aW9uIHNldFVpbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJbnQxNiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJbnQzMiwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcbiAgICB9LFxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0ludDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQzMjogZnVuY3Rpb24gc2V0RmxvYXQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDMyLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH0sXG4gICAgc2V0RmxvYXQ2NDogZnVuY3Rpb24gc2V0RmxvYXQ2NChieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGbG9hdDY0LCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgfSk7XG59IGVsc2Uge1xuICB2YXIgSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FID0gUFJPUEVSX0ZVTkNUSU9OX05BTUUgJiYgTmF0aXZlQXJyYXlCdWZmZXIubmFtZSAhPT0gQVJSQVlfQlVGRkVSO1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbiAgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgTmF0aXZlQXJyYXlCdWZmZXIoMSk7XG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IE5hdGl2ZUFycmF5QnVmZmVyKC0xKTtcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcigxLjUpO1xuICAgIG5ldyBOYXRpdmVBcnJheUJ1ZmZlcihOYU4pO1xuICAgIHJldHVybiBOYXRpdmVBcnJheUJ1ZmZlci5sZW5ndGggIT0gMSB8fCBJTkNPUlJFQ1RfQVJSQVlfQlVGRkVSX05BTUUgJiYgIUNPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FO1xuICB9KSkge1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsIEFycmF5QnVmZmVyUHJvdG90eXBlKTtcbiAgICAgIHJldHVybiBuZXcgTmF0aXZlQXJyYXlCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcbiAgICB9O1xuXG4gICAgJEFycmF5QnVmZmVyW1BST1RPVFlQRV0gPSBBcnJheUJ1ZmZlclByb3RvdHlwZTtcblxuICAgIGZvciAodmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKE5hdGl2ZUFycmF5QnVmZmVyKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOykge1xuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkge1xuICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJEFycmF5QnVmZmVyLCBrZXksIE5hdGl2ZUFycmF5QnVmZmVyW2tleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIEFycmF5QnVmZmVyUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gJEFycmF5QnVmZmVyO1xuICB9IGVsc2UgaWYgKElOQ09SUkVDVF9BUlJBWV9CVUZGRVJfTkFNRSAmJiBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShOYXRpdmVBcnJheUJ1ZmZlciwgJ25hbWUnLCBBUlJBWV9CVUZGRVIpO1xuICB9XG5cbiAgLy8gV2ViS2l0IGJ1ZyAtIHRoZSBzYW1lIHBhcmVudCBwcm90b3R5cGUgZm9yIHR5cGVkIGFycmF5cyBhbmQgZGF0YSB2aWV3XG4gIGlmIChzZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihEYXRhVmlld1Byb3RvdHlwZSkgIT09IE9iamVjdFByb3RvdHlwZSkge1xuICAgIHNldFByb3RvdHlwZU9mKERhdGFWaWV3UHJvdG90eXBlLCBPYmplY3RQcm90b3R5cGUpO1xuICB9XG5cbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXG4gIHZhciB0ZXN0VmlldyA9IG5ldyAkRGF0YVZpZXcobmV3ICRBcnJheUJ1ZmZlcigyKSk7XG4gIHZhciAkc2V0SW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldEludDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xuICB0ZXN0Vmlldy5zZXRJbnQ4KDEsIDIxNDc0ODM2NDkpO1xuICBpZiAodGVzdFZpZXcuZ2V0SW50OCgwKSB8fCAhdGVzdFZpZXcuZ2V0SW50OCgxKSkgZGVmaW5lQnVpbHRJbnMoRGF0YVZpZXdQcm90b3R5cGUsIHtcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XG4gICAgICAkc2V0SW50OCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XG4gICAgfSxcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcbiAgICAgICRzZXRJbnQ4KHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcbiAgICB9XG4gIH0sIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyLFxuICBEYXRhVmlldzogJERhdGFWaWV3XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbmAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb3B5d2l0aGluXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWNvcHl3aXRoaW4gLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gIHZhciBsZW4gPSBsZW5ndGhPZkFycmF5TGlrZShPKTtcbiAgdmFyIHRvID0gdG9BYnNvbHV0ZUluZGV4KHRhcmdldCwgbGVuKTtcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcbiAgdmFyIGNvdW50ID0gbWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xuICB2YXIgaW5jID0gMTtcbiAgaWYgKGZyb20gPCB0byAmJiB0byA8IGZyb20gKyBjb3VudCkge1xuICAgIGluYyA9IC0xO1xuICAgIGZyb20gKz0gY291bnQgLSAxO1xuICAgIHRvICs9IGNvdW50IC0gMTtcbiAgfVxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcbiAgICBpZiAoZnJvbSBpbiBPKSBPW3RvXSA9IE9bZnJvbV07XG4gICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgIHRvICs9IGluYztcbiAgICBmcm9tICs9IGluYztcbiAgfSByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maWxsYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbGxcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XG4gIHZhciBlbmRQb3MgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCk7XG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG5tb2R1bGUuZXhwb3J0cyA9ICFTVFJJQ1RfTUVUSE9EID8gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWFycmF5LXByb3RvdHlwZS1mb3JlYWNoIC0tIHNhZmVcbn0gOiBbXS5mb3JFYWNoO1xuIiwidmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBsaXN0KSB7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShsaXN0KTtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDb25zdHJ1Y3RvcihsZW5ndGgpO1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yJyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG52YXIgJEFycmF5ID0gQXJyYXk7XG5cbi8vIGBBcnJheS5mcm9tYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIElTX0NPTlNUUlVDVE9SID0gaXNDb25zdHJ1Y3Rvcih0aGlzKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKE8pO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICEodGhpcyA9PT0gJEFycmF5ICYmIGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyYXRvck1ldGhvZCkpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gSVNfQ09OU1RSVUNUT1IgPyBuZXcgdGhpcygpIDogW107XG4gICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlclJlamVjdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfUkVKRUNUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQpO1xuICAgIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShzZWxmKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjcmVhdGUgPSBzcGVjaWZpY0NyZWF0ZSB8fCBhcnJheVNwZWNpZXNDcmVhdGU7XG4gICAgdmFyIHRhcmdldCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiB8fCBJU19GSUxURVJfUkVKRUNUID8gY3JlYXRlKCR0aGlzLCAwKSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgdmFsdWUsIHJlc3VsdDtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbHVlID0gc2VsZltpbmRleF07XG4gICAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7XG4gICAgICBpZiAoVFlQRSkge1xuICAgICAgICBpZiAoSVNfTUFQKSB0YXJnZXRbaW5kZXhdID0gcmVzdWx0OyAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzdWx0KSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbHVlOyAgICAgICAgICAgICAvLyBmaW5kXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgNDogcmV0dXJuIGZhbHNlOyAgICAgICAgICAgICAvLyBldmVyeVxuICAgICAgICAgIGNhc2UgNzogcHVzaCh0YXJnZXQsIHZhbHVlKTsgICAgICAvLyBmaWx0ZXJSZWplY3RcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbiAgZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuICBtYXA6IGNyZWF0ZU1ldGhvZCgxKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnNvbWVcbiAgc29tZTogY3JlYXRlTWV0aG9kKDMpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmV2ZXJ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZXZlcnlcbiAgZXZlcnk6IGNyZWF0ZU1ldGhvZCg0KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZEluZGV4XG4gIGZpbmRJbmRleDogY3JlYXRlTWV0aG9kKDYpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlclJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWFycmF5LWZpbHRlcmluZ1xuICBmaWx0ZXJSZWplY3Q6IGNyZWF0ZU1ldGhvZCg3KVxufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1sYXN0aW5kZXhvZiAtLSBzYWZlICovXG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG52YXIgJGxhc3RJbmRleE9mID0gW10ubGFzdEluZGV4T2Y7XG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJGxhc3RJbmRleE9mICYmIDEgLyBbMV0ubGFzdEluZGV4T2YoMSwgLTApIDwgMDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnbGFzdEluZGV4T2YnKTtcbnZhciBGT1JDRUQgPSBORUdBVElWRV9aRVJPIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmxhc3RpbmRleG9mXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcbiAgLy8gY29udmVydCAtMCB0byArMFxuICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuIGFwcGx5KCRsYXN0SW5kZXhPZiwgdGhpcywgYXJndW1lbnRzKSB8fCAwO1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIGluZGV4ID0gbWluKGluZGV4LCB0b0ludGVnZXJPckluZmluaXR5KGFyZ3VtZW50c1sxXSkpO1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xuICBmb3IgKDtpbmRleCA+PSAwOyBpbmRleC0tKSBpZiAoaW5kZXggaW4gTyAmJiBPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XG4gIHJldHVybiAtMTtcbn0gOiAkbGFzdEluZGV4T2Y7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gICAgbWV0aG9kLmNhbGwobnVsbCwgYXJndW1lbnQgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSwgMSk7XG4gIH0pO1xufTtcbiIsInZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IHJlZHVjZSwgcmVkdWNlUmlnaHQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19SSUdIVCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c0xlbmd0aCwgbWVtbykge1xuICAgIGFDYWxsYWJsZShjYWxsYmFja2ZuKTtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoYXQpO1xuICAgIHZhciBzZWxmID0gSW5kZXhlZE9iamVjdChPKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGluZGV4ID0gSVNfUklHSFQgPyBsZW5ndGggLSAxIDogMDtcbiAgICB2YXIgaSA9IElTX1JJR0hUID8gLTEgOiAxO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPCAyKSB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xuICAgICAgICBpbmRleCArPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IGk7XG4gICAgICBpZiAoSVNfUklHSFQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcbiAgICAgICAgdGhyb3cgJFR5cGVFcnJvcignUmVkdWNlIG9mIGVtcHR5IGFycmF5IHdpdGggbm8gaW5pdGlhbCB2YWx1ZScpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKDtJU19SSUdIVCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcbiAgICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XG4gICAgfVxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4gIGxlZnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuICByaWdodDogY3JlYXRlTWV0aG9kKHRydWUpXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBTYWZhcmkgPCAxMyBkb2VzIG5vdCB0aHJvdyBhbiBlcnJvciBpbiB0aGlzIGNhc2VcbnZhciBTSUxFTlRfT05fTk9OX1dSSVRBQkxFX0xFTkdUSF9TRVQgPSBERVNDUklQVE9SUyAmJiAhZnVuY3Rpb24gKCkge1xuICAvLyBtYWtlcyBubyBzZW5zZSB3aXRob3V0IHByb3BlciBzdHJpY3QgbW9kZSBzdXBwb3J0XG4gIGlmICh0aGlzICE9PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShbXSwgJ2xlbmd0aCcsIHsgd3JpdGFibGU6IGZhbHNlIH0pLmxlbmd0aCA9IDE7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yO1xuICB9XG59KCk7XG5cbm1vZHVsZS5leHBvcnRzID0gU0lMRU5UX09OX05PTl9XUklUQUJMRV9MRU5HVEhfU0VUID8gZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICBpZiAoaXNBcnJheShPKSAmJiAhZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sICdsZW5ndGgnKS53cml0YWJsZSkge1xuICAgIHRocm93ICRUeXBlRXJyb3IoJ0Nhbm5vdCBzZXQgcmVhZCBvbmx5IC5sZW5ndGgnKTtcbiAgfSByZXR1cm4gTy5sZW5ndGggPSBsZW5ndGg7XG59IDogZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xuICByZXR1cm4gTy5sZW5ndGggPSBsZW5ndGg7XG59O1xuIiwidmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcbnZhciBtYXggPSBNYXRoLm1heDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICB2YXIgcmVzdWx0ID0gJEFycmF5KG1heChmaW4gLSBrLCAwKSk7XG4gIGZvciAodmFyIG4gPSAwOyBrIDwgZmluOyBrKyssIG4rKykgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBuLCBPW2tdKTtcbiAgcmVzdWx0Lmxlbmd0aCA9IG47XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKFtdLnNsaWNlKTtcbiIsInZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG52YXIgbWVyZ2VTb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICByZXR1cm4gbGVuZ3RoIDwgOCA/IGluc2VydGlvblNvcnQoYXJyYXksIGNvbXBhcmVmbikgOiBtZXJnZShcbiAgICBhcnJheSxcbiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgMCwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgbWlkZGxlKSwgY29tcGFyZWZuKSxcbiAgICBjb21wYXJlZm5cbiAgKTtcbn07XG5cbnZhciBpbnNlcnRpb25Tb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgdmFyIGkgPSAxO1xuICB2YXIgZWxlbWVudCwgajtcblxuICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgIGogPSBpO1xuICAgIGVsZW1lbnQgPSBhcnJheVtpXTtcbiAgICB3aGlsZSAoaiAmJiBjb21wYXJlZm4oYXJyYXlbaiAtIDFdLCBlbGVtZW50KSA+IDApIHtcbiAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXTtcbiAgICB9XG4gICAgaWYgKGogIT09IGkrKykgYXJyYXlbal0gPSBlbGVtZW50O1xuICB9IHJldHVybiBhcnJheTtcbn07XG5cbnZhciBtZXJnZSA9IGZ1bmN0aW9uIChhcnJheSwgbGVmdCwgcmlnaHQsIGNvbXBhcmVmbikge1xuICB2YXIgbGxlbmd0aCA9IGxlZnQubGVuZ3RoO1xuICB2YXIgcmxlbmd0aCA9IHJpZ2h0Lmxlbmd0aDtcbiAgdmFyIGxpbmRleCA9IDA7XG4gIHZhciByaW5kZXggPSAwO1xuXG4gIHdoaWxlIChsaW5kZXggPCBsbGVuZ3RoIHx8IHJpbmRleCA8IHJsZW5ndGgpIHtcbiAgICBhcnJheVtsaW5kZXggKyByaW5kZXhdID0gKGxpbmRleCA8IGxsZW5ndGggJiYgcmluZGV4IDwgcmxlbmd0aClcbiAgICAgID8gY29tcGFyZWZuKGxlZnRbbGluZGV4XSwgcmlnaHRbcmluZGV4XSkgPD0gMCA/IGxlZnRbbGluZGV4KytdIDogcmlnaHRbcmluZGV4KytdXG4gICAgICA6IGxpbmRleCA8IGxsZW5ndGggPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXTtcbiAgfSByZXR1cm4gYXJyYXk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lcmdlU29ydDtcbiIsInZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jb25zdHJ1Y3RvcicpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyICRBcnJheSA9IEFycmF5O1xuXG4vLyBhIHBhcnQgb2YgYEFycmF5U3BlY2llc0NyZWF0ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5c3BlY2llc2NyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSkge1xuICB2YXIgQztcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWxBcnJheSkpIHtcbiAgICBDID0gb3JpZ2luYWxBcnJheS5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmIChpc0NvbnN0cnVjdG9yKEMpICYmIChDID09PSAkQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gJEFycmF5IDogQztcbn07XG4iLCJ2YXIgYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoYXJyYXlTcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsICd0aHJvdycsIGVycm9yKTtcbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgY2FsbGVkID0gMDtcbiAgdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4geyBkb25lOiAhIWNhbGxlZCsrIH07XG4gICAgfSxcbiAgICAncmV0dXJuJzogZnVuY3Rpb24gKCkge1xuICAgICAgU0FGRV9DTE9TSU5HID0gdHJ1ZTtcbiAgICB9XG4gIH07XG4gIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1mcm9tLCBuby10aHJvdy1saXRlcmFsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIEFycmF5LmZyb20oaXRlcmF0b3JXaXRoUmV0dXJuLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBTS0lQX0NMT1NJTkcpIHtcbiAgaWYgKCFTS0lQX0NMT1NJTkcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgSVRFUkFUSU9OX1NVUFBPUlQgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuICAgIGV4ZWMob2JqZWN0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xuXG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBzdHJpbmdTbGljZSh0b1N0cmluZyhpdCksIDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mUmF3ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuXG4vLyBnZXR0aW5nIHRhZyBmcm9tIEVTNisgYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgXG5tb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIHRhZywgcmVzdWx0O1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAodGFnID0gdHJ5R2V0KE8gPSAkT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgaXNDYWxsYWJsZShPLmNhbGxlZSkgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgUHJvdG90eXBlKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvdG90eXBlID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgIHZhciBwcmV2aW91cywgaW5kZXg7XG4gICAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICBlbnRyeS52YWx1ZSA9IHZhbHVlO1xuICAgICAgLy8gY3JlYXRlIG5ldyBlbnRyeVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUubGFzdCA9IGVudHJ5ID0ge1xuICAgICAgICAgIGluZGV4OiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSxcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgcHJldmlvdXM6IHByZXZpb3VzID0gc3RhdGUubGFzdCxcbiAgICAgICAgICBuZXh0OiB1bmRlZmluZWQsXG4gICAgICAgICAgcmVtb3ZlZDogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFzdGF0ZS5maXJzdCkgc3RhdGUuZmlyc3QgPSBlbnRyeTtcbiAgICAgICAgaWYgKHByZXZpb3VzKSBwcmV2aW91cy5uZXh0ID0gZW50cnk7XG4gICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZSsrO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSsrO1xuICAgICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHN0YXRlLmluZGV4W2luZGV4XSA9IGVudHJ5O1xuICAgICAgfSByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIC8vIGZhc3QgY2FzZVxuICAgICAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xuICAgICAgdmFyIGVudHJ5O1xuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiBzdGF0ZS5pbmRleFtpbmRleF07XG4gICAgICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgICAgIGZvciAoZW50cnkgPSBzdGF0ZS5maXJzdDsgZW50cnk7IGVudHJ5ID0gZW50cnkubmV4dCkge1xuICAgICAgICBpZiAoZW50cnkua2V5ID09IGtleSkgcmV0dXJuIGVudHJ5O1xuICAgICAgfVxuICAgIH07XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIHtcbiAgICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlLmNsZWFyKClgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5jbGVhclxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmNsZWFyXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZGVsZXRlKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5kZWxldGVcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0O1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAgICAgZGVsZXRlIHN0YXRlLmluZGV4W2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uZXh0ID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wcmV2aW91cyA9IHByZXY7XG4gICAgICAgICAgaWYgKHN0YXRlLmZpcnN0ID09IGVudHJ5KSBzdGF0ZS5maXJzdCA9IG5leHQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmxhc3QgPT0gZW50cnkpIHN0YXRlLmxhc3QgPSBwcmV2O1xuICAgICAgICAgIGlmIChERVNDUklQVE9SUykgc3RhdGUuc2l6ZS0tO1xuICAgICAgICAgIGVsc2UgdGhhdC5zaXplLS07XG4gICAgICAgIH0gcmV0dXJuICEhZW50cnk7XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXQgfS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmZvcmVhY2hcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS5mb3JlYWNoXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuZmlyc3QpIHtcbiAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gYHsgTWFwLCBTZXR9LnByb3RvdHlwZS5oYXMoa2V5KWAgbWV0aG9kc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLmhhc1xuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmhhc1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHRoaXMsIGtleSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBNYXAucHJvdG90eXBlLmdldChrZXkpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5nZXRcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGlzLCBrZXkpO1xuICAgICAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudmFsdWU7XG4gICAgICB9LFxuICAgICAgLy8gYE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpYCBtZXRob2RcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSA6IHtcbiAgICAgIC8vIGBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmFkZFxuICAgICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eShQcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9LFxuICBzZXRTdHJvbmc6IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7XG4gICAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7XG4gICAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTtcbiAgICAvLyBgeyBNYXAsIFNldCB9LnByb3RvdHlwZS57IGtleXMsIHZhbHVlcywgZW50cmllcywgQEBpdGVyYXRvciB9KClgIG1ldGhvZHNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hcC5wcm90b3R5cGUuZW50cmllc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS5rZXlzXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXAucHJvdG90eXBlLnZhbHVlc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQucHJvdG90eXBlLmVudHJpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUua2V5c1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2V0LnByb3RvdHlwZS52YWx1ZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC5wcm90b3R5cGUtQEBpdGVyYXRvclxuICAgIGRlZmluZUl0ZXJhdG9yKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLFxuICAgICAgICB0YXJnZXQ6IGl0ZXJhdGVkLFxuICAgICAgICBzdGF0ZTogZ2V0SW50ZXJuYWxDb2xsZWN0aW9uU3RhdGUoaXRlcmF0ZWQpLFxuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSh0aGlzKTtcbiAgICAgIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgICAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghc3RhdGUudGFyZ2V0IHx8ICEoc3RhdGUubGFzdCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuc3RhdGUuZmlyc3QpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoZW50cnkua2V5LCBmYWxzZSk7XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoZW50cnkudmFsdWUsIGZhbHNlKTtcbiAgICAgIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZmFsc2UpO1xuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcblxuICAgIC8vIGB7IE1hcCwgU2V0IH0ucHJvdG90eXBlW0BAc3BlY2llc11gIGFjY2Vzc29yc1xuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LW1hcC1AQHNwZWNpZXNcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1zZXQtQEBzcGVjaWVzXG4gICAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgZ2V0V2Vha0RhdGEgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtbWV0YWRhdGEnKS5nZXRXZWFrRGF0YTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBBcnJheUl0ZXJhdGlvbk1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7XG52YXIgZmluZCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmQ7XG52YXIgZmluZEluZGV4ID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZEluZGV4O1xudmFyIHNwbGljZSA9IHVuY3VycnlUaGlzKFtdLnNwbGljZSk7XG52YXIgaWQgPSAwO1xuXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5mcm96ZW4gfHwgKHN0YXRlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xufTtcblxudmFyIFVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xufTtcblxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XG4gIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xuICB9KTtcbn07XG5cblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcbiAgfSxcbiAgaGFzOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XG4gICAgZWxzZSB0aGlzLmVudHJpZXMucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9LFxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBpbmRleCA9IGZpbmRJbmRleCh0aGlzLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkge1xuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XG4gICAgfSk7XG4gICAgaWYgKH5pbmRleCkgc3BsaWNlKHRoaXMuZW50cmllcywgaW5kZXgsIDEpO1xuICAgIHJldHVybiAhIX5pbmRleDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIFByb3RvdHlwZSk7XG4gICAgICBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHtcbiAgICAgICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAgICAgaWQ6IGlkKyssXG4gICAgICAgIGZyb3plbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIGlmICghaXNOdWxsT3JVbmRlZmluZWQoaXRlcmFibGUpKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgfSk7XG5cbiAgICB2YXIgUHJvdG90eXBlID0gQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gICAgdmFyIGdldEludGVybmFsU3RhdGUgPSBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yKENPTlNUUlVDVE9SX05BTUUpO1xuXG4gICAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShhbk9iamVjdChrZXkpLCB0cnVlKTtcbiAgICAgIGlmIChkYXRhID09PSB0cnVlKSB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICBlbHNlIGRhdGFbc3RhdGUuaWRdID0gdmFsdWU7XG4gICAgICByZXR1cm4gdGhhdDtcbiAgICB9O1xuXG4gICAgZGVmaW5lQnVpbHRJbnMoUHJvdG90eXBlLCB7XG4gICAgICAvLyBgeyBXZWFrTWFwLCBXZWFrU2V0IH0ucHJvdG90eXBlLmRlbGV0ZShrZXkpYCBtZXRob2RzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmRlbGV0ZVxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5kZWxldGVcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmIGhhc093bihkYXRhLCBzdGF0ZS5pZCkgJiYgZGVsZXRlIGRhdGFbc3RhdGUuaWRdO1xuICAgICAgfSxcbiAgICAgIC8vIGB7IFdlYWtNYXAsIFdlYWtTZXQgfS5wcm90b3R5cGUuaGFzKGtleSlgIG1ldGhvZHNcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha21hcC5wcm90b3R5cGUuaGFzXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWtzZXQucHJvdG90eXBlLmhhc1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7XG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuaGFzKGtleSk7XG4gICAgICAgIHJldHVybiBkYXRhICYmIGhhc093bihkYXRhLCBzdGF0ZS5pZCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBkZWZpbmVCdWlsdElucyhQcm90b3R5cGUsIElTX01BUCA/IHtcbiAgICAgIC8vIGBXZWFrTWFwLnByb3RvdHlwZS5nZXQoa2V5KWAgbWV0aG9kXG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAucHJvdG90eXBlLmdldFxuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmIChpc09iamVjdChrZXkpKSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrRGF0YShrZXkpO1xuICAgICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuZ2V0KGtleSk7XG4gICAgICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3N0YXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIGBXZWFrTWFwLnByb3RvdHlwZS5zZXQoa2V5LCB2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrbWFwLnByb3RvdHlwZS5zZXRcbiAgICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZSh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IDoge1xuICAgICAgLy8gYFdlYWtTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlgIG1ldGhvZFxuICAgICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy13ZWFrc2V0LnByb3RvdHlwZS5hZGRcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7XG4gIHZhciBJU19NQVAgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ01hcCcpICE9PSAtMTtcbiAgdmFyIElTX1dFQUsgPSBDT05TVFJVQ1RPUl9OQU1FLmluZGV4T2YoJ1dlYWsnKSAhPT0gLTE7XG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XG4gIHZhciBOYXRpdmVDb25zdHJ1Y3RvciA9IGdsb2JhbFtDT05TVFJVQ1RPUl9OQU1FXTtcbiAgdmFyIE5hdGl2ZVByb3RvdHlwZSA9IE5hdGl2ZUNvbnN0cnVjdG9yICYmIE5hdGl2ZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7XG4gIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XG4gICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKE5hdGl2ZVByb3RvdHlwZVtLRVldKTtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb3RvdHlwZSwgS0VZLFxuICAgICAgS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfSA6IEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gdW5kZWZpbmVkIDogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXkpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyBmYWxzZSA6IHVuY3VycmllZE5hdGl2ZU1ldGhvZCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB1bmN1cnJpZWROYXRpdmVNZXRob2QodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICAhaXNDYWxsYWJsZShOYXRpdmVDb25zdHJ1Y3RvcikgfHwgIShJU19XRUFLIHx8IE5hdGl2ZVByb3RvdHlwZS5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpO1xuICAgIH0pKVxuICApO1xuXG4gIGlmIChSRVBMQUNFKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTtcbiAgICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLmVuYWJsZSgpO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9IGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHsgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGl0ZXJhYmxlKTsgfSk7XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcblxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgTmF0aXZlUHJvdG90eXBlKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlQ29uc3RydWN0b3IoKSwgZHVtbXksIENvbnN0cnVjdG9yKTtcbiAgICAgICAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdGVyYWJsZSkpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICAgICAgcmV0dXJuIHRoYXQ7XG4gICAgICB9KTtcbiAgICAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTtcbiAgICAgIE5hdGl2ZVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IENvbnN0cnVjdG9yO1xuICAgIH1cblxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XG4gICAgICBmaXhNZXRob2QoJ2RlbGV0ZScpO1xuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xuICAgIH1cblxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuXG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7XG4gIH1cblxuICBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yO1xuICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBDb25zdHJ1Y3RvciAhPSBOYXRpdmVDb25zdHJ1Y3RvciB9LCBleHBvcnRlZCk7XG5cbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSwgZXhjZXB0aW9ucykge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhc093bih0YXJnZXQsIGtleSkgJiYgIShleGNlcHRpb25zICYmIGhhc093bihleGNlcHRpb25zLCBrZXkpKSkge1xuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH1cbiAgfVxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICB2YXIgcmVnZXhwID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICB9IGNhdGNoIChlcnJvcjEpIHtcbiAgICB0cnkge1xuICAgICAgcmVnZXhwW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICcvLi8nW01FVEhPRF9OQU1FXShyZWdleHApO1xuICAgIH0gY2F0Y2ggKGVycm9yMikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIGZhbHNlO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcblxudmFyIHF1b3QgPSAvXCIvZztcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG5cbi8vIGBDcmVhdGVIVE1MYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaHRtbFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHN0cmluZykpO1xuICB2YXIgcDEgPSAnPCcgKyB0YWc7XG4gIGlmIChhdHRyaWJ1dGUgIT09ICcnKSBwMSArPSAnICcgKyBhdHRyaWJ1dGUgKyAnPVwiJyArIHJlcGxhY2UodG9TdHJpbmcodmFsdWUpLCBxdW90LCAnJnF1b3Q7JykgKyAnXCInO1xuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+Jztcbn07XG4iLCIvLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHZhbHVlLCBkb25lKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9O1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb3JkaW5hcnlUb1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vcmRpbmFyeS10by1wcmltaXRpdmUnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBEYXRlLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWRhdGUucHJvdG90eXBlLUBAdG9wcmltaXRpdmVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcbiAgYW5PYmplY3QodGhpcyk7XG4gIGlmIChoaW50ID09PSAnc3RyaW5nJyB8fCBoaW50ID09PSAnZGVmYXVsdCcpIGhpbnQgPSAnc3RyaW5nJztcbiAgZWxzZSBpZiAoaGludCAhPT0gJ251bWJlcicpIHRocm93ICRUeXBlRXJyb3IoJ0luY29ycmVjdCBoaW50Jyk7XG4gIHJldHVybiBvcmRpbmFyeVRvUHJpbWl0aXZlKHRoaXMsIGhpbnQpO1xufTtcbiIsInZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpIHtcbiAgaWYgKGRlc2NyaXB0b3IuZ2V0KSBtYWtlQnVpbHRJbihkZXNjcmlwdG9yLmdldCwgbmFtZSwgeyBnZXR0ZXI6IHRydWUgfSk7XG4gIGlmIChkZXNjcmlwdG9yLnNldCkgbWFrZUJ1aWx0SW4oZGVzY3JpcHRvci5zZXQsIG5hbWUsIHsgc2V0dGVyOiB0cnVlIH0pO1xuICByZXR1cm4gZGVmaW5lUHJvcGVydHkuZih0YXJnZXQsIG5hbWUsIGRlc2NyaXB0b3IpO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIG1ha2VCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21ha2UtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zLmVudW1lcmFibGU7XG4gIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5hbWUgOiBrZXk7XG4gIGlmIChpc0NhbGxhYmxlKHZhbHVlKSkgbWFrZUJ1aWx0SW4odmFsdWUsIG5hbWUsIG9wdGlvbnMpO1xuICBpZiAob3B0aW9ucy5nbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZUdsb2JhbFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIHRyeSB7XG4gICAgICBpZiAoIW9wdGlvbnMudW5zYWZlKSBkZWxldGUgT1trZXldO1xuICAgICAgZWxzZSBpZiAoT1trZXldKSBzaW1wbGUgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogIW9wdGlvbnMubm9uQ29uZmlndXJhYmxlLFxuICAgICAgd3JpdGFibGU6ICFvcHRpb25zLm5vbldyaXRhYmxlXG4gICAgfSk7XG4gIH0gcmV0dXJuIE87XG59O1xuIiwidmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIGRlZmluZUJ1aWx0SW4odGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICB0cnkge1xuICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgUCkge1xuICBpZiAoIWRlbGV0ZSBPW1BdKSB0aHJvdyAkVHlwZUVycm9yKCdDYW5ub3QgZGVsZXRlIHByb3BlcnR5ICcgKyB0cnlUb1N0cmluZyhQKSArICcgb2YgJyArIHRyeVRvU3RyaW5nKE8pKTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb25cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLUlzSFRNTEREQS1pbnRlcm5hbC1zbG90XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10eXBlb2YtdW5kZWZpbmVkIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgSVNfSFRNTEREQSA9IHR5cGVvZiBkb2N1bWVudEFsbCA9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudEFsbCAhPT0gdW5kZWZpbmVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWxsOiBkb2N1bWVudEFsbCxcbiAgSVNfSFRNTEREQTogSVNfSFRNTEREQVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIEVYSVNUUyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307XG59O1xuIiwidmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID4gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgJFR5cGVFcnJvcignTWF4aW11bSBhbGxvd2VkIGluZGV4IGV4Y2VlZGVkJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyBpdGVyYWJsZSBET00gY29sbGVjdGlvbnNcbi8vIGZsYWcgLSBgaXRlcmFibGVgIGludGVyZmFjZSAtICdlbnRyaWVzJywgJ2tleXMnLCAndmFsdWVzJywgJ2ZvckVhY2gnIG1ldGhvZHNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBDU1NSdWxlTGlzdDogMCxcbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCxcbiAgQ1NTVmFsdWVMaXN0OiAwLFxuICBDbGllbnRSZWN0TGlzdDogMCxcbiAgRE9NUmVjdExpc3Q6IDAsXG4gIERPTVN0cmluZ0xpc3Q6IDAsXG4gIERPTVRva2VuTGlzdDogMSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsXG4gIEZpbGVMaXN0OiAwLFxuICBIVE1MQWxsQ29sbGVjdGlvbjogMCxcbiAgSFRNTENvbGxlY3Rpb246IDAsXG4gIEhUTUxGb3JtRWxlbWVudDogMCxcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IDAsXG4gIE1lZGlhTGlzdDogMCxcbiAgTWltZVR5cGVBcnJheTogMCxcbiAgTmFtZWROb2RlTWFwOiAwLFxuICBOb2RlTGlzdDogMSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogMCxcbiAgUGx1Z2luOiAwLFxuICBQbHVnaW5BcnJheTogMCxcbiAgU1ZHTGVuZ3RoTGlzdDogMCxcbiAgU1ZHTnVtYmVyTGlzdDogMCxcbiAgU1ZHUGF0aFNlZ0xpc3Q6IDAsXG4gIFNWR1BvaW50TGlzdDogMCxcbiAgU1ZHU3RyaW5nTGlzdDogMCxcbiAgU1ZHVHJhbnNmb3JtTGlzdDogMCxcbiAgU291cmNlQnVmZmVyTGlzdDogMCxcbiAgU3R5bGVTaGVldExpc3Q6IDAsXG4gIFRleHRUcmFja0N1ZUxpc3Q6IDAsXG4gIFRleHRUcmFja0xpc3Q6IDAsXG4gIFRvdWNoTGlzdDogMFxufTtcbiIsIi8vIGluIG9sZCBXZWJLaXQgdmVyc2lvbnMsIGBlbGVtZW50LmNsYXNzTGlzdGAgaXMgbm90IGFuIGluc3RhbmNlIG9mIGdsb2JhbCBgRE9NVG9rZW5MaXN0YFxudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG52YXIgY2xhc3NMaXN0ID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdzcGFuJykuY2xhc3NMaXN0O1xudmFyIERPTVRva2VuTGlzdFByb3RvdHlwZSA9IGNsYXNzTGlzdCAmJiBjbGFzc0xpc3QuY29uc3RydWN0b3IgJiYgY2xhc3NMaXN0LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBET01Ub2tlbkxpc3RQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgPyB1bmRlZmluZWQgOiBET01Ub2tlbkxpc3RQcm90b3R5cGU7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBmaXJlZm94ID0gdXNlckFnZW50Lm1hdGNoKC9maXJlZm94XFwvKFxcZCspL2kpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhZmlyZWZveCAmJiArZmlyZWZveFsxXTtcbiIsInZhciBJU19ERU5PID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1kZW5vJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFJU19ERU5PICYmICFJU19OT0RFXG4gICYmIHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCdcbiAgJiYgdHlwZW9mIGRvY3VtZW50ID09ICdvYmplY3QnO1xuIiwiLyogZ2xvYmFsIEJ1biAtLSBEZW5vIGNhc2UgKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIEJ1biA9PSAnZnVuY3Rpb24nICYmIEJ1biAmJiB0eXBlb2YgQnVuLnZlcnNpb24gPT0gJ3N0cmluZyc7XG4iLCIvKiBnbG9iYWwgRGVubyAtLSBEZW5vIGNhc2UgKi9cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIERlbm8gPT0gJ29iamVjdCcgJiYgRGVubyAmJiB0eXBlb2YgRGVuby52ZXJzaW9uID09ICdvYmplY3QnO1xuIiwidmFyIFVBID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL01TSUV8VHJpZGVudC8udGVzdChVQSk7XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL2lwYWR8aXBob25lfGlwb2QvaS50ZXN0KHVzZXJBZ2VudCkgJiYgdHlwZW9mIFBlYmJsZSAhPSAndW5kZWZpbmVkJztcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvKD86aXBhZHxpcGhvbmV8aXBvZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgcHJvY2VzcyAhPSAndW5kZWZpbmVkJyAmJiBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbiIsInZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAvd2ViMHMoPyEuKmNocm9tZSkvaS50ZXN0KHVzZXJBZ2VudCk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBuYXZpZ2F0b3IgIT0gJ3VuZGVmaW5lZCcgJiYgU3RyaW5nKG5hdmlnYXRvci51c2VyQWdlbnQpIHx8ICcnO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEZW5vID0gZ2xvYmFsLkRlbm87XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnMgfHwgRGVubyAmJiBEZW5vLnZlcnNpb247XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgLy8gaW4gb2xkIENocm9tZSwgdmVyc2lvbnMgb2YgVjggaXNuJ3QgVjggPSBDaHJvbWUgLyAxMFxuICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1c1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gPiAwICYmIG1hdGNoWzBdIDwgNCA/IDEgOiArKG1hdGNoWzBdICsgbWF0Y2hbMV0pO1xufVxuXG4vLyBCcm93c2VyRlMgTm9kZUpTIGBwcm9jZXNzYCBwb2x5ZmlsbCBpbmNvcnJlY3RseSBzZXQgYC52OGAgdG8gYDAuMGBcbi8vIHNvIGNoZWNrIGB1c2VyQWdlbnRgIGV2ZW4gaWYgYC52OGAgZXhpc3RzLCBidXQgMFxuaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9ICttYXRjaFsxXTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247XG4iLCJ2YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciB3ZWJraXQgPSB1c2VyQWdlbnQubWF0Y2goL0FwcGxlV2ViS2l0XFwvKFxcZCspXFwuLyk7XG5cbm1vZHVsZS5leHBvcnRzID0gISF3ZWJraXQgJiYgK3dlYmtpdFsxXTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lR2xvYmFsUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWdsb2JhbC1wcm9wZXJ0eScpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAgICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMuZG9udENhbGxHZXRTZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4gIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXlcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zLCBzb3VyY2UpIHtcbiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0O1xuICB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7XG4gIHZhciBTVEFUSUMgPSBvcHRpb25zLnN0YXQ7XG4gIHZhciBGT1JDRUQsIHRhcmdldCwga2V5LCB0YXJnZXRQcm9wZXJ0eSwgc291cmNlUHJvcGVydHksIGRlc2NyaXB0b3I7XG4gIGlmIChHTE9CQUwpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWw7XG4gIH0gZWxzZSBpZiAoU1RBVElDKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsW1RBUkdFVF0gfHwgZGVmaW5lR2xvYmFsUHJvcGVydHkoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5kb250Q2FsbEdldFNldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBGT1JDRUQsIFNIQU0pIHtcbiAgdmFyIFNZTUJPTCA9IHdlbGxLbm93blN5bWJvbChLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuXG4gICAgaWYgKEtFWSA9PT0gJ3NwbGl0Jykge1xuICAgICAgLy8gV2UgY2FuJ3QgdXNlIHJlYWwgcmVnZXggaGVyZSBzaW5jZSBpdCBjYXVzZXMgZGVvcHRpbWl6YXRpb25cbiAgICAgIC8vIGFuZCBzZXJpb3VzIHBlcmZvcm1hbmNlIGRlZ3JhZGF0aW9uIGluIFY4XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzA2XG4gICAgICByZSA9IHt9O1xuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cbiAgICAgIHJlLmNvbnN0cnVjdG9yID0ge307XG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xuICAgICAgcmUuZmxhZ3MgPSAnJztcbiAgICAgIHJlW1NZTUJPTF0gPSAvLi9bU1lNQk9MXTtcbiAgICB9XG5cbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XG5cbiAgICByZVtTWU1CT0xdKCcnKTtcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XG4gIH0pO1xuXG4gIGlmIChcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxuICAgICFERUxFR0FURVNfVE9fRVhFQyB8fFxuICAgIEZPUkNFRFxuICApIHtcbiAgICB2YXIgdW5jdXJyaWVkTmF0aXZlUmVnRXhwTWV0aG9kID0gdW5jdXJyeVRoaXMoLy4vW1NZTUJPTF0pO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgdmFyIHVuY3VycmllZE5hdGl2ZU1ldGhvZCA9IHVuY3VycnlUaGlzKG5hdGl2ZU1ldGhvZCk7XG4gICAgICB2YXIgJGV4ZWMgPSByZWdleHAuZXhlYztcbiAgICAgIGlmICgkZXhlYyA9PT0gcmVnZXhwRXhlYyB8fCAkZXhlYyA9PT0gUmVnRXhwUHJvdG90eXBlLmV4ZWMpIHtcbiAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxuICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuY3VycmllZE5hdGl2ZVJlZ0V4cE1ldGhvZChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogdW5jdXJyaWVkTmF0aXZlTWV0aG9kKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICB9KTtcblxuICAgIGRlZmluZUJ1aWx0SW4oU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBtZXRob2RzWzBdKTtcbiAgICBkZWZpbmVCdWlsdEluKFJlZ0V4cFByb3RvdHlwZSwgU1lNQk9MLCBtZXRob2RzWzFdKTtcbiAgfVxuXG4gIGlmIChTSEFNKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoUmVnRXhwUHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcblxuLy8gYEZsYXR0ZW5JbnRvQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xuICB2YXIgc291cmNlSW5kZXggPSAwO1xuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBiaW5kKG1hcHBlciwgdGhpc0FyZykgOiBmYWxzZTtcbiAgdmFyIGVsZW1lbnQsIGVsZW1lbnRMZW47XG5cbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XG4gICAgaWYgKHNvdXJjZUluZGV4IGluIHNvdXJjZSkge1xuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XG5cbiAgICAgIGlmIChkZXB0aCA+IDAgJiYgaXNBcnJheShlbGVtZW50KSkge1xuICAgICAgICBlbGVtZW50TGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoZWxlbWVudCk7XG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCBlbGVtZW50TGVuLCB0YXJnZXRJbmRleCwgZGVwdGggLSAxKSAtIDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIodGFyZ2V0SW5kZXggKyAxKTtcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRhcmdldEluZGV4Kys7XG4gICAgfVxuICAgIHNvdXJjZUluZGV4Kys7XG4gIH1cbiAgcmV0dXJuIHRhcmdldEluZGV4O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUsIGVzL25vLW9iamVjdC1wcmV2ZW50ZXh0ZW5zaW9ucyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcbn0pO1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBhcHBseSA9IEZ1bmN0aW9uUHJvdG90eXBlLmFwcGx5O1xudmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGNhbGwuYXBwbHkoYXBwbHksIGFyZ3VtZW50cyk7XG59KTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgYmluZCA9IHVuY3VycnlUaGlzKHVuY3VycnlUaGlzLmJpbmQpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0KSB7XG4gIGFDYWxsYWJsZShmbik7XG4gIHJldHVybiB0aGF0ID09PSB1bmRlZmluZWQgPyBmbiA6IE5BVElWRV9CSU5EID8gYmluZChmbiwgdGhhdCkgOiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1mdW5jdGlvbi1wcm90b3R5cGUtYmluZCAtLSBzYWZlXG4gIHZhciB0ZXN0ID0gKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkuYmluZCgpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmVcbiAgcmV0dXJuIHR5cGVvZiB0ZXN0ICE9ICdmdW5jdGlvbicgfHwgdGVzdC5oYXNPd25Qcm9wZXJ0eSgncHJvdG90eXBlJyk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciAkRnVuY3Rpb24gPSBGdW5jdGlvbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcbnZhciBmYWN0b3JpZXMgPSB7fTtcblxudmFyIGNvbnN0cnVjdCA9IGZ1bmN0aW9uIChDLCBhcmdzTGVuZ3RoLCBhcmdzKSB7XG4gIGlmICghaGFzT3duKGZhY3RvcmllcywgYXJnc0xlbmd0aCkpIHtcbiAgICBmb3IgKHZhciBsaXN0ID0gW10sIGkgPSAwOyBpIDwgYXJnc0xlbmd0aDsgaSsrKSBsaXN0W2ldID0gJ2FbJyArIGkgKyAnXSc7XG4gICAgZmFjdG9yaWVzW2FyZ3NMZW5ndGhdID0gJEZ1bmN0aW9uKCdDLGEnLCAncmV0dXJuIG5ldyBDKCcgKyBqb2luKGxpc3QsICcsJykgKyAnKScpO1xuICB9IHJldHVybiBmYWN0b3JpZXNbYXJnc0xlbmd0aF0oQywgYXJncyk7XG59O1xuXG4vLyBgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYmluZFxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfQklORCA/ICRGdW5jdGlvbi5iaW5kIDogZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xuICB2YXIgRiA9IGFDYWxsYWJsZSh0aGlzKTtcbiAgdmFyIFByb3RvdHlwZSA9IEYucHJvdG90eXBlO1xuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cywgMSk7XG4gIHZhciBib3VuZEZ1bmN0aW9uID0gZnVuY3Rpb24gYm91bmQoLyogYXJncy4uLiAqLykge1xuICAgIHZhciBhcmdzID0gY29uY2F0KHBhcnRBcmdzLCBhcnJheVNsaWNlKGFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmRGdW5jdGlvbiA/IGNvbnN0cnVjdChGLCBhcmdzLmxlbmd0aCwgYXJncykgOiBGLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9O1xuICBpZiAoaXNPYmplY3QoUHJvdG90eXBlKSkgYm91bmRGdW5jdGlvbi5wcm90b3R5cGUgPSBQcm90b3R5cGU7XG4gIHJldHVybiBib3VuZEZ1bmN0aW9uO1xufTtcbiIsInZhciBOQVRJVkVfQklORCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZScpO1xuXG52YXIgY2FsbCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGNhbGwpIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gY2FsbC5hcHBseShjYWxsLCBhcmd1bWVudHMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxudmFyIEVYSVNUUyA9IGhhc093bihGdW5jdGlvblByb3RvdHlwZSwgJ25hbWUnKTtcbi8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXNcbnZhciBQUk9QRVIgPSBFWElTVFMgJiYgKGZ1bmN0aW9uIHNvbWV0aGluZygpIHsgLyogZW1wdHkgKi8gfSkubmFtZSA9PT0gJ3NvbWV0aGluZyc7XG52YXIgQ09ORklHVVJBQkxFID0gRVhJU1RTICYmICghREVTQ1JJUFRPUlMgfHwgKERFU0NSSVBUT1JTICYmIGdldERlc2NyaXB0b3IoRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJykuY29uZmlndXJhYmxlKSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBFWElTVFM6IEVYSVNUUyxcbiAgUFJPUEVSOiBQUk9QRVIsXG4gIENPTkZJR1VSQUJMRTogQ09ORklHVVJBQkxFXG59O1xuIiwidmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgLy8gTmFzaG9ybiBidWc6XG4gIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMjhcbiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEzMFxuICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7XG59O1xuIiwidmFyIE5BVElWRV9CSU5EID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlJyk7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDtcbnZhciB1bmN1cnJ5VGhpc1dpdGhCaW5kID0gTkFUSVZFX0JJTkQgJiYgRnVuY3Rpb25Qcm90b3R5cGUuYmluZC5iaW5kKGNhbGwsIGNhbGwpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBjYWxsLmFwcGx5KGZuLCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgYUZ1bmN0aW9uID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc0NhbGxhYmxlKGFyZ3VtZW50KSA/IGFyZ3VtZW50IDogdW5kZWZpbmVkO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IGdsb2JhbFtuYW1lc3BhY2VdICYmIGdsb2JhbFtuYW1lc3BhY2VdW21ldGhvZF07XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc051bGxPclVuZGVmaW5lZChpdCkpIHJldHVybiBnZXRNZXRob2QoaXQsIElURVJBVE9SKVxuICAgIHx8IGdldE1ldGhvZChpdCwgJ0BAaXRlcmF0b3InKVxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdHJ5VG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZycpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50LCB1c2luZ0l0ZXJhdG9yKSB7XG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGFyZ3VtZW50cy5sZW5ndGggPCAyID8gZ2V0SXRlcmF0b3JNZXRob2QoYXJndW1lbnQpIDogdXNpbmdJdGVyYXRvcjtcbiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpO1xuICB0aHJvdyAkVHlwZUVycm9yKHRyeVRvU3RyaW5nKGFyZ3VtZW50KSArICcgaXMgbm90IGl0ZXJhYmxlJyk7XG59O1xuIiwidmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcblxuLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldG1ldGhvZFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoViwgUCkge1xuICB2YXIgZnVuYyA9IFZbUF07XG4gIHJldHVybiBpc051bGxPclVuZGVmaW5lZChmdW5jKSA/IHVuZGVmaW5lZCA6IGFDYWxsYWJsZShmdW5jKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJidgXXxcXGR7MSwyfXw8W14+XSo+KS9nO1xudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCYnYF18XFxkezEsMn0pL2c7XG5cbi8vIGBHZXRTdWJzdGl0dXRpb25gIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZShyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xuICAgIHZhciBjYXB0dXJlO1xuICAgIHN3aXRjaCAoY2hhckF0KGNoLCAwKSkge1xuICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XG4gICAgICBjYXNlICdgJzogcmV0dXJuIHN0cmluZ1NsaWNlKHN0ciwgMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0cmluZ1NsaWNlKHN0ciwgdGFpbFBvcyk7XG4gICAgICBjYXNlICc8JzpcbiAgICAgICAgY2FwdHVyZSA9IG5hbWVkQ2FwdHVyZXNbc3RyaW5nU2xpY2UoY2gsIDEsIC0xKV07XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xuICAgICAgICB2YXIgbiA9ICtjaDtcbiAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgaWYgKG4gPiBtKSB7XG4gICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xuICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2hhckF0KGNoLCAxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoYXJBdChjaCwgMSk7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XG4gIH0pO1xufTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWdsb2JhbC10aGlzIC0tIHNhZmVcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHMgLS0gc2FmZVxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTtcblxuLy8gYEhhc093blByb3BlcnR5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaGFzb3duIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0Lmhhc093biB8fCBmdW5jdGlvbiBoYXNPd24oaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gIHRyeSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGUgLS0gc2FmZVxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfVxuICB9KS5hICE9IDc7XG59KTtcbiIsIi8vIElFRUU3NTQgY29udmVyc2lvbnMgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9pZWVlNzU0XG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgcG93ID0gTWF0aC5wb3c7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG52YXIgcGFjayA9IGZ1bmN0aW9uIChudW1iZXIsIG1hbnRpc3NhTGVuZ3RoLCBieXRlcykge1xuICB2YXIgYnVmZmVyID0gJEFycmF5KGJ5dGVzKTtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIHJ0ID0gbWFudGlzc2FMZW5ndGggPT09IDIzID8gcG93KDIsIC0yNCkgLSBwb3coMiwgLTc3KSA6IDA7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCB8fCBudW1iZXIgPT09IDAgJiYgMSAvIG51bWJlciA8IDAgPyAxIDogMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGV4cG9uZW50LCBtYW50aXNzYSwgYztcbiAgbnVtYmVyID0gYWJzKG51bWJlcik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIGlmIChudW1iZXIgIT0gbnVtYmVyIHx8IG51bWJlciA9PT0gSW5maW5pdHkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIG1hbnRpc3NhID0gbnVtYmVyICE9IG51bWJlciA/IDEgOiAwO1xuICAgIGV4cG9uZW50ID0gZU1heDtcbiAgfSBlbHNlIHtcbiAgICBleHBvbmVudCA9IGZsb29yKGxvZyhudW1iZXIpIC8gTE4yKTtcbiAgICBjID0gcG93KDIsIC1leHBvbmVudCk7XG4gICAgaWYgKG51bWJlciAqIGMgPCAxKSB7XG4gICAgICBleHBvbmVudC0tO1xuICAgICAgYyAqPSAyO1xuICAgIH1cbiAgICBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBudW1iZXIgKz0gcnQgLyBjO1xuICAgIH0gZWxzZSB7XG4gICAgICBudW1iZXIgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcbiAgICB9XG4gICAgaWYgKG51bWJlciAqIGMgPj0gMikge1xuICAgICAgZXhwb25lbnQrKztcbiAgICAgIGMgLz0gMjtcbiAgICB9XG4gICAgaWYgKGV4cG9uZW50ICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbWFudGlzc2EgPSAwO1xuICAgICAgZXhwb25lbnQgPSBlTWF4O1xuICAgIH0gZWxzZSBpZiAoZXhwb25lbnQgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtYW50aXNzYSA9IChudW1iZXIgKiBjIC0gMSkgKiBwb3coMiwgbWFudGlzc2FMZW5ndGgpO1xuICAgICAgZXhwb25lbnQgPSBleHBvbmVudCArIGVCaWFzO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYW50aXNzYSA9IG51bWJlciAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICAgIGV4cG9uZW50ID0gMDtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKG1hbnRpc3NhTGVuZ3RoID49IDgpIHtcbiAgICBidWZmZXJbaW5kZXgrK10gPSBtYW50aXNzYSAmIDI1NTtcbiAgICBtYW50aXNzYSAvPSAyNTY7XG4gICAgbWFudGlzc2FMZW5ndGggLT0gODtcbiAgfVxuICBleHBvbmVudCA9IGV4cG9uZW50IDw8IG1hbnRpc3NhTGVuZ3RoIHwgbWFudGlzc2E7XG4gIGV4cG9uZW50TGVuZ3RoICs9IG1hbnRpc3NhTGVuZ3RoO1xuICB3aGlsZSAoZXhwb25lbnRMZW5ndGggPiAwKSB7XG4gICAgYnVmZmVyW2luZGV4KytdID0gZXhwb25lbnQgJiAyNTU7XG4gICAgZXhwb25lbnQgLz0gMjU2O1xuICAgIGV4cG9uZW50TGVuZ3RoIC09IDg7XG4gIH1cbiAgYnVmZmVyWy0taW5kZXhdIHw9IHNpZ24gKiAxMjg7XG4gIHJldHVybiBidWZmZXI7XG59O1xuXG52YXIgdW5wYWNrID0gZnVuY3Rpb24gKGJ1ZmZlciwgbWFudGlzc2FMZW5ndGgpIHtcbiAgdmFyIGJ5dGVzID0gYnVmZmVyLmxlbmd0aDtcbiAgdmFyIGV4cG9uZW50TGVuZ3RoID0gYnl0ZXMgKiA4IC0gbWFudGlzc2FMZW5ndGggLSAxO1xuICB2YXIgZU1heCA9ICgxIDw8IGV4cG9uZW50TGVuZ3RoKSAtIDE7XG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcbiAgdmFyIG5CaXRzID0gZXhwb25lbnRMZW5ndGggLSA3O1xuICB2YXIgaW5kZXggPSBieXRlcyAtIDE7XG4gIHZhciBzaWduID0gYnVmZmVyW2luZGV4LS1dO1xuICB2YXIgZXhwb25lbnQgPSBzaWduICYgMTI3O1xuICB2YXIgbWFudGlzc2E7XG4gIHNpZ24gPj49IDc7XG4gIHdoaWxlIChuQml0cyA+IDApIHtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50ICogMjU2ICsgYnVmZmVyW2luZGV4LS1dO1xuICAgIG5CaXRzIC09IDg7XG4gIH1cbiAgbWFudGlzc2EgPSBleHBvbmVudCAmICgxIDw8IC1uQml0cykgLSAxO1xuICBleHBvbmVudCA+Pj0gLW5CaXRzO1xuICBuQml0cyArPSBtYW50aXNzYUxlbmd0aDtcbiAgd2hpbGUgKG5CaXRzID4gMCkge1xuICAgIG1hbnRpc3NhID0gbWFudGlzc2EgKiAyNTYgKyBidWZmZXJbaW5kZXgtLV07XG4gICAgbkJpdHMgLT0gODtcbiAgfVxuICBpZiAoZXhwb25lbnQgPT09IDApIHtcbiAgICBleHBvbmVudCA9IDEgLSBlQmlhcztcbiAgfSBlbHNlIGlmIChleHBvbmVudCA9PT0gZU1heCkge1xuICAgIHJldHVybiBtYW50aXNzYSA/IE5hTiA6IHNpZ24gPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcbiAgfSBlbHNlIHtcbiAgICBtYW50aXNzYSA9IG1hbnRpc3NhICsgcG93KDIsIG1hbnRpc3NhTGVuZ3RoKTtcbiAgICBleHBvbmVudCA9IGV4cG9uZW50IC0gZUJpYXM7XG4gIH0gcmV0dXJuIChzaWduID8gLTEgOiAxKSAqIG1hbnRpc3NhICogcG93KDIsIGV4cG9uZW50IC0gbWFudGlzc2FMZW5ndGgpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhY2s6IHBhY2ssXG4gIHVucGFjazogdW5wYWNrXG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gISRPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiAkT2JqZWN0KGl0KTtcbn0gOiAkT2JqZWN0O1xuIiwidmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBtYWtlcyBzdWJjbGFzc2luZyB3b3JrIGNvcnJlY3QgZm9yIHdyYXBwZWQgYnVpbHQtaW5zXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHtcbiAgdmFyIE5ld1RhcmdldCwgTmV3VGFyZ2V0UHJvdG90eXBlO1xuICBpZiAoXG4gICAgLy8gaXQgY2FuIHdvcmsgb25seSB3aXRoIG5hdGl2ZSBgc2V0UHJvdG90eXBlT2ZgXG4gICAgc2V0UHJvdG90eXBlT2YgJiZcbiAgICAvLyB3ZSBoYXZlbid0IGNvbXBsZXRlbHkgY29ycmVjdCBwcmUtRVM2IHdheSBmb3IgZ2V0dGluZyBgbmV3LnRhcmdldGAsIHNvIHVzZSB0aGlzXG4gICAgaXNDYWxsYWJsZShOZXdUYXJnZXQgPSBkdW1teS5jb25zdHJ1Y3RvcikgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgc3RvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG5cbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb24udG9TdHJpbmcpO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYGNvcmUtanNAMy40LjEtMy40LjRgLCBzbyB3ZSBjYW4ndCB1c2UgYHNoYXJlZGAgaGVscGVyXG5pZiAoIWlzQ2FsbGFibGUoc3RvcmUuaW5zcGVjdFNvdXJjZSkpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xuXG52YXIgUkVRVUlSRUQgPSBmYWxzZTtcbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxudmFyIHNldE1ldGFkYXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIGRlZmluZVByb3BlcnR5KGl0LCBNRVRBREFUQSwgeyB2YWx1ZToge1xuICAgIG9iamVjdElEOiAnTycgKyBpZCsrLCAvLyBvYmplY3QgSURcbiAgICB3ZWFrRGF0YToge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSB9KTtcbn07XG5cbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIGEgcHJpbWl0aXZlIHdpdGggcHJlZml4XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIG9iamVjdCBJRFxuICB9IHJldHVybiBpdFtNRVRBREFUQV0ub2JqZWN0SUQ7XG59O1xuXG52YXIgZ2V0V2Vha0RhdGEgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhc093bihpdCwgTUVUQURBVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiB0cnVlO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGFkYXRhKGl0KTtcbiAgLy8gcmV0dXJuIHRoZSBzdG9yZSBvZiB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IHJldHVybiBpdFtNRVRBREFUQV0ud2Vha0RhdGE7XG59O1xuXG4vLyBhZGQgbWV0YWRhdGEgb24gZnJlZXplLWZhbWlseSBtZXRob2RzIGNhbGxpbmdcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoRlJFRVpJTkcgJiYgUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzT3duKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIGVuYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgbWV0YS5lbmFibGUgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG4gIFJFUVVJUkVEID0gdHJ1ZTtcbiAgdmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmY7XG4gIHZhciBzcGxpY2UgPSB1bmN1cnJ5VGhpcyhbXS5zcGxpY2UpO1xuICB2YXIgdGVzdCA9IHt9O1xuICB0ZXN0W01FVEFEQVRBXSA9IDE7XG5cbiAgLy8gcHJldmVudCBleHBvc2luZyBvZiBtZXRhZGF0YSBrZXlcbiAgaWYgKGdldE93blByb3BlcnR5TmFtZXModGVzdCkubGVuZ3RoKSB7XG4gICAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChyZXN1bHRbaV0gPT09IE1FVEFEQVRBKSB7XG4gICAgICAgICAgc3BsaWNlKHJlc3VsdCwgaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWxNb2R1bGUuZlxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBlbmFibGU6IGVuYWJsZSxcbiAgZmFzdEtleTogZmFzdEtleSxcbiAgZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG5cbmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2Vhay1tYXAtYmFzaWMtZGV0ZWN0aW9uJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEID0gJ09iamVjdCBhbHJlYWR5IGluaXRpYWxpemVkJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcbnZhciBzZXQsIGdldCwgaGFzO1xuXG52YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaGFzKGl0KSA/IGdldChpdCkgOiBzZXQoaXQsIHt9KTtcbn07XG5cbnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XG4gICAgdmFyIHN0YXRlO1xuICAgIGlmICghaXNPYmplY3QoaXQpIHx8IChzdGF0ZSA9IGdldChpdCkpLnR5cGUgIT09IFRZUEUpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTtcbiAgICB9IHJldHVybiBzdGF0ZTtcbiAgfTtcbn07XG5cbmlmIChOQVRJVkVfV0VBS19NQVAgfHwgc2hhcmVkLnN0YXRlKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXNlbGYtYXNzaWduIC0tIHByb3RvdHlwZSBtZXRob2RzIHByb3RlY3Rpb24gKi9cbiAgc3RvcmUuZ2V0ID0gc3RvcmUuZ2V0O1xuICBzdG9yZS5oYXMgPSBzdG9yZS5oYXM7XG4gIHN0b3JlLnNldCA9IHN0b3JlLnNldDtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWFzc2lnbiAtLSBwcm90b3R5cGUgbWV0aG9kcyBwcm90ZWN0aW9uICovXG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBpZiAoc3RvcmUuaGFzKGl0KSkgdGhyb3cgVHlwZUVycm9yKE9CSkVDVF9BTFJFQURZX0lOSVRJQUxJWkVEKTtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICBzdG9yZS5zZXQoaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBzdG9yZS5nZXQoaXQpIHx8IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gc3RvcmUuaGFzKGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgaWYgKGhhc093bihpdCwgU1RBVEUpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpO1xuICAgIG1ldGFkYXRhLmZhY2FkZSA9IGl0O1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gaGFzT3duKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTtcblxuLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7XG59O1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxuLy8gYElzQXJyYXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2FycmF5XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmd1bWVudCkge1xuICByZXR1cm4gY2xhc3NvZihhcmd1bWVudCkgPT0gJ0FycmF5Jztcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBrbGFzcyA9IGNsYXNzb2YoaXQpO1xuICByZXR1cm4ga2xhc3MgPT0gJ0JpZ0ludDY0QXJyYXknIHx8IGtsYXNzID09ICdCaWdVaW50NjRBcnJheSc7XG59O1xuIiwidmFyICRkb2N1bWVudEFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1hbGwnKTtcblxudmFyIGRvY3VtZW50QWxsID0gJGRvY3VtZW50QWxsLmFsbDtcblxuLy8gYElzQ2FsbGFibGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlXG5tb2R1bGUuZXhwb3J0cyA9ICRkb2N1bWVudEFsbC5JU19IVE1MRERBID8gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJyB8fCBhcmd1bWVudCA9PT0gZG9jdW1lbnRBbGw7XG59IDogZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIGVtcHR5ID0gW107XG52YXIgY29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXFxzKig/OmNsYXNzfGZ1bmN0aW9uKVxcYi87XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMpO1xudmFyIElOQ09SUkVDVF9UT19TVFJJTkcgPSAhY29uc3RydWN0b3JSZWdFeHAuZXhlYyhub29wKTtcblxudmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7XG4gIGlmICghaXNDYWxsYWJsZShhcmd1bWVudCkpIHJldHVybiBmYWxzZTtcbiAgdHJ5IHtcbiAgICBjb25zdHJ1Y3Qobm9vcCwgZW1wdHksIGFyZ3VtZW50KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbnZhciBpc0NvbnN0cnVjdG9yTGVnYWN5ID0gZnVuY3Rpb24gaXNDb25zdHJ1Y3Rvcihhcmd1bWVudCkge1xuICBpZiAoIWlzQ2FsbGFibGUoYXJndW1lbnQpKSByZXR1cm4gZmFsc2U7XG4gIHN3aXRjaCAoY2xhc3NvZihhcmd1bWVudCkpIHtcbiAgICBjYXNlICdBc3luY0Z1bmN0aW9uJzpcbiAgICBjYXNlICdHZW5lcmF0b3JGdW5jdGlvbic6XG4gICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6IHJldHVybiBmYWxzZTtcbiAgfVxuICB0cnkge1xuICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXRcbiAgICAvLyBgRnVuY3Rpb24jdG9TdHJpbmdgIHRocm93cyBvbiBzb21lIGJ1aWx0LWl0IGZ1bmN0aW9uIGluIHNvbWUgbGVnYWN5IGVuZ2luZXNcbiAgICAvLyAoZm9yIGV4YW1wbGUsIGBET01RdWFkYCBhbmQgc2ltaWxhciBpbiBGRjQxLSlcbiAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcblxuaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTtcblxuLy8gYElzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yXG5tb2R1bGUuZXhwb3J0cyA9ICFjb25zdHJ1Y3QgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgY2FsbGVkO1xuICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpXG4gICAgfHwgIWlzQ29uc3RydWN0b3JNb2Rlcm4oT2JqZWN0KVxuICAgIHx8ICFpc0NvbnN0cnVjdG9yTW9kZXJuKGZ1bmN0aW9uICgpIHsgY2FsbGVkID0gdHJ1ZTsgfSlcbiAgICB8fCBjYWxsZWQ7XG59KSA/IGlzQ29uc3RydWN0b3JMZWdhY3kgOiBpc0NvbnN0cnVjdG9yTW9kZXJuO1xuIiwidmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRlc2NyaXB0b3IpIHtcbiAgcmV0dXJuIGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCAmJiAoaGFzT3duKGRlc2NyaXB0b3IsICd2YWx1ZScpIHx8IGhhc093bihkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IGlzQ2FsbGFibGUoZGV0ZWN0aW9uKSA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgSXNJbnRlZ3JhbE51bWJlcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzaW50ZWdyYWxudW1iZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1udW1iZXItaXNpbnRlZ2VyIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHtcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XG59O1xuIiwiLy8gd2UgY2FuJ3QgdXNlIGp1c3QgYGl0ID09IG51bGxgIHNpbmNlIG9mIGBkb2N1bWVudC5hbGxgIHNwZWNpYWwgY2FzZVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1Jc0hUTUxEREEtaW50ZXJuYWwtc2xvdC1hZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gbnVsbCB8fCBpdCA9PT0gdW5kZWZpbmVkO1xufTtcbiIsInZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgJGRvY3VtZW50QWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWFsbCcpO1xuXG52YXIgZG9jdW1lbnRBbGwgPSAkZG9jdW1lbnRBbGwuYWxsO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICRkb2N1bWVudEFsbC5JU19IVE1MRERBID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IGlzQ2FsbGFibGUoaXQpIHx8IGl0ID09PSBkb2N1bWVudEFsbDtcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogaXNDYWxsYWJsZShpdCk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcblxuLy8gYElzUmVnRXhwYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaXNyZWdleHBcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG5cbm1vZHVsZS5leHBvcnRzID0gVVNFX1NZTUJPTF9BU19VSUQgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyICRTeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKTtcbiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRyeVRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXRlcmF0b3JDbG9zZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jbG9zZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyIFJlc3VsdCA9IGZ1bmN0aW9uIChzdG9wcGVkLCByZXN1bHQpIHtcbiAgdGhpcy5zdG9wcGVkID0gc3RvcHBlZDtcbiAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG59O1xuXG52YXIgUmVzdWx0UHJvdG90eXBlID0gUmVzdWx0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX1JFQ09SRCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5JU19SRUNPUkQpO1xuICB2YXIgSVNfSVRFUkFUT1IgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSVNfSVRFUkFUT1IpO1xuICB2YXIgSU5URVJSVVBURUQgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuSU5URVJSVVBURUQpO1xuICB2YXIgZm4gPSBiaW5kKHVuYm91bmRGdW5jdGlvbiwgdGhhdCk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgdmFyIHN0b3AgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgaWYgKGl0ZXJhdG9yKSBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAnbm9ybWFsJywgY29uZGl0aW9uKTtcbiAgICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCBjb25kaXRpb24pO1xuICB9O1xuXG4gIHZhciBjYWxsRm4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAoQVNfRU5UUklFUykge1xuICAgICAgYW5PYmplY3QodmFsdWUpO1xuICAgICAgcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWVbMF0sIHZhbHVlWzFdLCBzdG9wKSA6IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSk7XG4gICAgfSByZXR1cm4gSU5URVJSVVBURUQgPyBmbih2YWx1ZSwgc3RvcCkgOiBmbih2YWx1ZSk7XG4gIH07XG5cbiAgaWYgKElTX1JFQ09SRCkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGUuaXRlcmF0b3I7XG4gIH0gZWxzZSBpZiAoSVNfSVRFUkFUT1IpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlO1xuICB9IGVsc2Uge1xuICAgIGl0ZXJGbiA9IGdldEl0ZXJhdG9yTWV0aG9kKGl0ZXJhYmxlKTtcbiAgICBpZiAoIWl0ZXJGbikgdGhyb3cgJFR5cGVFcnJvcih0cnlUb1N0cmluZyhpdGVyYWJsZSkgKyAnIGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoaXRlcmFibGUpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBjYWxsRm4oaXRlcmFibGVbaW5kZXhdKTtcbiAgICAgICAgaWYgKHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGdldEl0ZXJhdG9yKGl0ZXJhYmxlLCBpdGVyRm4pO1xuICB9XG5cbiAgbmV4dCA9IElTX1JFQ09SRCA/IGl0ZXJhYmxlLm5leHQgOiBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmUpIHtcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbEZuKHN0ZXAudmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCAndGhyb3cnLCBlcnJvcik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiBpc1Byb3RvdHlwZU9mKFJlc3VsdFByb3RvdHlwZSwgcmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkge1xuICB2YXIgaW5uZXJSZXN1bHQsIGlubmVyRXJyb3I7XG4gIGFuT2JqZWN0KGl0ZXJhdG9yKTtcbiAgdHJ5IHtcbiAgICBpbm5lclJlc3VsdCA9IGdldE1ldGhvZChpdGVyYXRvciwgJ3JldHVybicpO1xuICAgIGlmICghaW5uZXJSZXN1bHQpIHtcbiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW5uZXJFcnJvciA9IHRydWU7XG4gICAgaW5uZXJSZXN1bHQgPSBlcnJvcjtcbiAgfVxuICBpZiAoa2luZCA9PT0gJ3Rocm93JykgdGhyb3cgdmFsdWU7XG4gIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDtcbiAgYW5PYmplY3QoaW5uZXJSZXN1bHQpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0LCBFTlVNRVJBQkxFX05FWFQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigrIUVOVU1FUkFCTEVfTkVYVCwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgRnVuY3Rpb25OYW1lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSXRlcmF0b3JzQ29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpO1xuXG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuUFJPUEVSO1xudmFyIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FID0gRnVuY3Rpb25OYW1lLkNPTkZJR1VSQUJMRTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUgJiYgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIGlmICghSVNfUFVSRSAmJiBnZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUpICE9PSBJdGVyYXRvclByb3RvdHlwZSkge1xuICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgICAgICBzZXRQcm90b3R5cGVPZihDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmICghaXNDYWxsYWJsZShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkge1xuICAgICAgICAgIGRlZmluZUJ1aWx0SW4oQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBpZiAoIUlTX1BVUkUgJiYgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07XG4gICAgfVxuICB9XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIGRlZmluZUJ1aWx0SW4oSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgSVRFUkFUT1IsIGRlZmF1bHRJdGVyYXRvciwgeyBuYW1lOiBERUZBVUxUIH0pO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gZmFsc2U7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWl0ZXJhdG9ycHJvdG90eXBlJS1vYmplY3RcbnZhciBJdGVyYXRvclByb3RvdHlwZSwgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlLCBhcnJheUl0ZXJhdG9yO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1hcnJheS1wcm90b3R5cGUta2V5cyAtLSBzYWZlICovXG5pZiAoW10ua2V5cykge1xuICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpO1xuICAvLyBTYWZhcmkgOCBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbiAgaWYgKCEoJ25leHQnIGluIGFycmF5SXRlcmF0b3IpKSBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gdHJ1ZTtcbiAgZWxzZSB7XG4gICAgUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoZ2V0UHJvdG90eXBlT2YoYXJyYXlJdGVyYXRvcikpO1xuICAgIGlmIChQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgIT09IE9iamVjdC5wcm90b3R5cGUpIEl0ZXJhdG9yUHJvdG90eXBlID0gUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG59XG5cbnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5lbHNlIGlmIChJU19QVVJFKSBJdGVyYXRvclByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLUBAaXRlcmF0b3JcbmlmICghaXNDYWxsYWJsZShJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0pKSB7XG4gIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLFxuICBCVUdHWV9TQUZBUklfSVRFUkFUT1JTOiBCVUdHWV9TQUZBUklfSVRFUkFUT1JTXG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsInZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxuLy8gYExlbmd0aE9mQXJyYXlMaWtlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2Vcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gdG9MZW5ndGgob2JqLmxlbmd0aCk7XG59O1xuIiwidmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lJykuQ09ORklHVVJBQkxFO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgJFN0cmluZyA9IFN0cmluZztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG5cbnZhciBDT05GSUdVUkFCTEVfTEVOR1RIID0gREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ2xlbmd0aCcsIHsgdmFsdWU6IDggfSkubGVuZ3RoICE9PSA4O1xufSk7XG5cbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxudmFyIG1ha2VCdWlsdEluID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsdWUsIG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKHN0cmluZ1NsaWNlKCRTdHJpbmcobmFtZSksIDAsIDcpID09PSAnU3ltYm9sKCcpIHtcbiAgICBuYW1lID0gJ1snICsgcmVwbGFjZSgkU3RyaW5nKG5hbWUpLCAvXlN5bWJvbFxcKChbXildKilcXCkvLCAnJDEnKSArICddJztcbiAgfVxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdldHRlcikgbmFtZSA9ICdnZXQgJyArIG5hbWU7XG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMuc2V0dGVyKSBuYW1lID0gJ3NldCAnICsgbmFtZTtcbiAgaWYgKCFoYXNPd24odmFsdWUsICduYW1lJykgfHwgKENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FICYmIHZhbHVlLm5hbWUgIT09IG5hbWUpKSB7XG4gICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ25hbWUnLCB7IHZhbHVlOiBuYW1lLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gICAgZWxzZSB2YWx1ZS5uYW1lID0gbmFtZTtcbiAgfVxuICBpZiAoQ09ORklHVVJBQkxFX0xFTkdUSCAmJiBvcHRpb25zICYmIGhhc093bihvcHRpb25zLCAnYXJpdHknKSAmJiB2YWx1ZS5sZW5ndGggIT09IG9wdGlvbnMuYXJpdHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ2xlbmd0aCcsIHsgdmFsdWU6IG9wdGlvbnMuYXJpdHkgfSk7XG4gIH1cbiAgdHJ5IHtcbiAgICBpZiAob3B0aW9ucyAmJiBoYXNPd24ob3B0aW9ucywgJ2NvbnN0cnVjdG9yJykgJiYgb3B0aW9ucy5jb25zdHJ1Y3Rvcikge1xuICAgICAgaWYgKERFU0NSSVBUT1JTKSBkZWZpbmVQcm9wZXJ0eSh2YWx1ZSwgJ3Byb3RvdHlwZScsIHsgd3JpdGFibGU6IGZhbHNlIH0pO1xuICAgIC8vIGluIFY4IH4gQ2hyb21lIDUzLCBwcm90b3R5cGVzIG9mIHNvbWUgbWV0aG9kcywgbGlrZSBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AsIGFyZSBub24td3JpdGFibGVcbiAgICB9IGVsc2UgaWYgKHZhbHVlLnByb3RvdHlwZSkgdmFsdWUucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHZhbHVlKTtcbiAgaWYgKCFoYXNPd24oc3RhdGUsICdzb3VyY2UnKSkge1xuICAgIHN0YXRlLnNvdXJjZSA9IGpvaW4oVEVNUExBVEUsIHR5cGVvZiBuYW1lID09ICdzdHJpbmcnID8gbmFtZSA6ICcnKTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1leHRlbmQtbmF0aXZlIC0tIHJlcXVpcmVkXG5GdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmcgPSBtYWtlQnVpbHRJbihmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGlzQ2FsbGFibGUodGhpcykgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0sICd0b1N0cmluZycpO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZXhwbTEgLS0gc2FmZVxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XG52YXIgZXhwID0gTWF0aC5leHA7XG5cbi8vIGBNYXRoLmV4cG0xYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxuICAvLyBPbGQgRkYgYnVnXG4gIHx8ICRleHBtMSgxMCkgPiAyMjAyNS40NjU3OTQ4MDY3MTkgfHwgJGV4cG0xKDEwKSA8IDIyMDI1LjQ2NTc5NDgwNjcxNjUxNjhcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xuKSA/IGZ1bmN0aW9uIGV4cG0xKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuIG4gPT0gMCA/IG4gOiBuID4gLTFlLTYgJiYgbiA8IDFlLTYgPyBuICsgbiAqIG4gLyAyIDogZXhwKG4pIC0gMTtcbn0gOiAkZXhwbTE7XG4iLCJ2YXIgc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXNpZ24nKTtcblxudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIHBvdyA9IE1hdGgucG93O1xudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcbnZhciBFUFNJTE9OMzIgPSBwb3coMiwgLTIzKTtcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xuXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xufTtcblxuLy8gYE1hdGguZnJvdW5kYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5mcm91bmRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWZyb3VuZCAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHZhciAkYWJzID0gYWJzKG4pO1xuICB2YXIgJHNpZ24gPSBzaWduKG4pO1xuICB2YXIgYSwgcmVzdWx0O1xuICBpZiAoJGFicyA8IE1JTjMyKSByZXR1cm4gJHNpZ24gKiByb3VuZFRpZXNUb0V2ZW4oJGFicyAvIE1JTjMyIC8gRVBTSUxPTjMyKSAqIE1JTjMyICogRVBTSUxPTjMyO1xuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XG4gIHJldHVybiAkc2lnbiAqIHJlc3VsdDtcbn07XG4iLCJ2YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgTE9HMTBFID0gTWF0aC5MT0cxMEU7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWxvZzEwIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxMCB8fCBmdW5jdGlvbiBsb2cxMCh4KSB7XG4gIHJldHVybiBsb2coeCkgKiBMT0cxMEU7XG59O1xuIiwidmFyIGxvZyA9IE1hdGgubG9nO1xuXG4vLyBgTWF0aC5sb2cxcGAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGgubG9nMXBcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLWxvZzFwIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XG4gIHZhciBuID0gK3g7XG4gIHJldHVybiBuID4gLTFlLTggJiYgbiA8IDFlLTggPyBuIC0gbiAqIG4gLyAyIDogbG9nKDEgKyBuKTtcbn07XG4iLCIvLyBgTWF0aC5zaWduYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5zaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaWduIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uIHNpZ24oeCkge1xuICB2YXIgbiA9ICt4O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4gbiA9PSAwIHx8IG4gIT0gbiA/IG4gOiBuIDwgMCA/IC0xIDogMTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtdHJ1bmMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uIHRydW5jKHgpIHtcbiAgdmFyIG4gPSAreDtcbiAgcmV0dXJuIChuID4gMCA/IGZsb29yIDogY2VpbCkobik7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBRdWV1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9xdWV1ZScpO1xudmFyIElTX0lPUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zJyk7XG52YXIgSVNfSU9TX1BFQkJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLXBlYmJsZScpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgbWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTtcbnZhciBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjtcblxuLy8gbW9kZXJuIGVuZ2luZXMgaGF2ZSBxdWV1ZU1pY3JvdGFzayBtZXRob2RcbmlmICghbWljcm90YXNrKSB7XG4gIHZhciBxdWV1ZSA9IG5ldyBRdWV1ZSgpO1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChmbiA9IHF1ZXVlLmdldCgpKSB0cnkge1xuICAgICAgZm4oKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaWYgKHF1ZXVlLmhlYWQpIG5vdGlmeSgpO1xuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgLy8gYWxzbyBleGNlcHQgV2ViT1MgV2Via2l0IGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84OThcbiAgaWYgKCFJU19JT1MgJiYgIUlTX05PREUgJiYgIUlTX1dFQk9TX1dFQktJVCAmJiBNdXRhdGlvbk9ic2VydmVyICYmIGRvY3VtZW50KSB7XG4gICAgdG9nZ2xlID0gdHJ1ZTtcbiAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xuICAgIH07XG4gIC8vIGVudmlyb25tZW50cyB3aXRoIG1heWJlIG5vbi1jb21wbGV0ZWx5IGNvcnJlY3QsIGJ1dCBleGlzdGVudCBQcm9taXNlXG4gIH0gZWxzZSBpZiAoIUlTX0lPU19QRUJCTEUgJiYgUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxuICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAvLyB3b3JrYXJvdW5kIG9mIFdlYktpdCB+IGlPUyBTYWZhcmkgMTAuMSBidWdcbiAgICBwcm9taXNlLmNvbnN0cnVjdG9yID0gUHJvbWlzZTtcbiAgICB0aGVuID0gYmluZChwcm9taXNlLnRoZW4sIHByb21pc2UpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIE5vZGUuanMgd2l0aG91dCBwcm9taXNlc1xuICB9IGVsc2UgaWYgKElTX05PREUpIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcbiAgICB9O1xuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxuICAvLyAtIHNldEltbWVkaWF0ZVxuICAvLyAtIE1lc3NhZ2VDaGFubmVsXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdlXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIC8vIGB3ZWJwYWNrYCBkZXYgc2VydmVyIGJ1ZyBvbiBJRSBnbG9iYWwgbWV0aG9kcyAtIHVzZSBiaW5kKGZuLCBnbG9iYWwpXG4gICAgbWFjcm90YXNrID0gYmluZChtYWNyb3Rhc2ssIGdsb2JhbCk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbWFjcm90YXNrKGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgbWljcm90YXNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgaWYgKCFxdWV1ZS5oZWFkKSBub3RpZnkoKTtcbiAgICBxdWV1ZS5hZGQoZm4pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1pY3JvdGFzaztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxudmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcbiAgdGhpcy5wcm9taXNlID0gbmV3IEMoZnVuY3Rpb24gKCQkcmVzb2x2ZSwgJCRyZWplY3QpIHtcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyAkVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhQ2FsbGFibGUocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUNhbGxhYmxlKHJlamVjdCk7XG59O1xuXG4vLyBgTmV3UHJvbWlzZUNhcGFiaWxpdHlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1uZXdwcm9taXNlY2FwYWJpbGl0eVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGlzUmVnRXhwKGl0KSkge1xuICAgIHRocm93ICRUeXBlRXJyb3IoXCJUaGUgbWV0aG9kIGRvZXNuJ3QgYWNjZXB0IHJlZ3VsYXIgZXhwcmVzc2lvbnNcIik7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbnZhciBnbG9iYWxJc0Zpbml0ZSA9IGdsb2JhbC5pc0Zpbml0ZTtcblxuLy8gYE51bWJlci5pc0Zpbml0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc2Zpbml0ZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW51bWJlci1pc2Zpbml0ZSAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIGdsb2JhbElzRmluaXRlKGl0KTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgd2hpdGVzcGFjZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2hpdGVzcGFjZXMnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgJHBhcnNlRmxvYXQgPSBnbG9iYWwucGFyc2VGbG9hdDtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIElURVJBVE9SID0gU3ltYm9sICYmIFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGT1JDRUQgPSAxIC8gJHBhcnNlRmxvYXQod2hpdGVzcGFjZXMgKyAnLTAnKSAhPT0gLUluZmluaXR5XG4gIC8vIE1TIEVkZ2UgMTgtIGJyb2tlbiB3aXRoIGJveGVkIHN5bWJvbHNcbiAgfHwgKElURVJBVE9SICYmICFmYWlscyhmdW5jdGlvbiAoKSB7ICRwYXJzZUZsb2F0KE9iamVjdChJVEVSQVRPUikpOyB9KSk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHJpbmcpIHtcbiAgdmFyIHRyaW1tZWRTdHJpbmcgPSB0cmltKHRvU3RyaW5nKHN0cmluZykpO1xuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQodHJpbW1lZFN0cmluZyk7XG4gIHJldHVybiByZXN1bHQgPT09IDAgJiYgY2hhckF0KHRyaW1tZWRTdHJpbmcsIDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciAkcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBJVEVSQVRPUiA9IFN5bWJvbCAmJiBTeW1ib2wuaXRlcmF0b3I7XG52YXIgaGV4ID0gL15bKy1dPzB4L2k7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKGhleC5leGVjKTtcbnZhciBGT1JDRUQgPSAkcGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod2hpdGVzcGFjZXMgKyAnMHgxNicpICE9PSAyMlxuICAvLyBNUyBFZGdlIDE4LSBicm9rZW4gd2l0aCBib3hlZCBzeW1ib2xzXG4gIHx8IChJVEVSQVRPUiAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgeyAkcGFyc2VJbnQoT2JqZWN0KElURVJBVE9SKSk7IH0pKTtcblxuLy8gYHBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VpbnQtc3RyaW5nLXJhZGl4XG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRCA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgpIHtcbiAgdmFyIFMgPSB0cmltKHRvU3RyaW5nKHN0cmluZykpO1xuICByZXR1cm4gJHBhcnNlSW50KFMsIChyYWRpeCA+Pj4gMCkgfHwgKGV4ZWMoaGV4LCBTKSA/IDE2IDogMTApKTtcbn0gOiAkcGFyc2VJbnQ7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSBzYWZlXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gc2hvdWxkIGhhdmUgY29ycmVjdCBvcmRlciBvZiBvcGVyYXRpb25zIChFZGdlIGJ1ZylcbiAgaWYgKERFU0NSSVBUT1JTICYmICRhc3NpZ24oeyBiOiAxIH0sICRhc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHtcbiAgICAgICAgdmFsdWU6IDMsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG4gIH0pLCB7IGI6IDIgfSkpLmIgIT09IDEpIHJldHVybiB0cnVlO1xuICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcbiAgdmFyIEEgPSB7fTtcbiAgdmFyIEIgPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlXG4gIHZhciBzeW1ib2wgPSBTeW1ib2woKTtcbiAgdmFyIGFscGhhYmV0ID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcbiAgQVtzeW1ib2xdID0gNztcbiAgYWxwaGFiZXQuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGNocikgeyBCW2Nocl0gPSBjaHI7IH0pO1xuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbc3ltYm9sXSAhPSA3IHx8IG9iamVjdEtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0O1xufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDE7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7XG4gICAgdmFyIFMgPSBJbmRleGVkT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQob2JqZWN0S2V5cyhTKSwgZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChsZW5ndGggPiBqKSB7XG4gICAgICBrZXkgPSBrZXlzW2orK107XG4gICAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwocHJvcGVydHlJc0VudW1lcmFibGUsIFMsIGtleSkpIFRba2V5XSA9IFNba2V5XTtcbiAgICB9XG4gIH0gcmV0dXJuIFQ7XG59IDogJGFzc2lnbjtcbiIsIi8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSwgV1NIICovXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydGllc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG5cbnZhciBHVCA9ICc+JztcbnZhciBMVCA9ICc8JztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBTQ1JJUFQgPSAnc2NyaXB0JztcbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcblxudmFyIEVtcHR5Q29uc3RydWN0b3IgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG5cbnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUO1xufTtcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIEFjdGl2ZVggT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYID0gZnVuY3Rpb24gKGFjdGl2ZVhEb2N1bWVudCkge1xuICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7XG4gIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpO1xuICB2YXIgdGVtcCA9IGFjdGl2ZVhEb2N1bWVudC5wYXJlbnRXaW5kb3cuT2JqZWN0O1xuICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVha1xuICByZXR1cm4gdGVtcDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICB2YXIgSlMgPSAnamF2YScgKyBTQ1JJUFQgKyAnOic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGh0bWwuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NVxuICBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjtcbn07XG5cbi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnRcbi8vIE5vIG5lZWQgdG8gdXNlIGFjdGl2ZSB4IGFwcHJvYWNoIHdoZW4gZG9jdW1lbnQuZG9tYWluIGlzIG5vdCBzZXRcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW0vaXNzdWVzLzE1MFxuLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDZcbi8vIGF2b2lkIElFIEdDIGJ1Z1xudmFyIGFjdGl2ZVhEb2N1bWVudDtcbnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgYWN0aXZlWERvY3VtZW50ID0gbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9XG4gIE51bGxQcm90b09iamVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJ1xuICAgID8gZG9jdW1lbnQuZG9tYWluICYmIGFjdGl2ZVhEb2N1bWVudFxuICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFXG4gICAgICA6IE51bGxQcm90b09iamVjdFZpYUlGcmFtZSgpXG4gICAgOiBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCk7IC8vIFdTSFxuICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoO1xuICB3aGlsZSAobGVuZ3RoLS0pIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTtcbiAgcmV0dXJuIE51bGxQcm90b09iamVjdCgpO1xufTtcblxuaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlO1xuXG4vLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5jcmVhdGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pO1xuICAgIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBOdWxsUHJvdG9PYmplY3QoKTtcbiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydGllcyAtLSBzYWZlXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyAmJiAhVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWRlZmluZXByb3BlcnR5IC0tIHNhZmVcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgRU5VTUVSQUJMRSA9ICdlbnVtZXJhYmxlJztcbnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJztcbnZhciBXUklUQUJMRSA9ICd3cml0YWJsZSc7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydHlcbmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHtcbiAgICB2YXIgY3VycmVudCA9ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudFtXUklUQUJMRV0pIHtcbiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICAgICAgQXR0cmlidXRlcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBDT05GSUdVUkFCTEUgaW4gQXR0cmlidXRlcyA/IEF0dHJpYnV0ZXNbQ09ORklHVVJBQkxFXSA6IGN1cnJlbnRbQ09ORklHVVJBQkxFXSxcbiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZVxuICAgICAgfTtcbiAgICB9XG4gIH0gcmV0dXJuICRkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbn0gOiAkZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9Qcm9wZXJ0eUtleShQKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSW5kZXhlZE9iamVjdChPKTtcbiAgUCA9IHRvUHJvcGVydHlLZXkoUCk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTtcbn07XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSBzYWZlICovXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJykuZjtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gYXJyYXlTbGljZSh3aW5kb3dOYW1lcyk7XG4gIH1cbn07XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiBjbGFzc29mKGl0KSA9PSAnV2luZG93J1xuICAgID8gZ2V0V2luZG93TmFtZXMoaXQpXG4gICAgOiAkZ2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eW5hbWVzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHNhZmVcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciAkT2JqZWN0ID0gT2JqZWN0O1xudmFyIE9iamVjdFByb3RvdHlwZSA9ICRPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHNhZmVcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gJE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBvYmplY3QgPSB0b09iamVjdChPKTtcbiAgaWYgKGhhc093bihvYmplY3QsIElFX1BST1RPKSkgcmV0dXJuIG9iamVjdFtJRV9QUk9UT107XG4gIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjtcbiAgaWYgKGlzQ2FsbGFibGUoY29uc3RydWN0b3IpICYmIG9iamVjdCBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIGNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgJE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItbm9uLWV4dGVuc2libGUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0V4dGVuc2libGUoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzRXh0ZW5zaWJsZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc2V4dGVuc2libGVcbm1vZHVsZS5leHBvcnRzID0gKEZBSUxTX09OX1BSSU1JVElWRVMgfHwgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFKSA/IGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGZhbHNlO1xuICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWU7XG59IDogJGlzRXh0ZW5zaWJsZTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcyh7fS5pc1Byb3RvdHlwZU9mKTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMnKS5pbmRleE9mO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcblxudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykge1xuICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdChvYmplY3QpO1xuICB2YXIgaSA9IDA7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gTykgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpICYmIGhhc093bihPLCBrZXkpICYmIHB1c2gocmVzdWx0LCBrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzT3duKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHB1c2gocmVzdWx0LCBrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qta2V5cyAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gTmFzaG9ybiB+IEpESzggYnVnXG52YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgISRwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbi8vIEZvcmNlZCByZXBsYWNlbWVudCBvYmplY3QgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IElTX1BVUkUgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVGhpcyBmZWF0dXJlIGRldGVjdGlvbiBjcmFzaGVzIG9sZCBXZWJLaXRcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzIzMlxuICBpZiAoV0VCS0lUICYmIFdFQktJVCA8IDUzNSkgcmV0dXJuO1xuICB2YXIga2V5ID0gTWF0aC5yYW5kb20oKTtcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGwsIGVzL25vLWxlZ2FjeS1vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29yLW1ldGhvZHMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgX19kZWZpbmVTZXR0ZXJfXy5jYWxsKG51bGwsIGtleSwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbiAgZGVsZXRlIGdsb2JhbFtrZXldO1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAtLSBzYWZlICovXG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1zZXRwcm90b3R5cGVvZiAtLSBzYWZlXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpcyhPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQpO1xuICAgIHNldHRlcih0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlcihPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKS5mO1xuXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSB1bmN1cnJ5VGhpcygkcHJvcGVydHlJc0VudW1lcmFibGUpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcblxuLy8gYE9iamVjdC57IGVudHJpZXMsIHZhbHVlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRPX0VOVFJJRVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KGl0KTtcbiAgICB2YXIga2V5cyA9IG9iamVjdEtleXMoTyk7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGtleTtcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkge1xuICAgICAga2V5ID0ga2V5c1tpKytdO1xuICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZShPLCBrZXkpKSB7XG4gICAgICAgIHB1c2gocmVzdWx0LCBUT19FTlRSSUVTID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZW50cmllc1xuICBlbnRyaWVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBPYmplY3QudmFsdWVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QudmFsdWVzXG4gIHZhbHVlczogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbi8vIGBPcmRpbmFyeVRvUHJpbWl0aXZlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb3JkaW5hcnl0b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHtcbiAgdmFyIGZuLCB2YWw7XG4gIGlmIChwcmVmID09PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAocHJlZiAhPT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgJFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxudmFyIGNvbmNhdCA9IHVuY3VycnlUaGlzKFtdLmNvbmNhdCk7XG5cbi8vIGFsbCBvYmplY3Qga2V5cywgaW5jbHVkZXMgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbHNcbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdvd25LZXlzJykgfHwgZnVuY3Rpb24gb3duS2V5cyhpdCkge1xuICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpO1xuICB2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gIHJldHVybiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyBjb25jYXQoa2V5cywgZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtbmF0aXZlLWNvbnN0cnVjdG9yJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19CUk9XU0VSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1icm93c2VyJyk7XG52YXIgSVNfREVOTyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtZGVubycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgU1VCQ0xBU1NJTkcgPSBmYWxzZTtcbnZhciBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQgPSBpc0NhbGxhYmxlKGdsb2JhbC5Qcm9taXNlUmVqZWN0aW9uRXZlbnQpO1xuXG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSBpc0ZvcmNlZCgnUHJvbWlzZScsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFID0gaW5zcGVjdFNvdXJjZShOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IpO1xuICB2YXIgR0xPQkFMX0NPUkVfSlNfUFJPTUlTRSA9IFBST01JU0VfQ09OU1RSVUNUT1JfU09VUkNFICE9PSBTdHJpbmcoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcbiAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgLy8gV2UgbmVlZCBQcm9taXNlI3sgY2F0Y2gsIGZpbmFsbHkgfSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIShOYXRpdmVQcm9taXNlUHJvdG90eXBlWydjYXRjaCddICYmIE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXSkpIHJldHVybiB0cnVlO1xuICAvLyBXZSBjYW4ndCB1c2UgQEBzcGVjaWVzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxuICBpZiAoIVY4X1ZFUlNJT04gfHwgVjhfVkVSU0lPTiA8IDUxIHx8ICEvbmF0aXZlIGNvZGUvLnRlc3QoUFJPTUlTRV9DT05TVFJVQ1RPUl9TT1VSQ0UpKSB7XG4gICAgLy8gRGV0ZWN0IGNvcnJlY3RuZXNzIG9mIHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSgxKTsgfSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xuICAgIH07XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgIGNvbnN0cnVjdG9yW1NQRUNJRVNdID0gRmFrZVByb21pc2U7XG4gICAgU1VCQ0xBU1NJTkcgPSBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlO1xuICAgIGlmICghU1VCQ0xBU1NJTkcpIHJldHVybiB0cnVlO1xuICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gIH0gcmV0dXJuICFHTE9CQUxfQ09SRV9KU19QUk9NSVNFICYmIChJU19CUk9XU0VSIHx8IElTX0RFTk8pICYmICFOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENPTlNUUlVDVE9SOiBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUixcbiAgUkVKRUNUSU9OX0VWRU5UOiBOQVRJVkVfUFJPTUlTRV9SRUpFQ1RJT05fRVZFTlQsXG4gIFNVQkNMQVNTSU5HOiBTVUJDTEFTU0lOR1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XG4gIGFuT2JqZWN0KEMpO1xuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XG4gIHZhciByZXNvbHZlID0gcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgcmVzb2x2ZSh4KTtcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XG59O1xuIiwidmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpLkNPTlNUUlVDVE9SO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvci5hbGwoaXRlcmFibGUpLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xufSk7XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRhcmdldCwgU291cmNlLCBrZXkpIHtcbiAga2V5IGluIFRhcmdldCB8fCBkZWZpbmVQcm9wZXJ0eShUYXJnZXQsIGtleSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNvdXJjZVtrZXldOyB9LFxuICAgIHNldDogZnVuY3Rpb24gKGl0KSB7IFNvdXJjZVtrZXldID0gaXQ7IH1cbiAgfSk7XG59O1xuIiwidmFyIFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICB0aGlzLmhlYWQgPSBudWxsO1xuICB0aGlzLnRhaWwgPSBudWxsO1xufTtcblxuUXVldWUucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGVudHJ5ID0geyBpdGVtOiBpdGVtLCBuZXh0OiBudWxsIH07XG4gICAgdmFyIHRhaWwgPSB0aGlzLnRhaWw7XG4gICAgaWYgKHRhaWwpIHRhaWwubmV4dCA9IGVudHJ5O1xuICAgIGVsc2UgdGhpcy5oZWFkID0gZW50cnk7XG4gICAgdGhpcy50YWlsID0gZW50cnk7XG4gIH0sXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuaGVhZDtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIHZhciBuZXh0ID0gdGhpcy5oZWFkID0gZW50cnkubmV4dDtcbiAgICAgIGlmIChuZXh0ID09PSBudWxsKSB0aGlzLnRhaWwgPSBudWxsO1xuICAgICAgcmV0dXJuIGVudHJ5Lml0ZW07XG4gICAgfVxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFF1ZXVlO1xuIiwidmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAoaXNDYWxsYWJsZShleGVjKSkge1xuICAgIHZhciByZXN1bHQgPSBjYWxsKGV4ZWMsIFIsIFMpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwpIGFuT2JqZWN0KHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoY2xhc3NvZihSKSA9PT0gJ1JlZ0V4cCcpIHJldHVybiBjYWxsKHJlZ2V4cEV4ZWMsIFIsIFMpO1xuICB0aHJvdyAkVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgcmVnZXhwL25vLWVtcHR5LWNhcHR1cmluZy1ncm91cCwgcmVnZXhwL25vLWVtcHR5LWdyb3VwLCByZWdleHAvbm8tbGF6eS1lbmRzIC0tIHRlc3RpbmcgKi9cbi8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby11c2VsZXNzLXF1YW50aWZpZXIgLS0gdGVzdGluZyAqL1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpLmdldDtcbnZhciBVTlNVUFBPUlRFRF9ET1RfQUxMID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1kb3QtYWxsJyk7XG52YXIgVU5TVVBQT1JURURfTkNHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC11bnN1cHBvcnRlZC1uY2cnKTtcblxudmFyIG5hdGl2ZVJlcGxhY2UgPSBzaGFyZWQoJ25hdGl2ZS1zdHJpbmctcmVwbGFjZScsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgbmF0aXZlRXhlYyA9IFJlZ0V4cC5wcm90b3R5cGUuZXhlYztcbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG52YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTtcbnZhciBpbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgcmVwbGFjZSA9IHVuY3VycnlUaGlzKCcnLnJlcGxhY2UpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgVVBEQVRFU19MQVNUX0lOREVYX1dST05HID0gKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlMSA9IC9hLztcbiAgdmFyIHJlMiA9IC9iKi9nO1xuICBjYWxsKG5hdGl2ZUV4ZWMsIHJlMSwgJ2EnKTtcbiAgY2FsbChuYXRpdmVFeGVjLCByZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuQlJPS0VOX0NBUkVUO1xuXG4vLyBub25wYXJ0aWNpcGF0aW5nIGNhcHR1cmluZyBncm91cCwgY29waWVkIGZyb20gZXM1LXNoaW0ncyBTdHJpbmcjc3BsaXQgcGF0Y2guXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xuXG52YXIgUEFUQ0ggPSBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgfHwgTlBDR19JTkNMVURFRCB8fCBVTlNVUFBPUlRFRF9ZIHx8IFVOU1VQUE9SVEVEX0RPVF9BTEwgfHwgVU5TVVBQT1JURURfTkNHO1xuXG5pZiAoUEFUQ0gpIHtcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cmluZykge1xuICAgIHZhciByZSA9IHRoaXM7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShyZSk7XG4gICAgdmFyIHN0ciA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgdmFyIHJhdyA9IHN0YXRlLnJhdztcbiAgICB2YXIgcmVzdWx0LCByZUNvcHksIGxhc3RJbmRleCwgbWF0Y2gsIGksIG9iamVjdCwgZ3JvdXA7XG5cbiAgICBpZiAocmF3KSB7XG4gICAgICByYXcubGFzdEluZGV4ID0gcmUubGFzdEluZGV4O1xuICAgICAgcmVzdWx0ID0gY2FsbChwYXRjaGVkRXhlYywgcmF3LCBzdHIpO1xuICAgICAgcmUubGFzdEluZGV4ID0gcmF3Lmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGdyb3VwcyA9IHN0YXRlLmdyb3VwcztcbiAgICB2YXIgc3RpY2t5ID0gVU5TVVBQT1JURURfWSAmJiByZS5zdGlja3k7XG4gICAgdmFyIGZsYWdzID0gY2FsbChyZWdleHBGbGFncywgcmUpO1xuICAgIHZhciBzb3VyY2UgPSByZS5zb3VyY2U7XG4gICAgdmFyIGNoYXJzQWRkZWQgPSAwO1xuICAgIHZhciBzdHJDb3B5ID0gc3RyO1xuXG4gICAgaWYgKHN0aWNreSkge1xuICAgICAgZmxhZ3MgPSByZXBsYWNlKGZsYWdzLCAneScsICcnKTtcbiAgICAgIGlmIChpbmRleE9mKGZsYWdzLCAnZycpID09PSAtMSkge1xuICAgICAgICBmbGFncyArPSAnZyc7XG4gICAgICB9XG5cbiAgICAgIHN0ckNvcHkgPSBzdHJpbmdTbGljZShzdHIsIHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBjaGFyQXQoc3RyLCByZS5sYXN0SW5kZXggLSAxKSAhPT0gJ1xcbicpKSB7XG4gICAgICAgIHNvdXJjZSA9ICcoPzogJyArIHNvdXJjZSArICcpJztcbiAgICAgICAgc3RyQ29weSA9ICcgJyArIHN0ckNvcHk7XG4gICAgICAgIGNoYXJzQWRkZWQrKztcbiAgICAgIH1cbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBzdHIgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14oPzonICsgc291cmNlICsgJyknLCBmbGFncyk7XG4gICAgfVxuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgc291cmNlICsgJyQoPyFcXFxccyknLCBmbGFncyk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlLmxhc3RJbmRleDtcblxuICAgIG1hdGNoID0gY2FsbChuYXRpdmVFeGVjLCBzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBzdHJpbmdTbGljZShtYXRjaC5pbnB1dCwgY2hhcnNBZGRlZCk7XG4gICAgICAgIG1hdGNoWzBdID0gc3RyaW5nU2xpY2UobWF0Y2hbMF0sIGNoYXJzQWRkZWQpO1xuICAgICAgICBtYXRjaC5pbmRleCA9IHJlLmxhc3RJbmRleDtcbiAgICAgICAgcmUubGFzdEluZGV4ICs9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgIH0gZWxzZSByZS5sYXN0SW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZS5sYXN0SW5kZXggPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcbiAgICB9XG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcbiAgICAgIC8vIGZvciBOUENHLCBsaWtlIElFOC4gTk9URTogVGhpcyBkb2Vzbid0IHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIGNhbGwobmF0aXZlUmVwbGFjZSwgbWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXRjaCAmJiBncm91cHMpIHtcbiAgICAgIG1hdGNoLmdyb3VwcyA9IG9iamVjdCA9IGNyZWF0ZShudWxsKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbaV07XG4gICAgICAgIG9iamVjdFtncm91cFswXV0gPSBtYXRjaFtncm91cFsxXV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5oYXNJbmRpY2VzKSByZXN1bHQgKz0gJ2QnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC51bmljb2RlU2V0cykgcmVzdWx0ICs9ICd2JztcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsInZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIHJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1mbGFncycpO1xuXG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUikge1xuICB2YXIgZmxhZ3MgPSBSLmZsYWdzO1xuICByZXR1cm4gZmxhZ3MgPT09IHVuZGVmaW5lZCAmJiAhKCdmbGFncycgaW4gUmVnRXhwUHJvdG90eXBlKSAmJiAhaGFzT3duKFIsICdmbGFncycpICYmIGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBSKVxuICAgID8gY2FsbChyZWdFeHBGbGFncywgUikgOiBmbGFncztcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSBhbmQgQ2xvc3VyZSBDb21waWxlciB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yXG52YXIgJFJlZ0V4cCA9IGdsb2JhbC5SZWdFeHA7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAkUmVnRXhwKCdhJywgJ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ2FiY2QnKSAhPSBudWxsO1xufSk7XG5cbi8vIFVDIEJyb3dzZXIgYnVnXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTAwOFxudmFyIE1JU1NFRF9TVElDS1kgPSBVTlNVUFBPUlRFRF9ZIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICEkUmVnRXhwKCdhJywgJ3knKS5zdGlja3k7XG59KTtcblxudmFyIEJST0tFTl9DQVJFVCA9IFVOU1VQUE9SVEVEX1kgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03NzM2ODdcbiAgdmFyIHJlID0gJFJlZ0V4cCgnXnInLCAnZ3knKTtcbiAgcmUubGFzdEluZGV4ID0gMjtcbiAgcmV0dXJuIHJlLmV4ZWMoJ3N0cicpICE9IG51bGw7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEJST0tFTl9DQVJFVDogQlJPS0VOX0NBUkVULFxuICBNSVNTRURfU1RJQ0tZOiBNSVNTRURfU1RJQ0tZLFxuICBVTlNVUFBPUlRFRF9ZOiBVTlNVUFBPUlRFRF9ZXG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJy4nLCAncycpIC0+IC8uL3MgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnLicsICdzJyk7XG4gIHJldHVybiAhKHJlLmRvdEFsbCAmJiByZS5leGVjKCdcXG4nKSAmJiByZS5mbGFncyA9PT0gJ3MnKTtcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG4vLyBiYWJlbC1taW5pZnkgYW5kIENsb3N1cmUgQ29tcGlsZXIgdHJhbnNwaWxlcyBSZWdFeHAoJyg/PGE+YiknLCAnZycpIC0+IC8oPzxhPmIpL2cgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHJlID0gJFJlZ0V4cCgnKD88YT5iKScsICdnJyk7XG4gIHJldHVybiByZS5leGVjKCdiJykuZ3JvdXBzLmEgIT09ICdiJyB8fFxuICAgICdiJy5yZXBsYWNlKHJlLCAnJDxhPmMnKSAhPT0gJ2JjJztcbn0pO1xuIiwidmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlcXVpcmVvYmplY3Rjb2VyY2libGVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpc051bGxPclVuZGVmaW5lZChpdCkpIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIGBTYW1lVmFsdWVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zYW1ldmFsdWVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXMgLS0gc2FmZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIEVOR0lORV9JU19CVU4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWJ1bicpO1xudmFyIFVTRVJfQUdFTlQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xuXG52YXIgRnVuY3Rpb24gPSBnbG9iYWwuRnVuY3Rpb247XG4vLyBkaXJ0eSBJRTktIGFuZCBCdW4gMC4zLjAtIGNoZWNrc1xudmFyIFdSQVAgPSAvTVNJRSAuXFwuLy50ZXN0KFVTRVJfQUdFTlQpIHx8IEVOR0lORV9JU19CVU4gJiYgKGZ1bmN0aW9uICgpIHtcbiAgdmFyIHZlcnNpb24gPSBnbG9iYWwuQnVuLnZlcnNpb24uc3BsaXQoJy4nKTtcbiAgcmV0dXJuIHZlcnNpb24ubGVuZ3RoIDwgMyB8fCB2ZXJzaW9uWzBdID09IDAgJiYgKHZlcnNpb25bMV0gPCAzIHx8IHZlcnNpb25bMV0gPT0gMyAmJiB2ZXJzaW9uWzJdID09IDApO1xufSkoKTtcblxuLy8gSUU5LSAvIEJ1biAwLjMuMC0gc2V0VGltZW91dCAvIHNldEludGVydmFsIC8gc2V0SW1tZWRpYXRlIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3RpbWVycy1hbmQtdXNlci1wcm9tcHRzLmh0bWwjdGltZXJzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vb3Zlbi1zaC9idW4vaXNzdWVzLzE2MzNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNjaGVkdWxlciwgaGFzVGltZUFyZykge1xuICB2YXIgZmlyc3RQYXJhbUluZGV4ID0gaGFzVGltZUFyZyA/IDIgOiAxO1xuICByZXR1cm4gV1JBUCA/IGZ1bmN0aW9uIChoYW5kbGVyLCB0aW1lb3V0IC8qICwgLi4uYXJndW1lbnRzICovKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gZmlyc3RQYXJhbUluZGV4O1xuICAgIHZhciBmbiA9IGlzQ2FsbGFibGUoaGFuZGxlcikgPyBoYW5kbGVyIDogRnVuY3Rpb24oaGFuZGxlcik7XG4gICAgdmFyIHBhcmFtcyA9IGJvdW5kQXJncyA/IGFycmF5U2xpY2UoYXJndW1lbnRzLCBmaXJzdFBhcmFtSW5kZXgpIDogW107XG4gICAgdmFyIGNhbGxiYWNrID0gYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xuICAgICAgYXBwbHkoZm4sIHRoaXMsIHBhcmFtcyk7XG4gICAgfSA6IGZuO1xuICAgIHJldHVybiBoYXNUaW1lQXJnID8gc2NoZWR1bGVyKGNhbGxiYWNrLCB0aW1lb3V0KSA6IHNjaGVkdWxlcihjYWxsYmFjayk7XG4gIH0gOiBzY2hlZHVsZXI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIFRBRywgU1RBVElDKSB7XG4gIGlmICh0YXJnZXQgJiYgIVNUQVRJQykgdGFyZ2V0ID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgaWYgKHRhcmdldCAmJiAhaGFzT3duKHRhcmdldCwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5Jyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuMjcuMicsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAxNC0yMDIzIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJyxcbiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMjcuMi9MSUNFTlNFJyxcbiAgc291cmNlOiAnaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMnXG59KTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jb25zdHJ1Y3RvcicpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBTcGVjaWVzQ29uc3RydWN0b3JgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCBpc051bGxPclVuZGVmaW5lZChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID8gZGVmYXVsdENvbnN0cnVjdG9yIDogYUNvbnN0cnVjdG9yKFMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBjaGVjayB0aGUgZXhpc3RlbmNlIG9mIGEgbWV0aG9kLCBsb3dlcmNhc2Vcbi8vIG9mIGEgdGFnIGFuZCBlc2NhcGluZyBxdW90ZXMgaW4gYXJndW1lbnRzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXN0ID0gJydbTUVUSE9EX05BTUVdKCdcIicpO1xuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xuICB9KTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlck9ySW5maW5pdHkocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gY2hhckNvZGVBdChTLCBwb3NpdGlvbiArIDEpKSA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkZcbiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gY2hhckF0KFMsIHBvc2l0aW9uKVxuICAgICAgICAgIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklOR1xuICAgICAgICAgID8gc3RyaW5nU2xpY2UoUywgcG9zaXRpb24sIHBvc2l0aW9uICsgMilcbiAgICAgICAgICA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gL1ZlcnNpb25cXC8xMCg/OlxcLlxcZCspezEsMn0oPzogW1xcdy4vXSspPyg/OiBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyICRyZXBlYXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXJlcGVhdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHBhZFN0YXJ0LCBwYWRFbmQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19FTkQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7XG4gICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XG4gICAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xuICAgIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogdG9TdHJpbmcoZmlsbFN0cmluZyk7XG4gICAgdmFyIGZpbGxMZW4sIHN0cmluZ0ZpbGxlcjtcbiAgICBpZiAoaW50TWF4TGVuZ3RoIDw9IHN0cmluZ0xlbmd0aCB8fCBmaWxsU3RyID09ICcnKSByZXR1cm4gUztcbiAgICBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xuICAgIHN0cmluZ0ZpbGxlciA9IHJlcGVhdChmaWxsU3RyLCBjZWlsKGZpbGxMZW4gLyBmaWxsU3RyLmxlbmd0aCkpO1xuICAgIGlmIChzdHJpbmdGaWxsZXIubGVuZ3RoID4gZmlsbExlbikgc3RyaW5nRmlsbGVyID0gc3RyaW5nU2xpY2Uoc3RyaW5nRmlsbGVyLCAwLCBmaWxsTGVuKTtcbiAgICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiAgc3RhcnQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnBhZEVuZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5wYWRlbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vYmVzdGllanMvcHVueWNvZGUuanMvYmxvYi9tYXN0ZXIvcHVueWNvZGUuanNcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIG1heEludCA9IDIxNDc0ODM2NDc7IC8vIGFrYS4gMHg3RkZGRkZGRiBvciAyXjMxLTFcbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFwwLVxcdTAwN0VdLzsgLy8gbm9uLUFTQ0lJIGNoYXJzXG52YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG52YXIgT1ZFUkZMT1dfRVJST1IgPSAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnO1xudmFyIGJhc2VNaW51c1RNaW4gPSBiYXNlIC0gdE1pbjtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMocmVnZXhTZXBhcmF0b3JzLmV4ZWMpO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xudmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTtcbnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciB0b0xvd2VyQ2FzZSA9IHVuY3VycnlUaGlzKCcnLnRvTG93ZXJDYXNlKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIG51bWVyaWMgY29kZSBwb2ludHMgb2YgZWFjaCBVbmljb2RlXG4gKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG4gKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaFxuICogVUNTLTIgZXhwb3NlcyBhcyBzZXBhcmF0ZSBjaGFyYWN0ZXJzKSBpbnRvIGEgc2luZ2xlIGNvZGUgcG9pbnQsXG4gKiBtYXRjaGluZyBVVEYtMTYuXG4gKi9cbnZhciB1Y3MyZGVjb2RlID0gZnVuY3Rpb24gKHN0cmluZykge1xuICB2YXIgb3V0cHV0ID0gW107XG4gIHZhciBjb3VudGVyID0gMDtcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgdmFyIHZhbHVlID0gY2hhckNvZGVBdChzdHJpbmcsIGNvdW50ZXIrKyk7XG4gICAgaWYgKHZhbHVlID49IDB4RDgwMCAmJiB2YWx1ZSA8PSAweERCRkYgJiYgY291bnRlciA8IGxlbmd0aCkge1xuICAgICAgLy8gSXQncyBhIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3Rlci5cbiAgICAgIHZhciBleHRyYSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspO1xuICAgICAgaWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIExvdyBzdXJyb2dhdGUuXG4gICAgICAgIHB1c2gob3V0cHV0LCAoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSXQncyBhbiB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGVcbiAgICAgICAgLy8gbmV4dCBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXIuXG4gICAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7XG4gICAgICAgIGNvdW50ZXItLTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHVzaChvdXRwdXQsIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn07XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICovXG52YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpO1xufTtcblxuLyoqXG4gKiBCaWFzIGFkYXB0YXRpb24gZnVuY3Rpb24gYXMgcGVyIHNlY3Rpb24gMy40IG9mIFJGQyAzNDkyLlxuICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjRcbiAqL1xudmFyIGFkYXB0ID0gZnVuY3Rpb24gKGRlbHRhLCBudW1Qb2ludHMsIGZpcnN0VGltZSkge1xuICB2YXIgayA9IDA7XG4gIGRlbHRhID0gZmlyc3RUaW1lID8gZmxvb3IoZGVsdGEgLyBkYW1wKSA6IGRlbHRhID4+IDE7XG4gIGRlbHRhICs9IGZsb29yKGRlbHRhIC8gbnVtUG9pbnRzKTtcbiAgd2hpbGUgKGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMSkge1xuICAgIGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcbiAgICBrICs9IGJhc2U7XG4gIH1cbiAgcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICovXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcblxuICAvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBhbiBhcnJheSBvZiBVbmljb2RlIGNvZGUgcG9pbnRzLlxuICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG4gIC8vIENhY2hlIHRoZSBsZW5ndGguXG4gIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzdGF0ZS5cbiAgdmFyIG4gPSBpbml0aWFsTjtcbiAgdmFyIGRlbHRhID0gMDtcbiAgdmFyIGJpYXMgPSBpbml0aWFsQmlhcztcbiAgdmFyIGksIGN1cnJlbnRWYWx1ZTtcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzLlxuICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHtcbiAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICBpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoOyAvLyBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG4gIHZhciBoYW5kbGVkQ1BDb3VudCA9IGJhc2ljTGVuZ3RoOyAvLyBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblxuICAvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyB3aXRoIGEgZGVsaW1pdGVyIHVubGVzcyBpdCdzIGVtcHR5LlxuICBpZiAoYmFzaWNMZW5ndGgpIHtcbiAgICBwdXNoKG91dHB1dCwgZGVsaW1pdGVyKTtcbiAgfVxuXG4gIC8vIE1haW4gZW5jb2RpbmcgbG9vcDpcbiAgd2hpbGUgKGhhbmRsZWRDUENvdW50IDwgaW5wdXRMZW5ndGgpIHtcbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0IGxhcmdlciBvbmU6XG4gICAgdmFyIG0gPSBtYXhJbnQ7XG4gICAgZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTtcbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7XG4gICAgICAgIG0gPSBjdXJyZW50VmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5jcmVhc2UgYGRlbHRhYCBlbm91Z2ggdG8gYWR2YW5jZSB0aGUgZGVjb2RlcidzIDxuLGk+IHN0YXRlIHRvIDxtLDA+LCBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvdy5cbiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxO1xuICAgIGlmIChtIC0gbiA+IGZsb29yKChtYXhJbnQgLSBkZWx0YSkgLyBoYW5kbGVkQ1BDb3VudFBsdXNPbmUpKSB7XG4gICAgICB0aHJvdyAkUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7XG4gICAgfVxuXG4gICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcbiAgICBuID0gbTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG4gICAgICAgIHRocm93ICRSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikge1xuICAgICAgICAvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlci5cbiAgICAgICAgdmFyIHEgPSBkZWx0YTtcbiAgICAgICAgdmFyIGsgPSBiYXNlO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTtcbiAgICAgICAgICBpZiAocSA8IHQpIGJyZWFrO1xuICAgICAgICAgIHZhciBxTWludXNUID0gcSAtIHQ7XG4gICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyh0ICsgcU1pbnVzVCAlIGJhc2VNaW51c1QpKSk7XG4gICAgICAgICAgcSA9IGZsb29yKHFNaW51c1QgLyBiYXNlTWludXNUKTtcbiAgICAgICAgICBrICs9IGJhc2U7XG4gICAgICAgIH1cblxuICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpO1xuICAgICAgICBiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuICAgICAgICBkZWx0YSA9IDA7XG4gICAgICAgIGhhbmRsZWRDUENvdW50Kys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZGVsdGErKztcbiAgICBuKys7XG4gIH1cbiAgcmV0dXJuIGpvaW4ob3V0cHV0LCAnJyk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgZW5jb2RlZCA9IFtdO1xuICB2YXIgbGFiZWxzID0gc3BsaXQocmVwbGFjZSh0b0xvd2VyQ2FzZShpbnB1dCksIHJlZ2V4U2VwYXJhdG9ycywgJ1xcdTAwMkUnKSwgJy4nKTtcbiAgdmFyIGksIGxhYmVsO1xuICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGFiZWwgPSBsYWJlbHNbaV07XG4gICAgcHVzaChlbmNvZGVkLCBleGVjKHJlZ2V4Tm9uQVNDSUksIGxhYmVsKSA/ICd4bi0tJyArIGVuY29kZShsYWJlbCkgOiBsYWJlbCk7XG4gIH1cbiAgcmV0dXJuIGpvaW4oZW5jb2RlZCwgJy4nKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XG4gIHZhciBzdHIgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgbiA9IHRvSW50ZWdlck9ySW5maW5pdHkoY291bnQpO1xuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgJFJhbmdlRXJyb3IoJ1dyb25nIG51bWJlciBvZiByZXBldGl0aW9ucycpO1xuICBmb3IgKDtuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpIGlmIChuICYgMSkgcmVzdWx0ICs9IHN0cjtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJHRyaW1FbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS5lbmQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltRW5kLCB0cmltUmlnaHQgfWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbXJpZ2h0XG5tb2R1bGUuZXhwb3J0cyA9IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW1FbmQnKSA/IGZ1bmN0aW9uIHRyaW1FbmQoKSB7XG4gIHJldHVybiAkdHJpbUVuZCh0aGlzKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1zdGFydC10cmltZW5kIC0tIHNhZmVcbn0gOiAnJy50cmltRW5kO1xuIiwidmFyIFBST1BFUl9GVU5DVElPTl9OQU1FID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5QUk9QRVI7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbm9uID0gJ1xcdTIwMEJcXHUwMDg1XFx1MTgwRSc7XG5cbi8vIGNoZWNrIHRoYXQgYSBtZXRob2Qgd29ya3Mgd2l0aCB0aGUgY29ycmVjdCBsaXN0XG4vLyBvZiB3aGl0ZXNwYWNlcyBhbmQgaGFzIGEgY29ycmVjdCBuYW1lXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXSgpXG4gICAgICB8fCBub25bTUVUSE9EX05BTUVdKCkgIT09IG5vblxuICAgICAgfHwgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIHdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXS5uYW1lICE9PSBNRVRIT0RfTkFNRSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkdHJpbVN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykuc3RhcnQ7XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltU3RhcnQsIHRyaW1MZWZ0IH1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI1N0cmluZy5wcm90b3R5cGUudHJpbWxlZnRcbm1vZHVsZS5leHBvcnRzID0gZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbVN0YXJ0JykgPyBmdW5jdGlvbiB0cmltU3RhcnQoKSB7XG4gIHJldHVybiAkdHJpbVN0YXJ0KHRoaXMpO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxufSA6ICcnLnRyaW1TdGFydDtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSByZXBsYWNlKHN0cmluZywgbHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHJlcGxhY2Uoc3RyaW5nLCBydHJpbSwgJycpO1xuICAgIHJldHVybiBzdHJpbmc7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUueyB0cmltTGVmdCwgdHJpbVN0YXJ0IH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1zdGFydFxuICBzdGFydDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1SaWdodCwgdHJpbUVuZCB9YCBtZXRob2RzXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4gIGVuZDogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1cbiAgdHJpbTogY3JlYXRlTWV0aG9kKDMpXG59O1xuIiwiLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgVjhfVkVSU0lPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlzeW1ib2xzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7XG4gIC8vIENocm9tZSAzOCBTeW1ib2wgaGFzIGluY29ycmVjdCB0b1N0cmluZyBjb252ZXJzaW9uXG4gIC8vIGBnZXQtb3duLXByb3BlcnR5LXN5bWJvbHNgIHBvbHlmaWxsIHN5bWJvbHMgY29udmVydGVkIHRvIG9iamVjdCBhcmUgbm90IFN5bWJvbCBpbnN0YW5jZXNcbiAgcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fFxuICAgIC8vIENocm9tZSAzOC00MCBzeW1ib2xzIGFyZSBub3QgaW5oZXJpdGVkIGZyb20gRE9NIGNvbGxlY3Rpb25zIHByb3RvdHlwZXMgdG8gaW5zdGFuY2VzXG4gICAgIVN5bWJvbC5zaGFtICYmIFY4X1ZFUlNJT04gJiYgVjhfVkVSU0lPTiA8IDQxO1xufSk7XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIFN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpO1xuICB2YXIgU3ltYm9sUHJvdG90eXBlID0gU3ltYm9sICYmIFN5bWJvbC5wcm90b3R5cGU7XG4gIHZhciB2YWx1ZU9mID0gU3ltYm9sUHJvdG90eXBlICYmIFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mO1xuICB2YXIgVE9fUFJJTUlUSVZFID0gd2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4gIGlmIChTeW1ib2xQcm90b3R5cGUgJiYgIVN5bWJvbFByb3RvdHlwZVtUT19QUklNSVRJVkVdKSB7XG4gICAgLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciAubGVuZ3RoXG4gICAgZGVmaW5lQnVpbHRJbihTeW1ib2xQcm90b3R5cGUsIFRPX1BSSU1JVElWRSwgZnVuY3Rpb24gKGhpbnQpIHtcbiAgICAgIHJldHVybiBjYWxsKHZhbHVlT2YsIHRoaXMpO1xuICAgIH0sIHsgYXJpdHk6IDEgfSk7XG4gIH1cbn07XG4iLCJ2YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSBzYWZlICovXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0wgJiYgISFTeW1ib2xbJ2ZvciddICYmICEhU3ltYm9sLmtleUZvcjtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9odG1sJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBGdW5jdGlvbiA9IGdsb2JhbC5GdW5jdGlvbjtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBTdHJpbmcgPSBnbG9iYWwuU3RyaW5nO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgJGxvY2F0aW9uLCBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxuZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBEZW5vIHRocm93cyBhIFJlZmVyZW5jZUVycm9yIG9uIGBsb2NhdGlvbmAgYWNjZXNzIHdpdGhvdXQgYC0tbG9jYXRpb25gIGZsYWdcbiAgJGxvY2F0aW9uID0gZ2xvYmFsLmxvY2F0aW9uO1xufSk7XG5cbnZhciBydW4gPSBmdW5jdGlvbiAoaWQpIHtcbiAgaWYgKGhhc093bihxdWV1ZSwgaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgZXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgZ2xvYmFsUG9zdE1lc3NhZ2VEZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKFN0cmluZyhpZCksICRsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyAkbG9jYXRpb24uaG9zdCk7XG59O1xuXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldCB8fCAhY2xlYXIpIHtcbiAgc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGhhbmRsZXIpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZm4gPSBpc0NhbGxhYmxlKGhhbmRsZXIpID8gaGFuZGxlciA6IEZ1bmN0aW9uKGhhbmRsZXIpO1xuICAgIHZhciBhcmdzID0gYXJyYXlTbGljZShhcmd1bWVudHMsIDEpO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICBhcHBseShmbiwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChJU19OT0RFKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGV2ZW50TGlzdGVuZXI7XG4gICAgZGVmZXIgPSBiaW5kKHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJlxuICAgIGlzQ2FsbGFibGUoZ2xvYmFsLnBvc3RNZXNzYWdlKSAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgICRsb2NhdGlvbiAmJiAkbG9jYXRpb24ucHJvdG9jb2wgIT09ICdmaWxlOicgJiZcbiAgICAhZmFpbHMoZ2xvYmFsUG9zdE1lc3NhZ2VEZWZlcilcbiAgKSB7XG4gICAgZGVmZXIgPSBnbG9iYWxQb3N0TWVzc2FnZURlZmVyO1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgZXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxuLy8gYHRoaXNOdW1iZXJWYWx1ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRoaXNudW1iZXJ2YWx1ZVxubW9kdWxlLmV4cG9ydHMgPSB1bmN1cnJ5VGhpcygxLjAudmFsdWVPZik7XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlck9ySW5maW5pdHkoaW5kZXgpO1xuICByZXR1cm4gaW50ZWdlciA8IDAgPyBtYXgoaW50ZWdlciArIGxlbmd0aCwgMCkgOiBtaW4oaW50ZWdlciwgbGVuZ3RoKTtcbn07XG4iLCJ2YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yO1xuXG4vLyBgVG9CaWdJbnRgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2JpZ2ludFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgdmFyIHByaW0gPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgJ251bWJlcicpO1xuICBpZiAodHlwZW9mIHByaW0gPT0gJ251bWJlcicpIHRocm93ICRUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG51bWJlciB0byBiaWdpbnRcIik7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1iaWdpbnQgLS0gc2FmZVxuICByZXR1cm4gQmlnSW50KHByaW0pO1xufTtcbiIsInZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcblxuLy8gYFRvSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XG4gIHZhciBudW1iZXIgPSB0b0ludGVnZXJPckluZmluaXR5KGl0KTtcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XG4gIGlmIChudW1iZXIgIT09IGxlbmd0aCkgdGhyb3cgJFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCBvciBpbmRleCcpO1xuICByZXR1cm4gbGVuZ3RoO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgdHJ1bmMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC10cnVuYycpO1xuXG4vLyBgVG9JbnRlZ2VyT3JJbmZpbml0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvaW50ZWdlcm9yaW5maW5pdHlcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBudW1iZXIgPSArYXJndW1lbnQ7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogdHJ1bmMobnVtYmVyKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG5cbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gYFRvTGVuZ3RoYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyT3JJbmZpbml0eShhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG52YXIgJE9iamVjdCA9IE9iamVjdDtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiAkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgdG9Qb3NpdGl2ZUludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcG9zaXRpdmUtaW50ZWdlcicpO1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQllURVMpIHtcbiAgdmFyIG9mZnNldCA9IHRvUG9zaXRpdmVJbnRlZ2VyKGl0KTtcbiAgaWYgKG9mZnNldCAlIEJZVEVTKSB0aHJvdyAkUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0Jyk7XG4gIHJldHVybiBvZmZzZXQ7XG59O1xuIiwidmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpdCk7XG4gIGlmIChyZXN1bHQgPCAwKSB0aHJvdyAkUmFuZ2VFcnJvcihcIlRoZSBhcmd1bWVudCBjYW4ndCBiZSBsZXNzIHRoYW4gMFwiKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJpbWl0aXZlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgcHJlZikge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDtcbiAgdmFyIGV4b3RpY1RvUHJpbSA9IGdldE1ldGhvZChpbnB1dCwgVE9fUFJJTUlUSVZFKTtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKGV4b3RpY1RvUHJpbSkge1xuICAgIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnZGVmYXVsdCc7XG4gICAgcmVzdWx0ID0gY2FsbChleG90aWNUb1ByaW0sIGlucHV0LCBwcmVmKTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICB0aHJvdyAkVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xuICB9XG4gIGlmIChwcmVmID09PSB1bmRlZmluZWQpIHByZWYgPSAnbnVtYmVyJztcbiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpO1xufTtcbiIsInZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcblxuLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3Byb3BlcnR5a2V5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTtcbiAgcmV0dXJuIGlzU3ltYm9sKGtleSkgPyBrZXkgOiBrZXkgKyAnJztcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxudmFyICRTdHJpbmcgPSBTdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIGlmIChjbGFzc29mKGFyZ3VtZW50KSA9PT0gJ1N5bWJvbCcpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcbiAgcmV0dXJuICRTdHJpbmcoYXJndW1lbnQpO1xufTtcbiIsInZhciAkU3RyaW5nID0gU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB0cnkge1xuICAgIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gJ09iamVjdCc7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBpc0ludGVncmFsTnVtYmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXgnKTtcbnZhciB0b09mZnNldCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vZmZzZXQnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNTeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtc3ltYm9sJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBpc1Byb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKS5mO1xudmFyIHR5cGVkQXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20nKTtcbnZhciBmb3JFYWNoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZvckVhY2g7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmhlcml0LWlmLXJlcXVpcmVkJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgQXJyYXlCdWZmZXJQcm90b3R5cGUgPSBBcnJheUJ1ZmZlci5wcm90b3R5cGU7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5OQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTO1xudmFyIFRZUEVEX0FSUkFZX1RBRyA9IEFycmF5QnVmZmVyVmlld0NvcmUuVFlQRURfQVJSQVlfVEFHO1xudmFyIFR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLlR5cGVkQXJyYXk7XG52YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IEFycmF5QnVmZmVyVmlld0NvcmUuVHlwZWRBcnJheVByb3RvdHlwZTtcbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGlzVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuaXNUeXBlZEFycmF5O1xudmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoJztcblxudmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcbiAgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpW2tleV07XG4gIH0gfSk7XG59O1xuXG52YXIgaXNBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIga2xhc3M7XG4gIHJldHVybiBpc1Byb3RvdHlwZU9mKEFycmF5QnVmZmVyUHJvdG90eXBlLCBpdCkgfHwgKGtsYXNzID0gY2xhc3NvZihpdCkpID09ICdBcnJheUJ1ZmZlcicgfHwga2xhc3MgPT0gJ1NoYXJlZEFycmF5QnVmZmVyJztcbn07XG5cbnZhciBpc1R5cGVkQXJyYXlJbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICByZXR1cm4gaXNUeXBlZEFycmF5KHRhcmdldClcbiAgICAmJiAhaXNTeW1ib2woa2V5KVxuICAgICYmIGtleSBpbiB0YXJnZXRcbiAgICAmJiBpc0ludGVncmFsTnVtYmVyKCtrZXkpXG4gICAgJiYga2V5ID49IDA7XG59O1xuXG52YXIgd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xuICBrZXkgPSB0b1Byb3BlcnR5S2V5KGtleSk7XG4gIHJldHVybiBpc1R5cGVkQXJyYXlJbmRleCh0YXJnZXQsIGtleSlcbiAgICA/IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigyLCB0YXJnZXRba2V5XSlcbiAgICA6IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG59O1xuXG52YXIgd3JhcHBlZERlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpIHtcbiAga2V5ID0gdG9Qcm9wZXJ0eUtleShrZXkpO1xuICBpZiAoaXNUeXBlZEFycmF5SW5kZXgodGFyZ2V0LCBrZXkpXG4gICAgJiYgaXNPYmplY3QoZGVzY3JpcHRvcilcbiAgICAmJiBoYXNPd24oZGVzY3JpcHRvciwgJ3ZhbHVlJylcbiAgICAmJiAhaGFzT3duKGRlc2NyaXB0b3IsICdnZXQnKVxuICAgICYmICFoYXNPd24oZGVzY3JpcHRvciwgJ3NldCcpXG4gICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcbiAgICAmJiAhZGVzY3JpcHRvci5jb25maWd1cmFibGVcbiAgICAmJiAoIWhhc093bihkZXNjcmlwdG9yLCAnd3JpdGFibGUnKSB8fCBkZXNjcmlwdG9yLndyaXRhYmxlKVxuICAgICYmICghaGFzT3duKGRlc2NyaXB0b3IsICdlbnVtZXJhYmxlJykgfHwgZGVzY3JpcHRvci5lbnVtZXJhYmxlKVxuICApIHtcbiAgICB0YXJnZXRba2V5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2NyaXB0b3IpO1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIGlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykge1xuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gd3JhcHBlZEdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gd3JhcHBlZERlZmluZVByb3BlcnR5O1xuICAgIGFkZEdldHRlcihUeXBlZEFycmF5UHJvdG90eXBlLCAnYnVmZmVyJyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdieXRlT2Zmc2V0Jyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdieXRlTGVuZ3RoJyk7XG4gICAgYWRkR2V0dGVyKFR5cGVkQXJyYXlQcm90b3R5cGUsICdsZW5ndGgnKTtcbiAgfVxuXG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIHtcbiAgICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IHdyYXBwZWRHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgZGVmaW5lUHJvcGVydHk6IHdyYXBwZWREZWZpbmVQcm9wZXJ0eVxuICB9KTtcblxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCB3cmFwcGVyLCBDTEFNUEVEKSB7XG4gICAgdmFyIEJZVEVTID0gVFlQRS5tYXRjaCgvXFxkKyQvKVswXSAvIDg7XG4gICAgdmFyIENPTlNUUlVDVE9SX05BTUUgPSBUWVBFICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xuICAgIHZhciBHRVRURVIgPSAnZ2V0JyArIFRZUEU7XG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgVFlQRTtcbiAgICB2YXIgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3I7XG4gICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlO1xuICAgIHZhciBleHBvcnRlZCA9IHt9O1xuXG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgcmV0dXJuIGRhdGEudmlld1tHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLmJ5dGVPZmZzZXQsIHRydWUpO1xuICAgIH07XG5cbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpO1xuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gcm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweEZGID8gMHhGRiA6IHZhbHVlICYgMHhGRjtcbiAgICAgIGRhdGEudmlld1tTRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLmJ5dGVPZmZzZXQsIHZhbHVlLCB0cnVlKTtcbiAgICB9O1xuXG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcbiAgICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoYXQsIGluZGV4LCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykge1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgb2Zmc2V0LCAkbGVuZ3RoKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKTtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgdmFyIGJ5dGVPZmZzZXQgPSAwO1xuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGg7XG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xuICAgICAgICAgIGJ5dGVMZW5ndGggPSBsZW5ndGggKiBCWVRFUztcbiAgICAgICAgICBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIoYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheUJ1ZmZlcihkYXRhKSkge1xuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XG4gICAgICAgICAgYnl0ZU9mZnNldCA9IHRvT2Zmc2V0KG9mZnNldCwgQllURVMpO1xuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmICgkbGVuICUgQllURVMpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gYnl0ZU9mZnNldDtcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoIDwgMCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcbiAgICAgICAgICAgIGlmIChieXRlTGVuZ3RoICsgYnl0ZU9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuZ3RoID0gYnl0ZUxlbmd0aCAvIEJZVEVTO1xuICAgICAgICB9IGVsc2UgaWYgKGlzVHlwZWRBcnJheShkYXRhKSkge1xuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjYWxsKHR5cGVkQXJyYXlGcm9tLCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9XG4gICAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyLFxuICAgICAgICAgIGJ5dGVPZmZzZXQ6IGJ5dGVPZmZzZXQsXG4gICAgICAgICAgYnl0ZUxlbmd0aDogYnl0ZUxlbmd0aCxcbiAgICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICB2aWV3OiBuZXcgRGF0YVZpZXcoYnVmZmVyKVxuICAgICAgICB9KTtcbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSBhZGRFbGVtZW50KHRoYXQsIGluZGV4KyspO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoVHlwZWRBcnJheVByb3RvdHlwZSk7XG4gICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTKSB7XG4gICAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgZGF0YSwgdHlwZWRBcnJheU9mZnNldCwgJGxlbmd0aCkge1xuICAgICAgICBhbkluc3RhbmNlKGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUpO1xuICAgICAgICByZXR1cm4gaW5oZXJpdElmUmVxdWlyZWQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHJldHVybiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKHRvSW5kZXgoZGF0YSkpO1xuICAgICAgICAgIGlmIChpc0FycmF5QnVmZmVyKGRhdGEpKSByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG5ldyBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IoZGF0YSwgdG9PZmZzZXQodHlwZWRBcnJheU9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxuICAgICAgICAgICAgOiB0eXBlZEFycmF5T2Zmc2V0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEsIHRvT2Zmc2V0KHR5cGVkQXJyYXlPZmZzZXQsIEJZVEVTKSlcbiAgICAgICAgICAgICAgOiBuZXcgTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yKGRhdGEpO1xuICAgICAgICAgIGlmIChpc1R5cGVkQXJyYXkoZGF0YSkpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICAgIHJldHVybiBjYWxsKHR5cGVkQXJyYXlGcm9tLCBUeXBlZEFycmF5Q29uc3RydWN0b3IsIGRhdGEpO1xuICAgICAgICB9KCksIGR1bW15LCBUeXBlZEFycmF5Q29uc3RydWN0b3IpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChzZXRQcm90b3R5cGVPZikgc2V0UHJvdG90eXBlT2YoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBUeXBlZEFycmF5KTtcbiAgICAgIGZvckVhY2goZ2V0T3duUHJvcGVydHlOYW1lcyhOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3IpLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3IpKSB7XG4gICAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3Rvciwga2V5LCBOYXRpdmVUeXBlZEFycmF5Q29uc3RydWN0b3Jba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLmNvbnN0cnVjdG9yICE9PSBUeXBlZEFycmF5Q29uc3RydWN0b3IpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3JQcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIFR5cGVkQXJyYXlDb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKS5UeXBlZEFycmF5Q29uc3RydWN0b3IgPSBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbiAgICBpZiAoVFlQRURfQVJSQVlfVEFHKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlLCBUWVBFRF9BUlJBWV9UQUcsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgIH1cblxuICAgIHZhciBGT1JDRUQgPSBUeXBlZEFycmF5Q29uc3RydWN0b3IgIT0gTmF0aXZlVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4gICAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBUeXBlZEFycmF5Q29uc3RydWN0b3I7XG5cbiAgICAkKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIH0sIGV4cG9ydGVkKTtcblxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcikpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShUeXBlZEFycmF5Q29uc3RydWN0b3IsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XG4gICAgfVxuXG4gICAgaWYgKCEoQllURVNfUEVSX0VMRU1FTlQgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yUHJvdG90eXBlKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KFR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSwgQllURVNfUEVSX0VMRU1FTlQsIEJZVEVTKTtcbiAgICB9XG5cbiAgICBzZXRTcGVjaWVzKENPTlNUUlVDVE9SX05BTUUpO1xuICB9O1xufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tbmV3IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1M7XG5cbnZhciBBcnJheUJ1ZmZlciA9IGdsb2JhbC5BcnJheUJ1ZmZlcjtcbnZhciBJbnQ4QXJyYXkgPSBnbG9iYWwuSW50OEFycmF5O1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIEludDhBcnJheSgxKTtcbn0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5ldyBJbnQ4QXJyYXkoLTEpO1xufSkgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgbmV3IEludDhBcnJheSgpO1xuICBuZXcgSW50OEFycmF5KG51bGwpO1xuICBuZXcgSW50OEFycmF5KDEuNSk7XG4gIG5ldyBJbnQ4QXJyYXkoaXRlcmFibGUpO1xufSwgdHJ1ZSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBTYWZhcmkgKDExKykgYnVnIC0gYSByZWFzb24gd2h5IGV2ZW4gU2FmYXJpIDEzIHNob3VsZCBsb2FkIGEgdHlwZWQgYXJyYXkgcG9seWZpbGxcbiAgcmV0dXJuIG5ldyBJbnQ4QXJyYXkobmV3IEFycmF5QnVmZmVyKDIpLCAxLCB1bmRlZmluZWQpLmxlbmd0aCAhPT0gMTtcbn0pO1xuIiwidmFyIGFycmF5RnJvbUNvbnN0cnVjdG9yQW5kTGlzdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mcm9tLWNvbnN0cnVjdG9yLWFuZC1saXN0Jyk7XG52YXIgdHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGluc3RhbmNlLCBsaXN0KSB7XG4gIHJldHVybiBhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QodHlwZWRBcnJheVNwZWNpZXNDb25zdHJ1Y3RvcihpbnN0YW5jZSksIGxpc3QpO1xufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIGlzQmlnSW50QXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYmlnLWludC1hcnJheScpO1xudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgdG9CaWdJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYmlnLWludCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwZm4sIHRoaXNBcmcgKi8pIHtcbiAgdmFyIEMgPSBhQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBPID0gdG9PYmplY3Qoc291cmNlKTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpLCBsZW5ndGgsIHJlc3VsdCwgdGhpc0lzQmlnSW50QXJyYXksIHZhbHVlLCBzdGVwLCBpdGVyYXRvciwgbmV4dDtcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICYmICFpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSB7XG4gICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgTyA9IFtdO1xuICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgICAgTy5wdXNoKHN0ZXAudmFsdWUpO1xuICAgIH1cbiAgfVxuICBpZiAobWFwcGluZyAmJiBhcmd1bWVudHNMZW5ndGggPiAyKSB7XG4gICAgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNbMl0pO1xuICB9XG4gIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICByZXN1bHQgPSBuZXcgKGFUeXBlZEFycmF5Q29uc3RydWN0b3IoQykpKGxlbmd0aCk7XG4gIHRoaXNJc0JpZ0ludEFycmF5ID0gaXNCaWdJbnRBcnJheShyZXN1bHQpO1xuICBmb3IgKGkgPSAwOyBsZW5ndGggPiBpOyBpKyspIHtcbiAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XG4gICAgLy8gRkYzMC0gdHlwZWQgYXJyYXlzIGRvZXNuJ3QgcHJvcGVybHkgY29udmVydCBvYmplY3RzIHRvIHR5cGVkIGFycmF5IHZhbHVlc1xuICAgIHJlc3VsdFtpXSA9IHRoaXNJc0JpZ0ludEFycmF5ID8gdG9CaWdJbnQodmFsdWUpIDogK3ZhbHVlO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbnZhciBhVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheUNvbnN0cnVjdG9yO1xudmFyIGdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IEFycmF5QnVmZmVyVmlld0NvcmUuZ2V0VHlwZWRBcnJheUNvbnN0cnVjdG9yO1xuXG4vLyBhIHBhcnQgb2YgYFR5cGVkQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyN0eXBlZGFycmF5LXNwZWNpZXMtY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5KSB7XG4gIHJldHVybiBhVHlwZWRBcnJheUNvbnN0cnVjdG9yKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbEFycmF5LCBnZXRUeXBlZEFycmF5Q29uc3RydWN0b3Iob3JpZ2luYWxBcnJheSkpKTtcbn07XG4iLCJ2YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG52YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyB0b1N0cmluZygrK2lkICsgcG9zdGZpeCwgMzYpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHVuaWNvcm4vcmVsYXRpdmUtdXJsLXN0eWxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7XG4gIHZhciBzZWFyY2hQYXJhbXMgPSB1cmwuc2VhcmNoUGFyYW1zO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7XG4gIHNlYXJjaFBhcmFtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XG4gICAgc2VhcmNoUGFyYW1zWydkZWxldGUnXSgnYicpO1xuICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAoSVNfUFVSRSAmJiAhdXJsLnRvSlNPTilcbiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnRcbiAgICB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnXG4gICAgfHwgc2VhcmNoUGFyYW1zLmdldCgnYycpICE9PSAnMydcbiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MSdcbiAgICB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXVxuICAgIC8vIHRocm93cyBpbiBFZGdlXG4gICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnXG4gICAgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJ1xuICAgIC8vIG5vdCBwdW55Y29kZWQgaW4gRWRnZVxuICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJ1xuICAgIC8vIG5vdCBlc2NhcGVkIGluIENocm9tZSA2Mi1cbiAgICB8fCBuZXcgVVJMKCdodHRwOi8vYSPQsScpLmhhc2ggIT09ICcjJUQwJUIxJ1xuICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni1cbiAgICB8fCByZXN1bHQgIT09ICdhMWMzJ1xuICAgIC8vIHRocm93cyBpbiBTYWZhcmlcbiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnO1xufSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBlcy9uby1zeW1ib2wgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gICYmICFTeW1ib2wuc2hhbVxuICAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVjggfiBDaHJvbWUgMzYtXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMzM0XG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgJ3Byb3RvdHlwZScsIHtcbiAgICB2YWx1ZTogNDIsXG4gICAgd3JpdGFibGU6IGZhbHNlXG4gIH0pLnByb3RvdHlwZSAhPSA0Mjtcbn0pO1xuIiwidmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHtcbiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyAkVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpO1xuICByZXR1cm4gcGFzc2VkO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzQ2FsbGFibGUoV2Vha01hcCkgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KFN0cmluZyhXZWFrTWFwKSk7XG4iLCJ2YXIgcGF0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wYXRoJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhc093bihTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbFsnZm9yJ10gfHwgU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhc093bihXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpKSB7XG4gICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKVxuICAgICAgPyBTeW1ib2xbbmFtZV1cbiAgICAgIDogY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiLy8gYSBzdHJpbmcgb2YgYWxsIHZhbGlkIHVuaWNvZGUgd2hpdGVzcGFjZXNcbm1vZHVsZS5leHBvcnRzID0gJ1xcdTAwMDlcXHUwMDBBXFx1MDAwQlxcdTAwMENcXHUwMDBEXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MjAwMFxcdTIwMDFcXHUyMDAyJyArXG4gICdcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtc3BlY2llcycpO1xuXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcbnZhciBBcnJheUJ1ZmZlciA9IGFycmF5QnVmZmVyTW9kdWxlW0FSUkFZX0JVRkZFUl07XG52YXIgTmF0aXZlQXJyYXlCdWZmZXIgPSBnbG9iYWxbQVJSQVlfQlVGRkVSXTtcblxuLy8gYEFycmF5QnVmZmVyYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci1jb25zdHJ1Y3RvclxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGZvcmNlZDogTmF0aXZlQXJyYXlCdWZmZXIgIT09IEFycmF5QnVmZmVyIH0sIHtcbiAgQXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyXG59KTtcblxuc2V0U3BlY2llcyhBUlJBWV9CVUZGRVIpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgQXJyYXlCdWZmZXJNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIEFycmF5QnVmZmVyID0gQXJyYXlCdWZmZXJNb2R1bGUuQXJyYXlCdWZmZXI7XG52YXIgRGF0YVZpZXcgPSBBcnJheUJ1ZmZlck1vZHVsZS5EYXRhVmlldztcbnZhciBEYXRhVmlld1Byb3RvdHlwZSA9IERhdGFWaWV3LnByb3RvdHlwZTtcbnZhciBuYXRpdmVBcnJheUJ1ZmZlclNsaWNlID0gdW5jdXJyeVRoaXMoQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKTtcbnZhciBnZXRVaW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLmdldFVpbnQ4KTtcbnZhciBzZXRVaW50OCA9IHVuY3VycnlUaGlzKERhdGFWaWV3UHJvdG90eXBlLnNldFVpbnQ4KTtcblxudmFyIElOQ09SUkVDVF9TTElDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICFuZXcgQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xufSk7XG5cbi8vIGBBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheWJ1ZmZlci5wcm90b3R5cGUuc2xpY2VcbiQoeyB0YXJnZXQ6ICdBcnJheUJ1ZmZlcicsIHByb3RvOiB0cnVlLCB1bnNhZmU6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX1NMSUNFIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICBpZiAobmF0aXZlQXJyYXlCdWZmZXJTbGljZSAmJiBlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5hdGl2ZUFycmF5QnVmZmVyU2xpY2UoYW5PYmplY3QodGhpcyksIHN0YXJ0KTsgLy8gRkYgZml4XG4gICAgfVxuICAgIHZhciBsZW5ndGggPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xuICAgIHZhciBmaXJzdCA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTtcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpO1xuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XG4gICAgdmFyIHZpZXdTb3VyY2UgPSBuZXcgRGF0YVZpZXcodGhpcyk7XG4gICAgdmFyIHZpZXdUYXJnZXQgPSBuZXcgRGF0YVZpZXcocmVzdWx0KTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xuICAgICAgc2V0VWludDgodmlld1RhcmdldCwgaW5kZXgrKywgZ2V0VWludDgodmlld1NvdXJjZSwgZmlyc3QrKykpO1xuICAgIH0gcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXknKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaGFzLXNwZWNpZXMtc3VwcG9ydCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIFY4X1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcblxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcblxuLy8gV2UgY2FuJ3QgdXNlIHRoaXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4vLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzY3OVxudmFyIElTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQgPSBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IFtdO1xuICBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTtcbiAgcmV0dXJuIGFycmF5LmNvbmNhdCgpWzBdICE9PSBhcnJheTtcbn0pO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuY29uY2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvbmNhdFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQGlzQ29uY2F0U3ByZWFkYWJsZSBhbmQgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgYXJpdHk6IDEsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKEUpO1xuICAgICAgICBkb2VzTm90RXhjZWVkU2FmZUludGVnZXIobiArIGxlbik7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBsZW47IGsrKywgbisrKSBpZiAoayBpbiBFKSBjcmVhdGVQcm9wZXJ0eShBLCBuLCBFW2tdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihuICsgMSk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjb3B5V2l0aGluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWNvcHktd2l0aGluJyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmNvcHl3aXRoaW5cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgY29weVdpdGhpbjogY29weVdpdGhpblxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2NvcHlXaXRoaW4nKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZpbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZmlsbCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWxsXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGZpbGw6IGZpbGxcbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmaWxsJyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGZpbmRJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maW5kSW5kZXg7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkRfSU5ERVggPSAnZmluZEluZGV4JztcbnZhciBTS0lQU19IT0xFUyA9IHRydWU7XG5cbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXG5pZiAoRklORF9JTkRFWCBpbiBbXSkgQXJyYXkoMSlbRklORF9JTkRFWF0oZnVuY3Rpb24gKCkgeyBTS0lQU19IT0xFUyA9IGZhbHNlOyB9KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZGluZGV4XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB9LCB7XG4gIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgcmV0dXJuICRmaW5kSW5kZXgodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EX0lOREVYKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRmaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmQ7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcblxudmFyIEZJTkQgPSAnZmluZCc7XG52YXIgU0tJUFNfSE9MRVMgPSB0cnVlO1xuXG4vLyBTaG91bGRuJ3Qgc2tpcCBob2xlc1xuaWYgKEZJTkQgaW4gW10pIEFycmF5KDEpW0ZJTkRdKGZ1bmN0aW9uICgpIHsgU0tJUFNfSE9MRVMgPSBmYWxzZTsgfSk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maW5kXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTS0lQU19IT0xFUyB9LCB7XG4gIGZpbmQ6IGZ1bmN0aW9uIGZpbmQoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcyhGSU5EKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZsYXRNYXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmxhdG1hcFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUgfSwge1xuICBmbGF0TWFwOiBmdW5jdGlvbiBmbGF0TWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgc291cmNlTGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIEE7XG4gICAgYUNhbGxhYmxlKGNhbGxiYWNrZm4pO1xuICAgIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XG4gICAgQS5sZW5ndGggPSBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgMSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmxhdHRlbi1pbnRvLWFycmF5Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UnKTtcbnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHknKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mbGF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZsYXRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgZmxhdDogZnVuY3Rpb24gZmxhdCgvKiBkZXB0aEFyZyA9IDEgKi8pIHtcbiAgICB2YXIgZGVwdGhBcmcgPSBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XG4gICAgdmFyIHNvdXJjZUxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pO1xuICAgIHZhciBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xuICAgIEEubGVuZ3RoID0gZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIGRlcHRoQXJnID09PSB1bmRlZmluZWQgPyAxIDogdG9JbnRlZ2VyT3JJbmZpbml0eShkZXB0aEFyZykpO1xuICAgIHJldHVybiBBO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZyb20gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZnJvbScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSAhY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktZnJvbSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBBcnJheS5mcm9tKGl0ZXJhYmxlKTtcbn0pO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbiQoeyB0YXJnZXQ6ICdBcnJheScsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIGZyb206IGZyb21cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGluY2x1ZGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5jbHVkZXM7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBGRjk5KyBidWdcbnZhciBCUk9LRU5fT05fU1BBUlNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gIUFycmF5KDEpLmluY2x1ZGVzKCk7XG59KTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogQlJPS0VOX09OX1NQQVJTRSB9LCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdpbmNsdWRlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgZXMvbm8tYXJyYXktcHJvdG90eXBlLWluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcgKi9cbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UnKTtcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG5cbnZhciBuYXRpdmVJbmRleE9mID0gdW5jdXJyeVRoaXMoW10uaW5kZXhPZik7XG5cbnZhciBORUdBVElWRV9aRVJPID0gISFuYXRpdmVJbmRleE9mICYmIDEgLyBuYXRpdmVJbmRleE9mKFsxXSwgMSwgLTApIDwgMDtcbnZhciBGT1JDRUQgPSBORUdBVElWRV9aRVJPIHx8ICFhcnJheU1ldGhvZElzU3RyaWN0KCdpbmRleE9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgdmFyIGZyb21JbmRleCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHJldHVybiBORUdBVElWRV9aRVJPXG4gICAgICAvLyBjb252ZXJ0IC0wIHRvICswXG4gICAgICA/IG5hdGl2ZUluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgZnJvbUluZGV4KSB8fCAwXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGZyb21JbmRleCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZW50cmllc1xuLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQGl0ZXJhdG9yXG4vLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpO1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoaW5kZXgsIGZhbHNlKTtcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHRhcmdldFtpbmRleF0sIGZhbHNlKTtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QoW2luZGV4LCB0YXJnZXRbaW5kZXhdXSwgZmFsc2UpO1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG52YXIgdmFsdWVzID0gSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG5cbi8vIFY4IH4gQ2hyb21lIDQ1LSBidWdcbmlmICghSVNfUFVSRSAmJiBERVNDUklQVE9SUyAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7XG4gIGRlZmluZVByb3BlcnR5KHZhbHVlcywgJ25hbWUnLCB7IHZhbHVlOiAndmFsdWVzJyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxudmFyIEVTM19TVFJJTkdTID0gSW5kZXhlZE9iamVjdCAhPSBPYmplY3Q7XG52YXIgRk9SQ0VEID0gRVMzX1NUUklOR1MgfHwgIWFycmF5TWV0aG9kSXNTdHJpY3QoJ2pvaW4nLCAnLCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmpvaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuam9pblxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgICByZXR1cm4gbmF0aXZlSm9pbih0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsYXN0SW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1sYXN0LWluZGV4LW9mJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubGFzdGluZGV4b2Zcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1hcnJheS1wcm90b3R5cGUtbGFzdGluZGV4b2YgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGxhc3RJbmRleE9mICE9PSBbXS5sYXN0SW5kZXhPZiB9LCB7XG4gIGxhc3RJbmRleE9mOiBsYXN0SW5kZXhPZlxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG5cbnZhciAkQXJyYXkgPSBBcnJheTtcblxudmFyIElTTlRfR0VORVJJQyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktb2YgLS0gc2FmZVxuICByZXR1cm4gISgkQXJyYXkub2YuY2FsbChGKSBpbnN0YW5jZW9mIEYpO1xufSk7XG5cbi8vIGBBcnJheS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5Lm9mXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU05UX0dFTkVSSUMgfSwge1xuICBvZjogZnVuY3Rpb24gb2YoLyogLi4uYXJncyAqLykge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoaXNDb25zdHJ1Y3Rvcih0aGlzKSA/IHRoaXMgOiAkQXJyYXkpKGFyZ3VtZW50c0xlbmd0aCk7XG4gICAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBhcmd1bWVudHNMZW5ndGg7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcmVkdWNlUmlnaHQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktcmVkdWNlJykucmlnaHQ7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgQ0hST01FX1ZFUlNJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbi8vIENocm9tZSA4MC04MiBoYXMgYSBjcml0aWNhbCBidWdcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTEwNDk5ODJcbnZhciBDSFJPTUVfQlVHID0gIUlTX05PREUgJiYgQ0hST01FX1ZFUlNJT04gPiA3OSAmJiBDSFJPTUVfVkVSU0lPTiA8IDgzO1xudmFyIEZPUkNFRCA9IENIUk9NRV9CVUcgfHwgIWFycmF5TWV0aG9kSXNTdHJpY3QoJ3JlZHVjZVJpZ2h0Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlcmlnaHRcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIHJlZHVjZVJpZ2h0OiBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgcmV0dXJuICRyZWR1Y2VSaWdodCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xudmFyIENIUk9NRV9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG4vLyBDaHJvbWUgODAtODIgaGFzIGEgY3JpdGljYWwgYnVnXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0xMDQ5OTgyXG52YXIgQ0hST01FX0JVRyA9ICFJU19OT0RFICYmIENIUk9NRV9WRVJTSU9OID4gNzkgJiYgQ0hST01FX1ZFUlNJT04gPCA4MztcbnZhciBGT1JDRUQgPSBDSFJPTUVfQlVHIHx8ICFhcnJheU1ldGhvZElzU3RyaWN0KCdyZWR1Y2UnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZWR1Y2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUucmVkdWNlXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgbGVuZ3RoLCBsZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbnZhciBuYXRpdmVSZXZlcnNlID0gdW5jdXJyeVRoaXMoW10ucmV2ZXJzZSk7XG52YXIgdGVzdCA9IFsxLCAyXTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5yZXZlcnNlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnJldmVyc2Vcbi8vIGZpeCBmb3IgU2FmYXJpIDEyLjAgYnVnXG4vLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTg4Nzk0XG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBTdHJpbmcodGVzdCkgPT09IFN0cmluZyh0ZXN0LnJldmVyc2UoKSkgfSwge1xuICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWFzc2lnbiAtLSBkaXJ0eSBoYWNrXG4gICAgaWYgKGlzQXJyYXkodGhpcykpIHRoaXMubGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgcmV0dXJuIG5hdGl2ZVJldmVyc2UodGhpcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3InKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciBuYXRpdmVTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZScpO1xuXG52YXIgSEFTX1NQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ3NsaWNlJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgJEFycmF5ID0gQXJyYXk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGsgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbmd0aCk7XG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IGVuZCwgbGVuZ3RoKTtcbiAgICAvLyBpbmxpbmUgYEFycmF5U3BlY2llc0NyZWF0ZWAgZm9yIHVzYWdlIG5hdGl2ZSBgQXJyYXkjc2xpY2VgIHdoZXJlIGl0J3MgcG9zc2libGVcbiAgICB2YXIgQ29uc3RydWN0b3IsIHJlc3VsdCwgbjtcbiAgICBpZiAoaXNBcnJheShPKSkge1xuICAgICAgQ29uc3RydWN0b3IgPSBPLmNvbnN0cnVjdG9yO1xuICAgICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICAgIGlmIChpc0NvbnN0cnVjdG9yKENvbnN0cnVjdG9yKSAmJiAoQ29uc3RydWN0b3IgPT09ICRBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gJEFycmF5IHx8IENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZVNsaWNlKE8sIGssIGZpbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdCA9IG5ldyAoQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCA/ICRBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZScpO1xudmFyIGRlbGV0ZVByb3BlcnR5T3JUaHJvdyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWxldGUtcHJvcGVydHktb3ItdGhyb3cnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGludGVybmFsU29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG52YXIgYXJyYXlNZXRob2RJc1N0cmljdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0Jyk7XG52YXIgRkYgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWZmLXZlcnNpb24nKTtcbnZhciBJRV9PUl9FREdFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pZS1vci1lZGdlJyk7XG52YXIgVjggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24nKTtcbnZhciBXRUJLSVQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXdlYmtpdC12ZXJzaW9uJyk7XG5cbnZhciB0ZXN0ID0gW107XG52YXIgbmF0aXZlU29ydCA9IHVuY3VycnlUaGlzKHRlc3Quc29ydCk7XG52YXIgcHVzaCA9IHVuY3VycnlUaGlzKHRlc3QucHVzaCk7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgU1RBQkxFX1NPUlQgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBmZWF0dXJlIGRldGVjdGlvbiBjYW4gYmUgdG9vIHNsb3csIHNvIGNoZWNrIGVuZ2luZXMgdmVyc2lvbnNcbiAgaWYgKFY4KSByZXR1cm4gVjggPCA3MDtcbiAgaWYgKEZGICYmIEZGID4gMykgcmV0dXJuO1xuICBpZiAoSUVfT1JfRURHRSkgcmV0dXJuIHRydWU7XG4gIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDM7XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuICB2YXIgY29kZSwgY2hyLCB2YWx1ZSwgaW5kZXg7XG5cbiAgLy8gZ2VuZXJhdGUgYW4gYXJyYXkgd2l0aCBtb3JlIDUxMiBlbGVtZW50cyAoQ2hha3JhIGFuZCBvbGQgVjggZmFpbHMgb25seSBpbiB0aGlzIGNhc2UpXG4gIGZvciAoY29kZSA9IDY1OyBjb2RlIDwgNzY7IGNvZGUrKykge1xuICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG5cbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgIGNhc2UgNjY6IGNhc2UgNjk6IGNhc2UgNzA6IGNhc2UgNzI6IHZhbHVlID0gMzsgYnJlYWs7XG4gICAgICBjYXNlIDY4OiBjYXNlIDcxOiB2YWx1ZSA9IDQ7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogdmFsdWUgPSAyO1xuICAgIH1cblxuICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ3OyBpbmRleCsrKSB7XG4gICAgICB0ZXN0LnB1c2goeyBrOiBjaHIgKyBpbmRleCwgdjogdmFsdWUgfSk7XG4gICAgfVxuICB9XG5cbiAgdGVzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBiLnYgLSBhLnY7IH0pO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHRlc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gdGVzdFtpbmRleF0uay5jaGFyQXQoMCk7XG4gICAgaWYgKHJlc3VsdC5jaGFyQXQocmVzdWx0Lmxlbmd0aCAtIDEpICE9PSBjaHIpIHJlc3VsdCArPSBjaHI7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICE9PSAnREdCRUZIQUNJSksnO1xufSk7XG5cbnZhciBGT1JDRUQgPSBGQUlMU19PTl9VTkRFRklORUQgfHwgIUZBSUxTX09OX05VTEwgfHwgIVNUUklDVF9NRVRIT0QgfHwgIVNUQUJMRV9TT1JUO1xuXG52YXIgZ2V0U29ydENvbXBhcmUgPSBmdW5jdGlvbiAoY29tcGFyZWZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoeCwgeSkge1xuICAgIGlmICh5ID09PSB1bmRlZmluZWQpIHJldHVybiAtMTtcbiAgICBpZiAoeCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMTtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIHJldHVybiArY29tcGFyZWZuKHgsIHkpIHx8IDA7XG4gICAgcmV0dXJuIHRvU3RyaW5nKHgpID4gdG9TdHJpbmcoeSkgPyAxIDogLTE7XG4gIH07XG59O1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICBpZiAoY29tcGFyZWZuICE9PSB1bmRlZmluZWQpIGFDYWxsYWJsZShjb21wYXJlZm4pO1xuXG4gICAgdmFyIGFycmF5ID0gdG9PYmplY3QodGhpcyk7XG5cbiAgICBpZiAoU1RBQkxFX1NPUlQpIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZCA/IG5hdGl2ZVNvcnQoYXJyYXkpIDogbmF0aXZlU29ydChhcnJheSwgY29tcGFyZWZuKTtcblxuICAgIHZhciBpdGVtcyA9IFtdO1xuICAgIHZhciBhcnJheUxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKGFycmF5KTtcbiAgICB2YXIgaXRlbXNMZW5ndGgsIGluZGV4O1xuXG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgYXJyYXlMZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIGlmIChpbmRleCBpbiBhcnJheSkgcHVzaChpdGVtcywgYXJyYXlbaW5kZXhdKTtcbiAgICB9XG5cbiAgICBpbnRlcm5hbFNvcnQoaXRlbXMsIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xuXG4gICAgaXRlbXNMZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShpdGVtcyk7XG4gICAgaW5kZXggPSAwO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgaXRlbXNMZW5ndGgpIGFycmF5W2luZGV4XSA9IGl0ZW1zW2luZGV4KytdO1xuICAgIHdoaWxlIChpbmRleCA8IGFycmF5TGVuZ3RoKSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coYXJyYXksIGluZGV4KyspO1xuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG59KTtcbiIsInZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG5cbi8vIGBBcnJheVtAQHNwZWNpZXNdYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LWFycmF5LUBAc3BlY2llc1xuc2V0U3BlY2llcygnQXJyYXknKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgc2V0QXJyYXlMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2V0LWxlbmd0aCcpO1xudmFyIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2VzLW5vdC1leGNlZWQtc2FmZS1pbnRlZ2VyJyk7XG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZGVsZXRlUHJvcGVydHlPclRocm93ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlbGV0ZS1wcm9wZXJ0eS1vci10aHJvdycpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzcGxpY2UnKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNwbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zcGxpY2Vcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBzcGVjaWVzXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhSEFTX1NQRUNJRVNfU1VQUE9SVCB9LCB7XG4gIHNwbGljZTogZnVuY3Rpb24gc3BsaWNlKHN0YXJ0LCBkZWxldGVDb3VudCAvKiAsIC4uLml0ZW1zICovKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuID0gbGVuZ3RoT2ZBcnJheUxpa2UoTyk7XG4gICAgdmFyIGFjdHVhbFN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBpbnNlcnRDb3VudCwgYWN0dWFsRGVsZXRlQ291bnQsIEEsIGssIGZyb20sIHRvO1xuICAgIGlmIChhcmd1bWVudHNMZW5ndGggPT09IDApIHtcbiAgICAgIGluc2VydENvdW50ID0gYWN0dWFsRGVsZXRlQ291bnQgPSAwO1xuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzTGVuZ3RoID09PSAxKSB7XG4gICAgICBpbnNlcnRDb3VudCA9IDA7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IGxlbiAtIGFjdHVhbFN0YXJ0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnNlcnRDb3VudCA9IGFyZ3VtZW50c0xlbmd0aCAtIDI7XG4gICAgICBhY3R1YWxEZWxldGVDb3VudCA9IG1pbihtYXgodG9JbnRlZ2VyT3JJbmZpbml0eShkZWxldGVDb3VudCksIDApLCBsZW4gLSBhY3R1YWxTdGFydCk7XG4gICAgfVxuICAgIGRvZXNOb3RFeGNlZWRTYWZlSW50ZWdlcihsZW4gKyBpbnNlcnRDb3VudCAtIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIGFjdHVhbERlbGV0ZUNvdW50KTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0dWFsRGVsZXRlQ291bnQ7IGsrKykge1xuICAgICAgZnJvbSA9IGFjdHVhbFN0YXJ0ICsgaztcbiAgICAgIGlmIChmcm9tIGluIE8pIGNyZWF0ZVByb3BlcnR5KEEsIGssIE9bZnJvbV0pO1xuICAgIH1cbiAgICBBLmxlbmd0aCA9IGFjdHVhbERlbGV0ZUNvdW50O1xuICAgIGlmIChpbnNlcnRDb3VudCA8IGFjdHVhbERlbGV0ZUNvdW50KSB7XG4gICAgICBmb3IgKGsgPSBhY3R1YWxTdGFydDsgayA8IGxlbiAtIGFjdHVhbERlbGV0ZUNvdW50OyBrKyspIHtcbiAgICAgICAgZnJvbSA9IGsgKyBhY3R1YWxEZWxldGVDb3VudDtcbiAgICAgICAgdG8gPSBrICsgaW5zZXJ0Q291bnQ7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgICAgfVxuICAgICAgZm9yIChrID0gbGVuOyBrID4gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudDsgay0tKSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgayAtIDEpO1xuICAgIH0gZWxzZSBpZiAoaW5zZXJ0Q291bnQgPiBhY3R1YWxEZWxldGVDb3VudCkge1xuICAgICAgZm9yIChrID0gbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQ7IGsgPiBhY3R1YWxTdGFydDsgay0tKSB7XG4gICAgICAgIGZyb20gPSBrICsgYWN0dWFsRGVsZXRlQ291bnQgLSAxO1xuICAgICAgICB0byA9IGsgKyBpbnNlcnRDb3VudCAtIDE7XG4gICAgICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcbiAgICAgICAgZWxzZSBkZWxldGVQcm9wZXJ0eU9yVGhyb3coTywgdG8pO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSAwOyBrIDwgaW5zZXJ0Q291bnQ7IGsrKykge1xuICAgICAgT1trICsgYWN0dWFsU3RhcnRdID0gYXJndW1lbnRzW2sgKyAyXTtcbiAgICB9XG4gICAgc2V0QXJyYXlMZW5ndGgoTywgbGVuIC0gYWN0dWFsRGVsZXRlQ291bnQgKyBpbnNlcnRDb3VudCk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbn0pO1xuIiwiLy8gdGhpcyBtZXRob2Qgd2FzIGFkZGVkIHRvIHVuc2NvcGFibGVzIGFmdGVyIGltcGxlbWVudGF0aW9uXG4vLyBpbiBwb3B1bGFyIGVuZ2luZXMsIHNvIGl0J3MgbW92ZWQgdG8gYSBzZXBhcmF0ZSBtb2R1bGVcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcycpO1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdmbGF0TWFwJyk7XG4iLCIvLyB0aGlzIG1ldGhvZCB3YXMgYWRkZWQgdG8gdW5zY29wYWJsZXMgYWZ0ZXIgaW1wbGVtZW50YXRpb25cbi8vIGluIHBvcHVsYXIgZW5naW5lcywgc28gaXQncyBtb3ZlZCB0byBhIHNlcGFyYXRlIG1vZHVsZVxudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2ZsYXQnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcbn0pO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9KU09OYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZGF0ZS5wcm90b3R5cGUudG9qc29uXG4kKHsgdGFyZ2V0OiAnRGF0ZScsIHByb3RvOiB0cnVlLCBhcml0eTogMSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTihrZXkpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8sICdudW1iZXInKTtcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xuICB9XG59KTtcbiIsInZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGF0ZVRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RhdGUtdG8tcHJpbWl0aXZlJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgRGF0ZVByb3RvdHlwZSA9IERhdGUucHJvdG90eXBlO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGVbQEB0b1ByaW1pdGl2ZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS1AQHRvcHJpbWl0aXZlXG5pZiAoIWhhc093bihEYXRlUHJvdG90eXBlLCBUT19QUklNSVRJVkUpKSB7XG4gIGRlZmluZUJ1aWx0SW4oRGF0ZVByb3RvdHlwZSwgVE9fUFJJTUlUSVZFLCBkYXRlVG9QcmltaXRpdmUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBtYWtlQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYWtlLWJ1aWx0LWluJyk7XG5cbnZhciBIQVNfSU5TVEFOQ0UgPSB3ZWxsS25vd25TeW1ib2woJ2hhc0luc3RhbmNlJyk7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG5cbi8vIGBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUtQEBoYXNpbnN0YW5jZVxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEZ1bmN0aW9uUHJvdG90eXBlLCBIQVNfSU5TVEFOQ0UsIHsgdmFsdWU6IG1ha2VCdWlsdEluKGZ1bmN0aW9uIChPKSB7XG4gICAgaWYgKCFpc0NhbGxhYmxlKHRoaXMpIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciBQID0gdGhpcy5wcm90b3R5cGU7XG4gICAgaWYgKCFpc09iamVjdChQKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xuICAgIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XG4gICAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKFAgPT09IE8pIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSwgSEFTX0lOU1RBTkNFKSB9KTtcbn1cbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZVTkNUSU9OX05BTUVfRVhJU1RTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLW5hbWUnKS5FWElTVFM7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBmdW5jdGlvblRvU3RyaW5nID0gdW5jdXJyeVRoaXMoRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmcpO1xudmFyIG5hbWVSRSA9IC9mdW5jdGlvblxcYig/Olxcc3xcXC9cXCpbXFxTXFxzXSo/XFwqXFwvfFxcL1xcL1teXFxuXFxyXSpbXFxuXFxyXSspKihbXlxccygvXSopLztcbnZhciByZWdFeHBFeGVjID0gdW5jdXJyeVRoaXMobmFtZVJFLmV4ZWMpO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIUZVTkNUSU9OX05BTUVfRVhJU1RTKSB7XG4gIGRlZmluZVByb3BlcnR5KEZ1bmN0aW9uUHJvdG90eXBlLCBOQU1FLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlZ0V4cEV4ZWMobmFtZVJFLCBmdW5jdGlvblRvU3RyaW5nKHRoaXMpKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG5cbnZhciAkc3RyaW5naWZ5ID0gZ2V0QnVpbHRJbignSlNPTicsICdzdHJpbmdpZnknKTtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBudW1iZXJUb1N0cmluZyA9IHVuY3VycnlUaGlzKDEuMC50b1N0cmluZyk7XG5cbnZhciB0ZXN0ZXIgPSAvW1xcdUQ4MDAtXFx1REZGRl0vZztcbnZhciBsb3cgPSAvXltcXHVEODAwLVxcdURCRkZdJC87XG52YXIgaGkgPSAvXltcXHVEQzAwLVxcdURGRkZdJC87XG5cbnZhciBXUk9OR19TWU1CT0xTX0NPTlZFUlNJT04gPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBzeW1ib2wgPSBnZXRCdWlsdEluKCdTeW1ib2wnKSgpO1xuICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICByZXR1cm4gJHN0cmluZ2lmeShbc3ltYm9sXSkgIT0gJ1tudWxsXSdcbiAgICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcbiAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICAgIHx8ICRzdHJpbmdpZnkoT2JqZWN0KHN5bWJvbCkpICE9ICd7fSc7XG59KTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtd2VsbC1mb3JtZWQtc3RyaW5naWZ5XG52YXIgSUxMX0ZPUk1FRF9VTklDT0RFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJHN0cmluZ2lmeSgnXFx1REYwNlxcdUQ4MzQnKSAhPT0gJ1wiXFxcXHVkZjA2XFxcXHVkODM0XCInXG4gICAgfHwgJHN0cmluZ2lmeSgnXFx1REVBRCcpICE9PSAnXCJcXFxcdWRlYWRcIic7XG59KTtcblxudmFyIHN0cmluZ2lmeVdpdGhTeW1ib2xzRml4ID0gZnVuY3Rpb24gKGl0LCByZXBsYWNlcikge1xuICB2YXIgYXJncyA9IGFycmF5U2xpY2UoYXJndW1lbnRzKTtcbiAgdmFyICRyZXBsYWNlciA9IHJlcGxhY2VyO1xuICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICBpZiAoaXNDYWxsYWJsZSgkcmVwbGFjZXIpKSB2YWx1ZSA9IGNhbGwoJHJlcGxhY2VyLCB0aGlzLCBrZXksIHZhbHVlKTtcbiAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICB9O1xuICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gIHJldHVybiBhcHBseSgkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbn07XG5cbnZhciBmaXhJbGxGb3JtZWQgPSBmdW5jdGlvbiAobWF0Y2gsIG9mZnNldCwgc3RyaW5nKSB7XG4gIHZhciBwcmV2ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0IC0gMSk7XG4gIHZhciBuZXh0ID0gY2hhckF0KHN0cmluZywgb2Zmc2V0ICsgMSk7XG4gIGlmICgoZXhlYyhsb3csIG1hdGNoKSAmJiAhZXhlYyhoaSwgbmV4dCkpIHx8IChleGVjKGhpLCBtYXRjaCkgJiYgIWV4ZWMobG93LCBwcmV2KSkpIHtcbiAgICByZXR1cm4gJ1xcXFx1JyArIG51bWJlclRvU3RyaW5nKGNoYXJDb2RlQXQobWF0Y2gsIDApLCAxNik7XG4gIH0gcmV0dXJuIG1hdGNoO1xufTtcblxuaWYgKCRzdHJpbmdpZnkpIHtcbiAgLy8gYEpTT04uc3RyaW5naWZ5YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLnN0cmluZ2lmeVxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGFyaXR5OiAzLCBmb3JjZWQ6IFdST05HX1NZTUJPTFNfQ09OVkVSU0lPTiB8fCBJTExfRk9STUVEX1VOSUNPREUgfSwge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gICAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQsIHJlcGxhY2VyLCBzcGFjZSkge1xuICAgICAgdmFyIGFyZ3MgPSBhcnJheVNsaWNlKGFyZ3VtZW50cyk7XG4gICAgICB2YXIgcmVzdWx0ID0gYXBwbHkoV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OID8gc3RyaW5naWZ5V2l0aFN5bWJvbHNGaXggOiAkc3RyaW5naWZ5LCBudWxsLCBhcmdzKTtcbiAgICAgIHJldHVybiBJTExfRk9STUVEX1VOSUNPREUgJiYgdHlwZW9mIHJlc3VsdCA9PSAnc3RyaW5nJyA/IHJlcGxhY2UocmVzdWx0LCB0ZXN0ZXIsIGZpeElsbEZvcm1lZCkgOiByZXN1bHQ7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gSlNPTltAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1qc29uLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbmNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5tYXAuY29uc3RydWN0b3InKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtYWNvc2ggLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XG52YXIgTE4yID0gTWF0aC5MTjI7XG5cbnZhciBGT1JDRUQgPSAhJGFjb3NoXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcbiAgfHwgTWF0aC5mbG9vcigkYWNvc2goTnVtYmVyLk1BWF9WQUxVRSkpICE9IDcxMFxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxuICB8fCAkYWNvc2goSW5maW5pdHkpICE9IEluZmluaXR5O1xuXG4vLyBgTWF0aC5hY29zaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYWNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBhY29zaDogZnVuY3Rpb24gYWNvc2goeCkge1xuICAgIHZhciBuID0gK3g7XG4gICAgcmV0dXJuIG4gPCAxID8gTmFOIDogbiA+IDk0OTA2MjY1LjYyNDI1MTU2XG4gICAgICA/IGxvZyhuKSArIExOMlxuICAgICAgOiBsb2cxcChuIC0gMSArIHNxcnQobiAtIDEpICogc3FydChuICsgMSkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hc2luaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhc2luaCA9IE1hdGguYXNpbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuZnVuY3Rpb24gYXNpbmgoeCkge1xuICB2YXIgbiA9ICt4O1xuICByZXR1cm4gIWlzRmluaXRlKG4pIHx8IG4gPT0gMCA/IG4gOiBuIDwgMCA/IC1hc2luaCgtbikgOiBsb2cobiArIHNxcnQobiAqIG4gKyAxKSk7XG59XG5cbnZhciBGT1JDRUQgPSAhKCRhc2luaCAmJiAxIC8gJGFzaW5oKDApID4gMCk7XG5cbi8vIGBNYXRoLmFzaW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5hc2luaFxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgYXNpbmg6IGFzaW5oXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1hdGFuaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRhdGFuaCA9IE1hdGguYXRhbmg7XG52YXIgbG9nID0gTWF0aC5sb2c7XG5cbnZhciBGT1JDRUQgPSAhKCRhdGFuaCAmJiAxIC8gJGF0YW5oKC0wKSA8IDApO1xuXG4vLyBgTWF0aC5hdGFuaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguYXRhbmhcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gbiA9PSAwID8gbiA6IGxvZygoMSArIG4pIC8gKDEgLSBuKSkgLyAyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBwb3cgPSBNYXRoLnBvdztcblxuLy8gYE1hdGguY2JydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguY2JydFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gc2lnbihuKSAqIHBvdyhhYnMobiksIDEgLyAzKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBsb2cgPSBNYXRoLmxvZztcbnZhciBMT0cyRSA9IE1hdGguTE9HMkU7XG5cbi8vIGBNYXRoLmNsejMyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5jbHozMlxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgY2x6MzI6IGZ1bmN0aW9uIGNsejMyKHgpIHtcbiAgICB2YXIgbiA9IHggPj4+IDA7XG4gICAgcmV0dXJuIG4gPyAzMSAtIGZsb29yKGxvZyhuICsgMC41KSAqIExPRzJFKSA6IDMyO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtY29zaCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRjb3NoID0gTWF0aC5jb3NoO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIEUgPSBNYXRoLkU7XG5cbnZhciBGT1JDRUQgPSAhJGNvc2ggfHwgJGNvc2goNzEwKSA9PT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmNvc2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmNvc2hcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBjb3NoOiBmdW5jdGlvbiBjb3NoKHgpIHtcbiAgICB2YXIgdCA9IGV4cG0xKGFicyh4KSAtIDEpICsgMTtcbiAgICByZXR1cm4gKHQgKyAxIC8gKHQgKiBFICogRSkpICogKEUgLyAyKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbi8vIGBNYXRoLmV4cG0xYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5leHBtMVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW1hdGgtZXhwbTEgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBleHBtMSAhPSBNYXRoLmV4cG0xIH0sIHsgZXhwbTE6IGV4cG0xIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZnJvdW5kJyk7XG5cbi8vIGBNYXRoLmZyb3VuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguZnJvdW5kXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBmcm91bmQ6IGZyb3VuZCB9KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1oeXBvdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyICRoeXBvdCA9IE1hdGguaHlwb3Q7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgc3FydCA9IE1hdGguc3FydDtcblxuLy8gQ2hyb21lIDc3IGJ1Z1xuLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9OTU0NlxudmFyIEZPUkNFRCA9ICEhJGh5cG90ICYmICRoeXBvdChJbmZpbml0eSwgTmFOKSAhPT0gSW5maW5pdHk7XG5cbi8vIGBNYXRoLmh5cG90YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5oeXBvdFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBhcml0eTogMiwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHtcbiAgICB2YXIgc3VtID0gMDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBsYXJnID0gMDtcbiAgICB2YXIgYXJnLCBkaXY7XG4gICAgd2hpbGUgKGkgPCBhTGVuKSB7XG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcbiAgICAgICAgZGl2ID0gbGFyZyAvIGFyZztcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcbiAgICAgICAgbGFyZyA9IGFyZztcbiAgICAgIH0gZWxzZSBpZiAoYXJnID4gMCkge1xuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xuICAgICAgfSBlbHNlIHN1bSArPSBhcmc7XG4gICAgfVxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIHNxcnQoc3VtKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1pbXVsIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG52YXIgJGltdWwgPSBNYXRoLmltdWw7XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAkaW11bCgweEZGRkZGRkZGLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcbn0pO1xuXG4vLyBgTWF0aC5pbXVsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5pbXVsXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xuICAgIHZhciBVSU5UMTYgPSAweEZGRkY7XG4gICAgdmFyIHhuID0gK3g7XG4gICAgdmFyIHluID0gK3k7XG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XG4gICAgdmFyIHlsID0gVUlOVDE2ICYgeW47XG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBsb2cxMCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWxvZzEwJyk7XG5cbi8vIGBNYXRoLmxvZzEwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cxMFxuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgbG9nMTA6IGxvZzEwXG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGxvZzFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtbG9nMXAnKTtcblxuLy8gYE1hdGgubG9nMXBgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLmxvZzFwXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwgeyBsb2cxcDogbG9nMXAgfSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG4vLyBgTWF0aC5sb2cyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC5sb2cyXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICBsb2cyOiBmdW5jdGlvbiBsb2cyKHgpIHtcbiAgICByZXR1cm4gbG9nKHgpIC8gTE4yO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWF0aC1zaWduJyk7XG5cbi8vIGBNYXRoLnNpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnNpZ25cbiQoeyB0YXJnZXQ6ICdNYXRoJywgc3RhdDogdHJ1ZSB9LCB7XG4gIHNpZ246IHNpZ25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLWV4cG0xJyk7XG5cbnZhciBhYnMgPSBNYXRoLmFicztcbnZhciBleHAgPSBNYXRoLmV4cDtcbnZhciBFID0gTWF0aC5FO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbWF0aC1zaW5oIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XG59KTtcblxuLy8gYE1hdGguc2luaGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW1hdGguc2luaFxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XG4gICAgdmFyIG4gPSAreDtcbiAgICByZXR1cm4gYWJzKG4pIDwgMSA/IChleHBtMShuKSAtIGV4cG0xKC1uKSkgLyAyIDogKGV4cChuIC0gMSkgLSBleHAoLW4gLSAxKSkgKiAoRSAvIDIpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGV4cG0xID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21hdGgtZXhwbTEnKTtcblxudmFyIGV4cCA9IE1hdGguZXhwO1xuXG4vLyBgTWF0aC50YW5oYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50YW5oXG4kKHsgdGFyZ2V0OiAnTWF0aCcsIHN0YXQ6IHRydWUgfSwge1xuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcbiAgICB2YXIgbiA9ICt4O1xuICAgIHZhciBhID0gZXhwbTEobik7XG4gICAgdmFyIGIgPSBleHBtMSgtbik7XG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAobikgKyBleHAoLW4pKTtcbiAgfVxufSk7XG4iLCJ2YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcblxuLy8gTWF0aFtAQHRvU3RyaW5nVGFnXSBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cnVuYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9tYXRoLXRydW5jJyk7XG5cbi8vIGBNYXRoLnRydW5jYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWF0aC50cnVuY1xuJCh7IHRhcmdldDogJ01hdGgnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdHJ1bmM6IHRydW5jXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXN5bWJvbCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIHRoaXNOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90aGlzLW51bWJlci12YWx1ZScpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xuXG52YXIgTlVNQkVSID0gJ051bWJlcic7XG52YXIgTmF0aXZlTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XG52YXIgUHVyZU51bWJlck5hbWVzcGFjZSA9IHBhdGhbTlVNQkVSXTtcbnZhciBOdW1iZXJQcm90b3R5cGUgPSBOYXRpdmVOdW1iZXIucHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgY2hhckNvZGVBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJDb2RlQXQpO1xuXG4vLyBgVG9OdW1lcmljYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9udW1lcmljXG52YXIgdG9OdW1lcmljID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcmltVmFsdWUgPSB0b1ByaW1pdGl2ZSh2YWx1ZSwgJ251bWJlcicpO1xuICByZXR1cm4gdHlwZW9mIHByaW1WYWx1ZSA9PSAnYmlnaW50JyA/IHByaW1WYWx1ZSA6IHRvTnVtYmVyKHByaW1WYWx1ZSk7XG59O1xuXG4vLyBgVG9OdW1iZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b251bWJlclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCAnbnVtYmVyJyk7XG4gIHZhciBmaXJzdCwgdGhpcmQsIHJhZGl4LCBtYXhDb2RlLCBkaWdpdHMsIGxlbmd0aCwgaW5kZXgsIGNvZGU7XG4gIGlmIChpc1N5bWJvbChpdCkpIHRocm93IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XG4gICAgaXQgPSB0cmltKGl0KTtcbiAgICBmaXJzdCA9IGNoYXJDb2RlQXQoaXQsIDApO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGNoYXJDb2RlQXQoaXQsIDIpO1xuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XG4gICAgfSBlbHNlIGlmIChmaXJzdCA9PT0gNDgpIHtcbiAgICAgIHN3aXRjaCAoY2hhckNvZGVBdChpdCwgMSkpIHtcbiAgICAgICAgY2FzZSA2NjogY2FzZSA5ODogcmFkaXggPSAyOyBtYXhDb2RlID0gNDk7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMGJbMDFdKyQvaVxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIG9mIC9eMG9bMC03XSskL2lcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcbiAgICAgIH1cbiAgICAgIGRpZ2l0cyA9IHN0cmluZ1NsaWNlKGl0LCAyKTtcbiAgICAgIGxlbmd0aCA9IGRpZ2l0cy5sZW5ndGg7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY29kZSA9IGNoYXJDb2RlQXQoZGlnaXRzLCBpbmRleCk7XG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxuICAgICAgICAvLyBidXQgVG9OdW1iZXIgc2hvdWxkIHJldHVybiBOYU4gaWYgYSBzdHJpbmcgY29udGFpbnMgdW5hdmFpbGFibGUgc3ltYm9sc1xuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XG4gICAgfVxuICB9IHJldHVybiAraXQ7XG59O1xuXG52YXIgRk9SQ0VEID0gaXNGb3JjZWQoTlVNQkVSLCAhTmF0aXZlTnVtYmVyKCcgMG8xJykgfHwgIU5hdGl2ZU51bWJlcignMGIxJykgfHwgTmF0aXZlTnVtYmVyKCcrMHgxJykpO1xuXG52YXIgY2FsbGVkV2l0aE5ldyA9IGZ1bmN0aW9uIChkdW1teSkge1xuICAvLyBpbmNsdWRlcyBjaGVjayBvbiAxLi5jb25zdHJ1Y3Rvcihmb28pIGNhc2VcbiAgcmV0dXJuIGlzUHJvdG90eXBlT2YoTnVtYmVyUHJvdG90eXBlLCBkdW1teSkgJiYgZmFpbHMoZnVuY3Rpb24gKCkgeyB0aGlzTnVtYmVyVmFsdWUoZHVtbXkpOyB9KTtcbn07XG5cbi8vIGBOdW1iZXJgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci1jb25zdHJ1Y3RvclxudmFyIE51bWJlcldyYXBwZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcbiAgdmFyIG4gPSBhcmd1bWVudHMubGVuZ3RoIDwgMSA/IDAgOiBOYXRpdmVOdW1iZXIodG9OdW1lcmljKHZhbHVlKSk7XG4gIHJldHVybiBjYWxsZWRXaXRoTmV3KHRoaXMpID8gaW5oZXJpdElmUmVxdWlyZWQoT2JqZWN0KG4pLCB0aGlzLCBOdW1iZXJXcmFwcGVyKSA6IG47XG59O1xuXG5OdW1iZXJXcmFwcGVyLnByb3RvdHlwZSA9IE51bWJlclByb3RvdHlwZTtcbmlmIChGT1JDRUQgJiYgIUlTX1BVUkUpIE51bWJlclByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE51bWJlcldyYXBwZXI7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIE51bWJlcjogTnVtYmVyV3JhcHBlclxufSk7XG5cbi8vIFVzZSBgaW50ZXJuYWwvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzYCBoZWxwZXIgaW4gYGNvcmUtanNANGBcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGtleXMgPSBERVNDUklQVE9SUyA/IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlKSA6IChcbiAgICAvLyBFUzM6XG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xuICAgIC8vIEVTMjAxNSAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTMjAxNSBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxuICAgICdFUFNJTE9OLE1BWF9TQUZFX0lOVEVHRVIsTUlOX1NBRkVfSU5URUdFUixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixwYXJzZUZsb2F0LHBhcnNlSW50LCcgK1xuICAgIC8vIEVTTmV4dFxuICAgICdmcm9tU3RyaW5nLHJhbmdlJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhc093bihzb3VyY2UsIGtleSA9IGtleXNbal0pICYmICFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfVxuICB9XG59O1xuXG5pZiAoSVNfUFVSRSAmJiBQdXJlTnVtYmVyTmFtZXNwYWNlKSBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHBhdGhbTlVNQkVSXSwgUHVyZU51bWJlck5hbWVzcGFjZSk7XG5pZiAoRk9SQ0VEIHx8IElTX1BVUkUpIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMocGF0aFtOVU1CRVJdLCBOYXRpdmVOdW1iZXIpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuRVBTSUxPTmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLmVwc2lsb25cbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBub25Db25maWd1cmFibGU6IHRydWUsIG5vbldyaXRhYmxlOiB0cnVlIH0sIHtcbiAgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBudW1iZXJJc0Zpbml0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItaXMtZmluaXRlJyk7XG5cbi8vIGBOdW1iZXIuaXNGaW5pdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNmaW5pdGVcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlIH0sIHsgaXNGaW5pdGU6IG51bWJlcklzRmluaXRlIH0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNJbnRlZ3JhbE51bWJlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1pbnRlZ3JhbC1udW1iZXInKTtcblxuLy8gYE51bWJlci5pc0ludGVnZXJgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1udW1iZXIuaXNpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzSW50ZWdlcjogaXNJbnRlZ3JhbE51bWJlclxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcblxuLy8gYE51bWJlci5pc05hTmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc25hblxuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUgfSwge1xuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0ludGVncmFsTnVtYmVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWludGVncmFsLW51bWJlcicpO1xuXG52YXIgYWJzID0gTWF0aC5hYnM7XG5cbi8vIGBOdW1iZXIuaXNTYWZlSW50ZWdlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5pc3NhZmVpbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XG4gICAgcmV0dXJuIGlzSW50ZWdyYWxOdW1iZXIobnVtYmVyKSAmJiBhYnMobnVtYmVyKSA8PSAweDFGRkZGRkZGRkZGRkZGO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgIGNvbnN0YW50XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW51bWJlci5tYXhfc2FmZV9pbnRlZ2VyXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgbm9uQ29uZmlndXJhYmxlOiB0cnVlLCBub25Xcml0YWJsZTogdHJ1ZSB9LCB7XG4gIE1BWF9TQUZFX0lOVEVHRVI6IDB4MUZGRkZGRkZGRkZGRkZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG5cbi8vIGBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUmAgY29uc3RhbnRcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLm1pbl9zYWZlX2ludGVnZXJcbiQoeyB0YXJnZXQ6ICdOdW1iZXInLCBzdGF0OiB0cnVlLCBub25Db25maWd1cmFibGU6IHRydWUsIG5vbldyaXRhYmxlOiB0cnVlIH0sIHtcbiAgTUlOX1NBRkVfSU5URUdFUjogLTB4MUZGRkZGRkZGRkZGRkZcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtZmxvYXQnKTtcblxuLy8gYE51bWJlci5wYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlRmxvYXRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1udW1iZXItcGFyc2VmbG9hdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ051bWJlcicsIHN0YXQ6IHRydWUsIGZvcmNlZDogTnVtYmVyLnBhcnNlRmxvYXQgIT0gcGFyc2VGbG9hdCB9LCB7XG4gIHBhcnNlRmxvYXQ6IHBhcnNlRmxvYXRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgTnVtYmVyLnBhcnNlSW50YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnBhcnNlaW50XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tbnVtYmVyLXBhcnNlaW50IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBOdW1iZXIucGFyc2VJbnQgIT0gcGFyc2VJbnQgfSwge1xuICBwYXJzZUludDogcGFyc2VJbnRcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgdG9JbnRlZ2VyT3JJbmZpbml0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyLW9yLWluZmluaXR5Jyk7XG52YXIgdGhpc051bWJlclZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RoaXMtbnVtYmVyLXZhbHVlJyk7XG52YXIgJHJlcGVhdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctcmVwZWF0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyICRSYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbnZhciAkU3RyaW5nID0gU3RyaW5nO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBlYXQgPSB1bmN1cnJ5VGhpcygkcmVwZWF0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcbnZhciBuYXRpdmVUb0ZpeGVkID0gdW5jdXJyeVRoaXMoMS4wLnRvRml4ZWQpO1xuXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xuICByZXR1cm4gbiA9PT0gMCA/IGFjYyA6IG4gJSAyID09PSAxID8gcG93KHgsIG4gLSAxLCBhY2MgKiB4KSA6IHBvdyh4ICogeCwgbiAvIDIsIGFjYyk7XG59O1xuXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcbiAgdmFyIG4gPSAwO1xuICB2YXIgeDIgPSB4O1xuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xuICAgIG4gKz0gMTI7XG4gICAgeDIgLz0gNDA5NjtcbiAgfVxuICB3aGlsZSAoeDIgPj0gMikge1xuICAgIG4gKz0gMTtcbiAgICB4MiAvPSAyO1xuICB9IHJldHVybiBuO1xufTtcblxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKGRhdGEsIG4sIGMpIHtcbiAgdmFyIGluZGV4ID0gLTE7XG4gIHZhciBjMiA9IGM7XG4gIHdoaWxlICgrK2luZGV4IDwgNikge1xuICAgIGMyICs9IG4gKiBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGMyICUgMWU3O1xuICAgIGMyID0gZmxvb3IoYzIgLyAxZTcpO1xuICB9XG59O1xuXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKGRhdGEsIG4pIHtcbiAgdmFyIGluZGV4ID0gNjtcbiAgdmFyIGMgPSAwO1xuICB3aGlsZSAoLS1pbmRleCA+PSAwKSB7XG4gICAgYyArPSBkYXRhW2luZGV4XTtcbiAgICBkYXRhW2luZGV4XSA9IGZsb29yKGMgLyBuKTtcbiAgICBjID0gKGMgJSBuKSAqIDFlNztcbiAgfVxufTtcblxudmFyIGRhdGFUb1N0cmluZyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIHZhciBpbmRleCA9IDY7XG4gIHZhciBzID0gJyc7XG4gIHdoaWxlICgtLWluZGV4ID49IDApIHtcbiAgICBpZiAocyAhPT0gJycgfHwgaW5kZXggPT09IDAgfHwgZGF0YVtpbmRleF0gIT09IDApIHtcbiAgICAgIHZhciB0ID0gJFN0cmluZyhkYXRhW2luZGV4XSk7XG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdCgnMCcsIDcgLSB0Lmxlbmd0aCkgKyB0O1xuICAgIH1cbiAgfSByZXR1cm4gcztcbn07XG5cbnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBuYXRpdmVUb0ZpeGVkKDAuMDAwMDgsIDMpICE9PSAnMC4wMDAnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgwLjksIDApICE9PSAnMScgfHxcbiAgICBuYXRpdmVUb0ZpeGVkKDEuMjU1LCAyKSAhPT0gJzEuMjUnIHx8XG4gICAgbmF0aXZlVG9GaXhlZCgxMDAwMDAwMDAwMDAwMDAwMTI4LjAsIDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCc7XG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxuICBuYXRpdmVUb0ZpeGVkKHt9KTtcbn0pO1xuXG4vLyBgTnVtYmVyLnByb3RvdHlwZS50b0ZpeGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbnVtYmVyLnByb3RvdHlwZS50b2ZpeGVkXG4kKHsgdGFyZ2V0OiAnTnVtYmVyJywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xuICAgIHZhciBudW1iZXIgPSB0aGlzTnVtYmVyVmFsdWUodGhpcyk7XG4gICAgdmFyIGZyYWN0RGlnaXRzID0gdG9JbnRlZ2VyT3JJbmZpbml0eShmcmFjdGlvbkRpZ2l0cyk7XG4gICAgdmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHNpZ24gPSAnJztcbiAgICB2YXIgcmVzdWx0ID0gJzAnO1xuICAgIHZhciBlLCB6LCBqLCBrO1xuXG4gICAgLy8gVE9ETzogRVMyMDE4IGluY3JlYXNlZCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZnJhY3Rpb24gZGlnaXRzIHRvIDEwMCwgbmVlZCB0byBpbXByb3ZlIHRoZSBpbXBsZW1lbnRhdGlvblxuICAgIGlmIChmcmFjdERpZ2l0cyA8IDAgfHwgZnJhY3REaWdpdHMgPiAyMCkgdGhyb3cgJFJhbmdlRXJyb3IoJ0luY29ycmVjdCBmcmFjdGlvbiBkaWdpdHMnKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmIChudW1iZXIgIT0gbnVtYmVyKSByZXR1cm4gJ05hTic7XG4gICAgaWYgKG51bWJlciA8PSAtMWUyMSB8fCBudW1iZXIgPj0gMWUyMSkgcmV0dXJuICRTdHJpbmcobnVtYmVyKTtcbiAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgc2lnbiA9ICctJztcbiAgICAgIG51bWJlciA9IC1udW1iZXI7XG4gICAgfVxuICAgIGlmIChudW1iZXIgPiAxZS0yMSkge1xuICAgICAgZSA9IGxvZyhudW1iZXIgKiBwb3coMiwgNjksIDEpKSAtIDY5O1xuICAgICAgeiA9IGUgPCAwID8gbnVtYmVyICogcG93KDIsIC1lLCAxKSA6IG51bWJlciAvIHBvdygyLCBlLCAxKTtcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcbiAgICAgIGUgPSA1MiAtIGU7XG4gICAgICBpZiAoZSA+IDApIHtcbiAgICAgICAgbXVsdGlwbHkoZGF0YSwgMCwgeik7XG4gICAgICAgIGogPSBmcmFjdERpZ2l0cztcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xuICAgICAgICAgIG11bHRpcGx5KGRhdGEsIDFlNywgMCk7XG4gICAgICAgICAgaiAtPSA3O1xuICAgICAgICB9XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIHBvdygxMCwgaiwgMSksIDApO1xuICAgICAgICBqID0gZSAtIDE7XG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XG4gICAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgMjMpO1xuICAgICAgICAgIGogLT0gMjM7XG4gICAgICAgIH1cbiAgICAgICAgZGl2aWRlKGRhdGEsIDEgPDwgaik7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDEsIDEpO1xuICAgICAgICBkaXZpZGUoZGF0YSwgMik7XG4gICAgICAgIHJlc3VsdCA9IGRhdGFUb1N0cmluZyhkYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG11bHRpcGx5KGRhdGEsIDAsIHopO1xuICAgICAgICBtdWx0aXBseShkYXRhLCAxIDw8IC1lLCAwKTtcbiAgICAgICAgcmVzdWx0ID0gZGF0YVRvU3RyaW5nKGRhdGEpICsgcmVwZWF0KCcwJywgZnJhY3REaWdpdHMpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZnJhY3REaWdpdHMgPiAwKSB7XG4gICAgICBrID0gcmVzdWx0Lmxlbmd0aDtcbiAgICAgIHJlc3VsdCA9IHNpZ24gKyAoayA8PSBmcmFjdERpZ2l0c1xuICAgICAgICA/ICcwLicgKyByZXBlYXQoJzAnLCBmcmFjdERpZ2l0cyAtIGspICsgcmVzdWx0XG4gICAgICAgIDogc3RyaW5nU2xpY2UocmVzdWx0LCAwLCBrIC0gZnJhY3REaWdpdHMpICsgJy4nICsgc3RyaW5nU2xpY2UocmVzdWx0LCBrIC0gZnJhY3REaWdpdHMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gc2lnbiArIHJlc3VsdDtcbiAgICB9IHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1hc3NpZ24nKTtcblxuLy8gYE9iamVjdC5hc3NpZ25gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWFzc2lnbiAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGFyaXR5OiAyLCBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbiB9LCB7XG4gIGFzc2lnbjogYXNzaWduXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgRk9SQ0VEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1wcm90b3R5cGUtYWNjZXNzb3JzLWZvcmNlZCcpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZUdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19kZWZpbmVHZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpIHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhQ2FsbGFibGUoZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xuICAgIH1cbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fZGVmaW5lU2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUNhbGxhYmxlKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH0pO1xufVxuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykuZW50cmllcztcblxuLy8gYE9iamVjdC5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmVudHJpZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhPKSB7XG4gICAgcmV0dXJuICRlbnRyaWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBvbkZyZWV6ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpLm9uRnJlZXplO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWZyZWV6ZSAtLSBzYWZlXG52YXIgJGZyZWV6ZSA9IE9iamVjdC5mcmVlemU7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJGZyZWV6ZSgxKTsgfSk7XG5cbi8vIGBPYmplY3QuZnJlZXplYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmZyZWV6ZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgZnJlZXplOiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcbiAgICByZXR1cm4gJGZyZWV6ZSAmJiBpc09iamVjdChpdCkgPyAkZnJlZXplKG9uRnJlZXplKGl0KSkgOiBpdDtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5mcm9tRW50cmllc2AgbWV0aG9kXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZnJvbS1lbnRyaWVzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGZyb21FbnRyaWVzOiBmdW5jdGlvbiBmcm9tRW50cmllcyhpdGVyYWJsZSkge1xuICAgIHZhciBvYmogPSB7fTtcbiAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAoaywgdikge1xuICAgICAgY3JlYXRlUHJvcGVydHkob2JqLCBrLCB2KTtcbiAgICB9LCB7IEFTX0VOVFJJRVM6IHRydWUgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgRk9SQ0VEID0gIURFU0NSSVBUT1JTIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSW5kZXhlZE9iamVjdChpdCksIGtleSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBjcmVhdGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHknKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICAgIHZhciBrZXlzID0gb3duS2V5cyhPKTtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIga2V5LCBkZXNjcmlwdG9yO1xuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSA9IGtleXNbaW5kZXgrK10pO1xuICAgICAgaWYgKGRlc2NyaXB0b3IgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpLmY7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHluYW1lcyAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xudmFyIEZBSUxTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiAhT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUyB9LCB7XG4gIGdldE93blByb3BlcnR5TmFtZXM6IGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xuXG4vLyBWOCB+IENocm9tZSAzOCBhbmQgMzkgYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIGZhaWxzIG9uIHByaW1pdGl2ZXNcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM0NDNcbnZhciBGT1JDRUQgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlzeW1ib2xzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xuICAgIHZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmY7XG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPyAkZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRvT2JqZWN0KGl0KSkgOiBbXTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlR2V0UHJvdG90eXBlT2YoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTLCBzaGFtOiAhQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIH0sIHtcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkaXNFeHRlbnNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1pcy1leHRlbnNpYmxlJyk7XG5cbi8vIGBPYmplY3QuaXNFeHRlbnNpYmxlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmlzZXh0ZW5zaWJsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1pc2V4dGVuc2libGUgLS0gc2FmZVxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT2JqZWN0LmlzRXh0ZW5zaWJsZSAhPT0gJGlzRXh0ZW5zaWJsZSB9LCB7XG4gIGlzRXh0ZW5zaWJsZTogJGlzRXh0ZW5zaWJsZVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLW5vbi1leHRlbnNpYmxlJyk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtaXNmcm96ZW4gLS0gc2FmZVxudmFyICRpc0Zyb3plbiA9IE9iamVjdC5pc0Zyb3plbjtcblxudmFyIEZPUkNFRCA9IEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7ICRpc0Zyb3plbigxKTsgfSk7XG5cbi8vIGBPYmplY3QuaXNGcm96ZW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuaXNmcm96ZW5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIGlzRnJvemVuOiBmdW5jdGlvbiBpc0Zyb3plbihpdCkge1xuICAgIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFICYmIGNsYXNzb2YoaXQpID09ICdBcnJheUJ1ZmZlcicpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci1ub24tZXh0ZW5zaWJsZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzc2VhbGVkIC0tIHNhZmVcbnZhciAkaXNTZWFsZWQgPSBPYmplY3QuaXNTZWFsZWQ7XG5cbnZhciBGT1JDRUQgPSBBUlJBWV9CVUZGRVJfTk9OX0VYVEVOU0lCTEUgfHwgZmFpbHMoZnVuY3Rpb24gKCkgeyAkaXNTZWFsZWQoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LmlzU2VhbGVkYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0Lmlzc2VhbGVkXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICBpc1NlYWxlZDogZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKEFSUkFZX0JVRkZFUl9OT05fRVhURU5TSUJMRSAmJiBjbGFzc29mKGl0KSA9PSAnQXJyYXlCdWZmZXInKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcblxuLy8gYE9iamVjdC5pc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5pc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUgfSwge1xuICBpczogaXNcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgbmF0aXZlS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBGQUlMU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBuYXRpdmVLZXlzKDEpOyB9KTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZBSUxTX09OX1BSSU1JVElWRVMgfSwge1xuICBrZXlzOiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXModG9PYmplY3QoaXQpKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIEZPUkNFRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvdG90eXBlLWFjY2Vzc29ycy1mb3JjZWQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5fX2xvb2t1cEdldHRlcl9fXG5pZiAoREVTQ1JJUFRPUlMpIHtcbiAgJCh7IHRhcmdldDogJ09iamVjdCcsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gICAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XG4gICAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIGtleSA9IHRvUHJvcGVydHlLZXkoUCk7XG4gICAgICB2YXIgZGVzYztcbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKGRlc2MgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywga2V5KSkgcmV0dXJuIGRlc2MuZ2V0O1xuICAgICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBGT1JDRUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3RvdHlwZS1hY2Nlc3NvcnMtZm9yY2VkJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9Qcm9wZXJ0eUtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXknKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfX1xuaWYgKERFU0NSSVBUT1JTKSB7XG4gICQoeyB0YXJnZXQ6ICdPYmplY3QnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRUQgfSwge1xuICAgIF9fbG9va3VwU2V0dGVyX186IGZ1bmN0aW9uIF9fbG9va3VwU2V0dGVyX18oUCkge1xuICAgICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICAgIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICAgICAgdmFyIGRlc2M7XG4gICAgICBkbyB7XG4gICAgICAgIGlmIChkZXNjID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIGtleSkpIHJldHVybiBkZXNjLnNldDtcbiAgICAgIH0gd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSk7XG4gICAgfVxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXByZXZlbnRleHRlbnNpb25zIC0tIHNhZmVcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHByZXZlbnRFeHRlbnNpb25zKDEpOyB9KTtcblxuLy8gYE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9uc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XG4gICAgcmV0dXJuICRwcmV2ZW50RXh0ZW5zaW9ucyAmJiBpc09iamVjdChpdCkgPyAkcHJldmVudEV4dGVuc2lvbnMob25GcmVlemUoaXQpKSA6IGl0O1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG9uRnJlZXplID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykub25GcmVlemU7XG52YXIgRlJFRVpJTkcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnJlZXppbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNlYWwgLS0gc2FmZVxudmFyICRzZWFsID0gT2JqZWN0LnNlYWw7XG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgJHNlYWwoMSk7IH0pO1xuXG4vLyBgT2JqZWN0LnNlYWxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2VhbFxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRkFJTFNfT05fUFJJTUlUSVZFUywgc2hhbTogIUZSRUVaSU5HIH0sIHtcbiAgc2VhbDogZnVuY3Rpb24gc2VhbChpdCkge1xuICAgIHJldHVybiAkc2VhbCAmJiBpc09iamVjdChpdCkgPyAkc2VhbChvbkZyZWV6ZShpdCkpIDogaXQ7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICBkZWZpbmVCdWlsdEluKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLWFycmF5JykudmFsdWVzO1xuXG4vLyBgT2JqZWN0LnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC52YWx1ZXNcbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykge1xuICAgIHJldHVybiAkdmFsdWVzKE8pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL251bWJlci1wYXJzZS1mbG9hdCcpO1xuXG4vLyBgcGFyc2VGbG9hdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlZmxvYXQtc3RyaW5nXG4kKHsgZ2xvYmFsOiB0cnVlLCBmb3JjZWQ6IHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQgfSwge1xuICBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWludCcpO1xuXG4vLyBgcGFyc2VJbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wYXJzZWludC1zdHJpbmctcmFkaXhcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VJbnQgIT0gJHBhcnNlSW50IH0sIHtcbiAgcGFyc2VJbnQ6ICRwYXJzZUludFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBhQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZScpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBQUk9NSVNFX1NUQVRJQ1NfSU5DT1JSRUNUX0lURVJBVElPTiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLXN0YXRpY3MtaW5jb3JyZWN0LWl0ZXJhdGlvbicpO1xuXG4vLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLmFsbFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUNhbGxhYmxlKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIGNhbGwoJHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XG4gICAgICAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24nKS5DT05TVFJVQ1RPUjtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xuXG52YXIgTmF0aXZlUHJvbWlzZVByb3RvdHlwZSA9IE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4vLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUiwgcmVhbDogdHJ1ZSB9LCB7XG4gICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIG9uUmVqZWN0ZWQpO1xuICB9XG59KTtcblxuLy8gbWFrZXMgc3VyZSB0aGF0IG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXMgYFByb21pc2UjY2F0Y2hgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKSkge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnY2F0Y2gnXTtcbiAgaWYgKE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2NhdGNoJ10gIT09IG1ldGhvZCkge1xuICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ2NhdGNoJywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90YXNrJykuc2V0O1xudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9taWNyb3Rhc2snKTtcbnZhciBob3N0UmVwb3J0RXJyb3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hvc3QtcmVwb3J0LWVycm9ycycpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIFF1ZXVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3F1ZXVlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgPSBQcm9taXNlQ29uc3RydWN0b3JEZXRlY3Rpb24uQ09OU1RSVUNUT1I7XG52YXIgTkFUSVZFX1BST01JU0VfUkVKRUNUSU9OX0VWRU5UID0gUHJvbWlzZUNvbnN0cnVjdG9yRGV0ZWN0aW9uLlJFSkVDVElPTl9FVkVOVDtcbnZhciBOQVRJVkVfUFJPTUlTRV9TVUJDTEFTU0lORyA9IFByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbi5TVUJDTEFTU0lORztcbnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBOYXRpdmVQcm9taXNlUHJvdG90eXBlID0gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yICYmIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yO1xudmFyIFByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlUHJvdG90eXBlO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcblxudmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xuXG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgaXNDYWxsYWJsZSh0aGVuID0gaXQudGhlbikgPyB0aGVuIDogZmFsc2U7XG59O1xuXG52YXIgY2FsbFJlYWN0aW9uID0gZnVuY3Rpb24gKHJlYWN0aW9uLCBzdGF0ZSkge1xuICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgdmFyIG9rID0gc3RhdGUuc3RhdGUgPT0gRlVMRklMTEVEO1xuICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XG4gIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgdHJ5IHtcbiAgICBpZiAoaGFuZGxlcikge1xuICAgICAgaWYgKCFvaykge1xuICAgICAgICBpZiAoc3RhdGUucmVqZWN0aW9uID09PSBVTkhBTkRMRUQpIG9uSGFuZGxlVW5oYW5kbGVkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUucmVqZWN0aW9uID0gSEFORExFRDtcbiAgICAgIH1cbiAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIGNhbiB0aHJvd1xuICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgY2FsbCh0aGVuLCByZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcbiAgICByZWplY3QoZXJyb3IpO1xuICB9XG59O1xuXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHN0YXRlLCBpc1JlamVjdCkge1xuICBpZiAoc3RhdGUubm90aWZpZWQpIHJldHVybjtcbiAgc3RhdGUubm90aWZpZWQgPSB0cnVlO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWFjdGlvbnMgPSBzdGF0ZS5yZWFjdGlvbnM7XG4gICAgdmFyIHJlYWN0aW9uO1xuICAgIHdoaWxlIChyZWFjdGlvbiA9IHJlYWN0aW9ucy5nZXQoKSkge1xuICAgICAgY2FsbFJlYWN0aW9uKHJlYWN0aW9uLCBzdGF0ZSk7XG4gICAgfVxuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9QUk9NSVNFX1JFSkVDVElPTl9FVkVOVCAmJiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pKSBoYW5kbGVyKGV2ZW50KTtcbiAgZWxzZSBpZiAobmFtZSA9PT0gVU5IQU5ETEVEX1JFSkVDVElPTikgaG9zdFJlcG9ydEVycm9ycygnVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgcmVhc29uKTtcbn07XG5cbnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChzdGF0ZSkge1xuICBjYWxsKHRhc2ssIGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIGNhbGwodGFzaywgZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBzdGF0ZS5mYWNhZGU7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAoc3RhdGUuZmFjYWRlID09PSB2YWx1ZSkgdGhyb3cgVHlwZUVycm9yKFwiUHJvbWlzZSBjYW4ndCBiZSByZXNvbHZlZCBpdHNlbGZcIik7XG4gICAgdmFyIHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKTtcbiAgICBpZiAodGhlbikge1xuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHdyYXBwZXIgPSB7IGRvbmU6IGZhbHNlIH07XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY2FsbCh0aGVuLCB2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkoc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QoeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gIFByb21pc2VDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsIFByb21pc2VQcm90b3R5cGUpO1xuICAgIGFDYWxsYWJsZShleGVjdXRvcik7XG4gICAgY2FsbChJbnRlcm5hbCwgdGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGludGVybmFsUmVqZWN0KHN0YXRlLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIFByb21pc2VQcm90b3R5cGUgPSBQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogbmV3IFF1ZXVlKCksXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG5cbiAgLy8gYFByb21pc2UucHJvdG90eXBlLnRoZW5gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLnRoZW5cbiAgSW50ZXJuYWwucHJvdG90eXBlID0gZGVmaW5lQnVpbHRJbihQcm9taXNlUHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSh0aGlzKTtcbiAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgc3RhdGUucGFyZW50ID0gdHJ1ZTtcbiAgICByZWFjdGlvbi5vayA9IGlzQ2FsbGFibGUob25GdWxmaWxsZWQpID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgIHJlYWN0aW9uLmZhaWwgPSBpc0NhbGxhYmxlKG9uUmVqZWN0ZWQpICYmIG9uUmVqZWN0ZWQ7XG4gICAgcmVhY3Rpb24uZG9tYWluID0gSVNfTk9ERSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgIGlmIChzdGF0ZS5zdGF0ZSA9PSBQRU5ESU5HKSBzdGF0ZS5yZWFjdGlvbnMuYWRkKHJlYWN0aW9uKTtcbiAgICBlbHNlIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxsUmVhY3Rpb24ocmVhY3Rpb24sIHN0YXRlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgfSk7XG5cbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZShwcm9taXNlKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBzdGF0ZSk7XG4gICAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBzdGF0ZSk7XG4gIH07XG5cbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKSAmJiBOYXRpdmVQcm9taXNlUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2VQcm90b3R5cGUudGhlbjtcblxuICAgIGlmICghTkFUSVZFX1BST01JU0VfU1VCQ0xBU1NJTkcpIHtcbiAgICAgIC8vIG1ha2UgYFByb21pc2UjdGhlbmAgcmV0dXJuIGEgcG9seWZpbGxlZCBgUHJvbWlzZWAgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICAgIGRlZmluZUJ1aWx0SW4oTmF0aXZlUHJvbWlzZVByb3RvdHlwZSwgJ3RoZW4nLCBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGNhbGwobmF0aXZlVGhlbiwgdGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICAvLyBtYWtlIGAuY29uc3RydWN0b3IgPT09IFByb21pc2VgIHdvcmsgZm9yIG5hdGl2ZSBwcm9taXNlLWJhc2VkIEFQSXNcbiAgICB0cnkge1xuICAgICAgZGVsZXRlIE5hdGl2ZVByb21pc2VQcm90b3R5cGUuY29uc3RydWN0b3I7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuXG4gICAgLy8gbWFrZSBgaW5zdGFuY2VvZiBQcm9taXNlYCB3b3JrIGZvciBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzXG4gICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICBzZXRQcm90b3R5cGVPZihOYXRpdmVQcm9taXNlUHJvdG90eXBlLCBQcm9taXNlUHJvdG90eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICBQcm9taXNlOiBQcm9taXNlQ29uc3RydWN0b3Jcbn0pO1xuXG5zZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTtcbnNldFNwZWNpZXMoUFJPTUlTRSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1uYXRpdmUtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcblxudmFyIE5hdGl2ZVByb21pc2VQcm90b3R5cGUgPSBOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IgJiYgTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuLy8gU2FmYXJpIGJ1ZyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjAwODI5XG52YXIgTk9OX0dFTkVSSUMgPSAhIU5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL25vLXRoZW5hYmxlIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIE5hdGl2ZVByb21pc2VQcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5maW5hbGx5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHByb3RvOiB0cnVlLCByZWFsOiB0cnVlLCBmb3JjZWQ6IE5PTl9HRU5FUklDIH0sIHtcbiAgJ2ZpbmFsbHknOiBmdW5jdGlvbiAob25GaW5hbGx5KSB7XG4gICAgdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgZ2V0QnVpbHRJbignUHJvbWlzZScpKTtcbiAgICB2YXIgaXNGdW5jdGlvbiA9IGlzQ2FsbGFibGUob25GaW5hbGx5KTtcbiAgICByZXR1cm4gdGhpcy50aGVuKFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHJldHVybiB4OyB9KTtcbiAgICAgIH0gOiBvbkZpbmFsbHksXG4gICAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgdGhyb3cgZTsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5XG4gICAgKTtcbiAgfVxufSk7XG5cbi8vIG1ha2VzIHN1cmUgdGhhdCBuYXRpdmUgcHJvbWlzZS1iYXNlZCBBUElzIGBQcm9taXNlI2ZpbmFsbHlgIHByb3Blcmx5IHdvcmtzIHdpdGggcGF0Y2hlZCBgUHJvbWlzZSN0aGVuYFxuaWYgKCFJU19QVVJFICYmIGlzQ2FsbGFibGUoTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yKSkge1xuICB2YXIgbWV0aG9kID0gZ2V0QnVpbHRJbignUHJvbWlzZScpLnByb3RvdHlwZVsnZmluYWxseSddO1xuICBpZiAoTmF0aXZlUHJvbWlzZVByb3RvdHlwZVsnZmluYWxseSddICE9PSBtZXRob2QpIHtcbiAgICBkZWZpbmVCdWlsdEluKE5hdGl2ZVByb21pc2VQcm90b3R5cGUsICdmaW5hbGx5JywgbWV0aG9kLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgfVxufVxuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBzcGxpdCB0byBtb2R1bGVzIGxpc3RlZCBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5wcm9taXNlLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuYWxsJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UuY2F0Y2gnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucHJvbWlzZS5yYWNlJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmVqZWN0Jyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnByb21pc2UucmVzb2x2ZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgUFJPTUlTRV9TVEFUSUNTX0lOQ09SUkVDVF9JVEVSQVRJT04gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1zdGF0aWNzLWluY29ycmVjdC1pdGVyYXRpb24nKTtcblxuLy8gYFByb21pc2UucmFjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmFjZVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IFBST01JU0VfU1RBVElDU19JTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhQ2FsbGFibGUoQy5yZXNvbHZlKTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIGNhbGwoJHByb21pc2VSZXNvbHZlLCBDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG5cbi8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKHRoaXMpO1xuICAgIGNhbGwoY2FwYWJpbGl0eS5yZWplY3QsIHVuZGVmaW5lZCwgcik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIE5hdGl2ZVByb21pc2VDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm9taXNlLW5hdGl2ZS1jb25zdHJ1Y3RvcicpO1xudmFyIEZPUkNFRF9QUk9NSVNFX0NPTlNUUlVDVE9SID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtY29uc3RydWN0b3ItZGV0ZWN0aW9uJykuQ09OU1RSVUNUT1I7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG5cbnZhciBQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyID0gZ2V0QnVpbHRJbignUHJvbWlzZScpO1xudmFyIENIRUNLX1dSQVBQRVIgPSBJU19QVVJFICYmICFGT1JDRURfUFJPTUlTRV9DT05TVFJVQ1RPUjtcblxuLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UucmVzb2x2ZVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IgfSwge1xuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQ0hFQ0tfV1JBUFBFUiAmJiB0aGlzID09PSBQcm9taXNlQ29uc3RydWN0b3JXcmFwcGVyID8gTmF0aXZlUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZnVuY3Rpb25BcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGFDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNhbGxhYmxlJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gTVMgRWRnZSBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG52YXIgT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tcmVmbGVjdCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICBSZWZsZWN0LmFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFJlZmxlY3QuYXBwbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmFwcGx5XG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogT1BUSU9OQUxfQVJHVU1FTlRTX0xJU1QgfSwge1xuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25BcHBseShhQ2FsbGFibGUodGFyZ2V0KSwgdGhpc0FyZ3VtZW50LCBhbk9iamVjdChhcmd1bWVudHNMaXN0KSk7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGJpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZCcpO1xudmFyIGFDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWNvbnN0cnVjdG9yJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgbmF0aXZlQ29uc3RydWN0ID0gZ2V0QnVpbHRJbignUmVmbGVjdCcsICdjb25zdHJ1Y3QnKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgUmVmbGVjdC5jb25zdHJ1Y3RgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmNvbnN0cnVjdFxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XG52YXIgTkVXX1RBUkdFVF9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuICEobmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XG59KTtcblxudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxudmFyIEZPUkNFRCA9IE5FV19UQVJHRVRfQlVHIHx8IEFSR1NfQlVHO1xuXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VELCBzaGFtOiBGT1JDRUQgfSwge1xuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcbiAgICBhQ29uc3RydWN0b3IoVGFyZ2V0KTtcbiAgICBhbk9iamVjdChhcmdzKTtcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhQ29uc3RydWN0b3IoYXJndW1lbnRzWzJdKTtcbiAgICBpZiAoQVJHU19CVUcgJiYgIU5FV19UQVJHRVRfQlVHKSByZXR1cm4gbmF0aXZlQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcbiAgICBpZiAoVGFyZ2V0ID09IG5ld1RhcmdldCkge1xuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOiByZXR1cm4gbmV3IFRhcmdldCgpO1xuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICAgICAgfVxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBsb3Qgb2YgYXJndW1lbnRzIGNhc2VcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcbiAgICAgIGFwcGx5KHB1c2gsICRhcmdzLCBhcmdzKTtcbiAgICAgIHJldHVybiBuZXcgKGFwcGx5KGJpbmQsIFRhcmdldCwgJGFyZ3MpKSgpO1xuICAgIH1cbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xuICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZShpc09iamVjdChwcm90bykgPyBwcm90byA6IE9iamVjdFByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IGFwcGx5KFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1Byb3BlcnR5S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBNUyBFZGdlIGhhcyBicm9rZW4gUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSAtIHRocm93aW5nIGluc3RlYWQgb2YgcmV0dXJuaW5nIGZhbHNlXG52YXIgRVJST1JfSU5TVEVBRF9PRl9GQUxTRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eShkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHt9LCAxLCB7IHZhbHVlOiAxIH0pLCAxLCB7IHZhbHVlOiAyIH0pO1xufSk7XG5cbi8vIGBSZWZsZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5kZWZpbmVwcm9wZXJ0eVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEVSUk9SX0lOU1RFQURfT0ZfRkFMU0UsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB2YXIga2V5ID0gdG9Qcm9wZXJ0eUtleShwcm9wZXJ0eUtleSk7XG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XG4gICAgdHJ5IHtcbiAgICAgIGRlZmluZVByb3BlcnR5TW9kdWxlLmYodGFyZ2V0LCBrZXksIGF0dHJpYnV0ZXMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xuXG4vLyBgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3QuZGVsZXRlcHJvcGVydHlcbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xuICAgIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG4vLyBgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RHZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXInKTtcblxuLy8gYFJlZmxlY3QuZ2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldHByb3RvdHlwZW9mXG4kKHsgdGFyZ2V0OiAnUmVmbGVjdCcsIHN0YXQ6IHRydWUsIHNoYW06ICFDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgfSwge1xuICBnZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YodGFyZ2V0KSB7XG4gICAgcmV0dXJuIG9iamVjdEdldFByb3RvdHlwZU9mKGFuT2JqZWN0KHRhcmdldCkpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzRGF0YURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZGF0YS1kZXNjcmlwdG9yJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgUmVmbGVjdC5nZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmdldFxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcbiAgdmFyIGRlc2NyaXB0b3IsIHByb3RvdHlwZTtcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcbiAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKHRhcmdldCwgcHJvcGVydHlLZXkpO1xuICBpZiAoZGVzY3JpcHRvcikgcmV0dXJuIGlzRGF0YURlc2NyaXB0b3IoZGVzY3JpcHRvcilcbiAgICA/IGRlc2NyaXB0b3IudmFsdWVcbiAgICA6IGRlc2NyaXB0b3IuZ2V0ID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBjYWxsKGRlc2NyaXB0b3IuZ2V0LCByZWNlaXZlcik7XG4gIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCByZWNlaXZlcik7XG59XG5cbiQoeyB0YXJnZXQ6ICdSZWZsZWN0Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGdldDogZ2V0XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xuXG4vLyBgUmVmbGVjdC5oYXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0Lmhhc1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaGFzOiBmdW5jdGlvbiBoYXModGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgJGlzRXh0ZW5zaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtZXh0ZW5zaWJsZScpO1xuXG4vLyBgUmVmbGVjdC5pc0V4dGVuc2libGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWZsZWN0LmlzZXh0ZW5zaWJsZVxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICByZXR1cm4gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcblxuLy8gYFJlZmxlY3Qub3duS2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3Qub3dua2V5c1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgb3duS2V5czogb3duS2V5c1xufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbi8vIGBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVmbGVjdC5wcmV2ZW50ZXh0ZW5zaW9uc1xuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBzaGFtOiAhRlJFRVpJTkcgfSwge1xuICBwcmV2ZW50RXh0ZW5zaW9uczogZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KSB7XG4gICAgYW5PYmplY3QodGFyZ2V0KTtcbiAgICB0cnkge1xuICAgICAgdmFyIG9iamVjdFByZXZlbnRFeHRlbnNpb25zID0gZ2V0QnVpbHRJbignT2JqZWN0JywgJ3ByZXZlbnRFeHRlbnNpb25zJyk7XG4gICAgICBpZiAob2JqZWN0UHJldmVudEV4dGVuc2lvbnMpIG9iamVjdFByZXZlbnRFeHRlbnNpb25zKHRhcmdldCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcbnZhciBvYmplY3RTZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xuXG4vLyBgUmVmbGVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3Quc2V0cHJvdG90eXBlb2ZcbmlmIChvYmplY3RTZXRQcm90b3R5cGVPZikgJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlIH0sIHtcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNEYXRhRGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1kYXRhLWRlc2NyaXB0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbi8vIGBSZWZsZWN0LnNldGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZmxlY3Quc2V0XG5mdW5jdGlvbiBzZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViAvKiAsIHJlY2VpdmVyICovKSB7XG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xuICB2YXIgb3duRGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG90eXBlLCBzZXR0ZXI7XG4gIGlmICghb3duRGVzY3JpcHRvcikge1xuICAgIGlmIChpc09iamVjdChwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xuICAgICAgcmV0dXJuIHNldChwcm90b3R5cGUsIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XG4gICAgfVxuICAgIG93bkRlc2NyaXB0b3IgPSBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCk7XG4gIH1cbiAgaWYgKGlzRGF0YURlc2NyaXB0b3Iob3duRGVzY3JpcHRvcikpIHtcbiAgICBpZiAob3duRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UgfHwgIWlzT2JqZWN0KHJlY2VpdmVyKSkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXkpKSB7XG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XG4gICAgICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSwgZXhpc3RpbmdEZXNjcmlwdG9yKTtcbiAgICB9IGVsc2UgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCBWKSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0dGVyID0gb3duRGVzY3JpcHRvci5zZXQ7XG4gICAgaWYgKHNldHRlciA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZmFsc2U7XG4gICAgY2FsbChzZXR0ZXIsIHJlY2VpdmVyLCBWKTtcbiAgfSByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gTVMgRWRnZSAxNy0xOCBSZWZsZWN0LnNldCBhbGxvd3Mgc2V0dGluZyB0aGUgcHJvcGVydHkgdG8gb2JqZWN0XG4vLyB3aXRoIG5vbi13cml0YWJsZSBwcm9wZXJ0eSBvbiB0aGUgcHJvdG90eXBlXG52YXIgTVNfRURHRV9CVUcgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbiAgdmFyIG9iamVjdCA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmYobmV3IENvbnN0cnVjdG9yKCksICdhJywgeyBjb25maWd1cmFibGU6IHRydWUgfSk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1yZWZsZWN0IC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHJldHVybiBSZWZsZWN0LnNldChDb25zdHJ1Y3Rvci5wcm90b3R5cGUsICdhJywgMSwgb2JqZWN0KSAhPT0gZmFsc2U7XG59KTtcblxuJCh7IHRhcmdldDogJ1JlZmxlY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IE1TX0VER0VfQlVHIH0sIHtcbiAgc2V0OiBzZXRcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZ2V0UmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWdldC1mbGFncycpO1xudmFyIHN0aWNreUhlbHBlcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzJyk7XG52YXIgcHJveHlBY2Nlc3NvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wcm94eS1hY2Nlc3NvcicpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgVU5TVVBQT1JURURfRE9UX0FMTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtZG90LWFsbCcpO1xudmFyIFVOU1VQUE9SVEVEX05DRyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtdW5zdXBwb3J0ZWQtbmNnJyk7XG5cbnZhciBNQVRDSCA9IHdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTtcbnZhciBOYXRpdmVSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IE5hdGl2ZVJlZ0V4cC5wcm90b3R5cGU7XG52YXIgU3ludGF4RXJyb3IgPSBnbG9iYWwuU3ludGF4RXJyb3I7XG52YXIgZXhlYyA9IHVuY3VycnlUaGlzKFJlZ0V4cFByb3RvdHlwZS5leGVjKTtcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG4vLyBUT0RPOiBVc2Ugb25seSBwcm9wZXIgUmVnRXhwSWRlbnRpZmllck5hbWVcbnZhciBJU19OQ0cgPSAvXlxcPzxbXlxcc1xcZCEjJSYqKzw9PkBeXVteXFxzISMlJiorPD0+QF5dKj4vO1xudmFyIHJlMSA9IC9hL2c7XG52YXIgcmUyID0gL2EvZztcblxuLy8gXCJuZXdcIiBzaG91bGQgY3JlYXRlIGEgbmV3IG9iamVjdCwgb2xkIHdlYmtpdCBidWdcbnZhciBDT1JSRUNUX05FVyA9IG5ldyBOYXRpdmVSZWdFeHAocmUxKSAhPT0gcmUxO1xuXG52YXIgTUlTU0VEX1NUSUNLWSA9IHN0aWNreUhlbHBlcnMuTUlTU0VEX1NUSUNLWTtcbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xuXG52YXIgQkFTRV9GT1JDRUQgPSBERVNDUklQVE9SUyAmJlxuICAoIUNPUlJFQ1RfTkVXIHx8IE1JU1NFRF9TVElDS1kgfHwgVU5TVVBQT1JURURfRE9UX0FMTCB8fCBVTlNVUFBPUlRFRF9OQ0cgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJlMltNQVRDSF0gPSBmYWxzZTtcbiAgICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxuICAgIHJldHVybiBOYXRpdmVSZWdFeHAocmUxKSAhPSByZTEgfHwgTmF0aXZlUmVnRXhwKHJlMikgPT0gcmUyIHx8IE5hdGl2ZVJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xuICB9KSk7XG5cbnZhciBoYW5kbGVEb3RBbGwgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBicmFja2V0cyA9IGZhbHNlO1xuICB2YXIgY2hyO1xuICBmb3IgKDsgaW5kZXggPD0gbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgY2hyID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICAgIGlmIChjaHIgPT09ICdcXFxcJykge1xuICAgICAgcmVzdWx0ICs9IGNociArIGNoYXJBdChzdHJpbmcsICsraW5kZXgpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmICghYnJhY2tldHMgJiYgY2hyID09PSAnLicpIHtcbiAgICAgIHJlc3VsdCArPSAnW1xcXFxzXFxcXFNdJztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNociA9PT0gJ1snKSB7XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAnXScpIHtcbiAgICAgICAgYnJhY2tldHMgPSBmYWxzZTtcbiAgICAgIH0gcmVzdWx0ICs9IGNocjtcbiAgICB9XG4gIH0gcmV0dXJuIHJlc3VsdDtcbn07XG5cbnZhciBoYW5kbGVOQ0cgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIHZhciBuYW1lZCA9IFtdO1xuICB2YXIgbmFtZXMgPSB7fTtcbiAgdmFyIGJyYWNrZXRzID0gZmFsc2U7XG4gIHZhciBuY2cgPSBmYWxzZTtcbiAgdmFyIGdyb3VwaWQgPSAwO1xuICB2YXIgZ3JvdXBuYW1lID0gJyc7XG4gIHZhciBjaHI7XG4gIGZvciAoOyBpbmRleCA8PSBsZW5ndGg7IGluZGV4KyspIHtcbiAgICBjaHIgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gICAgaWYgKGNociA9PT0gJ1xcXFwnKSB7XG4gICAgICBjaHIgPSBjaHIgKyBjaGFyQXQoc3RyaW5nLCArK2luZGV4KTtcbiAgICB9IGVsc2UgaWYgKGNociA9PT0gJ10nKSB7XG4gICAgICBicmFja2V0cyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoIWJyYWNrZXRzKSBzd2l0Y2ggKHRydWUpIHtcbiAgICAgIGNhc2UgY2hyID09PSAnWyc6XG4gICAgICAgIGJyYWNrZXRzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGNociA9PT0gJygnOlxuICAgICAgICBpZiAoZXhlYyhJU19OQ0csIHN0cmluZ1NsaWNlKHN0cmluZywgaW5kZXggKyAxKSkpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICAgIG5jZyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IGNocjtcbiAgICAgICAgZ3JvdXBpZCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIGNhc2UgY2hyID09PSAnPicgJiYgbmNnOlxuICAgICAgICBpZiAoZ3JvdXBuYW1lID09PSAnJyB8fCBoYXNPd24obmFtZXMsIGdyb3VwbmFtZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoJ0ludmFsaWQgY2FwdHVyZSBncm91cCBuYW1lJyk7XG4gICAgICAgIH1cbiAgICAgICAgbmFtZXNbZ3JvdXBuYW1lXSA9IHRydWU7XG4gICAgICAgIG5hbWVkW25hbWVkLmxlbmd0aF0gPSBbZ3JvdXBuYW1lLCBncm91cGlkXTtcbiAgICAgICAgbmNnID0gZmFsc2U7XG4gICAgICAgIGdyb3VwbmFtZSA9ICcnO1xuICAgICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgaWYgKG5jZykgZ3JvdXBuYW1lICs9IGNocjtcbiAgICBlbHNlIHJlc3VsdCArPSBjaHI7XG4gIH0gcmV0dXJuIFtyZXN1bHQsIG5hbWVkXTtcbn07XG5cbi8vIGBSZWdFeHBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC1jb25zdHJ1Y3RvclxuaWYgKGlzRm9yY2VkKCdSZWdFeHAnLCBCQVNFX0ZPUkNFRCkpIHtcbiAgdmFyIFJlZ0V4cFdyYXBwZXIgPSBmdW5jdGlvbiBSZWdFeHAocGF0dGVybiwgZmxhZ3MpIHtcbiAgICB2YXIgdGhpc0lzUmVnRXhwID0gaXNQcm90b3R5cGVPZihSZWdFeHBQcm90b3R5cGUsIHRoaXMpO1xuICAgIHZhciBwYXR0ZXJuSXNSZWdFeHAgPSBpc1JlZ0V4cChwYXR0ZXJuKTtcbiAgICB2YXIgZmxhZ3NBcmVVbmRlZmluZWQgPSBmbGFncyA9PT0gdW5kZWZpbmVkO1xuICAgIHZhciBncm91cHMgPSBbXTtcbiAgICB2YXIgcmF3UGF0dGVybiA9IHBhdHRlcm47XG4gICAgdmFyIHJhd0ZsYWdzLCBkb3RBbGwsIHN0aWNreSwgaGFuZGxlZCwgcmVzdWx0LCBzdGF0ZTtcblxuICAgIGlmICghdGhpc0lzUmVnRXhwICYmIHBhdHRlcm5Jc1JlZ0V4cCAmJiBmbGFnc0FyZVVuZGVmaW5lZCAmJiBwYXR0ZXJuLmNvbnN0cnVjdG9yID09PSBSZWdFeHBXcmFwcGVyKSB7XG4gICAgICByZXR1cm4gcGF0dGVybjtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybklzUmVnRXhwIHx8IGlzUHJvdG90eXBlT2YoUmVnRXhwUHJvdG90eXBlLCBwYXR0ZXJuKSkge1xuICAgICAgcGF0dGVybiA9IHBhdHRlcm4uc291cmNlO1xuICAgICAgaWYgKGZsYWdzQXJlVW5kZWZpbmVkKSBmbGFncyA9IGdldFJlZ0V4cEZsYWdzKHJhd1BhdHRlcm4pO1xuICAgIH1cblxuICAgIHBhdHRlcm4gPSBwYXR0ZXJuID09PSB1bmRlZmluZWQgPyAnJyA6IHRvU3RyaW5nKHBhdHRlcm4pO1xuICAgIGZsYWdzID0gZmxhZ3MgPT09IHVuZGVmaW5lZCA/ICcnIDogdG9TdHJpbmcoZmxhZ3MpO1xuICAgIHJhd1BhdHRlcm4gPSBwYXR0ZXJuO1xuXG4gICAgaWYgKFVOU1VQUE9SVEVEX0RPVF9BTEwgJiYgJ2RvdEFsbCcgaW4gcmUxKSB7XG4gICAgICBkb3RBbGwgPSAhIWZsYWdzICYmIHN0cmluZ0luZGV4T2YoZmxhZ3MsICdzJykgPiAtMTtcbiAgICAgIGlmIChkb3RBbGwpIGZsYWdzID0gcmVwbGFjZShmbGFncywgL3MvZywgJycpO1xuICAgIH1cblxuICAgIHJhd0ZsYWdzID0gZmxhZ3M7XG5cbiAgICBpZiAoTUlTU0VEX1NUSUNLWSAmJiAnc3RpY2t5JyBpbiByZTEpIHtcbiAgICAgIHN0aWNreSA9ICEhZmxhZ3MgJiYgc3RyaW5nSW5kZXhPZihmbGFncywgJ3knKSA+IC0xO1xuICAgICAgaWYgKHN0aWNreSAmJiBVTlNVUFBPUlRFRF9ZKSBmbGFncyA9IHJlcGxhY2UoZmxhZ3MsIC95L2csICcnKTtcbiAgICB9XG5cbiAgICBpZiAoVU5TVVBQT1JURURfTkNHKSB7XG4gICAgICBoYW5kbGVkID0gaGFuZGxlTkNHKHBhdHRlcm4pO1xuICAgICAgcGF0dGVybiA9IGhhbmRsZWRbMF07XG4gICAgICBncm91cHMgPSBoYW5kbGVkWzFdO1xuICAgIH1cblxuICAgIHJlc3VsdCA9IGluaGVyaXRJZlJlcXVpcmVkKE5hdGl2ZVJlZ0V4cChwYXR0ZXJuLCBmbGFncyksIHRoaXNJc1JlZ0V4cCA/IHRoaXMgOiBSZWdFeHBQcm90b3R5cGUsIFJlZ0V4cFdyYXBwZXIpO1xuXG4gICAgaWYgKGRvdEFsbCB8fCBzdGlja3kgfHwgZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZShyZXN1bHQpO1xuICAgICAgaWYgKGRvdEFsbCkge1xuICAgICAgICBzdGF0ZS5kb3RBbGwgPSB0cnVlO1xuICAgICAgICBzdGF0ZS5yYXcgPSBSZWdFeHBXcmFwcGVyKGhhbmRsZURvdEFsbChwYXR0ZXJuKSwgcmF3RmxhZ3MpO1xuICAgICAgfVxuICAgICAgaWYgKHN0aWNreSkgc3RhdGUuc3RpY2t5ID0gdHJ1ZTtcbiAgICAgIGlmIChncm91cHMubGVuZ3RoKSBzdGF0ZS5ncm91cHMgPSBncm91cHM7XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm4gIT09IHJhd1BhdHRlcm4pIHRyeSB7XG4gICAgICAvLyBmYWlscyBpbiBvbGQgZW5naW5lcywgYnV0IHdlIGhhdmUgbm8gYWx0ZXJuYXRpdmVzIGZvciB1bnN1cHBvcnRlZCByZWdleCBzeW50YXhcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShyZXN1bHQsICdzb3VyY2UnLCByYXdQYXR0ZXJuID09PSAnJyA/ICcoPzopJyA6IHJhd1BhdHRlcm4pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgZm9yICh2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoTmF0aXZlUmVnRXhwKSwgaW5kZXggPSAwOyBrZXlzLmxlbmd0aCA+IGluZGV4Oykge1xuICAgIHByb3h5QWNjZXNzb3IoUmVnRXhwV3JhcHBlciwgTmF0aXZlUmVnRXhwLCBrZXlzW2luZGV4KytdKTtcbiAgfVxuXG4gIFJlZ0V4cFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFJlZ0V4cFdyYXBwZXI7XG4gIFJlZ0V4cFdyYXBwZXIucHJvdG90eXBlID0gUmVnRXhwUHJvdG90eXBlO1xuICBkZWZpbmVCdWlsdEluKGdsb2JhbCwgJ1JlZ0V4cCcsIFJlZ0V4cFdyYXBwZXIsIHsgY29uc3RydWN0b3I6IHRydWUgfSk7XG59XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0LXJlZ2V4cC1AQHNwZWNpZXNcbnNldFNwZWNpZXMoJ1JlZ0V4cCcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yJyk7XG52YXIgcmVnRXhwRmxhZ3MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWZsYWdzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gYmFiZWwtbWluaWZ5IGFuZCBDbG9zdXJlIENvbXBpbGVyIHRyYW5zcGlsZXMgUmVnRXhwKCcuJywgJ2QnKSAtPiAvLi9kIGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcbnZhciBSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFJlZ0V4cFByb3RvdHlwZSA9IFJlZ0V4cC5wcm90b3R5cGU7XG5cbnZhciBGT1JDRUQgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBJTkRJQ0VTX1NVUFBPUlQgPSB0cnVlO1xuICB0cnkge1xuICAgIFJlZ0V4cCgnLicsICdkJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgSU5ESUNFU19TVVBQT1JUID0gZmFsc2U7XG4gIH1cblxuICB2YXIgTyA9IHt9O1xuICAvLyBtb2Rlcm4gVjggYnVnXG4gIHZhciBjYWxscyA9ICcnO1xuICB2YXIgZXhwZWN0ZWQgPSBJTkRJQ0VTX1NVUFBPUlQgPyAnZGdpbXN5JyA6ICdnaW1zeSc7XG5cbiAgdmFyIGFkZEdldHRlciA9IGZ1bmN0aW9uIChrZXksIGNocikge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICBjYWxscyArPSBjaHI7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IH0pO1xuICB9O1xuXG4gIHZhciBwYWlycyA9IHtcbiAgICBkb3RBbGw6ICdzJyxcbiAgICBnbG9iYWw6ICdnJyxcbiAgICBpZ25vcmVDYXNlOiAnaScsXG4gICAgbXVsdGlsaW5lOiAnbScsXG4gICAgc3RpY2t5OiAneSdcbiAgfTtcblxuICBpZiAoSU5ESUNFU19TVVBQT1JUKSBwYWlycy5oYXNJbmRpY2VzID0gJ2QnO1xuXG4gIGZvciAodmFyIGtleSBpbiBwYWlycykgYWRkR2V0dGVyKGtleSwgcGFpcnNba2V5XSk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZVxuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihSZWdFeHBQcm90b3R5cGUsICdmbGFncycpLmdldC5jYWxsKE8pO1xuXG4gIHJldHVybiByZXN1bHQgIT09IGV4cGVjdGVkIHx8IGNhbGxzICE9PSBleHBlY3RlZDtcbn0pO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5pZiAoRk9SQ0VEKSBkZWZpbmVCdWlsdEluQWNjZXNzb3IoUmVnRXhwUHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZWdFeHBGbGFnc1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tbmFtZScpLlBST1BFUjtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldFJlZ0V4cEZsYWdzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1nZXQtZmxhZ3MnKTtcblxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgUmVnRXhwUHJvdG90eXBlID0gUmVnRXhwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVUb1N0cmluZyA9IFJlZ0V4cFByb3RvdHlwZVtUT19TVFJJTkddO1xuXG52YXIgTk9UX0dFTkVSSUMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IHJldHVybiBuYXRpdmVUb1N0cmluZy5jYWxsKHsgc291cmNlOiAnYScsIGZsYWdzOiAnYicgfSkgIT0gJy9hL2InOyB9KTtcbi8vIEZGNDQtIFJlZ0V4cCN0b1N0cmluZyBoYXMgYSB3cm9uZyBuYW1lXG52YXIgSU5DT1JSRUNUX05BTUUgPSBQUk9QRVJfRlVOQ1RJT05fTkFNRSAmJiBuYXRpdmVUb1N0cmluZy5uYW1lICE9IFRPX1NUUklORztcblxuLy8gYFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoTk9UX0dFTkVSSUMgfHwgSU5DT1JSRUNUX05BTUUpIHtcbiAgZGVmaW5lQnVpbHRJbihSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHZhciBSID0gYW5PYmplY3QodGhpcyk7XG4gICAgdmFyIHBhdHRlcm4gPSAkdG9TdHJpbmcoUi5zb3VyY2UpO1xuICAgIHZhciBmbGFncyA9ICR0b1N0cmluZyhnZXRSZWdFeHBGbGFncyhSKSk7XG4gICAgcmV0dXJuICcvJyArIHBhdHRlcm4gKyAnLycgKyBmbGFncztcbiAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY29sbGVjdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uJyk7XG52YXIgY29sbGVjdGlvblN0cm9uZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZycpO1xuXG4vLyBgU2V0YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zZXQtb2JqZWN0c1xuY29sbGVjdGlvbignU2V0JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnNldC5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmFuY2hvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYW5jaG9yXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnYW5jaG9yJykgfSwge1xuICBhbmNob3I6IGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnbmFtZScsIG5hbWUpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5iaWdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmJpZ1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JpZycpIH0sIHtcbiAgYmlnOiBmdW5jdGlvbiBiaWcoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmJsaW5rYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5ibGlua1xuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JsaW5rJykgfSwge1xuICBibGluazogZnVuY3Rpb24gYmxpbmsoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JsaW5rJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuYm9sZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuYm9sZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2JvbGQnKSB9LCB7XG4gIGJvbGQ6IGZ1bmN0aW9uIGJvbGQoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2InLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHtcbiAgICByZXR1cm4gY29kZUF0KHRoaXMsIHBvcyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtZW5kc3dpdGggLS0gc2FmZVxudmFyIG5hdGl2ZUVuZHNXaXRoID0gdW5jdXJyeVRoaXMoJycuZW5kc1dpdGgpO1xudmFyIHNsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG52YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnZW5kc1dpdGgnKTtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL3B1bGwvNzAyXG52YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuZW5kc3dpdGhcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiAhTUROX1BPTFlGSUxMX0JVRyAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgfSwge1xuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XG4gICAgdmFyIHRoYXQgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTtcbiAgICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7XG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gICAgdmFyIGxlbiA9IHRoYXQubGVuZ3RoO1xuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogbWluKHRvTGVuZ3RoKGVuZFBvc2l0aW9uKSwgbGVuKTtcbiAgICB2YXIgc2VhcmNoID0gdG9TdHJpbmcoc2VhcmNoU3RyaW5nKTtcbiAgICByZXR1cm4gbmF0aXZlRW5kc1dpdGhcbiAgICAgID8gbmF0aXZlRW5kc1dpdGgodGhhdCwgc2VhcmNoLCBlbmQpXG4gICAgICA6IHNsaWNlKHRoYXQsIGVuZCAtIHNlYXJjaC5sZW5ndGgsIGVuZCkgPT09IHNlYXJjaDtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZml4ZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZpeGVkXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZml4ZWQnKSB9LCB7XG4gIGZpeGVkOiBmdW5jdGlvbiBmaXhlZCgpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAndHQnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5mb250Y29sb3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvclxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ2ZvbnRjb2xvcicpIH0sIHtcbiAgZm9udGNvbG9yOiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuZm9udHNpemVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmZvbnRzaXplXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnZm9udHNpemUnKSB9LCB7XG4gIGZvbnRzaXplOiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2ZvbnQnLCAnc2l6ZScsIHNpemUpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG52YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yO1xudmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLWZyb21jb2RlcG9pbnQgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciAkZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50O1xudmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTtcblxuLy8gbGVuZ3RoIHNob3VsZCBiZSAxLCBvbGQgRkYgcHJvYmxlbVxudmFyIElOQ09SUkVDVF9MRU5HVEggPSAhISRmcm9tQ29kZVBvaW50ICYmICRmcm9tQ29kZVBvaW50Lmxlbmd0aCAhPSAxO1xuXG4vLyBgU3RyaW5nLmZyb21Db2RlUG9pbnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcuZnJvbWNvZGVwb2ludFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHN0YXQ6IHRydWUsIGFyaXR5OiAxLCBmb3JjZWQ6IElOQ09SUkVDVF9MRU5HVEggfSwge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHtcbiAgICB2YXIgZWxlbWVudHMgPSBbXTtcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGNvZGU7XG4gICAgd2hpbGUgKGxlbmd0aCA+IGkpIHtcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XG4gICAgICBpZiAodG9BYnNvbHV0ZUluZGV4KGNvZGUsIDB4MTBGRkZGKSAhPT0gY29kZSkgdGhyb3cgJFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xuICAgICAgZWxlbWVudHNbaV0gPSBjb2RlIDwgMHgxMDAwMFxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxuICAgICAgICA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhEODAwLCBjb2RlICUgMHg0MDAgKyAweERDMDApO1xuICAgIH0gcmV0dXJuIGpvaW4oZWxlbWVudHMsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxudmFyIHN0cmluZ0luZGV4T2YgPSB1bmN1cnJ5VGhpcygnJy5pbmRleE9mKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5zdHJpbmdJbmRleE9mKFxuICAgICAgdG9TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSksXG4gICAgICB0b1N0cmluZyhub3RBUmVnRXhwKHNlYXJjaFN0cmluZykpLFxuICAgICAgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWRcbiAgICApO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5pdGFsaWNzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnaXRhbGljcycpIH0sIHtcbiAgaXRhbGljczogZnVuY3Rpb24gaXRhbGljcygpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnaScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNoYXJBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY2hhckF0O1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvci1kZWZpbmUnKTtcbnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QnKTtcblxudmFyIFNUUklOR19JVEVSQVRPUiA9ICdTdHJpbmcgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiB0b1N0cmluZyhpdGVyYXRlZCksXG4gICAgaW5kZXg6IDBcbiAgfSk7XG4vLyBgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiBuZXh0KCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nO1xuICB2YXIgaW5kZXggPSBzdGF0ZS5pbmRleDtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTtcbiAgcG9pbnQgPSBjaGFyQXQoc3RyaW5nLCBpbmRleCk7XG4gIHN0YXRlLmluZGV4ICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocG9pbnQsIGZhbHNlKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLmxpbmtgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmxpbmtcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdsaW5rJykgfSwge1xuICBsaW5rOiBmdW5jdGlvbiBsaW5rKHVybCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjYWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwnKTtcbnZhciBmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgaXNOdWxsT3JVbmRlZmluZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xuXG4vLyBAQG1hdGNoIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygnbWF0Y2gnLCBmdW5jdGlvbiAoTUFUQ0gsIG5hdGl2ZU1hdGNoLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXG4gICAgZnVuY3Rpb24gbWF0Y2gocmVnZXhwKSB7XG4gICAgICB2YXIgTyA9IHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcyk7XG4gICAgICB2YXIgbWF0Y2hlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHJlZ2V4cCkgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBNQVRDSCk7XG4gICAgICByZXR1cm4gbWF0Y2hlciA/IGNhbGwobWF0Y2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0odG9TdHJpbmcoTykpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1hdGNoLCByeCwgUyk7XG5cbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgaWYgKCFyeC5nbG9iYWwpIHJldHVybiByZWdFeHBFeGVjKHJ4LCBTKTtcblxuICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgQSA9IFtdO1xuICAgICAgdmFyIG4gPSAwO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBtYXRjaFN0ciA9IHRvU3RyaW5nKHJlc3VsdFswXSk7XG4gICAgICAgIEFbbl0gPSBtYXRjaFN0cjtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgICAgbisrO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRwYWRFbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXBhZCcpLmVuZDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRFbmRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnBhZGVuZFxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IFdFQktJVF9CVUcgfSwge1xuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XG4gICAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgJHBhZFN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQnKS5zdGFydDtcbnZhciBXRUJLSVRfQlVHID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1wYWQtd2Via2l0LWJ1ZycpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5wYWRTdGFydGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUucGFkc3RhcnRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBXRUJLSVRfQlVHIH0sIHtcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcbiAgICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG5cbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgU3RyaW5nLnJhd2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5yYXdcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBzdGF0OiB0cnVlIH0sIHtcbiAgcmF3OiBmdW5jdGlvbiByYXcodGVtcGxhdGUpIHtcbiAgICB2YXIgcmF3VGVtcGxhdGUgPSB0b0luZGV4ZWRPYmplY3QodG9PYmplY3QodGVtcGxhdGUpLnJhdyk7XG4gICAgdmFyIGxpdGVyYWxTZWdtZW50cyA9IGxlbmd0aE9mQXJyYXlMaWtlKHJhd1RlbXBsYXRlKTtcbiAgICBpZiAoIWxpdGVyYWxTZWdtZW50cykgcmV0dXJuICcnO1xuICAgIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBlbGVtZW50cyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgcHVzaChlbGVtZW50cywgdG9TdHJpbmcocmF3VGVtcGxhdGVbaSsrXSkpO1xuICAgICAgaWYgKGkgPT09IGxpdGVyYWxTZWdtZW50cykgcmV0dXJuIGpvaW4oZWxlbWVudHMsICcnKTtcbiAgICAgIGlmIChpIDwgYXJndW1lbnRzTGVuZ3RoKSBwdXNoKGVsZW1lbnRzLCB0b1N0cmluZyhhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gIH1cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1yZXBlYXQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUucmVwZWF0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBlYXRcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSB9LCB7XG4gIHJlcGVhdDogcmVwZWF0XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhcHBseSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1hcHBseScpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIHRvSW50ZWdlck9ySW5maW5pdHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eScpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0TWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1tZXRob2QnKTtcbnZhciBnZXRTdWJzdGl0dXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LXN1YnN0aXR1dGlvbicpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBjb25jYXQgPSB1bmN1cnJ5VGhpcyhbXS5jb25jYXQpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciBzdHJpbmdJbmRleE9mID0gdW5jdXJyeVRoaXMoJycuaW5kZXhPZik7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xufTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvcHJlZmVyLWVzY2FwZS1yZXBsYWNlbWVudC1kb2xsYXItY2hhciAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICByZXR1cm4gJ2EnLnJlcGxhY2UoLy4vLCAnJDAnKSA9PT0gJyQwJztcbn0pKCk7XG5cbi8vIFNhZmFyaSA8PSAxMy4wLjMoPykgc3Vic3RpdHV0ZXMgbnRoIGNhcHR1cmUgd2hlcmUgbj5tIHdpdGggYW4gZW1wdHkgc3RyaW5nXG52YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAoLy4vW1JFUExBQ0VdKSB7XG4gICAgcmV0dXJuIC8uL1tSRVBMQUNFXSgnYScsICckMCcpID09PSAnJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tdXNlbGVzcy1kb2xsYXItcmVwbGFjZW1lbnRzIC0tIGZhbHNlIHBvc2l0aXZlXG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gQEByZXBsYWNlIGxvZ2ljXG5maXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYygncmVwbGFjZScsIGZ1bmN0aW9uIChfLCBuYXRpdmVSZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHNlYXJjaFZhbHVlKSA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZWFyY2hWYWx1ZSwgUkVQTEFDRSk7XG4gICAgICByZXR1cm4gcmVwbGFjZXJcbiAgICAgICAgPyBjYWxsKHJlcGxhY2VyLCBzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxuICAgICAgICA6IGNhbGwobmF0aXZlUmVwbGFjZSwgdG9TdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAcmVwbGFjZVxuICAgIGZ1bmN0aW9uIChzdHJpbmcsIHJlcGxhY2VWYWx1ZSkge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PSAnc3RyaW5nJyAmJlxuICAgICAgICBzdHJpbmdJbmRleE9mKHJlcGxhY2VWYWx1ZSwgVU5TQUZFX1NVQlNUSVRVVEUpID09PSAtMSAmJlxuICAgICAgICBzdHJpbmdJbmRleE9mKHJlcGxhY2VWYWx1ZSwgJyQ8JykgPT09IC0xXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByeCwgUywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSBpc0NhbGxhYmxlKHJlcGxhY2VWYWx1ZSk7XG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSB0b1N0cmluZyhyZXBsYWNlVmFsdWUpO1xuXG4gICAgICB2YXIgZ2xvYmFsID0gcnguZ2xvYmFsO1xuICAgICAgaWYgKGdsb2JhbCkge1xuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xuICAgICAgICByeC5sYXN0SW5kZXggPSAwO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XG5cbiAgICAgICAgcHVzaChyZXN1bHRzLCByZXN1bHQpO1xuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XG5cbiAgICAgICAgdmFyIG1hdGNoU3RyID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XG4gICAgICB2YXIgbmV4dFNvdXJjZVBvc2l0aW9uID0gMDtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xuXG4gICAgICAgIHZhciBtYXRjaGVkID0gdG9TdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXJPckluZmluaXR5KHJlc3VsdC5pbmRleCksIFMubGVuZ3RoKSwgMCk7XG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cbiAgICAgICAgLy8gICBjYXB0dXJlcyA9IHJlc3VsdC5zbGljZSgxKS5tYXAobWF5YmVUb1N0cmluZylcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcbiAgICAgICAgLy8gY2F1c2VzIGEgY3Jhc2ggKGh0dHBzOi8vcGFzdGViaW4uY29tL04yMVF6ZVFBKSB3aGVuIHRyeWluZyB0byBkZWJ1ZyBpdC5cbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIHB1c2goY2FwdHVyZXMsIG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XG4gICAgICAgIHZhciBuYW1lZENhcHR1cmVzID0gcmVzdWx0Lmdyb3VwcztcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IGNvbmNhdChbbWF0Y2hlZF0sIGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcHVzaChyZXBsYWNlckFyZ3MsIG5hbWVkQ2FwdHVyZXMpO1xuICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IHRvU3RyaW5nKGFwcGx5KHJlcGxhY2VWYWx1ZSwgdW5kZWZpbmVkLCByZXBsYWNlckFyZ3MpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IHN0cmluZ1NsaWNlKFMsIG5leHRTb3VyY2VQb3NpdGlvbiwgcG9zaXRpb24pICsgcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgc3RyaW5nU2xpY2UoUywgbmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59LCAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgfHwgIVJFUExBQ0VfS0VFUFNfJDAgfHwgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc051bGxPclVuZGVmaW5lZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NhbWUtdmFsdWUnKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBnZXRNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LW1ldGhvZCcpO1xudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcblxuLy8gQEBzZWFyY2ggbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdzZWFyY2gnLCBmdW5jdGlvbiAoU0VBUkNILCBuYXRpdmVTZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xuICByZXR1cm4gW1xuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNlYXJjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNlYXJjaFxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciBzZWFyY2hlciA9IGlzTnVsbE9yVW5kZWZpbmVkKHJlZ2V4cCkgPyB1bmRlZmluZWQgOiBnZXRNZXRob2QocmVnZXhwLCBTRUFSQ0gpO1xuICAgICAgcmV0dXJuIHNlYXJjaGVyID8gY2FsbChzZWFyY2hlciwgcmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKHRvU3RyaW5nKE8pKTtcbiAgICB9LFxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc2VhcmNoXG4gICAgZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QodGhpcyk7XG4gICAgICB2YXIgUyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZVNlYXJjaCwgcngsIFMpO1xuXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XG5cbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zbWFsbGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc21hbGxcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzbWFsbCcpIH0sIHtcbiAgc21hbGw6IGZ1bmN0aW9uIHNtYWxsKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzbWFsbCcsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFwcGx5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkJyk7XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGdldE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtbWV0aG9kJyk7XG52YXIgYXJyYXlTbGljZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUnKTtcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVnZXhwLWV4ZWMnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1zdGlja3ktaGVscGVycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBVTlNVUFBPUlRFRF9ZID0gc3RpY2t5SGVscGVycy5VTlNVUFBPUlRFRF9ZO1xudmFyIE1BWF9VSU5UMzIgPSAweEZGRkZGRkZGO1xudmFyIG1pbiA9IE1hdGgubWluO1xudmFyICRwdXNoID0gW10ucHVzaDtcbnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcygkcHVzaCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG5cbi8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xuLy8gV2VleCBKUyBoYXMgZnJvemVuIGJ1aWx0LWluIHByb3RvdHlwZXMsIHNvIHVzZSB0cnkgLyBjYXRjaCB3cmFwcGVyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICB2YXIgcmUgPSAvKD86KS87XG4gIHZhciBvcmlnaW5hbEV4ZWMgPSByZS5leGVjO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcbiAgcmV0dXJuIHJlc3VsdC5sZW5ndGggIT09IDIgfHwgcmVzdWx0WzBdICE9PSAnYScgfHwgcmVzdWx0WzFdICE9PSAnYic7XG59KTtcblxuLy8gQEBzcGxpdCBsb2dpY1xuZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMoJ3NwbGl0JywgZnVuY3Rpb24gKFNQTElULCBuYXRpdmVTcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XG4gIHZhciBpbnRlcm5hbFNwbGl0O1xuICBpZiAoXG4gICAgJ2FiYmMnLnNwbGl0KC8oYikqLylbMV0gPT0gJ2MnIHx8XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1lbXB0eS1ncm91cCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZ1xuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT0gNCB8fFxuICAgICdhYicuc3BsaXQoLyg/OmFiKSovKS5sZW5ndGggIT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT0gNCB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxIHx8XG4gICAgJycuc3BsaXQoLy4/LykubGVuZ3RoXG4gICkge1xuICAgIC8vIGJhc2VkIG9uIGVzNS1zaGltIGltcGxlbWVudGF0aW9uLCBuZWVkIHRvIHJld29yayBpdFxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIHN0cmluZyA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHJldHVybiBbc3RyaW5nXTtcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICBpZiAoIWlzUmVnRXhwKHNlcGFyYXRvcikpIHtcbiAgICAgICAgcmV0dXJuIGNhbGwobmF0aXZlU3BsaXQsIHN0cmluZywgc2VwYXJhdG9yLCBsaW0pO1xuICAgICAgfVxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcbiAgICAgIHZhciBsYXN0TGFzdEluZGV4ID0gMDtcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XG4gICAgICB2YXIgc2VwYXJhdG9yQ29weSA9IG5ldyBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XG4gICAgICB3aGlsZSAobWF0Y2ggPSBjYWxsKHJlZ2V4cEV4ZWMsIHNlcGFyYXRvckNvcHksIHN0cmluZykpIHtcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weS5sYXN0SW5kZXg7XG4gICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCwgbWF0Y2guaW5kZXgpKTtcbiAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIGFwcGx5KCRwdXNoLCBvdXRwdXQsIGFycmF5U2xpY2UobWF0Y2gsIDEpKTtcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XG4gICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltKSBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weS5sYXN0SW5kZXggPT09IG1hdGNoLmluZGV4KSBzZXBhcmF0b3JDb3B5Lmxhc3RJbmRleCsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXG4gICAgICB9XG4gICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICBpZiAobGFzdExlbmd0aCB8fCAhZXhlYyhzZXBhcmF0b3JDb3B5LCAnJykpIHB1c2gob3V0cHV0LCAnJyk7XG4gICAgICB9IGVsc2UgcHVzaChvdXRwdXQsIHN0cmluZ1NsaWNlKHN0cmluZywgbGFzdExhc3RJbmRleCkpO1xuICAgICAgcmV0dXJuIG91dHB1dC5sZW5ndGggPiBsaW0gPyBhcnJheVNsaWNlKG91dHB1dCwgMCwgbGltKSA6IG91dHB1dDtcbiAgICB9O1xuICAvLyBDaGFrcmEsIFY4XG4gIH0gZWxzZSBpZiAoJzAnLnNwbGl0KHVuZGVmaW5lZCwgMCkubGVuZ3RoKSB7XG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6IGNhbGwobmF0aXZlU3BsaXQsIHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG4gIH0gZWxzZSBpbnRlcm5hbFNwbGl0ID0gbmF0aXZlU3BsaXQ7XG5cbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XG4gICAgZnVuY3Rpb24gc3BsaXQoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgdmFyIE8gPSByZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpO1xuICAgICAgdmFyIHNwbGl0dGVyID0gaXNOdWxsT3JVbmRlZmluZWQoc2VwYXJhdG9yKSA/IHVuZGVmaW5lZCA6IGdldE1ldGhvZChzZXBhcmF0b3IsIFNQTElUKTtcbiAgICAgIHJldHVybiBzcGxpdHRlclxuICAgICAgICA/IGNhbGwoc3BsaXR0ZXIsIHNlcGFyYXRvciwgTywgbGltaXQpXG4gICAgICAgIDogY2FsbChpbnRlcm5hbFNwbGl0LCB0b1N0cmluZyhPKSwgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcbiAgICAvL1xuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcbiAgICAvLyB0aGUgJ3knIGZsYWcuXG4gICAgZnVuY3Rpb24gKHN0cmluZywgbGltaXQpIHtcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHRoaXMpO1xuICAgICAgdmFyIFMgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShpbnRlcm5hbFNwbGl0LCByeCwgUywgbGltaXQsIGludGVybmFsU3BsaXQgIT09IG5hdGl2ZVNwbGl0KTtcblxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xuXG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcblxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocngubXVsdGlsaW5lID8gJ20nIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcbiAgICAgICAgICAgICAgICAgIChVTlNVUFBPUlRFRF9ZID8gJ2cnIDogJ3knKTtcblxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cbiAgICAgIHZhciBzcGxpdHRlciA9IG5ldyBDKFVOU1VQUE9SVEVEX1kgPyAnXig/OicgKyByeC5zb3VyY2UgKyAnKScgOiByeCwgZmxhZ3MpO1xuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XG4gICAgICBpZiAoUy5sZW5ndGggPT09IDApIHJldHVybiBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgUykgPT09IG51bGwgPyBbU10gOiBbXTtcbiAgICAgIHZhciBwID0gMDtcbiAgICAgIHZhciBxID0gMDtcbiAgICAgIHZhciBBID0gW107XG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFVOU1VQUE9SVEVEX1kgPyAwIDogcTtcbiAgICAgICAgdmFyIHogPSBjYWxsUmVnRXhwRXhlYyhzcGxpdHRlciwgVU5TVVBQT1JURURfWSA/IHN0cmluZ1NsaWNlKFMsIHEpIDogUyk7XG4gICAgICAgIHZhciBlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxuICAgICAgICAgIChlID0gbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChVTlNVUFBPUlRFRF9ZID8gcSA6IDApKSwgUy5sZW5ndGgpKSA9PT0gcFxuICAgICAgICApIHtcbiAgICAgICAgICBxID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHEsIHVuaWNvZGVNYXRjaGluZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaChBLCBzdHJpbmdTbGljZShTLCBwLCBxKSk7XG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IHoubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBwdXNoKEEsIHpbaV0pO1xuICAgICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xuICAgICAgICAgIH1cbiAgICAgICAgICBxID0gcCA9IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHB1c2goQSwgc3RyaW5nU2xpY2UoUywgcCkpO1xuICAgICAgcmV0dXJuIEE7XG4gICAgfVxuICBdO1xufSwgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQywgVU5TVVBQT1JURURfWSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKS5mO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIG5vdEFSZWdFeHAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbm90LWEtcmVnZXhwJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciBjb3JyZWN0SXNSZWdFeHBMb2dpYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS1zdGFydHN3aXRoIC0tIHNhZmVcbnZhciBuYXRpdmVTdGFydHNXaXRoID0gdW5jdXJyeVRoaXMoJycuc3RhcnRzV2l0aCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgbWluID0gTWF0aC5taW47XG5cbnZhciBDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyA9IGNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdzdGFydHNXaXRoJyk7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9wdWxsLzcwMlxudmFyIE1ETl9QT0xZRklMTF9CVUcgPSAhSVNfUFVSRSAmJiAhQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgJiYgISFmdW5jdGlvbiAoKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmICFkZXNjcmlwdG9yLndyaXRhYmxlO1xufSgpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdGFydHN3aXRoXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIH0sIHtcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICB2YXIgdGhhdCA9IHRvU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUodGhpcykpO1xuICAgIG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKTtcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChtaW4oYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRoYXQubGVuZ3RoKSk7XG4gICAgdmFyIHNlYXJjaCA9IHRvU3RyaW5nKHNlYXJjaFN0cmluZyk7XG4gICAgcmV0dXJuIG5hdGl2ZVN0YXJ0c1dpdGhcbiAgICAgID8gbmF0aXZlU3RhcnRzV2l0aCh0aGF0LCBzZWFyY2gsIGluZGV4KVxuICAgICAgOiBzdHJpbmdTbGljZSh0aGF0LCBpbmRleCwgaW5kZXggKyBzZWFyY2gubGVuZ3RoKSA9PT0gc2VhcmNoO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUhUTUwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWh0bWwnKTtcbnZhciBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1odG1sLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS5zdHJpa2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnN0cmlrZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ0hUTUxNZXRob2QoJ3N0cmlrZScpIH0sIHtcbiAgc3RyaWtlOiBmdW5jdGlvbiBzdHJpa2UoKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY3JlYXRlSFRNTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtaHRtbCcpO1xudmFyIGZvcmNlZFN0cmluZ0hUTUxNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLWh0bWwtZm9yY2VkJyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnN1YmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3ViXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCgnc3ViJykgfSwge1xuICBzdWI6IGZ1bmN0aW9uIHN1YigpIHtcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVIVE1MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1odG1sJyk7XG52YXIgZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctaHRtbC1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuc3VwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zdXBcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBmb3JjZWRTdHJpbmdIVE1MTWV0aG9kKCdzdXAnKSB9LCB7XG4gIHN1cDogZnVuY3Rpb24gc3VwKCkge1xuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xuICB9XG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIGxpbmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1yaWdodCcpO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbUVuZGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbWVuZFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbXN0YXJ0LXRyaW1lbmQgLS0gc2FmZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbUVuZCcsIGZvcmNlZDogJycudHJpbUVuZCAhPT0gdHJpbUVuZCB9LCB7XG4gIHRyaW1FbmQ6IHRyaW1FbmRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJpbVN0YXJ0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLXN0YXJ0Jyk7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1MZWZ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltbGVmdFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN0cmluZy1wcm90b3R5cGUtdHJpbWxlZnQtdHJpbXJpZ2h0IC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgbmFtZTogJ3RyaW1TdGFydCcsIGZvcmNlZDogJycudHJpbUxlZnQgIT09IHRyaW1TdGFydCB9LCB7XG4gIHRyaW1MZWZ0OiB0cmltU3RhcnRcbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgdHJpbUVuZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1lbmQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltZW5kXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tc3RyaW5nLXByb3RvdHlwZS10cmltbGVmdC10cmltcmlnaHQgLS0gc2FmZVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBuYW1lOiAndHJpbUVuZCcsIGZvcmNlZDogJycudHJpbVJpZ2h0ICE9PSB0cmltRW5kIH0sIHtcbiAgdHJpbVJpZ2h0OiB0cmltRW5kXG59KTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIGxpbmUgZnJvbSBgY29yZS1qc0A0YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcudHJpbS1sZWZ0Jyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciB0cmltU3RhcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tc3RhcnQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbVN0YXJ0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltc3RhcnRcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1zdHJpbmctcHJvdG90eXBlLXRyaW1zdGFydC10cmltZW5kIC0tIHNhZmVcbiQoeyB0YXJnZXQ6ICdTdHJpbmcnLCBwcm90bzogdHJ1ZSwgbmFtZTogJ3RyaW1TdGFydCcsIGZvcmNlZDogJycudHJpbVN0YXJ0ICE9PSB0cmltU3RhcnQgfSwge1xuICB0cmltU3RhcnQ6IHRyaW1TdGFydFxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbScpLnRyaW07XG52YXIgZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctdHJpbS1mb3JjZWQnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUudHJpbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuJCh7IHRhcmdldDogJ1N0cmluZycsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IGZvcmNlZFN0cmluZ1RyaW1NZXRob2QoJ3RyaW0nKSB9LCB7XG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0oKSB7XG4gICAgcmV0dXJuICR0cmltKHRoaXMpO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuYXN5bmNJdGVyYXRvcmAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLmFzeW5jaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnYXN5bmNJdGVyYXRvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGlzUHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZicpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5Jyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMtZXh0ZXJuYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGRlZmluZVByb3BlcnRpZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBkZWZpbmVCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbicpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC13cmFwcGVkJyk7XG52YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcblxudmFyIEhJRERFTiA9IHNoYXJlZEtleSgnaGlkZGVuJyk7XG52YXIgU1lNQk9MID0gJ1N5bWJvbCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNZTUJPTCk7XG5cbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3RbUFJPVE9UWVBFXTtcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBTeW1ib2xQcm90b3R5cGUgPSAkU3ltYm9sICYmICRTeW1ib2xbUFJPVE9UWVBFXTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mO1xudmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjtcbnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7XG5cbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlU3ltYm9scyA9IHNoYXJlZCgnb3Atc3ltYm9scycpO1xudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG5cbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoU3ltYm9sUHJvdG90eXBlKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKGhhc093bihBbGxTeW1ib2xzLCBrZXkpKSB7XG4gICAgaWYgKCFBdHRyaWJ1dGVzLmVudW1lcmFibGUpIHtcbiAgICAgIGlmICghaGFzT3duKE8sIEhJRERFTikpIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIEhJRERFTiwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHt9KSk7XG4gICAgICBPW0hJRERFTl1ba2V5XSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChoYXNPd24oTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkgT1tISURERU5dW2tleV0gPSBmYWxzZTtcbiAgICAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pO1xuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2NyaXB0b3IoTywga2V5LCBBdHRyaWJ1dGVzKTtcbiAgfSByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywga2V5LCBBdHRyaWJ1dGVzKTtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIHByb3BlcnRpZXMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7XG4gICRmb3JFYWNoKGtleXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIURFU0NSSVBUT1JTIHx8IGNhbGwoJHByb3BlcnR5SXNFbnVtZXJhYmxlLCBwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1Byb3BlcnR5S2V5KFYpO1xuICB2YXIgZW51bWVyYWJsZSA9IGNhbGwobmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUsIHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhc093bihBbGxTeW1ib2xzLCBQKSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXNPd24odGhpcywgUCkgfHwgIWhhc093bihBbGxTeW1ib2xzLCBQKSB8fCBoYXNPd24odGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF1cbiAgICA/IGVudW1lcmFibGUgOiB0cnVlO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICB2YXIgaXQgPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1Byb3BlcnR5S2V5KFApO1xuICBpZiAoaXQgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAhaGFzT3duKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIGtleSkpIHJldHVybjtcbiAgdmFyIGRlc2NyaXB0b3IgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSk7XG4gIGlmIChkZXNjcmlwdG9yICYmIGhhc093bihBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzT3duKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlO1xuICB9XG4gIHJldHVybiBkZXNjcmlwdG9yO1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHZhciBuYW1lcyA9IG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXModG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmICghaGFzT3duKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhc093bihoaWRkZW5LZXlzLCBrZXkpKSBwdXNoKHJlc3VsdCwga2V5KTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIChPKSB7XG4gIHZhciBJU19PQkpFQ1RfUFJPVE9UWVBFID0gTyA9PT0gT2JqZWN0UHJvdG90eXBlO1xuICB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICAkZm9yRWFjaChuYW1lcywgZnVuY3Rpb24gKGtleSkge1xuICAgIGlmIChoYXNPd24oQWxsU3ltYm9scywga2V5KSAmJiAoIUlTX09CSkVDVF9QUk9UT1RZUEUgfHwgaGFzT3duKE9iamVjdFByb3RvdHlwZSwga2V5KSkpIHtcbiAgICAgIHB1c2gocmVzdWx0LCBBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmIChpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcykpIHRocm93IFR5cGVFcnJvcignU3ltYm9sIGlzIG5vdCBhIGNvbnN0cnVjdG9yJyk7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gIWFyZ3VtZW50cy5sZW5ndGggfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAkdG9TdHJpbmcoYXJndW1lbnRzWzBdKTtcbiAgICB2YXIgdGFnID0gdWlkKGRlc2NyaXB0aW9uKTtcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlKSBjYWxsKHNldHRlciwgT2JqZWN0UHJvdG90eXBlU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhc093bih0aGlzLCBISURERU4pICYmIGhhc093bih0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7XG4gICAgfTtcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogc2V0dGVyIH0pO1xuICAgIHJldHVybiB3cmFwKHRhZywgZGVzY3JpcHRpb24pO1xuICB9O1xuXG4gIFN5bWJvbFByb3RvdHlwZSA9ICRTeW1ib2xbUFJPVE9UWVBFXTtcblxuICBkZWZpbmVCdWlsdEluKFN5bWJvbFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykudGFnO1xuICB9KTtcblxuICBkZWZpbmVCdWlsdEluKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pO1xuICB9KTtcblxuICBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mID0gJGRlZmluZVByb3BlcnR5O1xuICBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydGllcztcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzRXh0ZXJuYWwuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbiAgd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gd3JhcCh3ZWxsS25vd25TeW1ib2wobmFtZSksIG5hbWUpO1xuICB9O1xuXG4gIGlmIChERVNDUklQVE9SUykge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLVN5bWJvbC1kZXNjcmlwdGlvblxuICAgIG5hdGl2ZURlZmluZVByb3BlcnR5KFN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywge1xuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuZGVzY3JpcHRpb247XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFJU19QVVJFKSB7XG4gICAgICBkZWZpbmVCdWlsdEluKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTtcbiAgICB9XG4gIH1cbn1cblxuJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIHdyYXA6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgU3ltYm9sOiAkU3ltYm9sXG59KTtcblxuJGZvckVhY2gob2JqZWN0S2V5cyhXZWxsS25vd25TeW1ib2xzU3RvcmUpLCBmdW5jdGlvbiAobmFtZSkge1xuICBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7XG59KTtcblxuJCh7IHRhcmdldDogU1lNQk9MLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MIH0sIHtcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSB0cnVlOyB9LFxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgVVNFX1NFVFRFUiA9IGZhbHNlOyB9XG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIC8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlXG4gIGNyZWF0ZTogJGNyZWF0ZSxcbiAgLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0eWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbiAgZGVmaW5lUHJvcGVydGllczogJGRlZmluZVByb3BlcnRpZXMsXG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Jcbn0pO1xuXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXNcbn0pO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUoKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoJFN5bWJvbCwgU1lNQk9MKTtcblxuaGlkZGVuS2V5c1tISURERU5dID0gdHJ1ZTtcbiIsIi8vIGBTeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uYCBnZXR0ZXJcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnByb3RvdHlwZS5kZXNjcmlwdGlvblxuJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlJyk7XG52YXIgaXNQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtaXMtcHJvdG90eXBlLW9mJyk7XG52YXIgdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgU3ltYm9sUHJvdG90eXBlID0gTmF0aXZlU3ltYm9sICYmIE5hdGl2ZVN5bWJvbC5wcm90b3R5cGU7XG5cbmlmIChERVNDUklQVE9SUyAmJiBpc0NhbGxhYmxlKE5hdGl2ZVN5bWJvbCkgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBTeW1ib2xQcm90b3R5cGUpIHx8XG4gIC8vIFNhZmFyaSAxMiBidWdcbiAgTmF0aXZlU3ltYm9sKCkuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZFxuKSkge1xuICB2YXIgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlID0ge307XG4gIC8vIHdyYXAgU3ltYm9sIGNvbnN0cnVjdG9yIGZvciBjb3JyZWN0IHdvcmsgd2l0aCB1bmRlZmluZWQgZGVzY3JpcHRpb25cbiAgdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiB0b1N0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciByZXN1bHQgPSBpc1Byb3RvdHlwZU9mKFN5bWJvbFByb3RvdHlwZSwgdGhpcylcbiAgICAgID8gbmV3IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbilcbiAgICAgIC8vIGluIEVkZ2UgMTMsIFN0cmluZyhTeW1ib2wodW5kZWZpbmVkKSkgPT09ICdTeW1ib2wodW5kZWZpbmVkKSdcbiAgICAgIDogZGVzY3JpcHRpb24gPT09IHVuZGVmaW5lZCA/IE5hdGl2ZVN5bWJvbCgpIDogTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKTtcbiAgICBpZiAoZGVzY3JpcHRpb24gPT09ICcnKSBFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmVbcmVzdWx0XSA9IHRydWU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKFN5bWJvbFdyYXBwZXIsIE5hdGl2ZVN5bWJvbCk7XG4gIFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gU3ltYm9sUHJvdG90eXBlO1xuICBTeW1ib2xQcm90b3R5cGUuY29uc3RydWN0b3IgPSBTeW1ib2xXcmFwcGVyO1xuXG4gIHZhciBOQVRJVkVfU1lNQk9MID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJztcbiAgdmFyIHRoaXNTeW1ib2xWYWx1ZSA9IHVuY3VycnlUaGlzKFN5bWJvbFByb3RvdHlwZS52YWx1ZU9mKTtcbiAgdmFyIHN5bWJvbERlc2NyaXB0aXZlU3RyaW5nID0gdW5jdXJyeVRoaXMoU3ltYm9sUHJvdG90eXBlLnRvU3RyaW5nKTtcbiAgdmFyIHJlZ2V4cCA9IC9eU3ltYm9sXFwoKC4qKVxcKVteKV0rJC87XG4gIHZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG4gIHZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxuICBkZWZpbmVQcm9wZXJ0eShTeW1ib2xQcm90b3R5cGUsICdkZXNjcmlwdGlvbicsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHtcbiAgICAgIHZhciBzeW1ib2wgPSB0aGlzU3ltYm9sVmFsdWUodGhpcyk7XG4gICAgICBpZiAoaGFzT3duKEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSwgc3ltYm9sKSkgcmV0dXJuICcnO1xuICAgICAgdmFyIHN0cmluZyA9IHN5bWJvbERlc2NyaXB0aXZlU3RyaW5nKHN5bWJvbCk7XG4gICAgICB2YXIgZGVzYyA9IE5BVElWRV9TWU1CT0wgPyBzdHJpbmdTbGljZShzdHJpbmcsIDcsIC0xKSA6IHJlcGxhY2Uoc3RyaW5nLCByZWdleHAsICckMScpO1xuICAgICAgcmV0dXJuIGRlc2MgPT09ICcnID8gdW5kZWZpbmVkIDogZGVzYztcbiAgICB9XG4gIH0pO1xuXG4gICQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgIFN5bWJvbDogU3ltYm9sV3JhcHBlclxuICB9KTtcbn1cbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciB0b1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmcnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgTkFUSVZFX1NZTUJPTF9SRUdJU1RSWSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zeW1ib2wtcmVnaXN0cnktZGV0ZWN0aW9uJyk7XG5cbnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7XG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xuXG4vLyBgU3ltYm9sLmZvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5mb3JcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIH0sIHtcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgc3RyaW5nID0gdG9TdHJpbmcoa2V5KTtcbiAgICBpZiAoaGFzT3duKFN0cmluZ1RvU3ltYm9sUmVnaXN0cnksIHN0cmluZykpIHJldHVybiBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5W3N0cmluZ107XG4gICAgdmFyIHN5bWJvbCA9IGdldEJ1aWx0SW4oJ1N5bWJvbCcpKHN0cmluZyk7XG4gICAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sO1xuICAgIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZztcbiAgICByZXR1cm4gc3ltYm9sO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuaGFzSW5zdGFuY2VgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5oYXNpbnN0YW5jZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5pc0NvbmNhdFNwcmVhZGFibGVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5pc2NvbmNhdHNwcmVhZGFibGVcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3Mgc3BsaXQgdG8gbW9kdWxlcyBsaXN0ZWQgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmNvbnN0cnVjdG9yJyk7XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLnN5bWJvbC5mb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuc3ltYm9sLmtleS1mb3InKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMuanNvbi5zdHJpbmdpZnknKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaGFzT3duID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHknKTtcbnZhciBpc1N5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1zeW1ib2wnKTtcbnZhciB0cnlUb1N0cmluZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90cnktdG8tc3RyaW5nJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIE5BVElWRV9TWU1CT0xfUkVHSVNUUlkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3ltYm9sLXJlZ2lzdHJ5LWRldGVjdGlvbicpO1xuXG52YXIgU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXRvLXN0cmluZy1yZWdpc3RyeScpO1xuXG4vLyBgU3ltYm9sLmtleUZvcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiQoeyB0YXJnZXQ6ICdTeW1ib2wnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIH0sIHtcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3IodHJ5VG9TdHJpbmcoc3ltKSArICcgaXMgbm90IGEgc3ltYm9sJyk7XG4gICAgaWYgKGhhc093bihTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKSByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dO1xuICB9XG59KTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wubWF0Y2hgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5tYXRjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaCcpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5yZXBsYWNlYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucmVwbGFjZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdyZXBsYWNlJyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xuXG4vLyBgU3ltYm9sLnNlYXJjaGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNlYXJjaFxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzZWFyY2gnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wuc3BlY2llc2Agd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwZWNpZXNcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuIiwidmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcblxuLy8gYFN5bWJvbC5zcGxpdGAgd2VsbC1rbm93biBzeW1ib2xcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3ltYm9sLnNwbGl0XG5kZWZpbmVXZWxsS25vd25TeW1ib2woJ3NwbGl0Jyk7XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLWRlZmluZScpO1xudmFyIGRlZmluZVN5bWJvbFRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N5bWJvbC1kZWZpbmUtdG8tcHJpbWl0aXZlJyk7XG5cbi8vIGBTeW1ib2wudG9QcmltaXRpdmVgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC50b3ByaW1pdGl2ZVxuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpO1xuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUoKTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC1kZWZpbmUnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xuXG4vLyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wudG9zdHJpbmd0YWdcbmRlZmluZVdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxuLy8gYFN5bWJvbC5wcm90b3R5cGVbQEB0b1N0cmluZ1RhZ11gIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3N0cmluZ3RhZ1xuc2V0VG9TdHJpbmdUYWcoZ2V0QnVpbHRJbignU3ltYm9sJyksICdTeW1ib2wnKTtcbiIsInZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtZGVmaW5lJyk7XG5cbi8vIGBTeW1ib2wudW5zY29wYWJsZXNgIHdlbGwta25vd24gc3ltYm9sXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC51bnNjb3BhYmxlc1xuZGVmaW5lV2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRBcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktY29weS13aXRoaW4nKTtcblxudmFyIHUkQXJyYXlDb3B5V2l0aGluID0gdW5jdXJyeVRoaXMoJEFycmF5Q29weVdpdGhpbik7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmNvcHlXaXRoaW5gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmNvcHl3aXRoaW5cbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2NvcHlXaXRoaW4nLCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCwgc3RhcnQgLyogLCBlbmQgKi8pIHtcbiAgcmV0dXJuIHUkQXJyYXlDb3B5V2l0aGluKGFUeXBlZEFycmF5KHRoaXMpLCB0YXJnZXQsIHN0YXJ0LCBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZXZlcnkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZXZlcnk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuZXZlcnlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmV2ZXJ5XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdldmVyeScsIGZ1bmN0aW9uIGV2ZXJ5KGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZXZlcnkoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRmaWxsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZpbGwnKTtcbnZhciB0b0JpZ0ludCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1iaWctaW50Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIHNsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpO1xuXG4vLyBWOCB+IENocm9tZSA8IDU5LCBTYWZhcmkgPCAxNC4xLCBGRiA8IDU1LCBFZGdlIDw9MThcbnZhciBDT05WRVJTSU9OX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIGNvdW50ID0gMDtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXR5cGVkLWFycmF5cyAtLSBzYWZlXG4gIG5ldyBJbnQ4QXJyYXkoMikuZmlsbCh7IHZhbHVlT2Y6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvdW50Kys7IH0gfSk7XG4gIHJldHVybiBjb3VudCAhPT0gMTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maWxsYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maWxsXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWxsJywgZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0LCBlbmQgKi8pIHtcbiAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgYWN0dWFsVmFsdWUgPSBzbGljZShjbGFzc29mKHRoaXMpLCAwLCAzKSA9PT0gJ0JpZycgPyB0b0JpZ0ludCh2YWx1ZSkgOiArdmFsdWU7XG4gIHJldHVybiBjYWxsKCRmaWxsLCB0aGlzLCBhY3R1YWxWYWx1ZSwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7XG59LCBDT05WRVJTSU9OX0JVRyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5maWx0ZXI7XG52YXIgZnJvbVNwZWNpZXNBbmRMaXN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWZyb20tc3BlY2llcy1hbmQtbGlzdCcpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuZmlsdGVyXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaWx0ZXInLCBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgdmFyIGxpc3QgPSAkZmlsdGVyKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIHJldHVybiBmcm9tU3BlY2llc0FuZExpc3QodGhpcywgbGlzdCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZmluZEluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbmRJbmRleDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kSW5kZXhgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZpbmRpbmRleFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnZmluZEluZGV4JywgZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRmaW5kSW5kZXgoYVR5cGVkQXJyYXkodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJGZpbmQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZmluZDtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5maW5kYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5maW5kXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdmaW5kJywgZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZmluZChhVHlwZWRBcnJheSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsInZhciBjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3InKTtcblxuLy8gYEZsb2F0NjRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ0Zsb2F0NjQnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmZvcmVhY2hcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2ZvckVhY2gnLCBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICRmb3JFYWNoKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBUWVBFRF9BUlJBWVNfQ09OU1RSVUNUT1JTX1JFUVVJUkVTX1dSQVBQRVJTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9ycy1yZXF1aXJlLXdyYXBwZXJzJyk7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcbnZhciB0eXBlZEFycmF5RnJvbSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90eXBlZC1hcnJheS1mcm9tJyk7XG5cbi8vIGAlVHlwZWRBcnJheSUuZnJvbWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5mcm9tXG5leHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kKCdmcm9tJywgdHlwZWRBcnJheUZyb20sIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmNsdWRlc1xuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnaW5jbHVkZXMnLCBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5jbHVkZXMoYVR5cGVkQXJyYXkodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5pbmRleG9mXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdpbmRleE9mJywgZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHJldHVybiAkaW5kZXhPZihhVHlwZWRBcnJheSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQxNkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MTYnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQzMkFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignSW50MzInLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gSW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBJbnQ4QXJyYXlgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXR5cGVkYXJyYXktb2JqZWN0c1xuY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yKCdJbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XG52YXIgYXJyYXlWYWx1ZXMgPSB1bmN1cnJ5VGhpcyhBcnJheUl0ZXJhdG9ycy52YWx1ZXMpO1xudmFyIGFycmF5S2V5cyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmtleXMpO1xudmFyIGFycmF5RW50cmllcyA9IHVuY3VycnlUaGlzKEFycmF5SXRlcmF0b3JzLmVudHJpZXMpO1xudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBVaW50OEFycmF5ICYmIFVpbnQ4QXJyYXkucHJvdG90eXBlO1xuXG52YXIgR0VORVJJQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwoWzFdKTtcbn0pO1xuXG52YXIgSVRFUkFUT1JfSVNfVkFMVUVTID0gISFUeXBlZEFycmF5UHJvdG90eXBlXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGUudmFsdWVzXG4gICYmIFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlc1xuICAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnZhbHVlcy5uYW1lID09PSAndmFsdWVzJztcblxudmFyIHR5cGVkQXJyYXlWYWx1ZXMgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7XG4gIHJldHVybiBhcnJheVZhbHVlcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5lbnRyaWVzXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdlbnRyaWVzJywgZnVuY3Rpb24gZW50cmllcygpIHtcbiAgcmV0dXJuIGFycmF5RW50cmllcyhhVHlwZWRBcnJheSh0aGlzKSk7XG59LCBHRU5FUklDKTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLmtleXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ2tleXMnLCBmdW5jdGlvbiBrZXlzKCkge1xuICByZXR1cm4gYXJyYXlLZXlzKGFUeXBlZEFycmF5KHRoaXMpKTtcbn0sIEdFTkVSSUMpO1xuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS52YWx1ZXNcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3ZhbHVlcycsIHR5cGVkQXJyYXlWYWx1ZXMsIEdFTkVSSUMgfHwgIUlURVJBVE9SX0lTX1ZBTFVFUywgeyBuYW1lOiAndmFsdWVzJyB9KTtcbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKElURVJBVE9SLCB0eXBlZEFycmF5VmFsdWVzLCBHRU5FUklDIHx8ICFJVEVSQVRPUl9JU19WQUxVRVMsIHsgbmFtZTogJ3ZhbHVlcycgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciAkam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5qb2luYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5qb2luXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdqb2luJywgZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHtcbiAgcmV0dXJuICRqb2luKGFUeXBlZEFycmF5KHRoaXMpLCBzZXBhcmF0b3IpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciAkbGFzdEluZGV4T2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbGFzdC1pbmRleC1vZicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLmxhc3RJbmRleE9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5sYXN0aW5kZXhvZlxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnbGFzdEluZGV4T2YnLCBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gYXBwbHkoJGxhc3RJbmRleE9mLCBhVHlwZWRBcnJheSh0aGlzKSwgbGVuZ3RoID4gMSA/IFtzZWFyY2hFbGVtZW50LCBhcmd1bWVudHNbMV1dIDogW3NlYXJjaEVsZW1lbnRdKTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRtYXAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykubWFwO1xudmFyIHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLm1hcGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUubWFwXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdtYXAnLCBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkbWFwKGFUeXBlZEFycmF5KHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gbmV3ICh0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yKE8pKShsZW5ndGgpO1xuICB9KTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIFRZUEVEX0FSUkFZU19DT05TVFJVQ1RPUlNfUkVRVUlSRVNfV1JBUFBFUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdHlwZWQtYXJyYXktY29uc3RydWN0b3JzLXJlcXVpcmUtd3JhcHBlcnMnKTtcblxudmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7XG52YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5vZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5vZlxuZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCgnb2YnLCBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3Rvcih0aGlzKSkobGVuZ3RoKTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSByZXN1bHRbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4KytdO1xuICByZXR1cm4gcmVzdWx0O1xufSwgVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZVJpZ2h0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXJlZHVjZScpLnJpZ2h0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZVJpZ2h0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5yZWR1Y2VyaWdodFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmVkdWNlUmlnaHQnLCBmdW5jdGlvbiByZWR1Y2VSaWdodChjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XG4gIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuICByZXR1cm4gJHJlZHVjZVJpZ2h0KGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBsZW5ndGgsIGxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgQXJyYXlCdWZmZXJWaWV3Q29yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJyk7XG52YXIgJHJlZHVjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1yZWR1Y2UnKS5sZWZ0O1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbi8vIGAlVHlwZWRBcnJheSUucHJvdG90eXBlLnJlZHVjZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmVkdWNlXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdyZWR1Y2UnLCBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xuICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgcmV0dXJuICRyZWR1Y2UoYVR5cGVkQXJyYXkodGhpcyksIGNhbGxiYWNrZm4sIGxlbmd0aCwgbGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUucmV2ZXJzZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUucmV2ZXJzZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgncmV2ZXJzZScsIGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gIHZhciB0aGF0ID0gdGhpcztcbiAgdmFyIGxlbmd0aCA9IGFUeXBlZEFycmF5KHRoYXQpLmxlbmd0aDtcbiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgdmFsdWU7XG4gIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xuICAgIHZhbHVlID0gdGhhdFtpbmRleF07XG4gICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xuICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xuICB9IHJldHVybiB0aGF0O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlJyk7XG52YXIgdG9PZmZzZXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2Zmc2V0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XG52YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTtcbnZhciBJbnQ4QXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXkgJiYgSW50OEFycmF5LnByb3RvdHlwZTtcbnZhciAkc2V0ID0gSW50OEFycmF5UHJvdG90eXBlICYmIEludDhBcnJheVByb3RvdHlwZS5zZXQ7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG5cbnZhciBXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIHZhciBhcnJheSA9IG5ldyBVaW50OENsYW1wZWRBcnJheSgyKTtcbiAgY2FsbCgkc2V0LCBhcnJheSwgeyBsZW5ndGg6IDEsIDA6IDMgfSwgMSk7XG4gIHJldHVybiBhcnJheVsxXSAhPT0gMztcbn0pO1xuXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0xMTI5NCBhbmQgb3RoZXJcbnZhciBUT19PQkpFQ1RfQlVHID0gV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTICYmIEFycmF5QnVmZmVyVmlld0NvcmUuTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciBhcnJheSA9IG5ldyBJbnQ4QXJyYXkoMik7XG4gIGFycmF5LnNldCgxKTtcbiAgYXJyYXkuc2V0KCcyJywgMSk7XG4gIHJldHVybiBhcnJheVswXSAhPT0gMCB8fCBhcnJheVsxXSAhPT0gMjtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zZXRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnNldFxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc2V0JywgZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xuICBhVHlwZWRBcnJheSh0aGlzKTtcbiAgdmFyIG9mZnNldCA9IHRvT2Zmc2V0KGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAxKTtcbiAgdmFyIHNyYyA9IHRvSW5kZXhlZE9iamVjdChhcnJheUxpa2UpO1xuICBpZiAoV09SS1NfV0lUSF9PQkpFQ1RTX0FORF9HRUVSSUNfT05fVFlQRURfQVJSQVlTKSByZXR1cm4gY2FsbCgkc2V0LCB0aGlzLCBzcmMsIG9mZnNldCk7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcbiAgdmFyIGxlbiA9IGxlbmd0aE9mQXJyYXlMaWtlKHNyYyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCcpO1xuICB3aGlsZSAoaW5kZXggPCBsZW4pIHRoaXNbb2Zmc2V0ICsgaW5kZXhdID0gc3JjW2luZGV4KytdO1xufSwgIVdPUktTX1dJVEhfT0JKRUNUU19BTkRfR0VFUklDX09OX1RZUEVEX0FSUkFZUyB8fCBUT19PQkpFQ1RfQlVHKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG52YXIgRk9SQ0VEID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tdHlwZWQtYXJyYXlzIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nXG4gIG5ldyBJbnQ4QXJyYXkoMSkuc2xpY2UoKTtcbn0pO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zbGljZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc2xpY2VcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3NsaWNlJywgZnVuY3Rpb24gc2xpY2Uoc3RhcnQsIGVuZCkge1xuICB2YXIgbGlzdCA9IGFycmF5U2xpY2UoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IodGhpcyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGggPSBsaXN0Lmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XG4gIHJldHVybiByZXN1bHQ7XG59LCBGT1JDRUQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyICRzb21lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLnNvbWU7XG5cbnZhciBhVHlwZWRBcnJheSA9IEFycmF5QnVmZmVyVmlld0NvcmUuYVR5cGVkQXJyYXk7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IEFycmF5QnVmZmVyVmlld0NvcmUuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc29tZVxuZXhwb3J0VHlwZWRBcnJheU1ldGhvZCgnc29tZScsIGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgcmV0dXJuICRzb21lKGFUeXBlZEFycmF5KHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciBpbnRlcm5hbFNvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc29ydCcpO1xudmFyIEFycmF5QnVmZmVyVmlld0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktYnVmZmVyLXZpZXctY29yZScpO1xudmFyIEZGID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1mZi12ZXJzaW9uJyk7XG52YXIgSUVfT1JfRURHRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtaWUtb3ItZWRnZScpO1xudmFyIFY4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgV0VCS0lUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS13ZWJraXQtdmVyc2lvbicpO1xuXG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgVWludDE2QXJyYXkgPSBnbG9iYWwuVWludDE2QXJyYXk7XG52YXIgbmF0aXZlU29ydCA9IFVpbnQxNkFycmF5ICYmIHVuY3VycnlUaGlzKFVpbnQxNkFycmF5LnByb3RvdHlwZS5zb3J0KTtcblxuLy8gV2ViS2l0XG52YXIgQUNDRVBUX0lOQ09SUkVDVF9BUkdVTUVOVFMgPSAhIW5hdGl2ZVNvcnQgJiYgIShmYWlscyhmdW5jdGlvbiAoKSB7XG4gIG5hdGl2ZVNvcnQobmV3IFVpbnQxNkFycmF5KDIpLCBudWxsKTtcbn0pICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgbmF0aXZlU29ydChuZXcgVWludDE2QXJyYXkoMiksIHt9KTtcbn0pKTtcblxudmFyIFNUQUJMRV9TT1JUID0gISFuYXRpdmVTb3J0ICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGZlYXR1cmUgZGV0ZWN0aW9uIGNhbiBiZSB0b28gc2xvdywgc28gY2hlY2sgZW5naW5lcyB2ZXJzaW9uc1xuICBpZiAoVjgpIHJldHVybiBWOCA8IDc0O1xuICBpZiAoRkYpIHJldHVybiBGRiA8IDY3O1xuICBpZiAoSUVfT1JfRURHRSkgcmV0dXJuIHRydWU7XG4gIGlmIChXRUJLSVQpIHJldHVybiBXRUJLSVQgPCA2MDI7XG5cbiAgdmFyIGFycmF5ID0gbmV3IFVpbnQxNkFycmF5KDUxNik7XG4gIHZhciBleHBlY3RlZCA9IEFycmF5KDUxNik7XG4gIHZhciBpbmRleCwgbW9kO1xuXG4gIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDUxNjsgaW5kZXgrKykge1xuICAgIG1vZCA9IGluZGV4ICUgNDtcbiAgICBhcnJheVtpbmRleF0gPSA1MTUgLSBpbmRleDtcbiAgICBleHBlY3RlZFtpbmRleF0gPSBpbmRleCAtIDIgKiBtb2QgKyAzO1xuICB9XG5cbiAgbmF0aXZlU29ydChhcnJheSwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGEgLyA0IHwgMCkgLSAoYiAvIDQgfCAwKTtcbiAgfSk7XG5cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgNTE2OyBpbmRleCsrKSB7XG4gICAgaWYgKGFycmF5W2luZGV4XSAhPT0gZXhwZWN0ZWRbaW5kZXhdKSByZXR1cm4gdHJ1ZTtcbiAgfVxufSk7XG5cbnZhciBnZXRTb3J0Q29tcGFyZSA9IGZ1bmN0aW9uIChjb21wYXJlZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSByZXR1cm4gK2NvbXBhcmVmbih4LCB5KSB8fCAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKHkgIT09IHkpIHJldHVybiAtMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVja1xuICAgIGlmICh4ICE9PSB4KSByZXR1cm4gMTtcbiAgICBpZiAoeCA9PT0gMCAmJiB5ID09PSAwKSByZXR1cm4gMSAvIHggPiAwICYmIDEgLyB5IDwgMCA/IDEgOiAtMTtcbiAgICByZXR1cm4geCA+IHk7XG4gIH07XG59O1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zb3J0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXR5cGVkYXJyYXklLnByb3RvdHlwZS5zb3J0XG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzb3J0JywgZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgaWYgKGNvbXBhcmVmbiAhPT0gdW5kZWZpbmVkKSBhQ2FsbGFibGUoY29tcGFyZWZuKTtcbiAgaWYgKFNUQUJMRV9TT1JUKSByZXR1cm4gbmF0aXZlU29ydCh0aGlzLCBjb21wYXJlZm4pO1xuXG4gIHJldHVybiBpbnRlcm5hbFNvcnQoYVR5cGVkQXJyYXkodGhpcyksIGdldFNvcnRDb21wYXJlKGNvbXBhcmVmbikpO1xufSwgIVNUQUJMRV9TT1JUIHx8IEFDQ0VQVF9JTkNPUlJFQ1RfQVJHVU1FTlRTKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcbnZhciB0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcblxudmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTtcbnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS5zdWJhcnJheWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUuc3ViYXJyYXlcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3N1YmFycmF5JywgZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xuICB2YXIgTyA9IGFUeXBlZEFycmF5KHRoaXMpO1xuICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XG4gIHZhciBiZWdpbkluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW5ndGgpO1xuICB2YXIgQyA9IHR5cGVkQXJyYXlTcGVjaWVzQ29uc3RydWN0b3IoTyk7XG4gIHJldHVybiBuZXcgQyhcbiAgICBPLmJ1ZmZlcixcbiAgICBPLmJ5dGVPZmZzZXQgKyBiZWdpbkluZGV4ICogTy5CWVRFU19QRVJfRUxFTUVOVCxcbiAgICB0b0xlbmd0aCgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpKSAtIGJlZ2luSW5kZXgpXG4gICk7XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgYXBwbHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHknKTtcbnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWJ1ZmZlci12aWV3LWNvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5U2xpY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2UnKTtcblxudmFyIEludDhBcnJheSA9IGdsb2JhbC5JbnQ4QXJyYXk7XG52YXIgYVR5cGVkQXJyYXkgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5O1xudmFyIGV4cG9ydFR5cGVkQXJyYXlNZXRob2QgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmV4cG9ydFR5cGVkQXJyYXlNZXRob2Q7XG52YXIgJHRvTG9jYWxlU3RyaW5nID0gW10udG9Mb2NhbGVTdHJpbmc7XG5cbi8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcbnZhciBUT19MT0NBTEVfU1RSSU5HX0JVRyA9ICEhSW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgJHRvTG9jYWxlU3RyaW5nLmNhbGwobmV3IEludDhBcnJheSgxKSk7XG59KTtcblxudmFyIEZPUkNFRCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIFsxLCAyXS50b0xvY2FsZVN0cmluZygpICE9IG5ldyBJbnQ4QXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgSW50OEFycmF5LnByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XG59KTtcblxuLy8gYCVUeXBlZEFycmF5JS5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0ldHlwZWRhcnJheSUucHJvdG90eXBlLnRvbG9jYWxlc3RyaW5nXG5leHBvcnRUeXBlZEFycmF5TWV0aG9kKCd0b0xvY2FsZVN0cmluZycsIGZ1bmN0aW9uIHRvTG9jYWxlU3RyaW5nKCkge1xuICByZXR1cm4gYXBwbHkoXG4gICAgJHRvTG9jYWxlU3RyaW5nLFxuICAgIFRPX0xPQ0FMRV9TVFJJTkdfQlVHID8gYXJyYXlTbGljZShhVHlwZWRBcnJheSh0aGlzKSkgOiBhVHlwZWRBcnJheSh0aGlzKSxcbiAgICBhcnJheVNsaWNlKGFyZ3VtZW50cylcbiAgKTtcbn0sIEZPUkNFRCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZXhwb3J0VHlwZWRBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1idWZmZXItdmlldy1jb3JlJykuZXhwb3J0VHlwZWRBcnJheU1ldGhvZDtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcblxudmFyIFVpbnQ4QXJyYXkgPSBnbG9iYWwuVWludDhBcnJheTtcbnZhciBVaW50OEFycmF5UHJvdG90eXBlID0gVWludDhBcnJheSAmJiBVaW50OEFycmF5LnByb3RvdHlwZSB8fCB7fTtcbnZhciBhcnJheVRvU3RyaW5nID0gW10udG9TdHJpbmc7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xuXG5pZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xuICBhcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIGpvaW4odGhpcyk7XG4gIH07XG59XG5cbnZhciBJU19OT1RfQVJSQVlfTUVUSE9EID0gVWludDhBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nO1xuXG4vLyBgJVR5cGVkQXJyYXklLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSV0eXBlZGFycmF5JS5wcm90b3R5cGUudG9zdHJpbmdcbmV4cG9ydFR5cGVkQXJyYXlNZXRob2QoJ3RvU3RyaW5nJywgYXJyYXlUb1N0cmluZywgSVNfTk9UX0FSUkFZX01FVEhPRCk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50MTZBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQxNicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50MzJBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQzMicsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OEFycmF5YCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10eXBlZGFycmF5LW9iamVjdHNcbmNyZWF0ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvcignVWludDgnLCBmdW5jdGlvbiAoaW5pdCkge1xuICByZXR1cm4gZnVuY3Rpb24gVWludDhBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xuICB9O1xufSk7XG4iLCJ2YXIgY3JlYXRlVHlwZWRBcnJheUNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3R5cGVkLWFycmF5LWNvbnN0cnVjdG9yJyk7XG5cbi8vIGBVaW50OENsYW1wZWRBcnJheWAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdHlwZWRhcnJheS1vYmplY3RzXG5jcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IoJ1VpbnQ4JywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XG4gIH07XG59LCB0cnVlKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBGUkVFWklORyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mcmVlemluZycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1bmN1cnJ5VGhpcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMnKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YScpO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJykuZW5mb3JjZTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24nKTtcblxudmFyICRPYmplY3QgPSBPYmplY3Q7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tYXJyYXktaXNhcnJheSAtLSBzYWZlXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZXh0ZW5zaWJsZSAtLSBzYWZlXG52YXIgaXNFeHRlbnNpYmxlID0gJE9iamVjdC5pc0V4dGVuc2libGU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzZnJvemVuIC0tIHNhZmVcbnZhciBpc0Zyb3plbiA9ICRPYmplY3QuaXNGcm96ZW47XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWlzc2VhbGVkIC0tIHNhZmVcbnZhciBpc1NlYWxlZCA9ICRPYmplY3QuaXNTZWFsZWQ7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWZyZWV6ZSAtLSBzYWZlXG52YXIgZnJlZXplID0gJE9iamVjdC5mcmVlemU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LXNlYWwgLS0gc2FmZVxudmFyIHNlYWwgPSAkT2JqZWN0LnNlYWw7XG5cbnZhciBGUk9aRU4gPSB7fTtcbnZhciBTRUFMRUQgPSB7fTtcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XG52YXIgSW50ZXJuYWxXZWFrTWFwO1xuXG52YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xuICAgIHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xuICB9O1xufTtcblxuLy8gYFdlYWtNYXBgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXdlYWttYXAtY29uc3RydWN0b3JcbnZhciAkV2Vha01hcCA9IGNvbGxlY3Rpb24oJ1dlYWtNYXAnLCB3cmFwcGVyLCBjb2xsZWN0aW9uV2Vhayk7XG52YXIgV2Vha01hcFByb3RvdHlwZSA9ICRXZWFrTWFwLnByb3RvdHlwZTtcbnZhciBuYXRpdmVTZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLnNldCk7XG5cbi8vIENoYWtyYSBFZGdlIGJ1ZzogYWRkaW5nIGZyb3plbiBhcnJheXMgdG8gV2Vha01hcCB1bmZyZWV6ZSB0aGVtXG52YXIgaGFzTVNFZGdlRnJlZXppbmdCdWcgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBGUkVFWklORyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZyb3plbkFycmF5ID0gZnJlZXplKFtdKTtcbiAgICBuYXRpdmVTZXQobmV3ICRXZWFrTWFwKCksIGZyb3plbkFycmF5LCAxKTtcbiAgICByZXR1cm4gIWlzRnJvemVuKGZyb3plbkFycmF5KTtcbiAgfSk7XG59O1xuXG4vLyBJRTExIFdlYWtNYXAgZnJvemVuIGtleXMgZml4XG4vLyBXZSBjYW4ndCB1c2UgZmVhdHVyZSBkZXRlY3Rpb24gYmVjYXVzZSBpdCBjcmFzaCBzb21lIG9sZCBJRSBidWlsZHNcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80ODVcbmlmIChOQVRJVkVfV0VBS19NQVApIGlmIChJU19JRTExKSB7XG4gIEludGVybmFsV2Vha01hcCA9IGNvbGxlY3Rpb25XZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsICdXZWFrTWFwJywgdHJ1ZSk7XG4gIEludGVybmFsTWV0YWRhdGFNb2R1bGUuZW5hYmxlKCk7XG4gIHZhciBuYXRpdmVEZWxldGUgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXSk7XG4gIHZhciBuYXRpdmVIYXMgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmhhcyk7XG4gIHZhciBuYXRpdmVHZXQgPSB1bmN1cnJ5VGhpcyhXZWFrTWFwUHJvdG90eXBlLmdldCk7XG4gIGRlZmluZUJ1aWx0SW5zKFdlYWtNYXBQcm90b3R5cGUsIHtcbiAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgICAgICBpZiAoIXN0YXRlLmZyb3plbikgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpO1xuICAgICAgICByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuWydkZWxldGUnXShrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlRGVsZXRlKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkge1xuICAgICAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICAgICAgaWYgKCFzdGF0ZS5mcm96ZW4pIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpIHx8IHN0YXRlLmZyb3plbi5oYXMoa2V5KTtcbiAgICAgIH0gcmV0dXJuIG5hdGl2ZUhhcyh0aGlzLCBrZXkpO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVIYXModGhpcywga2V5KSA/IG5hdGl2ZUdldCh0aGlzLCBrZXkpIDogc3RhdGUuZnJvemVuLmdldChrZXkpO1xuICAgICAgfSByZXR1cm4gbmF0aXZlR2V0KHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIGlmICghc3RhdGUuZnJvemVuKSBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7XG4gICAgICAgIG5hdGl2ZUhhcyh0aGlzLCBrZXkpID8gbmF0aXZlU2V0KHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTtcbiAgICAgIH0gZWxzZSBuYXRpdmVTZXQodGhpcywga2V5LCB2YWx1ZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH0pO1xuLy8gQ2hha3JhIEVkZ2UgZnJvemVuIGtleXMgZml4XG59IGVsc2UgaWYgKGhhc01TRWRnZUZyZWV6aW5nQnVnKCkpIHtcbiAgZGVmaW5lQnVpbHRJbnMoV2Vha01hcFByb3RvdHlwZSwge1xuICAgIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBhcnJheUludGVncml0eUxldmVsO1xuICAgICAgaWYgKGlzQXJyYXkoa2V5KSkge1xuICAgICAgICBpZiAoaXNGcm96ZW4oa2V5KSkgYXJyYXlJbnRlZ3JpdHlMZXZlbCA9IEZST1pFTjtcbiAgICAgICAgZWxzZSBpZiAoaXNTZWFsZWQoa2V5KSkgYXJyYXlJbnRlZ3JpdHlMZXZlbCA9IFNFQUxFRDtcbiAgICAgIH1cbiAgICAgIG5hdGl2ZVNldCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmIChhcnJheUludGVncml0eUxldmVsID09IEZST1pFTikgZnJlZXplKGtleSk7XG4gICAgICBpZiAoYXJyYXlJbnRlZ3JpdHlMZXZlbCA9PSBTRUFMRUQpIHNlYWwoa2V5KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfSk7XG59XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHJlcGxhY2VkIHRvIG1vZHVsZSBiZWxvd1xucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy53ZWFrLW1hcC5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25XZWFrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24td2VhaycpO1xuXG4vLyBgV2Vha1NldGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtd2Vha3NldC1jb25zdHJ1Y3RvclxuY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBXZWFrU2V0KCkgeyByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIGNvbGxlY3Rpb25XZWFrKTtcbiIsIi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLndlYWstc2V0LmNvbnN0cnVjdG9yJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2xlYXJJbW1lZGlhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLmNsZWFyO1xuXG4vLyBgY2xlYXJJbW1lZGlhdGVgIG1ldGhvZFxuLy8gaHR0cDovL3czYy5naXRodWIuaW8vc2V0SW1tZWRpYXRlLyNzaS1jbGVhckltbWVkaWF0ZVxuJCh7IGdsb2JhbDogdHJ1ZSwgYmluZDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUgIT09IGNsZWFySW1tZWRpYXRlIH0sIHtcbiAgY2xlYXJJbW1lZGlhdGU6IGNsZWFySW1tZWRpYXRlXG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlKSB7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBpZiAoRE9NSXRlcmFibGVzW0NPTExFQ1RJT05fTkFNRV0pIHtcbiAgICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlKTtcbiAgfVxufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlKTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBET01Ub2tlbkxpc3RQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLXRva2VuLWxpc3QtcHJvdG90eXBlJyk7XG52YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSByZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcbnZhciBBcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JNZXRob2RzLnZhbHVlcztcblxudmFyIGhhbmRsZVByb3RvdHlwZSA9IGZ1bmN0aW9uIChDb2xsZWN0aW9uUHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpIHtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICBoYW5kbGVQcm90b3R5cGUoZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0gJiYgZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV0ucHJvdG90eXBlLCBDT0xMRUNUSU9OX05BTUUpO1xufVxuXG5oYW5kbGVQcm90b3R5cGUoRE9NVG9rZW5MaXN0UHJvdG90eXBlLCAnRE9NVG9rZW5MaXN0Jyk7XG4iLCIvLyBUT0RPOiBSZW1vdmUgdGhpcyBtb2R1bGUgZnJvbSBgY29yZS1qc0A0YCBzaW5jZSBpdCdzIHNwbGl0IHRvIG1vZHVsZXMgbGlzdGVkIGJlbG93XG5yZXF1aXJlKCcuLi9tb2R1bGVzL3dlYi5jbGVhci1pbW1lZGlhdGUnKTtcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnNldC1pbW1lZGlhdGUnKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgYUNhbGxhYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUnKTtcbnZhciB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoJyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xuXG4vLyBgcXVldWVNaWNyb3Rhc2tgIG1ldGhvZFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tcXVldWVtaWNyb3Rhc2tcbiQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlIH0sIHtcbiAgcXVldWVNaWNyb3Rhc2s6IGZ1bmN0aW9uIHF1ZXVlTWljcm90YXNrKGZuKSB7XG4gICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7XG4gICAgYUNhbGxhYmxlKGZuKTtcbiAgICB2YXIgZG9tYWluID0gSVNfTk9ERSAmJiBwcm9jZXNzLmRvbWFpbjtcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xuICB9XG59KTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRUYXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgc2NoZWR1bGVyc0ZpeCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zY2hlZHVsZXJzLWZpeCcpO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vb3Zlbi1zaC9idW4vaXNzdWVzLzE2MzNcbnZhciBzZXRJbW1lZGlhdGUgPSBnbG9iYWwuc2V0SW1tZWRpYXRlID8gc2NoZWR1bGVyc0ZpeChzZXRUYXNrLCBmYWxzZSkgOiBzZXRUYXNrO1xuXG4vLyBgc2V0SW1tZWRpYXRlYCBtZXRob2Rcbi8vIGh0dHA6Ly93M2MuZ2l0aHViLmlvL3NldEltbWVkaWF0ZS8jc2ktc2V0SW1tZWRpYXRlXG4kKHsgZ2xvYmFsOiB0cnVlLCBiaW5kOiB0cnVlLCBlbnVtZXJhYmxlOiB0cnVlLCBmb3JjZWQ6IGdsb2JhbC5zZXRJbW1lZGlhdGUgIT09IHNldEltbWVkaWF0ZSB9LCB7XG4gIHNldEltbWVkaWF0ZTogc2V0SW1tZWRpYXRlXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgXG5yZXF1aXJlKCcuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yJyk7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG52YXIgdW5jdXJyeVRoaXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBVU0VfTkFUSVZFX1VSTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91cmwtY29uc3RydWN0b3ItZGV0ZWN0aW9uJyk7XG52YXIgZGVmaW5lQnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4nKTtcbnZhciBkZWZpbmVCdWlsdElucyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW5zJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3RvcicpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1jYWxsYWJsZScpO1xudmFyIGhhc093biA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5Jyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tc3RyaW5nJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBnZXRJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3InKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5U29ydCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zb3J0Jyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBVUkxfU0VBUkNIX1BBUkFNUyA9ICdVUkxTZWFyY2hQYXJhbXMnO1xudmFyIFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SID0gVVJMX1NFQVJDSF9QQVJBTVMgKyAnSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoVVJMX1NFQVJDSF9QQVJBTVMpO1xudmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmVcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBBdm9pZCBOb2RlSlMgZXhwZXJpbWVudGFsIHdhcm5pbmdcbnZhciBzYWZlR2V0QnVpbHRJbiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghREVTQ1JJUFRPUlMpIHJldHVybiBnbG9iYWxbbmFtZV07XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgbmFtZSk7XG4gIHJldHVybiBkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IudmFsdWU7XG59O1xuXG52YXIgbmF0aXZlRmV0Y2ggPSBzYWZlR2V0QnVpbHRJbignZmV0Y2gnKTtcbnZhciBOYXRpdmVSZXF1ZXN0ID0gc2FmZUdldEJ1aWx0SW4oJ1JlcXVlc3QnKTtcbnZhciBIZWFkZXJzID0gc2FmZUdldEJ1aWx0SW4oJ0hlYWRlcnMnKTtcbnZhciBSZXF1ZXN0UHJvdG90eXBlID0gTmF0aXZlUmVxdWVzdCAmJiBOYXRpdmVSZXF1ZXN0LnByb3RvdHlwZTtcbnZhciBIZWFkZXJzUHJvdG90eXBlID0gSGVhZGVycyAmJiBIZWFkZXJzLnByb3RvdHlwZTtcbnZhciBSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XG52YXIgZGVjb2RlVVJJQ29tcG9uZW50ID0gZ2xvYmFsLmRlY29kZVVSSUNvbXBvbmVudDtcbnZhciBlbmNvZGVVUklDb21wb25lbnQgPSBnbG9iYWwuZW5jb2RlVVJJQ29tcG9uZW50O1xudmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS5zaGlmdCk7XG52YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTtcbnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTtcbnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTtcblxudmFyIHBsdXMgPSAvXFwrL2c7XG52YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7XG5cbnZhciBwZXJjZW50U2VxdWVuY2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxcXGRhLWZdezJ9KXsnICsgYnl0ZXMgKyAnfSknLCAnZ2knKSk7XG59O1xuXG52YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc2VxdWVuY2UpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBzZXF1ZW5jZTtcbiAgfVxufTtcblxudmFyIGRlc2VyaWFsaXplID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciByZXN1bHQgPSByZXBsYWNlKGl0LCBwbHVzLCAnICcpO1xuICB2YXIgYnl0ZXMgPSA0O1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQocmVzdWx0KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3aGlsZSAoYnl0ZXMpIHtcbiAgICAgIHJlc3VsdCA9IHJlcGxhY2UocmVzdWx0LCBwZXJjZW50U2VxdWVuY2UoYnl0ZXMtLSksIHBlcmNlbnREZWNvZGUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuXG52YXIgZmluZCA9IC9bIScoKX5dfCUyMC9nO1xuXG52YXIgcmVwbGFjZW1lbnRzID0ge1xuICAnISc6ICclMjEnLFxuICBcIidcIjogJyUyNycsXG4gICcoJzogJyUyOCcsXG4gICcpJzogJyUyOScsXG4gICd+JzogJyU3RScsXG4gICclMjAnOiAnKydcbn07XG5cbnZhciByZXBsYWNlciA9IGZ1bmN0aW9uIChtYXRjaCkge1xuICByZXR1cm4gcmVwbGFjZW1lbnRzW21hdGNoXTtcbn07XG5cbnZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHJlcGxhY2UoZW5jb2RlVVJJQ29tcG9uZW50KGl0KSwgZmluZCwgcmVwbGFjZXIpO1xufTtcblxudmFyIFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yID0gY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihmdW5jdGlvbiBJdGVyYXRvcihwYXJhbXMsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVNfSVRFUkFUT1IsXG4gICAgaXRlcmF0b3I6IGdldEl0ZXJhdG9yKGdldEludGVybmFsUGFyYW1zU3RhdGUocGFyYW1zKS5lbnRyaWVzKSxcbiAgICBraW5kOiBraW5kXG4gIH0pO1xufSwgJ0l0ZXJhdG9yJywgZnVuY3Rpb24gbmV4dCgpIHtcbiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBzdGVwID0gc3RhdGUuaXRlcmF0b3IubmV4dCgpO1xuICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlO1xuICBpZiAoIXN0ZXAuZG9uZSkge1xuICAgIHN0ZXAudmFsdWUgPSBraW5kID09PSAna2V5cycgPyBlbnRyeS5rZXkgOiBraW5kID09PSAndmFsdWVzJyA/IGVudHJ5LnZhbHVlIDogW2VudHJ5LmtleSwgZW50cnkudmFsdWVdO1xuICB9IHJldHVybiBzdGVwO1xufSwgdHJ1ZSk7XG5cbnZhciBVUkxTZWFyY2hQYXJhbXNTdGF0ZSA9IGZ1bmN0aW9uIChpbml0KSB7XG4gIHRoaXMuZW50cmllcyA9IFtdO1xuICB0aGlzLnVybCA9IG51bGw7XG5cbiAgaWYgKGluaXQgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChpc09iamVjdChpbml0KSkgdGhpcy5wYXJzZU9iamVjdChpbml0KTtcbiAgICBlbHNlIHRoaXMucGFyc2VRdWVyeSh0eXBlb2YgaW5pdCA9PSAnc3RyaW5nJyA/IGNoYXJBdChpbml0LCAwKSA9PT0gJz8nID8gc3RyaW5nU2xpY2UoaW5pdCwgMSkgOiBpbml0IDogJHRvU3RyaW5nKGluaXQpKTtcbiAgfVxufTtcblxuVVJMU2VhcmNoUGFyYW1zU3RhdGUucHJvdG90eXBlID0ge1xuICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNUyxcbiAgYmluZFVSTDogZnVuY3Rpb24gKHVybCkge1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH0sXG4gIHBhcnNlT2JqZWN0OiBmdW5jdGlvbiAob2JqZWN0KSB7XG4gICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2Qob2JqZWN0KTtcbiAgICB2YXIgaXRlcmF0b3IsIG5leHQsIHN0ZXAsIGVudHJ5SXRlcmF0b3IsIGVudHJ5TmV4dCwgZmlyc3QsIHNlY29uZDtcblxuICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihvYmplY3QsIGl0ZXJhdG9yTWV0aG9kKTtcbiAgICAgIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICAgICAgd2hpbGUgKCEoc3RlcCA9IGNhbGwobmV4dCwgaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgICAgIGVudHJ5SXRlcmF0b3IgPSBnZXRJdGVyYXRvcihhbk9iamVjdChzdGVwLnZhbHVlKSk7XG4gICAgICAgIGVudHJ5TmV4dCA9IGVudHJ5SXRlcmF0b3IubmV4dDtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChmaXJzdCA9IGNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fFxuICAgICAgICAgIChzZWNvbmQgPSBjYWxsKGVudHJ5TmV4dCwgZW50cnlJdGVyYXRvcikpLmRvbmUgfHxcbiAgICAgICAgICAhY2FsbChlbnRyeU5leHQsIGVudHJ5SXRlcmF0b3IpLmRvbmVcbiAgICAgICAgKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlcXVlbmNlIHdpdGggbGVuZ3RoIDInKTtcbiAgICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHsga2V5OiAkdG9TdHJpbmcoZmlyc3QudmFsdWUpLCB2YWx1ZTogJHRvU3RyaW5nKHNlY29uZC52YWx1ZSkgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGZvciAodmFyIGtleSBpbiBvYmplY3QpIGlmIChoYXNPd24ob2JqZWN0LCBrZXkpKSB7XG4gICAgICBwdXNoKHRoaXMuZW50cmllcywgeyBrZXk6IGtleSwgdmFsdWU6ICR0b1N0cmluZyhvYmplY3Rba2V5XSkgfSk7XG4gICAgfVxuICB9LFxuICBwYXJzZVF1ZXJ5OiBmdW5jdGlvbiAocXVlcnkpIHtcbiAgICBpZiAocXVlcnkpIHtcbiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3BsaXQocXVlcnksICcmJyk7XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIGF0dHJpYnV0ZSwgZW50cnk7XG4gICAgICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkge1xuICAgICAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2luZGV4KytdO1xuICAgICAgICBpZiAoYXR0cmlidXRlLmxlbmd0aCkge1xuICAgICAgICAgIGVudHJ5ID0gc3BsaXQoYXR0cmlidXRlLCAnPScpO1xuICAgICAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7XG4gICAgICAgICAgICBrZXk6IGRlc2VyaWFsaXplKHNoaWZ0KGVudHJ5KSksXG4gICAgICAgICAgICB2YWx1ZTogZGVzZXJpYWxpemUoam9pbihlbnRyeSwgJz0nKSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgc2VyaWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVudHJpZXMgPSB0aGlzLmVudHJpZXM7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107XG4gICAgICBwdXNoKHJlc3VsdCwgc2VyaWFsaXplKGVudHJ5LmtleSkgKyAnPScgKyBzZXJpYWxpemUoZW50cnkudmFsdWUpKTtcbiAgICB9IHJldHVybiBqb2luKHJlc3VsdCwgJyYnKTtcbiAgfSxcbiAgdXBkYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbnRyaWVzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5wYXJzZVF1ZXJ5KHRoaXMudXJsLnF1ZXJ5KTtcbiAgfSxcbiAgdXBkYXRlVVJMOiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudXJsKSB0aGlzLnVybC51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gYFVSTFNlYXJjaFBhcmFtc2AgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaW50ZXJmYWNlLXVybHNlYXJjaHBhcmFtc1xudmFyIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zKC8qIGluaXQgKi8pIHtcbiAgYW5JbnN0YW5jZSh0aGlzLCBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUpO1xuICB2YXIgaW5pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkO1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIG5ldyBVUkxTZWFyY2hQYXJhbXNTdGF0ZShpbml0KSk7XG59O1xuXG52YXIgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlID0gVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IucHJvdG90eXBlO1xuXG5kZWZpbmVCdWlsdElucyhVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIHtcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuYXBwZW5kYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWFwcGVuZFxuICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDIpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcyk7XG4gICAgcHVzaChzdGF0ZS5lbnRyaWVzLCB7IGtleTogJHRvU3RyaW5nKG5hbWUpLCB2YWx1ZTogJHRvU3RyaW5nKHZhbHVlKSB9KTtcbiAgICBzdGF0ZS51cGRhdGVVUkwoKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZGVsZXRlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWRlbGV0ZVxuICAnZGVsZXRlJzogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHtcbiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgc3BsaWNlKGVudHJpZXMsIGluZGV4LCAxKTtcbiAgICAgIGVsc2UgaW5kZXgrKztcbiAgICB9XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRcbiAgZ2V0OiBmdW5jdGlvbiBnZXQobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KSByZXR1cm4gZW50cmllc1tpbmRleF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRBbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtZ2V0YWxsXG4gIGdldEFsbDogZnVuY3Rpb24gZ2V0QWxsKG5hbWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcztcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHB1c2gocmVzdWx0LCBlbnRyaWVzW2luZGV4XS52YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmhhc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1oYXNcbiAgaGFzOiBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpO1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkge1xuICAgICAgaWYgKGVudHJpZXNbaW5kZXgrK10ua2V5ID09PSBrZXkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnNldGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1zZXRcbiAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllcztcbiAgICB2YXIgZm91bmQgPSBmYWxzZTtcbiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpO1xuICAgIHZhciB2YWwgPSAkdG9TdHJpbmcodmFsdWUpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgaWYgKGVudHJ5LmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChmb3VuZCkgc3BsaWNlKGVudHJpZXMsIGluZGV4LS0sIDEpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgZW50cnkudmFsdWUgPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFmb3VuZCkgcHVzaChlbnRyaWVzLCB7IGtleToga2V5LCB2YWx1ZTogdmFsIH0pO1xuICAgIHN0YXRlLnVwZGF0ZVVSTCgpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zb3J0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLXNvcnRcbiAgc29ydDogZnVuY3Rpb24gc29ydCgpIHtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpO1xuICAgIGFycmF5U29ydChzdGF0ZS5lbnRyaWVzLCBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGEua2V5ID4gYi5rZXkgPyAxIDogLTE7XG4gICAgfSk7XG4gICAgc3RhdGUudXBkYXRlVVJMKCk7XG4gIH0sXG4gIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzO1xuICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFjaywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGVudHJ5O1xuICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7XG4gICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107XG4gICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgIH1cbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4gIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAna2V5cycpO1xuICB9LFxuICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcbiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICd2YWx1ZXMnKTtcbiAgfSxcbiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kXG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XG4gICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAnZW50cmllcycpO1xuICB9XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2RcbmRlZmluZUJ1aWx0SW4oVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMsIHsgbmFtZTogJ2VudHJpZXMnIH0pO1xuXG4vLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHNlYXJjaHBhcmFtcy1zdHJpbmdpZmljYXRpb24tYmVoYXZpb3JcbmRlZmluZUJ1aWx0SW4oVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbnNldFRvU3RyaW5nVGFnKFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7XG5cbiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCB9LCB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3Jcbn0pO1xuXG4vLyBXcmFwIGBmZXRjaGAgYW5kIGBSZXF1ZXN0YCBmb3IgY29ycmVjdCB3b3JrIHdpdGggcG9seWZpbGxlZCBgVVJMU2VhcmNoUGFyYW1zYFxuaWYgKCFVU0VfTkFUSVZFX1VSTCAmJiBpc0NhbGxhYmxlKEhlYWRlcnMpKSB7XG4gIHZhciBoZWFkZXJzSGFzID0gdW5jdXJyeVRoaXMoSGVhZGVyc1Byb3RvdHlwZS5oYXMpO1xuICB2YXIgaGVhZGVyc1NldCA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuc2V0KTtcblxuICB2YXIgd3JhcFJlcXVlc3RPcHRpb25zID0gZnVuY3Rpb24gKGluaXQpIHtcbiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHtcbiAgICAgIHZhciBib2R5ID0gaW5pdC5ib2R5O1xuICAgICAgdmFyIGhlYWRlcnM7XG4gICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHtcbiAgICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpO1xuICAgICAgICBpZiAoIWhlYWRlcnNIYXMoaGVhZGVycywgJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICAgICAgaGVhZGVyc1NldChoZWFkZXJzLCAnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyZWF0ZShpbml0LCB7XG4gICAgICAgICAgYm9keTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsICR0b1N0cmluZyhib2R5KSksXG4gICAgICAgICAgaGVhZGVyczogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGhlYWRlcnMpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gcmV0dXJuIGluaXQ7XG4gIH07XG5cbiAgaWYgKGlzQ2FsbGFibGUobmF0aXZlRmV0Y2gpKSB7XG4gICAgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZG9udENhbGxHZXRTZXQ6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVGZXRjaChpbnB1dCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyB3cmFwUmVxdWVzdE9wdGlvbnMoYXJndW1lbnRzWzFdKSA6IHt9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmIChpc0NhbGxhYmxlKE5hdGl2ZVJlcXVlc3QpKSB7XG4gICAgdmFyIFJlcXVlc3RDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQgLyogLCBpbml0ICovKSB7XG4gICAgICBhbkluc3RhbmNlKHRoaXMsIFJlcXVlc3RQcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIG5ldyBOYXRpdmVSZXF1ZXN0KGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pO1xuICAgIH07XG5cbiAgICBSZXF1ZXN0UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVxdWVzdENvbnN0cnVjdG9yO1xuICAgIFJlcXVlc3RDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBSZXF1ZXN0UHJvdG90eXBlO1xuXG4gICAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwge1xuICAgICAgUmVxdWVzdDogUmVxdWVzdENvbnN0cnVjdG9yXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsXG4gIGdldFN0YXRlOiBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlXG59O1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmNvbnN0cnVjdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YFxucmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3InKTtcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgVVNFX05BVElWRV9VUkwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXJsLWNvbnN0cnVjdG9yLWRldGVjdGlvbicpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHVuY3VycnlUaGlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcycpO1xudmFyIGRlZmluZUJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lQnVpbHRJbkFjY2Vzc29yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3NvcicpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eScpO1xudmFyIGFzc2lnbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtYXNzaWduJyk7XG52YXIgYXJyYXlGcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBhcnJheVNsaWNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZScpO1xudmFyIGNvZGVBdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zdHJpbmctbXVsdGlieXRlJykuY29kZUF0O1xudmFyIHRvQVNDSUkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCcpO1xudmFyIFVSTFNlYXJjaFBhcmFtc01vZHVsZSA9IHJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmNvbnN0cnVjdG9yJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsVVJMU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcignVVJMJyk7XG52YXIgVVJMU2VhcmNoUGFyYW1zID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLlVSTFNlYXJjaFBhcmFtcztcbnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlO1xuXG52YXIgTmF0aXZlVVJMID0gZ2xvYmFsLlVSTDtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciBwb3cgPSBNYXRoLnBvdztcbnZhciBjaGFyQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQXQpO1xudmFyIGV4ZWMgPSB1bmN1cnJ5VGhpcygvLi8uZXhlYyk7XG52YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pO1xudmFyIG51bWJlclRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTtcbnZhciBwb3AgPSB1bmN1cnJ5VGhpcyhbXS5wb3ApO1xudmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTtcbnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7XG52YXIgc2hpZnQgPSB1bmN1cnJ5VGhpcyhbXS5zaGlmdCk7XG52YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7XG52YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7XG52YXIgdG9Mb3dlckNhc2UgPSB1bmN1cnJ5VGhpcygnJy50b0xvd2VyQ2FzZSk7XG52YXIgdW5zaGlmdCA9IHVuY3VycnlUaGlzKFtdLnVuc2hpZnQpO1xuXG52YXIgSU5WQUxJRF9BVVRIT1JJVFkgPSAnSW52YWxpZCBhdXRob3JpdHknO1xudmFyIElOVkFMSURfU0NIRU1FID0gJ0ludmFsaWQgc2NoZW1lJztcbnZhciBJTlZBTElEX0hPU1QgPSAnSW52YWxpZCBob3N0JztcbnZhciBJTlZBTElEX1BPUlQgPSAnSW52YWxpZCBwb3J0JztcblxudmFyIEFMUEhBID0gL1thLXpdL2k7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVnZXhwL25vLW9ic2N1cmUtcmFuZ2UgLS0gc2FmZVxudmFyIEFMUEhBTlVNRVJJQyA9IC9bXFxkKy0uYS16XS9pO1xudmFyIERJR0lUID0gL1xcZC87XG52YXIgSEVYX1NUQVJUID0gL14weC9pO1xudmFyIE9DVCA9IC9eWzAtN10rJC87XG52YXIgREVDID0gL15cXGQrJC87XG52YXIgSEVYID0gL15bXFxkYS1mXSskL2k7XG4vKiBlc2xpbnQtZGlzYWJsZSByZWdleHAvbm8tY29udHJvbC1jaGFyYWN0ZXIgLS0gc2FmZSAqL1xudmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQgPSAvW1xcMFxcdFxcblxcciAjJS86PD4/QFtcXFxcXFxdXnxdLztcbnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcXDBcXHRcXG5cXHIgIy86PD4/QFtcXFxcXFxdXnxdLztcbnZhciBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFID0gL15bXFx1MDAwMC1cXHUwMDIwXSt8W1xcdTAwMDAtXFx1MDAyMF0rJC9nO1xudmFyIFRBQl9BTkRfTkVXX0xJTkUgPSAvW1xcdFxcblxccl0vZztcbi8qIGVzbGludC1lbmFibGUgcmVnZXhwL25vLWNvbnRyb2wtY2hhcmFjdGVyIC0tIHNhZmUgKi9cbnZhciBFT0Y7XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaXB2NC1udW1iZXItcGFyc2VyXG52YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gIHZhciBwYXJ0cyA9IHNwbGl0KGlucHV0LCAnLicpO1xuICB2YXIgcGFydHNMZW5ndGgsIG51bWJlcnMsIGluZGV4LCBwYXJ0LCByYWRpeCwgbnVtYmVyLCBpcHY0O1xuICBpZiAocGFydHMubGVuZ3RoICYmIHBhcnRzW3BhcnRzLmxlbmd0aCAtIDFdID09ICcnKSB7XG4gICAgcGFydHMubGVuZ3RoLS07XG4gIH1cbiAgcGFydHNMZW5ndGggPSBwYXJ0cy5sZW5ndGg7XG4gIGlmIChwYXJ0c0xlbmd0aCA+IDQpIHJldHVybiBpbnB1dDtcbiAgbnVtYmVycyA9IFtdO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykge1xuICAgIHBhcnQgPSBwYXJ0c1tpbmRleF07XG4gICAgaWYgKHBhcnQgPT0gJycpIHJldHVybiBpbnB1dDtcbiAgICByYWRpeCA9IDEwO1xuICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgY2hhckF0KHBhcnQsIDApID09ICcwJykge1xuICAgICAgcmFkaXggPSBleGVjKEhFWF9TVEFSVCwgcGFydCkgPyAxNiA6IDg7XG4gICAgICBwYXJ0ID0gc3RyaW5nU2xpY2UocGFydCwgcmFkaXggPT0gOCA/IDEgOiAyKTtcbiAgICB9XG4gICAgaWYgKHBhcnQgPT09ICcnKSB7XG4gICAgICBudW1iZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWV4ZWMocmFkaXggPT0gMTAgPyBERUMgOiByYWRpeCA9PSA4ID8gT0NUIDogSEVYLCBwYXJ0KSkgcmV0dXJuIGlucHV0O1xuICAgICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpO1xuICAgIH1cbiAgICBwdXNoKG51bWJlcnMsIG51bWJlcik7XG4gIH1cbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHtcbiAgICBudW1iZXIgPSBudW1iZXJzW2luZGV4XTtcbiAgICBpZiAoaW5kZXggPT0gcGFydHNMZW5ndGggLSAxKSB7XG4gICAgICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAobnVtYmVyID4gMjU1KSByZXR1cm4gbnVsbDtcbiAgfVxuICBpcHY0ID0gcG9wKG51bWJlcnMpO1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBudW1iZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGlwdjQgKz0gbnVtYmVyc1tpbmRleF0gKiBwb3coMjU2LCAzIC0gaW5kZXgpO1xuICB9XG4gIHJldHVybiBpcHY0O1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LWlwdjYtcGFyc2VyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHMgLS0gVE9ET1xudmFyIHBhcnNlSVB2NiA9IGZ1bmN0aW9uIChpbnB1dCkge1xuICB2YXIgYWRkcmVzcyA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwXTtcbiAgdmFyIHBpZWNlSW5kZXggPSAwO1xuICB2YXIgY29tcHJlc3MgPSBudWxsO1xuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciB2YWx1ZSwgbGVuZ3RoLCBudW1iZXJzU2VlbiwgaXB2NFBpZWNlLCBudW1iZXIsIHN3YXBzLCBzd2FwO1xuXG4gIHZhciBjaHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGNoYXJBdChpbnB1dCwgcG9pbnRlcik7XG4gIH07XG5cbiAgaWYgKGNocigpID09ICc6Jykge1xuICAgIGlmIChjaGFyQXQoaW5wdXQsIDEpICE9ICc6JykgcmV0dXJuO1xuICAgIHBvaW50ZXIgKz0gMjtcbiAgICBwaWVjZUluZGV4Kys7XG4gICAgY29tcHJlc3MgPSBwaWVjZUluZGV4O1xuICB9XG4gIHdoaWxlIChjaHIoKSkge1xuICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjtcbiAgICBpZiAoY2hyKCkgPT0gJzonKSB7XG4gICAgICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHJldHVybjtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIHBpZWNlSW5kZXgrKztcbiAgICAgIGNvbXByZXNzID0gcGllY2VJbmRleDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IGxlbmd0aCA9IDA7XG4gICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgZXhlYyhIRVgsIGNocigpKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZSAqIDE2ICsgcGFyc2VJbnQoY2hyKCksIDE2KTtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGxlbmd0aCsrO1xuICAgIH1cbiAgICBpZiAoY2hyKCkgPT0gJy4nKSB7XG4gICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjtcbiAgICAgIHBvaW50ZXIgLT0gbGVuZ3RoO1xuICAgICAgaWYgKHBpZWNlSW5kZXggPiA2KSByZXR1cm47XG4gICAgICBudW1iZXJzU2VlbiA9IDA7XG4gICAgICB3aGlsZSAoY2hyKCkpIHtcbiAgICAgICAgaXB2NFBpZWNlID0gbnVsbDtcbiAgICAgICAgaWYgKG51bWJlcnNTZWVuID4gMCkge1xuICAgICAgICAgIGlmIChjaHIoKSA9PSAnLicgJiYgbnVtYmVyc1NlZW4gPCA0KSBwb2ludGVyKys7XG4gICAgICAgICAgZWxzZSByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFleGVjKERJR0lULCBjaHIoKSkpIHJldHVybjtcbiAgICAgICAgd2hpbGUgKGV4ZWMoRElHSVQsIGNocigpKSkge1xuICAgICAgICAgIG51bWJlciA9IHBhcnNlSW50KGNocigpLCAxMCk7XG4gICAgICAgICAgaWYgKGlwdjRQaWVjZSA9PT0gbnVsbCkgaXB2NFBpZWNlID0gbnVtYmVyO1xuICAgICAgICAgIGVsc2UgaWYgKGlwdjRQaWVjZSA9PSAwKSByZXR1cm47XG4gICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjtcbiAgICAgICAgICBpZiAoaXB2NFBpZWNlID4gMjU1KSByZXR1cm47XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICB9XG4gICAgICAgIGFkZHJlc3NbcGllY2VJbmRleF0gPSBhZGRyZXNzW3BpZWNlSW5kZXhdICogMjU2ICsgaXB2NFBpZWNlO1xuICAgICAgICBudW1iZXJzU2VlbisrO1xuICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAobnVtYmVyc1NlZW4gIT0gNCkgcmV0dXJuO1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChjaHIoKSA9PSAnOicpIHtcbiAgICAgIHBvaW50ZXIrKztcbiAgICAgIGlmICghY2hyKCkpIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGNocigpKSByZXR1cm47XG4gICAgYWRkcmVzc1twaWVjZUluZGV4KytdID0gdmFsdWU7XG4gIH1cbiAgaWYgKGNvbXByZXNzICE9PSBudWxsKSB7XG4gICAgc3dhcHMgPSBwaWVjZUluZGV4IC0gY29tcHJlc3M7XG4gICAgcGllY2VJbmRleCA9IDc7XG4gICAgd2hpbGUgKHBpZWNlSW5kZXggIT0gMCAmJiBzd2FwcyA+IDApIHtcbiAgICAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdO1xuICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07XG4gICAgICBhZGRyZXNzW2NvbXByZXNzICsgLS1zd2Fwc10gPSBzd2FwO1xuICAgIH1cbiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjtcbiAgcmV0dXJuIGFkZHJlc3M7XG59O1xuXG52YXIgZmluZExvbmdlc3RaZXJvU2VxdWVuY2UgPSBmdW5jdGlvbiAoaXB2Nikge1xuICB2YXIgbWF4SW5kZXggPSBudWxsO1xuICB2YXIgbWF4TGVuZ3RoID0gMTtcbiAgdmFyIGN1cnJTdGFydCA9IG51bGw7XG4gIHZhciBjdXJyTGVuZ3RoID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgZm9yICg7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgIGlmIChpcHY2W2luZGV4XSAhPT0gMCkge1xuICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHtcbiAgICAgICAgbWF4SW5kZXggPSBjdXJyU3RhcnQ7XG4gICAgICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gICAgICB9XG4gICAgICBjdXJyU3RhcnQgPSBudWxsO1xuICAgICAgY3Vyckxlbmd0aCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjdXJyU3RhcnQgPT09IG51bGwpIGN1cnJTdGFydCA9IGluZGV4O1xuICAgICAgKytjdXJyTGVuZ3RoO1xuICAgIH1cbiAgfVxuICBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkge1xuICAgIG1heEluZGV4ID0gY3VyclN0YXJ0O1xuICAgIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7XG4gIH1cbiAgcmV0dXJuIG1heEluZGV4O1xufTtcblxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNob3N0LXNlcmlhbGl6aW5nXG52YXIgc2VyaWFsaXplSG9zdCA9IGZ1bmN0aW9uIChob3N0KSB7XG4gIHZhciByZXN1bHQsIGluZGV4LCBjb21wcmVzcywgaWdub3JlMDtcbiAgLy8gaXB2NFxuICBpZiAodHlwZW9mIGhvc3QgPT0gJ251bWJlcicpIHtcbiAgICByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7XG4gICAgICB1bnNoaWZ0KHJlc3VsdCwgaG9zdCAlIDI1Nik7XG4gICAgICBob3N0ID0gZmxvb3IoaG9zdCAvIDI1Nik7XG4gICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcuJyk7XG4gIC8vIGlwdjZcbiAgfSBlbHNlIGlmICh0eXBlb2YgaG9zdCA9PSAnb2JqZWN0Jykge1xuICAgIHJlc3VsdCA9ICcnO1xuICAgIGNvbXByZXNzID0gZmluZExvbmdlc3RaZXJvU2VxdWVuY2UoaG9zdCk7XG4gICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgODsgaW5kZXgrKykge1xuICAgICAgaWYgKGlnbm9yZTAgJiYgaG9zdFtpbmRleF0gPT09IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKGlnbm9yZTApIGlnbm9yZTAgPSBmYWxzZTtcbiAgICAgIGlmIChjb21wcmVzcyA9PT0gaW5kZXgpIHtcbiAgICAgICAgcmVzdWx0ICs9IGluZGV4ID8gJzonIDogJzo6JztcbiAgICAgICAgaWdub3JlMCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgKz0gbnVtYmVyVG9TdHJpbmcoaG9zdFtpbmRleF0sIDE2KTtcbiAgICAgICAgaWYgKGluZGV4IDwgNykgcmVzdWx0ICs9ICc6JztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdbJyArIHJlc3VsdCArICddJztcbiAgfSByZXR1cm4gaG9zdDtcbn07XG5cbnZhciBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0ID0ge307XG52YXIgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0LCB7XG4gICcgJzogMSwgJ1wiJzogMSwgJzwnOiAxLCAnPic6IDEsICdgJzogMVxufSk7XG52YXIgcGF0aFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCwge1xuICAnIyc6IDEsICc/JzogMSwgJ3snOiAxLCAnfSc6IDFcbn0pO1xudmFyIHVzZXJpbmZvUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgcGF0aFBlcmNlbnRFbmNvZGVTZXQsIHtcbiAgJy8nOiAxLCAnOic6IDEsICc7JzogMSwgJz0nOiAxLCAnQCc6IDEsICdbJzogMSwgJ1xcXFwnOiAxLCAnXSc6IDEsICdeJzogMSwgJ3wnOiAxXG59KTtcblxudmFyIHBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbiAoY2hyLCBzZXQpIHtcbiAgdmFyIGNvZGUgPSBjb2RlQXQoY2hyLCAwKTtcbiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXNPd24oc2V0LCBjaHIpID8gY2hyIDogZW5jb2RlVVJJQ29tcG9uZW50KGNocik7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3NwZWNpYWwtc2NoZW1lXG52YXIgc3BlY2lhbFNjaGVtZXMgPSB7XG4gIGZ0cDogMjEsXG4gIGZpbGU6IG51bGwsXG4gIGh0dHA6IDgwLFxuICBodHRwczogNDQzLFxuICB3czogODAsXG4gIHdzczogNDQzXG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3dpbmRvd3MtZHJpdmUtbGV0dGVyXG52YXIgaXNXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nLCBub3JtYWxpemVkKSB7XG4gIHZhciBzZWNvbmQ7XG4gIHJldHVybiBzdHJpbmcubGVuZ3RoID09IDIgJiYgZXhlYyhBTFBIQSwgY2hhckF0KHN0cmluZywgMCkpXG4gICAgJiYgKChzZWNvbmQgPSBjaGFyQXQoc3RyaW5nLCAxKSkgPT0gJzonIHx8ICghbm9ybWFsaXplZCAmJiBzZWNvbmQgPT0gJ3wnKSk7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3N0YXJ0LXdpdGgtYS13aW5kb3dzLWRyaXZlLWxldHRlclxudmFyIHN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHZhciB0aGlyZDtcbiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPiAxICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKHN0cmluZ1NsaWNlKHN0cmluZywgMCwgMikpICYmIChcbiAgICBzdHJpbmcubGVuZ3RoID09IDIgfHxcbiAgICAoKHRoaXJkID0gY2hhckF0KHN0cmluZywgMikpID09PSAnLycgfHwgdGhpcmQgPT09ICdcXFxcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpXG4gICk7XG59O1xuXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3NpbmdsZS1kb3QtcGF0aC1zZWdtZW50XG52YXIgaXNTaW5nbGVEb3QgPSBmdW5jdGlvbiAoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHRvTG93ZXJDYXNlKHNlZ21lbnQpID09PSAnJTJlJztcbn07XG5cbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG91YmxlLWRvdC1wYXRoLXNlZ21lbnRcbnZhciBpc0RvdWJsZURvdCA9IGZ1bmN0aW9uIChzZWdtZW50KSB7XG4gIHNlZ21lbnQgPSB0b0xvd2VyQ2FzZShzZWdtZW50KTtcbiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuLicgfHwgc2VnbWVudCA9PT0gJyUyZS4nIHx8IHNlZ21lbnQgPT09ICcuJTJlJyB8fCBzZWdtZW50ID09PSAnJTJlJTJlJztcbn07XG5cbi8vIFN0YXRlczpcbnZhciBTQ0hFTUVfU1RBUlQgPSB7fTtcbnZhciBTQ0hFTUUgPSB7fTtcbnZhciBOT19TQ0hFTUUgPSB7fTtcbnZhciBTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSA9IHt9O1xudmFyIFBBVEhfT1JfQVVUSE9SSVRZID0ge307XG52YXIgUkVMQVRJVkUgPSB7fTtcbnZhciBSRUxBVElWRV9TTEFTSCA9IHt9O1xudmFyIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMgPSB7fTtcbnZhciBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyA9IHt9O1xudmFyIEFVVEhPUklUWSA9IHt9O1xudmFyIEhPU1QgPSB7fTtcbnZhciBIT1NUTkFNRSA9IHt9O1xudmFyIFBPUlQgPSB7fTtcbnZhciBGSUxFID0ge307XG52YXIgRklMRV9TTEFTSCA9IHt9O1xudmFyIEZJTEVfSE9TVCA9IHt9O1xudmFyIFBBVEhfU1RBUlQgPSB7fTtcbnZhciBQQVRIID0ge307XG52YXIgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCA9IHt9O1xudmFyIFFVRVJZID0ge307XG52YXIgRlJBR01FTlQgPSB7fTtcblxudmFyIFVSTFN0YXRlID0gZnVuY3Rpb24gKHVybCwgaXNCYXNlLCBiYXNlKSB7XG4gIHZhciB1cmxTdHJpbmcgPSAkdG9TdHJpbmcodXJsKTtcbiAgdmFyIGJhc2VTdGF0ZSwgZmFpbHVyZSwgc2VhcmNoUGFyYW1zO1xuICBpZiAoaXNCYXNlKSB7XG4gICAgZmFpbHVyZSA9IHRoaXMucGFyc2UodXJsU3RyaW5nKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHRoaXMuc2VhcmNoUGFyYW1zID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoYmFzZSAhPT0gdW5kZWZpbmVkKSBiYXNlU3RhdGUgPSBuZXcgVVJMU3RhdGUoYmFzZSwgdHJ1ZSk7XG4gICAgZmFpbHVyZSA9IHRoaXMucGFyc2UodXJsU3RyaW5nLCBudWxsLCBiYXNlU3RhdGUpO1xuICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7XG4gICAgc2VhcmNoUGFyYW1zID0gZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZShuZXcgVVJMU2VhcmNoUGFyYW1zKCkpO1xuICAgIHNlYXJjaFBhcmFtcy5iaW5kVVJMKHRoaXMpO1xuICAgIHRoaXMuc2VhcmNoUGFyYW1zID0gc2VhcmNoUGFyYW1zO1xuICB9XG59O1xuXG5VUkxTdGF0ZS5wcm90b3R5cGUgPSB7XG4gIHR5cGU6ICdVUkwnLFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1wYXJzaW5nXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtc3RhdGVtZW50cyAtLSBUT0RPXG4gIHBhcnNlOiBmdW5jdGlvbiAoaW5wdXQsIHN0YXRlT3ZlcnJpZGUsIGJhc2UpIHtcbiAgICB2YXIgdXJsID0gdGhpcztcbiAgICB2YXIgc3RhdGUgPSBzdGF0ZU92ZXJyaWRlIHx8IFNDSEVNRV9TVEFSVDtcbiAgICB2YXIgcG9pbnRlciA9IDA7XG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuICAgIHZhciBzZWVuQXQgPSBmYWxzZTtcbiAgICB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICB2YXIgc2VlblBhc3N3b3JkVG9rZW4gPSBmYWxzZTtcbiAgICB2YXIgY29kZVBvaW50cywgY2hyLCBidWZmZXJDb2RlUG9pbnRzLCBmYWlsdXJlO1xuXG4gICAgaW5wdXQgPSAkdG9TdHJpbmcoaW5wdXQpO1xuXG4gICAgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICB1cmwuc2NoZW1lID0gJyc7XG4gICAgICB1cmwudXNlcm5hbWUgPSAnJztcbiAgICAgIHVybC5wYXNzd29yZCA9ICcnO1xuICAgICAgdXJsLmhvc3QgPSBudWxsO1xuICAgICAgdXJsLnBvcnQgPSBudWxsO1xuICAgICAgdXJsLnBhdGggPSBbXTtcbiAgICAgIHVybC5xdWVyeSA9IG51bGw7XG4gICAgICB1cmwuZnJhZ21lbnQgPSBudWxsO1xuICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSBmYWxzZTtcbiAgICAgIGlucHV0ID0gcmVwbGFjZShpbnB1dCwgTEVBRElOR19BTkRfVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJycpO1xuICAgIH1cblxuICAgIGlucHV0ID0gcmVwbGFjZShpbnB1dCwgVEFCX0FORF9ORVdfTElORSwgJycpO1xuXG4gICAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG5cbiAgICB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkge1xuICAgICAgY2hyID0gY29kZVBvaW50c1twb2ludGVyXTtcbiAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgY2FzZSBTQ0hFTUVfU1RBUlQ6XG4gICAgICAgICAgaWYgKGNociAmJiBleGVjKEFMUEhBLCBjaHIpKSB7XG4gICAgICAgICAgICBidWZmZXIgKz0gdG9Mb3dlckNhc2UoY2hyKTtcbiAgICAgICAgICAgIHN0YXRlID0gU0NIRU1FO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIHN0YXRlID0gTk9fU0NIRU1FO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFNDSEVNRTpcbiAgICAgICAgICBpZiAoY2hyICYmIChleGVjKEFMUEhBTlVNRVJJQywgY2hyKSB8fCBjaHIgPT0gJysnIHx8IGNociA9PSAnLScgfHwgY2hyID09ICcuJykpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSB0b0xvd2VyQ2FzZShjaHIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6Jykge1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgKFxuICAgICAgICAgICAgICAodXJsLmlzU3BlY2lhbCgpICE9IGhhc093bihzcGVjaWFsU2NoZW1lcywgYnVmZmVyKSkgfHxcbiAgICAgICAgICAgICAgKGJ1ZmZlciA9PSAnZmlsZScgJiYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSB8fFxuICAgICAgICAgICAgICAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgIXVybC5ob3N0KVxuICAgICAgICAgICAgKSkgcmV0dXJuO1xuICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJ1ZmZlcjtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSB7XG4gICAgICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgc3BlY2lhbFNjaGVtZXNbdXJsLnNjaGVtZV0gPT0gdXJsLnBvcnQpIHVybC5wb3J0ID0gbnVsbDtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgICAgc3RhdGUgPSBGSUxFO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgYmFzZSAmJiBiYXNlLnNjaGVtZSA9PSB1cmwuc2NoZW1lKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pc1NwZWNpYWwoKSkge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfT1JfQVVUSE9SSVRZO1xuICAgICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7XG4gICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7XG4gICAgICAgICAgICBwb2ludGVyID0gMDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBOT19TQ0hFTUU6XG4gICAgICAgICAgaWYgKCFiYXNlIHx8IChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hyICE9ICcjJykpIHJldHVybiBJTlZBTElEX1NDSEVNRTtcbiAgICAgICAgICBpZiAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgdXJsLmNhbm5vdEJlQUJhc2VVUkwgPSB0cnVlO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzdGF0ZSA9IGJhc2Uuc2NoZW1lID09ICdmaWxlJyA/IEZJTEUgOiBSRUxBVElWRTtcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICBjYXNlIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nICYmIGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUztcbiAgICAgICAgICAgIHBvaW50ZXIrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBSRUxBVElWRTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBQQVRIX09SX0FVVEhPUklUWTpcbiAgICAgICAgICBpZiAoY2hyID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgUkVMQVRJVkU6XG4gICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lO1xuICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nIHx8IChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lO1xuICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDtcbiAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7XG4gICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTtcbiAgICAgICAgICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7XG4gICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0O1xuICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICB1cmwucGF0aC5sZW5ndGgtLTtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBSRUxBVElWRV9TTEFTSDpcbiAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcvJykge1xuICAgICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7XG4gICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkO1xuICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICB1cmwucG9ydCA9IGJhc2UucG9ydDtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOlxuICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7XG4gICAgICAgICAgaWYgKGNociAhPSAnLycgfHwgY2hhckF0KGJ1ZmZlciwgcG9pbnRlciArIDEpICE9ICcvJykgY29udGludWU7XG4gICAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM6XG4gICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgY2hyICE9ICdcXFxcJykge1xuICAgICAgICAgICAgc3RhdGUgPSBBVVRIT1JJVFk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgQVVUSE9SSVRZOlxuICAgICAgICAgIGlmIChjaHIgPT0gJ0AnKSB7XG4gICAgICAgICAgICBpZiAoc2VlbkF0KSBidWZmZXIgPSAnJTQwJyArIGJ1ZmZlcjtcbiAgICAgICAgICAgIHNlZW5BdCA9IHRydWU7XG4gICAgICAgICAgICBidWZmZXJDb2RlUG9pbnRzID0gYXJyYXlGcm9tKGJ1ZmZlcik7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJ1ZmZlckNvZGVQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFyIGNvZGVQb2ludCA9IGJ1ZmZlckNvZGVQb2ludHNbaV07XG4gICAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT0gJzonICYmICFzZWVuUGFzc3dvcmRUb2tlbikge1xuICAgICAgICAgICAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgZW5jb2RlZENvZGVQb2ludHMgPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludCwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICAgICAgaWYgKHNlZW5QYXNzd29yZFRva2VuKSB1cmwucGFzc3dvcmQgKz0gZW5jb2RlZENvZGVQb2ludHM7XG4gICAgICAgICAgICAgIGVsc2UgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChzZWVuQXQgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9BVVRIT1JJVFk7XG4gICAgICAgICAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gSE9TVDtcbiAgICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIEhPU1Q6XG4gICAgICAgIGNhc2UgSE9TVE5BTUU6XG4gICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgdXJsLnNjaGVtZSA9PSAnZmlsZScpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJzonICYmICFzZWVuQnJhY2tldCkge1xuICAgICAgICAgICAgaWYgKGJ1ZmZlciA9PSAnJykgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7XG4gICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUE9SVDtcbiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlID09IEhPU1ROQU1FKSByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmICh1cmwuaXNTcGVjaWFsKCkgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpIHx8IHVybC5wb3J0ICE9PSBudWxsKSkgcmV0dXJuO1xuICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY2hyID09ICdbJykgc2VlbkJyYWNrZXQgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2hyID09ICddJykgc2VlbkJyYWNrZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBPUlQ6XG4gICAgICAgICAgaWYgKGV4ZWMoRElHSVQsIGNocikpIHtcbiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHI7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNociA9PSBFT0YgfHwgY2hyID09ICcvJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycgfHxcbiAgICAgICAgICAgIChjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkgfHxcbiAgICAgICAgICAgIHN0YXRlT3ZlcnJpZGVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChidWZmZXIgIT0gJycpIHtcbiAgICAgICAgICAgICAgdmFyIHBvcnQgPSBwYXJzZUludChidWZmZXIsIDEwKTtcbiAgICAgICAgICAgICAgaWYgKHBvcnQgPiAweEZGRkYpIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgICAgIHVybC5wb3J0ID0gKHVybC5pc1NwZWNpYWwoKSAmJiBwb3J0ID09PSBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSkgPyBudWxsIDogcG9ydDtcbiAgICAgICAgICAgICAgYnVmZmVyID0gJyc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1BPUlQ7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGSUxFOlxuICAgICAgICAgIHVybC5zY2hlbWUgPSAnZmlsZSc7XG4gICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJykgc3RhdGUgPSBGSUxFX1NMQVNIO1xuICAgICAgICAgIGVsc2UgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnKSB7XG4gICAgICAgICAgICBpZiAoY2hyID09IEVPRikge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7XG4gICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7XG4gICAgICAgICAgICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7XG4gICAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGpvaW4oYXJyYXlTbGljZShjb2RlUG9pbnRzLCBwb2ludGVyKSwgJycpKSkge1xuICAgICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0O1xuICAgICAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpO1xuICAgICAgICAgICAgICAgIHVybC5zaG9ydGVuUGF0aCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gYnJlYWs7XG5cbiAgICAgICAgY2FzZSBGSUxFX1NMQVNIOlxuICAgICAgICAgIGlmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIHN0YXRlID0gRklMRV9IT1NUO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihqb2luKGFycmF5U2xpY2UoY29kZVBvaW50cywgcG9pbnRlciksICcnKSkpIHtcbiAgICAgICAgICAgIGlmIChpc1dpbmRvd3NEcml2ZUxldHRlcihiYXNlLnBhdGhbMF0sIHRydWUpKSBwdXNoKHVybC5wYXRoLCBiYXNlLnBhdGhbMF0pO1xuICAgICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgIGNhc2UgRklMRV9IT1NUOlxuICAgICAgICAgIGlmIChjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICdcXFxcJyB8fCBjaHIgPT0gJz8nIHx8IGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYnVmZmVyID09ICcnKSB7XG4gICAgICAgICAgICAgIHVybC5ob3N0ID0gJyc7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47XG4gICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZhaWx1cmUgPSB1cmwucGFyc2VIb3N0KGJ1ZmZlcik7XG4gICAgICAgICAgICAgIGlmIChmYWlsdXJlKSByZXR1cm4gZmFpbHVyZTtcbiAgICAgICAgICAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKSB1cmwuaG9zdCA9ICcnO1xuICAgICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuO1xuICAgICAgICAgICAgICBidWZmZXIgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUO1xuICAgICAgICAgICAgfSBjb250aW51ZTtcbiAgICAgICAgICB9IGVsc2UgYnVmZmVyICs9IGNocjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEhfU1RBUlQ6XG4gICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSkge1xuICAgICAgICAgICAgc3RhdGUgPSBQQVRIO1xuICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgY2hyICE9ICdcXFxcJykgY29udGludWU7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJz8nKSB7XG4gICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7XG4gICAgICAgICAgfSBlbHNlIGlmICghc3RhdGVPdmVycmlkZSAmJiBjaHIgPT0gJyMnKSB7XG4gICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IFBBVEg7XG4gICAgICAgICAgICBpZiAoY2hyICE9ICcvJykgY29udGludWU7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIFBBVEg6XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8XG4gICAgICAgICAgICAoY2hyID09ICdcXFxcJyAmJiB1cmwuaXNTcGVjaWFsKCkpIHx8XG4gICAgICAgICAgICAoIXN0YXRlT3ZlcnJpZGUgJiYgKGNociA9PSAnPycgfHwgY2hyID09ICcjJykpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgICB1cmwuc2hvcnRlblBhdGgoKTtcbiAgICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgIShjaHIgPT0gJ1xcXFwnICYmIHVybC5pc1NwZWNpYWwoKSkpIHtcbiAgICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXNTaW5nbGVEb3QoYnVmZmVyKSkge1xuICAgICAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiAhKGNociA9PSAnXFxcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkge1xuICAgICAgICAgICAgICAgIHB1c2godXJsLnBhdGgsICcnKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmICF1cmwucGF0aC5sZW5ndGggJiYgaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYnVmZmVyKSkge1xuICAgICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJztcbiAgICAgICAgICAgICAgICBidWZmZXIgPSBjaGFyQXQoYnVmZmVyLCAwKSArICc6JzsgLy8gbm9ybWFsaXplIHdpbmRvd3MgZHJpdmUgbGV0dGVyXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgYnVmZmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJ1ZmZlciA9ICcnO1xuICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmIChjaHIgPT0gRU9GIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykpIHtcbiAgICAgICAgICAgICAgd2hpbGUgKHVybC5wYXRoLmxlbmd0aCA+IDEgJiYgdXJsLnBhdGhbMF0gPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgc2hpZnQodXJsLnBhdGgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2hyID09ICc/Jykge1xuICAgICAgICAgICAgICB1cmwucXVlcnkgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICcjJykge1xuICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJztcbiAgICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBwYXRoUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg6XG4gICAgICAgICAgaWYgKGNociA9PSAnPycpIHtcbiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTtcbiAgICAgICAgICB9IGJyZWFrO1xuXG4gICAgICAgIGNhc2UgUVVFUlk6XG4gICAgICAgICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNociA9PSAnIycpIHtcbiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnO1xuICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNociAhPSBFT0YpIHtcbiAgICAgICAgICAgIGlmIChjaHIgPT0gXCInXCIgJiYgdXJsLmlzU3BlY2lhbCgpKSB1cmwucXVlcnkgKz0gJyUyNyc7XG4gICAgICAgICAgICBlbHNlIGlmIChjaHIgPT0gJyMnKSB1cmwucXVlcnkgKz0gJyUyMyc7XG4gICAgICAgICAgICBlbHNlIHVybC5xdWVyeSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgfSBicmVhaztcblxuICAgICAgICBjYXNlIEZSQUdNRU5UOlxuICAgICAgICAgIGlmIChjaHIgIT0gRU9GKSB1cmwuZnJhZ21lbnQgKz0gcGVyY2VudEVuY29kZShjaHIsIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHBvaW50ZXIrKztcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaG9zdC1wYXJzaW5nXG4gIHBhcnNlSG9zdDogZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgdmFyIHJlc3VsdCwgY29kZVBvaW50cywgaW5kZXg7XG4gICAgaWYgKGNoYXJBdChpbnB1dCwgMCkgPT0gJ1snKSB7XG4gICAgICBpZiAoY2hhckF0KGlucHV0LCBpbnB1dC5sZW5ndGggLSAxKSAhPSAnXScpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSBwYXJzZUlQdjYoc3RyaW5nU2xpY2UoaW5wdXQsIDEsIC0xKSk7XG4gICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICAvLyBvcGFxdWUgaG9zdFxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTcGVjaWFsKCkpIHtcbiAgICAgIGlmIChleGVjKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQsIGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHJlc3VsdCA9ICcnO1xuICAgICAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7XG4gICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2RlUG9pbnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2luZGV4XSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7XG4gICAgICB9XG4gICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7XG4gICAgICBpZiAoZXhlYyhGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5ULCBpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7XG4gICAgICByZXN1bHQgPSBwYXJzZUlQdjQoaW5wdXQpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgcmV0dXJuIElOVkFMSURfSE9TVDtcbiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY2Fubm90LWhhdmUtYS11c2VybmFtZS1wYXNzd29yZC1wb3J0XG4gIGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhdGhpcy5ob3N0IHx8IHRoaXMuY2Fubm90QmVBQmFzZVVSTCB8fCB0aGlzLnNjaGVtZSA9PSAnZmlsZSc7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaW5jbHVkZS1jcmVkZW50aWFsc1xuICBpbmNsdWRlc0NyZWRlbnRpYWxzOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMudXNlcm5hbWUgIT0gJycgfHwgdGhpcy5wYXNzd29yZCAhPSAnJztcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpcy1zcGVjaWFsXG4gIGlzU3BlY2lhbDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBoYXNPd24oc3BlY2lhbFNjaGVtZXMsIHRoaXMuc2NoZW1lKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzaG9ydGVuLWEtdXJscy1wYXRoXG4gIHNob3J0ZW5QYXRoOiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgdmFyIHBhdGhTaXplID0gcGF0aC5sZW5ndGg7XG4gICAgaWYgKHBhdGhTaXplICYmICh0aGlzLnNjaGVtZSAhPSAnZmlsZScgfHwgcGF0aFNpemUgIT0gMSB8fCAhaXNXaW5kb3dzRHJpdmVMZXR0ZXIocGF0aFswXSwgdHJ1ZSkpKSB7XG4gICAgICBwYXRoLmxlbmd0aC0tO1xuICAgIH1cbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LXVybC1zZXJpYWxpemVyXG4gIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciB1cmwgPSB0aGlzO1xuICAgIHZhciBzY2hlbWUgPSB1cmwuc2NoZW1lO1xuICAgIHZhciB1c2VybmFtZSA9IHVybC51c2VybmFtZTtcbiAgICB2YXIgcGFzc3dvcmQgPSB1cmwucGFzc3dvcmQ7XG4gICAgdmFyIGhvc3QgPSB1cmwuaG9zdDtcbiAgICB2YXIgcG9ydCA9IHVybC5wb3J0O1xuICAgIHZhciBwYXRoID0gdXJsLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gdXJsLnF1ZXJ5O1xuICAgIHZhciBmcmFnbWVudCA9IHVybC5mcmFnbWVudDtcbiAgICB2YXIgb3V0cHV0ID0gc2NoZW1lICsgJzonO1xuICAgIGlmIChob3N0ICE9PSBudWxsKSB7XG4gICAgICBvdXRwdXQgKz0gJy8vJztcbiAgICAgIGlmICh1cmwuaW5jbHVkZXNDcmVkZW50aWFscygpKSB7XG4gICAgICAgIG91dHB1dCArPSB1c2VybmFtZSArIChwYXNzd29yZCA/ICc6JyArIHBhc3N3b3JkIDogJycpICsgJ0AnO1xuICAgICAgfVxuICAgICAgb3V0cHV0ICs9IHNlcmlhbGl6ZUhvc3QoaG9zdCk7XG4gICAgICBpZiAocG9ydCAhPT0gbnVsbCkgb3V0cHV0ICs9ICc6JyArIHBvcnQ7XG4gICAgfSBlbHNlIGlmIChzY2hlbWUgPT0gJ2ZpbGUnKSBvdXRwdXQgKz0gJy8vJztcbiAgICBvdXRwdXQgKz0gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBqb2luKHBhdGgsICcvJykgOiAnJztcbiAgICBpZiAocXVlcnkgIT09IG51bGwpIG91dHB1dCArPSAnPycgKyBxdWVyeTtcbiAgICBpZiAoZnJhZ21lbnQgIT09IG51bGwpIG91dHB1dCArPSAnIycgKyBmcmFnbWVudDtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZlxuICBzZXRIcmVmOiBmdW5jdGlvbiAoaHJlZikge1xuICAgIHZhciBmYWlsdXJlID0gdGhpcy5wYXJzZShocmVmKTtcbiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpO1xuICAgIHRoaXMuc2VhcmNoUGFyYW1zLnVwZGF0ZSgpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luXG4gIGdldE9yaWdpbjogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzY2hlbWUgPSB0aGlzLnNjaGVtZTtcbiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDtcbiAgICBpZiAoc2NoZW1lID09ICdibG9iJykgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgVVJMQ29uc3RydWN0b3Ioc2NoZW1lLnBhdGhbMF0pLm9yaWdpbjtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9XG4gICAgaWYgKHNjaGVtZSA9PSAnZmlsZScgfHwgIXRoaXMuaXNTcGVjaWFsKCkpIHJldHVybiAnbnVsbCc7XG4gICAgcmV0dXJuIHNjaGVtZSArICc6Ly8nICsgc2VyaWFsaXplSG9zdCh0aGlzLmhvc3QpICsgKHBvcnQgIT09IG51bGwgPyAnOicgKyBwb3J0IDogJycpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgZ2V0UHJvdG9jb2w6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlbWUgKyAnOic7XG4gIH0sXG4gIHNldFByb3RvY29sOiBmdW5jdGlvbiAocHJvdG9jb2wpIHtcbiAgICB0aGlzLnBhcnNlKCR0b1N0cmluZyhwcm90b2NvbCkgKyAnOicsIFNDSEVNRV9TVEFSVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICBnZXRVc2VybmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnVzZXJuYW1lO1xuICB9LFxuICBzZXRVc2VybmFtZTogZnVuY3Rpb24gKHVzZXJuYW1lKSB7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHVzZXJuYW1lKSk7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICB0aGlzLnVzZXJuYW1lID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZFxuICBnZXRQYXNzd29yZDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnBhc3N3b3JkO1xuICB9LFxuICBzZXRQYXNzd29yZDogZnVuY3Rpb24gKHBhc3N3b3JkKSB7XG4gICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHBhc3N3b3JkKSk7XG4gICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjtcbiAgICB0aGlzLnBhc3N3b3JkID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnBhc3N3b3JkICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTtcbiAgICB9XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0XG4gIGdldEhvc3Q6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDtcbiAgICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnXG4gICAgICA6IHBvcnQgPT09IG51bGwgPyBzZXJpYWxpemVIb3N0KGhvc3QpXG4gICAgICA6IHNlcmlhbGl6ZUhvc3QoaG9zdCkgKyAnOicgKyBwb3J0O1xuICB9LFxuICBzZXRIb3N0OiBmdW5jdGlvbiAoaG9zdCkge1xuICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICB0aGlzLnBhcnNlKGhvc3QsIEhPU1QpO1xuICB9LFxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgZ2V0SG9zdG5hbWU6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaG9zdCA9IHRoaXMuaG9zdDtcbiAgICByZXR1cm4gaG9zdCA9PT0gbnVsbCA/ICcnIDogc2VyaWFsaXplSG9zdChob3N0KTtcbiAgfSxcbiAgc2V0SG9zdG5hbWU6IGZ1bmN0aW9uIChob3N0bmFtZSkge1xuICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICB0aGlzLnBhcnNlKGhvc3RuYW1lLCBIT1NUTkFNRSk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0XG4gIGdldFBvcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDtcbiAgICByZXR1cm4gcG9ydCA9PT0gbnVsbCA/ICcnIDogJHRvU3RyaW5nKHBvcnQpO1xuICB9LFxuICBzZXRQb3J0OiBmdW5jdGlvbiAocG9ydCkge1xuICAgIGlmICh0aGlzLmNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCgpKSByZXR1cm47XG4gICAgcG9ydCA9ICR0b1N0cmluZyhwb3J0KTtcbiAgICBpZiAocG9ydCA9PSAnJykgdGhpcy5wb3J0ID0gbnVsbDtcbiAgICBlbHNlIHRoaXMucGFyc2UocG9ydCwgUE9SVCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZVxuICBnZXRQYXRobmFtZTogZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gdGhpcy5wYXRoO1xuICAgIHJldHVybiB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBqb2luKHBhdGgsICcvJykgOiAnJztcbiAgfSxcbiAgc2V0UGF0aG5hbWU6IGZ1bmN0aW9uIChwYXRobmFtZSkge1xuICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjtcbiAgICB0aGlzLnBhdGggPSBbXTtcbiAgICB0aGlzLnBhcnNlKHBhdGhuYW1lLCBQQVRIX1NUQVJUKTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaFxuICBnZXRTZWFyY2g6IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5O1xuICAgIHJldHVybiBxdWVyeSA/ICc/JyArIHF1ZXJ5IDogJyc7XG4gIH0sXG4gIHNldFNlYXJjaDogZnVuY3Rpb24gKHNlYXJjaCkge1xuICAgIHNlYXJjaCA9ICR0b1N0cmluZyhzZWFyY2gpO1xuICAgIGlmIChzZWFyY2ggPT0gJycpIHtcbiAgICAgIHRoaXMucXVlcnkgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoJz8nID09IGNoYXJBdChzZWFyY2gsIDApKSBzZWFyY2ggPSBzdHJpbmdTbGljZShzZWFyY2gsIDEpO1xuICAgICAgdGhpcy5xdWVyeSA9ICcnO1xuICAgICAgdGhpcy5wYXJzZShzZWFyY2gsIFFVRVJZKTtcbiAgICB9XG4gICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7XG4gIH0sXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXNcbiAgZ2V0U2VhcmNoUGFyYW1zOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoUGFyYW1zLmZhY2FkZTtcbiAgfSxcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2hcbiAgZ2V0SGFzaDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZnJhZ21lbnQ7XG4gICAgcmV0dXJuIGZyYWdtZW50ID8gJyMnICsgZnJhZ21lbnQgOiAnJztcbiAgfSxcbiAgc2V0SGFzaDogZnVuY3Rpb24gKGhhc2gpIHtcbiAgICBoYXNoID0gJHRvU3RyaW5nKGhhc2gpO1xuICAgIGlmIChoYXNoID09ICcnKSB7XG4gICAgICB0aGlzLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCcjJyA9PSBjaGFyQXQoaGFzaCwgMCkpIGhhc2ggPSBzdHJpbmdTbGljZShoYXNoLCAxKTtcbiAgICB0aGlzLmZyYWdtZW50ID0gJyc7XG4gICAgdGhpcy5wYXJzZShoYXNoLCBGUkFHTUVOVCk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaFBhcmFtcy5zZXJpYWxpemUoKSB8fCBudWxsO1xuICB9XG59O1xuXG4vLyBgVVJMYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3NcbnZhciBVUkxDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTCh1cmwgLyogLCBiYXNlICovKSB7XG4gIHZhciB0aGF0ID0gYW5JbnN0YW5jZSh0aGlzLCBVUkxQcm90b3R5cGUpO1xuICB2YXIgYmFzZSA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCBuZXcgVVJMU3RhdGUodXJsLCBmYWxzZSwgYmFzZSkpO1xuICBpZiAoIURFU0NSSVBUT1JTKSB7XG4gICAgdGhhdC5ocmVmID0gc3RhdGUuc2VyaWFsaXplKCk7XG4gICAgdGhhdC5vcmlnaW4gPSBzdGF0ZS5nZXRPcmlnaW4oKTtcbiAgICB0aGF0LnByb3RvY29sID0gc3RhdGUuZ2V0UHJvdG9jb2woKTtcbiAgICB0aGF0LnVzZXJuYW1lID0gc3RhdGUuZ2V0VXNlcm5hbWUoKTtcbiAgICB0aGF0LnBhc3N3b3JkID0gc3RhdGUuZ2V0UGFzc3dvcmQoKTtcbiAgICB0aGF0Lmhvc3QgPSBzdGF0ZS5nZXRIb3N0KCk7XG4gICAgdGhhdC5ob3N0bmFtZSA9IHN0YXRlLmdldEhvc3RuYW1lKCk7XG4gICAgdGhhdC5wb3J0ID0gc3RhdGUuZ2V0UG9ydCgpO1xuICAgIHRoYXQucGF0aG5hbWUgPSBzdGF0ZS5nZXRQYXRobmFtZSgpO1xuICAgIHRoYXQuc2VhcmNoID0gc3RhdGUuZ2V0U2VhcmNoKCk7XG4gICAgdGhhdC5zZWFyY2hQYXJhbXMgPSBzdGF0ZS5nZXRTZWFyY2hQYXJhbXMoKTtcbiAgICB0aGF0Lmhhc2ggPSBzdGF0ZS5nZXRIYXNoKCk7XG4gIH1cbn07XG5cbnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG5cbnZhciBhY2Nlc3NvckRlc2NyaXB0b3IgPSBmdW5jdGlvbiAoZ2V0dGVyLCBzZXR0ZXIpIHtcbiAgcmV0dXJuIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW2dldHRlcl0oKTtcbiAgICB9LFxuICAgIHNldDogc2V0dGVyICYmIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcylbc2V0dGVyXSh2YWx1ZSk7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZVxuICB9O1xufTtcblxuaWYgKERFU0NSSVBUT1JTKSB7XG4gIC8vIGBVUkwucHJvdG90eXBlLmhyZWZgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ocmVmXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdocmVmJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdzZXJpYWxpemUnLCAnc2V0SHJlZicpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUub3JpZ2luYCBnZXR0ZXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLW9yaWdpblxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnb3JpZ2luJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRPcmlnaW4nKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLnByb3RvY29sYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2xcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3Byb3RvY29sJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQcm90b2NvbCcsICdzZXRQcm90b2NvbCcpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUudXNlcm5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC11c2VybmFtZVxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAndXNlcm5hbWUnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFVzZXJuYW1lJywgJ3NldFVzZXJuYW1lJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5wYXNzd29yZGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwYXNzd29yZCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UGFzc3dvcmQnLCAnc2V0UGFzc3dvcmQnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLmhvc3RgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0XG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdob3N0JywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIb3N0JywgJ3NldEhvc3QnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLmhvc3RuYW1lYCBhY2Nlc3NvcnMgcGFpclxuICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdG5hbWVcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ2hvc3RuYW1lJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIb3N0bmFtZScsICdzZXRIb3N0bmFtZScpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUucG9ydGAgYWNjZXNzb3JzIHBhaXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnRcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3BvcnQnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBvcnQnLCAnc2V0UG9ydCcpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUucGF0aG5hbWVgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZVxuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAncGF0aG5hbWUnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhdGhuYW1lJywgJ3NldFBhdGhuYW1lJykpO1xuICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hcbiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3NlYXJjaCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoJywgJ3NldFNlYXJjaCcpKTtcbiAgLy8gYFVSTC5wcm90b3R5cGUuc2VhcmNoUGFyYW1zYCBnZXR0ZXJcbiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXNlYXJjaHBhcmFtc1xuICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnc2VhcmNoUGFyYW1zJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRTZWFyY2hQYXJhbXMnKSk7XG4gIC8vIGBVUkwucHJvdG90eXBlLmhhc2hgIGFjY2Vzc29ycyBwYWlyXG4gIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1oYXNoXG4gIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdoYXNoJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIYXNoJywgJ3NldEhhc2gnKSk7XG59XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG5kZWZpbmVCdWlsdEluKFVSTFByb3RvdHlwZSwgJ3RvSlNPTicsIGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VyaWFsaXplKCk7XG59LCB7IGVudW1lcmFibGU6IHRydWUgfSk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2Rcbi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jVVJMLXN0cmluZ2lmaWNhdGlvbi1iZWhhdmlvclxuZGVmaW5lQnVpbHRJbihVUkxQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTtcbn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTtcblxuaWYgKE5hdGl2ZVVSTCkge1xuICB2YXIgbmF0aXZlQ3JlYXRlT2JqZWN0VVJMID0gTmF0aXZlVVJMLmNyZWF0ZU9iamVjdFVSTDtcbiAgdmFyIG5hdGl2ZVJldm9rZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5yZXZva2VPYmplY3RVUkw7XG4gIC8vIGBVUkwuY3JlYXRlT2JqZWN0VVJMYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC9jcmVhdGVPYmplY3RVUkxcbiAgaWYgKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCkgZGVmaW5lQnVpbHRJbihVUkxDb25zdHJ1Y3RvciwgJ2NyZWF0ZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlQ3JlYXRlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTtcbiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZFxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML3Jldm9rZU9iamVjdFVSTFxuICBpZiAobmF0aXZlUmV2b2tlT2JqZWN0VVJMKSBkZWZpbmVCdWlsdEluKFVSTENvbnN0cnVjdG9yLCAncmV2b2tlT2JqZWN0VVJMJywgYmluZChuYXRpdmVSZXZva2VPYmplY3RVUkwsIE5hdGl2ZVVSTCkpO1xufVxuXG5zZXRUb1N0cmluZ1RhZyhVUkxDb25zdHJ1Y3RvciwgJ1VSTCcpO1xuXG4kKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwsIHNoYW06ICFERVNDUklQVE9SUyB9LCB7XG4gIFVSTDogVVJMQ29uc3RydWN0b3Jcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3dcbnJlcXVpcmUoJy4uL21vZHVsZXMvd2ViLnVybC5jb25zdHJ1Y3RvcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsJyk7XG5cbi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kXG4vLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdG9qc29uXG4kKHsgdGFyZ2V0OiAnVVJMJywgcHJvdG86IHRydWUsIGVudW1lcmFibGU6IHRydWUgfSwge1xuICB0b0pTT046IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gY2FsbChVUkwucHJvdG90eXBlLnRvU3RyaW5nLCB0aGlzKTtcbiAgfVxufSk7XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5JTXFNclQyZUdPR2VGaUxiQ0FHZ3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1jb250ZW50OmNlbnRlcn0uSU1xTXJUMmVHT0dlRmlMYkNBR2cgLmNEa0YxWTFzMEhKOXVfOV92VW1qe2ZvbnQtZmFtaWx5OlxcXCJFeG8gMi4wIFRoaW5cXFwiO2ZvbnQtc2l6ZTpsYXJnZX1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvQXBwLm1vZHVsZS5zY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBLHNCQUNDLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLG9CQUFBLENBRUEsNENBQ0MsMEJBQUEsQ0FDQSxlQUFBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5BcHAge1xcclxcblxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxyXFxuXFx0YWxpZ24tY29udGVudDogY2VudGVyO1xcclxcblxcclxcblxcdC50aXRsZSB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6IFxcXCJFeG8gMi4wIFRoaW5cXFwiO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogbGFyZ2U7XFxyXFxuXFx0fVxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJBcHBcIjogXCJJTXFNclQyZUdPR2VGaUxiQ0FHZ1wiLFxuXHRcInRpdGxlXCI6IFwiY0RrRjFZMXMwSEo5dV85X3ZVbWpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIubGRCcll6d0plRDJQSTIwdXJRaGF7Zm9udC1mYW1pbHk6XFxcIlRyZWJ1Y2hldCBNU1xcXCJ9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMd3tmb250LWZhbWlseTppbmhlcml0O2JvcmRlcjpub25lO2N1cnNvcjpwb2ludGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjIwcmVtO2hlaWdodDozMHJlbTtib3JkZXItcmlnaHQ6NHB4IHNvbGlkICMxNjk4ZDk7b3ZlcmZsb3c6aGlkZGVuO2JvcmRlci1yYWRpdXM6MTBweDtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxMzVkZWcsIHRyYW5zcGFyZW50IDIuNWVtLCAjZmZmIDApfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHc6ZGlzYWJsZWR7Ym9yZGVyLWNvbG9yOiNiM2IzYjM7YmFja2dyb3VuZC1jb2xvcjpsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCB0cmFuc3BhcmVudCAyLjVlbSwgI0YyRjJGMiAwKX0ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3OmRpc2FibGVkIC5IdUdoejc5NWtLY0k5R1dGN19sM3tiYWNrZ3JvdW5kOiNiM2IzYjN9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpkaXNhYmxlZDpob3Zlcntib3JkZXItY29sb3I6I2IzYjNiM30ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3OmRpc2FibGVkIC5yV1ZrazhhUVBCSVJFaGN4cEdDWSAueXBSaVNYbmppamFGX1V3Qko5azUsLmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpkaXNhYmxlZCAucldWa2s4YVFQQklSRWhjeHBHQ1kgLlpGdE1PSlYwbnhHM3pVWHpEU0NaLC5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHc6ZGlzYWJsZWQgLnJXVmtrOGFRUEJJUkVoY3hwR0NZIC5lQ255SnpMMGdaNU5hZ2xNRm9FcSwubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3OmRpc2FibGVkIC5yV1ZrazhhUVBCSVJFaGN4cEdDWSAudF9oTzBGZDV6eVg0ZG9OVWo1aEF7Y29sb3I6I2IzYjNiM30ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3OmhvdmVye2JvcmRlci1jb2xvcjojMmVhOGU2fS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHc6aG92ZXIgLkh1R2h6Nzk1a0tjSTlHV0Y3X2wze2JhY2tncm91bmQ6IzJlYThlNn0ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3OmRpc2FibGVkOmhvdmVyIC5IdUdoejc5NWtLY0k5R1dGN19sM3tiYWNrZ3JvdW5kOiNiM2IzYjN9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpob3Zlcn4uTUtUM2t1SW1hc2JZRUoyUlBqRGQgLnlvWGVwdEhhUWVQME5uazd5TDZ0e2NvbG9yOiMyZWE4ZTZ9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5YbGlLQWZpSW9jWnBIbFhYZEtBVntib3JkZXItY29sb3I6I2Q5MTY2N30ubGRCcll6d0plRDJQSTIwdXJRaGEgLlhsaUtBZmlJb2NacEhsWFhkS0FWOmhvdmVye2JvcmRlci1jb2xvcjojZDkxNjY3fS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuaFNpS0ZVSXMyNE1VT2wzYWJZUkV7Ym9yZGVyLWNvbG9yOiNkOTE2Njd9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5oU2lLRlVJczI0TVVPbDNhYllSRTpob3Zlcntib3JkZXItY29sb3I6I2U1MmU3YX0ubGRCcll6d0plRDJQSTIwdXJRaGEgLlhsaUtBZmlJb2NacEhsWFhkS0FWOmhvdmVyIC5IdUdoejc5NWtLY0k5R1dGN19sM3tiYWNrZ3JvdW5kOiNkOTE2Njd9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5oU2lLRlVJczI0TVVPbDNhYllSRTpob3ZlciAuSHVHaHo3OTVrS2NJOUdXRjdfbDN7YmFja2dyb3VuZDojZTUyZTdhfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHc6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDpjYWxjKDEwMCUgLSAwcHgpO3JpZ2h0OjA7ei1pbmRleDoxO2hlaWdodDoxMCU7dG9wOjBweDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLWNvbG9yOiMxNjk4ZDk7Ym9yZGVyLXdpZHRoOjRweCAwIDBweCA2cHg7dHJhbnNmb3JtOnNrZXcoLTQ1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgYm90dG9tfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHc6aG92ZXI6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOiMyZWE4ZTZ9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpkaXNhYmxlZDphZnRlcntib3JkZXItY29sb3I6I2IzYjNiM30ubGRCcll6d0plRDJQSTIwdXJRaGEgLlhsaUtBZmlJb2NacEhsWFhkS0FWOmFmdGVye2JvcmRlci1jb2xvcjojZDkxNjY3fS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuWGxpS0FmaUlvY1pwSGxYWGRLQVY6aG92ZXI6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOiNkOTE2Njd9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5oU2lLRlVJczI0TVVPbDNhYllSRTphZnRlcntib3JkZXItY29sb3I6I2Q5MTY2N30ubGRCcll6d0plRDJQSTIwdXJRaGEgLmhTaUtGVUlzMjRNVU9sM2FiWVJFOmhvdmVyOmFmdGVye2JvcmRlci1jb2xvcjojZTUyZTdhfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuZE1lamVjUnNlUzFCUlZOYUNtOEI6YWZ0ZXJ7cG9pbnRlci1ldmVudHM6bm9uZTtvcGFjaXR5Oi40fS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHc6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6Y2FsYygxMDAlIC0gNHB4KTtyaWdodDowcHg7ei1pbmRleDoxO2hlaWdodDpjYWxjKDkwJSAtIDJweCk7Ym90dG9tOjBweDtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLWNvbG9yOiMxNjk4ZDk7Ym9yZGVyLXdpZHRoOjBweCAwIDRweCA0cHh9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpob3ZlcjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiMyZWE4ZTZ9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpkaXNhYmxlZDpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNiM2IzYjN9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5YbGlLQWZpSW9jWnBIbFhYZEtBVjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNkOTE2Njd9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5YbGlLQWZpSW9jWnBIbFhYZEtBVjpob3ZlcjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNkOTE2Njd9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5oU2lLRlVJczI0TVVPbDNhYllSRTpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNkOTE2Njd9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5oU2lLRlVJczI0TVVPbDNhYllSRTpob3ZlcjpiZWZvcmV7Ym9yZGVyLWNvbG9yOiNlNTJlN2F9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdyAucldWa2s4YVFQQklSRWhjeHBHQ1l7cG9zaXRpb246YWJzb2x1dGU7dG9wOjYuMSU7bGVmdDoxNiU7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3RleHQtYWxpZ246c3RhcnR9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdyAucldWa2s4YVFQQklSRWhjeHBHQ1kgLlpGdE1PSlYwbnhHM3pVWHpEU0Nae2ZvbnQtd2VpZ2h0Om5vcm1hbDtmb250LXNpemU6MXJlbTtjb2xvcjojNjY2O21hcmdpbi1ib3R0b206MTglfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHcgLnJXVmtrOGFRUEJJUkVoY3hwR0NZIC5aRnRNT0pWMG54RzN6VVh6RFNDWjo6Zmlyc3QtbGV0dGVye2ZvbnQtc2l6ZToxMzAlfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHcgLnJXVmtrOGFRUEJJUkVoY3hwR0NZIC55cFJpU1huamlqYUZfVXdCSjlrNXt0ZXh0LWluZGVudDotMC43bW07bGluZS1oZWlnaHQ6MDtmb250LXdlaWdodDpib2xkO2ZvbnQtc2l6ZTozcmVtO2NvbG9yOiMwMDA7bWFyZ2luLWJvdHRvbToxOS41JX0ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3IC5yV1ZrazhhUVBCSVJFaGN4cEdDWSAueXBSaVNYbmppamFGX1V3Qko5azU6OmZpcnN0LWxldHRlcntmb250LXNpemU6MTMwJTtmb250LXdlaWdodDpub3JtYWw7bGV0dGVyLXNwYWNpbmc6MH0ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3IC5yV1ZrazhhUVBCSVJFaGN4cEdDWSAuZUNueUp6TDBnWjVOYWdsTUZvRXF7Zm9udC13ZWlnaHQ6Ym9sZDtmb250LXNpemU6MS41cmVtO2NvbG9yOiMwMDA7bWFyZ2luLWJvdHRvbToxNC41JX0ubGRCcll6d0plRDJQSTIwdXJRaGEgLmpuZG1QYm9KOGpGckNfaXBJQ0x3IC5yV1ZrazhhUVBCSVJFaGN4cEdDWSAudF9oTzBGZDV6eVg0ZG9OVWo1aEF7dGV4dC1hbGlnbjpsZWZ0O2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6c3RhcnQ7Zm9udC13ZWlnaHQ6bm9ybWFsO2ZvbnQtc2l6ZTouOXJlbTtjb2xvcjojNjY2O2xpbmUtaGVpZ2h0OjFyZW19LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdyAucldWa2s4YVFQQklSRWhjeHBHQ1k+KntsaW5lLWhlaWdodDowfS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHcgLlpxMzg3U2dJQmRSUUpVRTFyOFUxe3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtib3R0b206MDt6LWluZGV4OjB9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdzpkaXNhYmxlZCAuWnEzODdTZ0lCZFJRSlVFMXI4VTF7b3BhY2l0eTouNjV9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdyAuSHVHaHo3OTVrS2NJOUdXRjdfbDN7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjMuMSU7cmlnaHQ6My4xJTtoZWlnaHQ6NXJlbTt3aWR0aDo1cmVtO2JvcmRlci1yYWRpdXM6NTAlO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kOiMxNjk4ZDl9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdyAuU0dqVkdlUFNHdTVtbmp2VjRYbk17YmFja2dyb3VuZDojZDkxNjY3fS5sZEJyWXp3SmVEMlBJMjB1clFoYSAuam5kbVBib0o4akZyQ19pcElDTHcgLkh1R2h6Nzk1a0tjSTlHV0Y3X2wzIC5RWjlyQ1VFTTRQOVFRUDN2MU5TSHtmb250LXNpemU6Mi42MjVyZW19LmxkQnJZendKZUQyUEkyMHVyUWhhIC5qbmRtUGJvSjhqRnJDX2lwSUNMdyAuSHVHaHo3OTVrS2NJOUdXRjdfbDMgLnl2RHl3SVpfVVVscGlkZGNZRmNKe2ZvbnQtc2l6ZToxLjNyZW07bGluZS1oZWlnaHQ6MXJlbX0ubGRCcll6d0plRDJQSTIwdXJRaGEgLk1LVDNrdUltYXNiWUVKMlJQakRke2hlaWdodDoxcmVtO21hcmdpbi10b3A6NCU7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7Zm9udC1zaXplOi44MTNyZW07Zm9udC13ZWlnaHQ6bm9ybWFsO2NvbG9yOiNmZmZ9LmxkQnJZendKZUQyUEkyMHVyUWhhIC5NS1Qza3VJbWFzYllFSjJSUGpEZCAueW9YZXB0SGFRZVAwTm5rN3lMNnR7cGFkZGluZzowO2N1cnNvcjpwb2ludGVyO3RleHQtZGVjb3JhdGlvbjpub25lO2JvcmRlcjpub25lO2JvcmRlci1ib3R0b206MnB4IGRhc2hlZDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7Y29sb3I6IzE2OThkOX0ubGRCcll6d0plRDJQSTIwdXJRaGEgLk1LVDNrdUltYXNiWUVKMlJQakRkIC5mdEFhYmZMOVdYOV9DaVhDTm5Oentjb2xvcjojZmY2fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2NhcmQvQ2FyZC5tb2R1bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQSxzQkFDQywwQkFBQSxDQUVBLDRDQUNDLG1CQUFBLENBQ0EsV0FBQSxDQUNBLGNBQUEsQ0FDQSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxZQUFBLENBQ0EsOEJBQUEsQ0FDQSxlQUFBLENBQ0Esa0JBQUEsQ0FDQSw2REFBQSxDQUVBLHFEQUNDLG9CQUFBLENBQ0Esc0VBQUEsQ0FHRCwyRUFDQyxrQkFBQSxDQUdELDJEQUNDLG9CQUFBLENBR0Qsb1lBSUMsYUFBQSxDQUdELGtEQUNDLG9CQUFBLENBR0Qsd0VBQ0Msa0JBQUEsQ0FHRCxpRkFDQyxrQkFBQSxDQUdELDhGQUNDLGFBQUEsQ0FHRCw0Q0FDQyxvQkFBQSxDQUlELGtEQUNDLG9CQUFBLENBR0QsNENBQ0Msb0JBQUEsQ0FHRCxrREFDQyxvQkFBQSxDQUlELHdFQUNDLGtCQUFBLENBR0Qsd0VBQ0Msa0JBQUEsQ0FHRCxrREFDQyxVQUFBLENBQ0EsaUJBQUEsQ0FDQSxzQkFBQSxDQUNBLE9BQUEsQ0FDQSxTQUFBLENBQ0EsVUFBQSxDQUNBLE9BQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBLENBQ0EsMEJBQUEsQ0FDQSxzQkFBQSxDQUNBLDRCQUFBLENBR0Qsd0RBQ0Msb0JBQUEsQ0FHRCwyREFDQyxvQkFBQSxDQUdELGtEQUNDLG9CQUFBLENBSUQsd0RBQ0Msb0JBQUEsQ0FHRCxrREFDQyxvQkFBQSxDQUdELHdEQUNDLG9CQUFBLENBR0Qsa0RBQ0MsbUJBQUEsQ0FDQSxVQUFBLENBR0QsbURBQ0MsVUFBQSxDQUNBLGlCQUFBLENBQ0Esc0JBQUEsQ0FDQSxTQUFBLENBQ0EsU0FBQSxDQUNBLHNCQUFBLENBQ0EsVUFBQSxDQUNBLGtCQUFBLENBQ0Esb0JBQUEsQ0FDQSwwQkFBQSxDQUdELHlEQUNDLG9CQUFBLENBSUQsNERBQ0Msb0JBQUEsQ0FHRCxtREFDQyxvQkFBQSxDQUlELHlEQUNDLG9CQUFBLENBR0QsbURBQ0Msb0JBQUEsQ0FHRCx5REFDQyxvQkFBQSxDQUdELGtFQUNDLGlCQUFBLENBQ0EsUUFBQSxDQUNBLFFBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxzQkFBQSxDQUNBLGdCQUFBLENBRUEsd0ZBQ0Msa0JBQUEsQ0FDQSxjQUFBLENBQ0EsVUFBQSxDQUNBLGlCQUFBLENBRUEsc0dBQ0MsY0FBQSxDQUlGLHdGQUNDLGtCQUFBLENBQ0EsYUFBQSxDQUNBLGdCQUFBLENBQ0EsY0FBQSxDQUNBLFVBQUEsQ0FDQSxtQkFBQSxDQUVBLHNHQUNDLGNBQUEsQ0FDQSxrQkFBQSxDQUNBLGdCQUFBLENBSUYsd0ZBQ0MsZ0JBQUEsQ0FDQSxnQkFBQSxDQUNBLFVBQUEsQ0FDQSxtQkFBQSxDQUdELHdGQUNDLGVBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxpQkFBQSxDQUNBLGtCQUFBLENBQ0EsZUFBQSxDQUNBLFVBQUEsQ0FDQSxnQkFBQSxDQUdELG9FQUNDLGFBQUEsQ0FJRixrRUFDQyxpQkFBQSxDQUNBLE1BQUEsQ0FDQSxRQUFBLENBQ0EsU0FBQSxDQUdELDJFQUNDLFdBQUEsQ0FHRCxrRUFDQyxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLFVBQUEsQ0FDQSxpQkFBQSxDQUNBLFlBQUEsQ0FDQSxzQkFBQSxDQUNBLHFCQUFBLENBQ0Esa0JBQUEsQ0FDQSxVQUFBLENBQ0Esa0JBQUEsQ0FFQSxrRUFDQyxrQkFBQSxDQUdELHdGQUNDLGtCQUFBLENBR0Qsd0ZBQ0MsZ0JBQUEsQ0FDQSxnQkFBQSxDQU1ILDRDQUNDLFdBQUEsQ0FDQSxhQUFBLENBQ0EsWUFBQSxDQUNBLHNCQUFBLENBQ0EsaUJBQUEsQ0FDQSxrQkFBQSxDQUNBLFVBQUEsQ0FFQSxrRUFDQyxTQUFBLENBQ0EsY0FBQSxDQUNBLG9CQUFBLENBQ0EsV0FBQSxDQUNBLHdCQUFBLENBQ0Esd0JBQUEsQ0FDQSxhQUFBLENBR0Qsa0VBQ0MsVUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXHJcXG5cXHRmb250LWZhbWlseTogJ1RyZWJ1Y2hldCBNUyc7XFxyXFxuXFxyXFxuXFx0LmJvZHkge1xcclxcblxcdFxcdGZvbnQtZmFtaWx5OiBpbmhlcml0O1xcclxcblxcdFxcdGJvcmRlcjogbm9uZTtcXHJcXG5cXHRcXHRjdXJzb3I6IHBvaW50ZXI7XFxyXFxuXFx0XFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcdFxcdHdpZHRoOiAyMHJlbTtcXHJcXG5cXHRcXHRoZWlnaHQ6IDMwcmVtO1xcclxcblxcdFxcdGJvcmRlci1yaWdodDogNHB4IHNvbGlkICMxNjk4RDk7XFxyXFxuXFx0XFx0b3ZlcmZsb3c6IGhpZGRlbjtcXHJcXG5cXHRcXHRib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcblxcdFxcdGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCgxMzVkZWcsIHRyYW5zcGFyZW50IDIuNWVtLCAjZmZmIDApO1xcclxcblxcclxcblxcdFxcdCY6ZGlzYWJsZWQge1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogI0IzQjNCMztcXHJcXG5cXHRcXHRcXHRiYWNrZ3JvdW5kLWNvbG9yOiBsaW5lYXItZ3JhZGllbnQoMTM1ZGVnLCB0cmFuc3BhcmVudCAyLjVlbSwgI0YyRjJGMiAwKSA7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCY6ZGlzYWJsZWQgLndlaWdodHtcXHJcXG5cXHRcXHRcXHRiYWNrZ3JvdW5kOiAjQjNCM0IzO1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmOmRpc2FibGVkOmhvdmVyIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNCM0IzQjM7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCY6ZGlzYWJsZWQgLnRleHQgLmJyYW5kLFxcclxcblxcdFxcdCY6ZGlzYWJsZWQgLnRleHQgLnNsb2dhbixcXHJcXG5cXHRcXHQmOmRpc2FibGVkIC50ZXh0IC50YXN0eSxcXHJcXG5cXHRcXHQmOmRpc2FibGVkIC50ZXh0IC5kZXNjcmlwdGlvbiB7XFxyXFxuXFx0XFx0XFx0Y29sb3I6ICNCM0IzQjM7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCY6aG92ZXIge1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogIzJFQThFNjtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0Jjpob3ZlciAud2VpZ2h0IHtcXHJcXG5cXHRcXHRcXHRiYWNrZ3JvdW5kOiAjMkVBOEU2O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmOmRpc2FibGVkOmhvdmVyIC53ZWlnaHQge1xcclxcblxcdFxcdFxcdGJhY2tncm91bmQ6ICNCM0IzQjM7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCY6aG92ZXJ+LkNhbGxUb0FjdGlvbiAuYnV0dG9uIHtcXHJcXG5cXHRcXHRcXHRjb2xvcjogIzJFQThFNjtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0Jl9zZWxlY3RlZCB7XFxyXFxuXFx0XFx0XFx0Ym9yZGVyLWNvbG9yOiAjRDkxNjY3O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQvLyDQodC+0YHRgtC+0Y/QvdC40LUg0L3QsNCy0LXQtNC10L3QuNGPINC/0YDQuNC80LXQvdGP0LXRgtGB0Y8g0Log0LLRi9Cx0YDQsNC90L3QvtC5INGD0L/QsNC60L7QstC60LUg0L3QtSDRgdGA0LDQt9GDLCDQsCDQv9C+0YHQu9C1INGC0L7Qs9C+LCDQutCw0Log0LrRg9GA0YHQvtGAINGD0YjQtdC7INGBINC90LXQtSDQv9C+0YHQu9C1INC/0LXRgNCy0L7QvdCw0YfQsNC70YzQvdC+0LPQviDQstGL0LHQvtGA0LAuXFxyXFxuXFx0XFx0Jl9zZWxlY3RlZDpob3ZlciB7XFxyXFxuXFx0XFx0XFx0Ym9yZGVyLWNvbG9yOiAjRDkxNjY3O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkSG92ZXIge1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogI0Q5MTY2NztcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0Jl9zZWxlY3RlZEhvdmVyOmhvdmVyIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNFNTJFN0E7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdC8vINCh0L7RgdGC0L7Rj9C90LjQtSDQvdCw0LLQtdC00LXQvdC40Y8g0L/RgNC40LzQtdC90Y/QtdGC0YHRjyDQuiDQstGL0LHRgNCw0L3QvdC+0Lkg0YPQv9Cw0LrQvtCy0LrQtSDQvdC1INGB0YDQsNC30YMsINCwINC/0L7RgdC70LUg0YLQvtCz0L4sINC60LDQuiDQutGD0YDRgdC+0YAg0YPRiNC10Lsg0YEg0L3QtdC1INC/0L7RgdC70LUg0L/QtdGA0LLQvtC90LDRh9Cw0LvRjNC90L7Qs9C+INCy0YvQsdC+0YDQsC5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkOmhvdmVyIC53ZWlnaHQge1xcclxcblxcdFxcdFxcdGJhY2tncm91bmQ6ICNEOTE2Njc7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCZfc2VsZWN0ZWRIb3Zlcjpob3ZlciAud2VpZ2h0IHtcXHJcXG5cXHRcXHRcXHRiYWNrZ3JvdW5kOiAjRTUyRTdBO1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmOmFmdGVyIHtcXHJcXG5cXHRcXHRcXHRjb250ZW50OiBcXFwiXFxcIjtcXHJcXG5cXHRcXHRcXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0XFx0XFx0d2lkdGg6IGNhbGMoMTAwJSAtIDBweCk7XFxyXFxuXFx0XFx0XFx0cmlnaHQ6IDA7XFxyXFxuXFx0XFx0XFx0ei1pbmRleDogMTtcXHJcXG5cXHRcXHRcXHRoZWlnaHQ6IDEwJTtcXHJcXG5cXHRcXHRcXHR0b3A6IDBweDtcXHJcXG5cXHRcXHRcXHRib3JkZXItc3R5bGU6IHNvbGlkO1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogIzE2OThEOTtcXHJcXG5cXHRcXHRcXHRib3JkZXItd2lkdGg6IDRweCAwIDBweCA2cHg7XFxyXFxuXFx0XFx0XFx0dHJhbnNmb3JtOiBza2V3KC00NWRlZyk7XFxyXFxuXFx0XFx0XFx0dHJhbnNmb3JtLW9yaWdpbjogbGVmdCBib3R0b207XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCY6aG92ZXI6YWZ0ZXIge1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogIzJFQThFNjtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0JjpkaXNhYmxlZDphZnRlciB7XFxyXFxuXFx0XFx0XFx0Ym9yZGVyLWNvbG9yOiAjQjNCM0IzO1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkOmFmdGVyIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNEOTE2Njc7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdC8vINCh0L7RgdGC0L7Rj9C90LjQtSDQvdCw0LLQtdC00LXQvdC40Y8g0L/RgNC40LzQtdC90Y/QtdGC0YHRjyDQuiDQstGL0LHRgNCw0L3QvdC+0Lkg0YPQv9Cw0LrQvtCy0LrQtSDQvdC1INGB0YDQsNC30YMsINCwINC/0L7RgdC70LUg0YLQvtCz0L4sINC60LDQuiDQutGD0YDRgdC+0YAg0YPRiNC10Lsg0YEg0L3QtdC1INC/0L7RgdC70LUg0L/QtdGA0LLQvtC90LDRh9Cw0LvRjNC90L7Qs9C+INCy0YvQsdC+0YDQsC5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkOmhvdmVyOmFmdGVyIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNEOTE2Njc7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCZfc2VsZWN0ZWRIb3ZlcjphZnRlciB7XFxyXFxuXFx0XFx0XFx0Ym9yZGVyLWNvbG9yOiAjRDkxNjY3O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkSG92ZXI6aG92ZXI6YWZ0ZXIge1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogI0U1MkU3QTtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0Jl9kaXNhYmxlZDphZnRlciB7XFxyXFxuXFx0XFx0XFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XFxyXFxuXFx0XFx0XFx0b3BhY2l0eTogMC40O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmOmJlZm9yZSB7XFxyXFxuXFx0XFx0XFx0Y29udGVudDogXFxcIlxcXCI7XFxyXFxuXFx0XFx0XFx0cG9zaXRpb246IGFic29sdXRlO1xcclxcblxcdFxcdFxcdHdpZHRoOiBjYWxjKDEwMCUgLSA0cHgpO1xcclxcblxcdFxcdFxcdHJpZ2h0OiAwcHg7XFxyXFxuXFx0XFx0XFx0ei1pbmRleDogMTtcXHJcXG5cXHRcXHRcXHRoZWlnaHQ6IGNhbGMoOTAlIC0gMnB4KTtcXHJcXG5cXHRcXHRcXHRib3R0b206IDBweDtcXHJcXG5cXHRcXHRcXHRib3JkZXItc3R5bGU6IHNvbGlkO1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogIzE2OThEOTtcXHJcXG5cXHRcXHRcXHRib3JkZXItd2lkdGg6IDBweCAwIDRweCA0cHg7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCY6aG92ZXI6YmVmb3JlIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICMyRUE4RTY7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdFxcclxcblxcdFxcdCY6ZGlzYWJsZWQ6YmVmb3JlIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNCM0IzQjM7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCZfc2VsZWN0ZWQ6YmVmb3JlIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNEOTE2Njc7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdC8vINCh0L7RgdGC0L7Rj9C90LjQtSDQvdCw0LLQtdC00LXQvdC40Y8g0L/RgNC40LzQtdC90Y/QtdGC0YHRjyDQuiDQstGL0LHRgNCw0L3QvdC+0Lkg0YPQv9Cw0LrQvtCy0LrQtSDQvdC1INGB0YDQsNC30YMsINCwINC/0L7RgdC70LUg0YLQvtCz0L4sINC60LDQuiDQutGD0YDRgdC+0YAg0YPRiNC10Lsg0YEg0L3QtdC1INC/0L7RgdC70LUg0L/QtdGA0LLQvtC90LDRh9Cw0LvRjNC90L7Qs9C+INCy0YvQsdC+0YDQsC5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkOmhvdmVyOmJlZm9yZSB7XFxyXFxuXFx0XFx0XFx0Ym9yZGVyLWNvbG9yOiAjRDkxNjY3O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQmX3NlbGVjdGVkSG92ZXI6YmVmb3JlIHtcXHJcXG5cXHRcXHRcXHRib3JkZXItY29sb3I6ICNEOTE2Njc7XFxyXFxuXFx0XFx0fVxcclxcblxcclxcblxcdFxcdCZfc2VsZWN0ZWRIb3Zlcjpob3ZlcjpiZWZvcmUge1xcclxcblxcdFxcdFxcdGJvcmRlci1jb2xvcjogI0U1MkU3QTtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0LnRleHQge1xcclxcblxcdFxcdFxcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG5cXHRcXHRcXHR0b3A6IDYuMSU7XFxyXFxuXFx0XFx0XFx0bGVmdDogMTYlO1xcclxcblxcdFxcdFxcdGRpc3BsYXk6IGZsZXg7XFxyXFxuXFx0XFx0XFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXHJcXG5cXHRcXHRcXHRhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXHJcXG5cXHRcXHRcXHR0ZXh0LWFsaWduOiBzdGFydDtcXHJcXG5cXHJcXG5cXHRcXHRcXHQuc2xvZ2FuIHtcXHJcXG5cXHRcXHRcXHRcXHRmb250LXdlaWdodDogbm9ybWFsO1xcclxcblxcdFxcdFxcdFxcdGZvbnQtc2l6ZTogMXJlbTtcXHJcXG5cXHRcXHRcXHRcXHRjb2xvcjogIzY2NjY2NjtcXHJcXG5cXHRcXHRcXHRcXHRtYXJnaW4tYm90dG9tOiAxOCU7XFxyXFxuXFxyXFxuXFx0XFx0XFx0XFx0Jjo6Zmlyc3QtbGV0dGVyIHtcXHJcXG5cXHRcXHRcXHRcXHRcXHRmb250LXNpemU6IDEzMCU7XFxyXFxuXFx0XFx0XFx0XFx0fVxcclxcblxcdFxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHRcXHQuYnJhbmQge1xcclxcblxcdFxcdFxcdFxcdHRleHQtaW5kZW50OiAtMC43bW07XFxyXFxuXFx0XFx0XFx0XFx0bGluZS1oZWlnaHQ6IDA7XFxyXFxuXFx0XFx0XFx0XFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuXFx0XFx0XFx0XFx0Zm9udC1zaXplOiAzcmVtO1xcclxcblxcdFxcdFxcdFxcdGNvbG9yOiAjMDAwMDAwO1xcclxcblxcdFxcdFxcdFxcdG1hcmdpbi1ib3R0b206IDE5LjUlO1xcclxcblxcclxcblxcdFxcdFxcdFxcdCY6OmZpcnN0LWxldHRlciB7XFxyXFxuXFx0XFx0XFx0XFx0XFx0Zm9udC1zaXplOiAxMzAlO1xcclxcblxcdFxcdFxcdFxcdFxcdGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuXFx0XFx0XFx0XFx0XFx0bGV0dGVyLXNwYWNpbmc6IDA7XFxyXFxuXFx0XFx0XFx0XFx0fVxcclxcblxcdFxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHRcXHQudGFzdHkge1xcclxcblxcdFxcdFxcdFxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcblxcdFxcdFxcdFxcdGZvbnQtc2l6ZTogMS41cmVtO1xcclxcblxcdFxcdFxcdFxcdGNvbG9yOiAjMDAwMDAwO1xcclxcblxcdFxcdFxcdFxcdG1hcmdpbi1ib3R0b206IDE0LjUlO1xcclxcblxcdFxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHRcXHQuZGVzY3JpcHRpb24ge1xcclxcblxcdFxcdFxcdFxcdHRleHQtYWxpZ246IGxlZnQ7XFxyXFxuXFx0XFx0XFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRcXHRcXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcdFxcdFxcdFxcdGFsaWduLWl0ZW1zOiBzdGFydDtcXHJcXG5cXHRcXHRcXHRcXHRmb250LXdlaWdodDogbm9ybWFsO1xcclxcblxcdFxcdFxcdFxcdGZvbnQtc2l6ZTogLjlyZW07XFxyXFxuXFx0XFx0XFx0XFx0Y29sb3I6ICM2NjY2NjY7XFxyXFxuXFx0XFx0XFx0XFx0bGluZS1oZWlnaHQ6IDFyZW07XFxyXFxuXFx0XFx0XFx0fVxcclxcblxcclxcblxcdFxcdFxcdCY+KiB7XFxyXFxuXFx0XFx0XFx0XFx0bGluZS1oZWlnaHQ6IDA7XFxyXFxuXFx0XFx0XFx0fVxcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQuaW1nIHtcXHJcXG5cXHRcXHRcXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0XFx0XFx0bGVmdDogMDtcXHJcXG5cXHRcXHRcXHRib3R0b206IDA7XFxyXFxuXFx0XFx0XFx0ei1pbmRleDogMDtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0JjpkaXNhYmxlZCAuaW1nIHtcXHJcXG5cXHRcXHRcXHRvcGFjaXR5OiAwLjY1O1xcclxcblxcdFxcdH1cXHJcXG5cXHJcXG5cXHRcXHQud2VpZ2h0IHtcXHJcXG5cXHRcXHRcXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0XFx0XFx0Ym90dG9tOiAzLjElO1xcclxcblxcdFxcdFxcdHJpZ2h0OiAzLjElO1xcclxcblxcdFxcdFxcdGhlaWdodDogNXJlbTtcXHJcXG5cXHRcXHRcXHR3aWR0aDogNXJlbTtcXHJcXG5cXHRcXHRcXHRib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuXFx0XFx0XFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRcXHRcXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXHJcXG5cXHRcXHRcXHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcblxcdFxcdFxcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxyXFxuXFx0XFx0XFx0Y29sb3I6ICNmZmZmO1xcclxcblxcdFxcdFxcdGJhY2tncm91bmQ6ICMxNjk4RDk7XFxyXFxuXFxyXFxuXFx0XFx0XFx0Jl9zZWxlY3RlZCB7XFxyXFxuXFx0XFx0XFx0XFx0YmFja2dyb3VuZDogI0Q5MTY2NztcXHJcXG5cXHRcXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0XFx0LmFtb3VudCB7XFxyXFxuXFx0XFx0XFx0XFx0Zm9udC1zaXplOiAyLjYyNXJlbTtcXHJcXG5cXHRcXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0XFx0Lm1lYXN1cmUge1xcclxcblxcdFxcdFxcdFxcdGZvbnQtc2l6ZTogMS4zcmVtO1xcclxcblxcdFxcdFxcdFxcdGxpbmUtaGVpZ2h0OiAxcmVtO1xcclxcblxcdFxcdFxcdH1cXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0fVxcclxcblxcclxcblxcdC5DYWxsVG9BY3Rpb24ge1xcclxcblxcdFxcdGhlaWdodDogMXJlbTtcXHJcXG5cXHRcXHRtYXJnaW4tdG9wOiA0JTtcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMC44MTNyZW07XFxyXFxuXFx0XFx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG5cXHRcXHRjb2xvcjogI2ZmZjtcXHJcXG5cXHJcXG5cXHRcXHQuYnV0dG9uIHtcXHJcXG5cXHRcXHRcXHRwYWRkaW5nOiAwO1xcclxcblxcdFxcdFxcdGN1cnNvcjogcG9pbnRlcjtcXHJcXG5cXHRcXHRcXHR0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxyXFxuXFx0XFx0XFx0Ym9yZGVyOiBub25lO1xcclxcblxcdFxcdFxcdGJvcmRlci1ib3R0b206IDJweCBkYXNoZWQ7XFxyXFxuXFx0XFx0XFx0YmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwKTtcXHJcXG5cXHRcXHRcXHRjb2xvcjogIzE2OThEOTtcXHJcXG5cXHRcXHR9XFxyXFxuXFxyXFxuXFx0XFx0Lm5vdEF2YWlsYWJsZSB7XFxyXFxuXFx0XFx0XFx0Y29sb3I6ICNGRkZGNjY7XFxyXFxuXFx0XFx0fVxcclxcblxcdH1cXHJcXG59XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5sb2NhbHMgPSB7XG5cdFwiY29udGFpbmVyXCI6IFwibGRCcll6d0plRDJQSTIwdXJRaGFcIixcblx0XCJib2R5XCI6IFwiam5kbVBib0o4akZyQ19pcElDTHdcIixcblx0XCJ3ZWlnaHRcIjogXCJIdUdoejc5NWtLY0k5R1dGN19sM1wiLFxuXHRcInRleHRcIjogXCJyV1ZrazhhUVBCSVJFaGN4cEdDWVwiLFxuXHRcImJyYW5kXCI6IFwieXBSaVNYbmppamFGX1V3Qko5azVcIixcblx0XCJzbG9nYW5cIjogXCJaRnRNT0pWMG54RzN6VVh6RFNDWlwiLFxuXHRcInRhc3R5XCI6IFwiZUNueUp6TDBnWjVOYWdsTUZvRXFcIixcblx0XCJkZXNjcmlwdGlvblwiOiBcInRfaE8wRmQ1enlYNGRvTlVqNWhBXCIsXG5cdFwiQ2FsbFRvQWN0aW9uXCI6IFwiTUtUM2t1SW1hc2JZRUoyUlBqRGRcIixcblx0XCJidXR0b25cIjogXCJ5b1hlcHRIYVFlUDBObms3eUw2dFwiLFxuXHRcImJvZHlfc2VsZWN0ZWRcIjogXCJYbGlLQWZpSW9jWnBIbFhYZEtBVlwiLFxuXHRcImJvZHlfc2VsZWN0ZWRIb3ZlclwiOiBcImhTaUtGVUlzMjRNVU9sM2FiWVJFXCIsXG5cdFwiYm9keV9kaXNhYmxlZFwiOiBcImRNZWplY1JzZVMxQlJWTmFDbThCXCIsXG5cdFwiaW1nXCI6IFwiWnEzODdTZ0lCZFJRSlVFMXI4VTFcIixcblx0XCJ3ZWlnaHRfc2VsZWN0ZWRcIjogXCJTR2pWR2VQU0d1NW1uanZWNFhuTVwiLFxuXHRcImFtb3VudFwiOiBcIlFaOXJDVUVNNFA5UVFQM3YxTlNIXCIsXG5cdFwibWVhc3VyZVwiOiBcInl2RHl3SVpfVVVscGlkZGNZRmNKXCIsXG5cdFwibm90QXZhaWxhYmxlXCI6IFwiZnRBYWJmTDlXWDlfQ2lYQ05uTnpcIlxufTtcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4uLy4uL2ltYWdlcy9iYWNrZ3JvdW5kLnBuZ1wiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5DczZlb1NHTmdsaFpRdVJIRzlHM3ttaW4taGVpZ2h0OjEwMHZoO21pbi13aWR0aDoxMDAlO2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKTtiYWNrZ3JvdW5kLXNpemU6YXV0bztkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7ZmxleC1kaXJlY3Rpb246Y29sdW1uO3Bvc2l0aW9uOnJlbGF0aXZlfS5DczZlb1NHTmdsaFpRdVJIRzlHMyAuellCQzRSaVdzVWhDRkxfM1drdWJ7Zm9udC1mYW1pbHk6XFxcIkV4byAyLjAgVGhpblxcXCI7Y29sb3I6I2ZmZjtmb250LXNpemU6Mi4yNXJlbTttYXJnaW4tYm90dG9tOjEuNiU7dGV4dC1hbGlnbjpjZW50ZXJ9LkNzNmVvU0dOZ2xoWlF1UkhHOUczIC5tR1FEWTBINjJOeUcxNU5vaW8xaXt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LXdyYXA6d3JhcDtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfS5DczZlb1NHTmdsaFpRdVJIRzlHMyAubUdRRFkwSDYyTnlHMTVOb2lvMWk+KnttYXJnaW46MCAxLjVyZW0gMS41cmVtIDEuNXJlbX0uQ3M2ZW9TR05nbGhaUXVSSEc5RzM6OmFmdGVye2JhY2tncm91bmQ6cmdiYSgwLDAsMCwwKTtiYWNrZ3JvdW5kOi1tb3otbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAwLCAwLCAwLjUpIDAlLCByZ2JhKDAsIDAsIDAsIDAuMDAwMDUpIDQ5Ljg4JSwgcmdiYSgwLCAwLCAwLCAwLjUpIDEwMCUpO2JhY2tncm91bmQ6LXdlYmtpdC1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCAwLjAwMDA1KSA0OS44OCUsIHJnYmEoMCwgMCwgMCwgMC41KSAxMDAlKTtiYWNrZ3JvdW5kOi13ZWJraXQtbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAwLCAwLCAwLjUpIDAlLCByZ2JhKDAsIDAsIDAsIDAuMDAwMDUpIDQ5Ljg4JSwgcmdiYSgwLCAwLCAwLCAwLjUpIDEwMCUpO2JhY2tncm91bmQ6LW8tbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAwLCAwLCAwLjUpIDAlLCByZ2JhKDAsIDAsIDAsIDAuMDAwMDUpIDQ5Ljg4JSwgcmdiYSgwLCAwLCAwLCAwLjUpIDEwMCUpO2JhY2tncm91bmQ6LW1zLWxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCAwLjAwMDA1KSA0OS44OCUsIHJnYmEoMCwgMCwgMCwgMC41KSAxMDAlKTtiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCAwLjAwMDA1KSA0OS44OCUsIHJnYmEoMCwgMCwgMCwgMC41KSAxMDAlKTtjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjEwMCU7bGVmdDowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3dpZHRoOjEwMCV9LkNzNmVvU0dOZ2xoWlF1UkhHOUczPip7ei1pbmRleDoxfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lci9Db250YWluZXIubW9kdWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsc0JBQ0MsZ0JBQUEsQ0FDQSxjQUFBLENBQ0Esd0RBQUEsQ0FDQSxvQkFBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLHNCQUFBLENBQ0EscUJBQUEsQ0FDQSxpQkFBQSxDQUVBLDRDQUNDLDBCQUFBLENBQ0EsVUFBQSxDQUNBLGlCQUFBLENBQ0Esa0JBQUEsQ0FDQSxpQkFBQSxDQUdELDRDQUNDLFVBQUEsQ0FDQSxZQUFBLENBQ0EsY0FBQSxDQUNBLDRCQUFBLENBRUEsOENBQ0MsNkJBQUEsQ0FJRiw2QkFDQyx3QkFBQSxDQUNBLHNIQUFBLENBQ0Esa0hBQUEsQ0FDQSx5SEFBQSxDQUNBLG9IQUFBLENBQ0EscUhBQUEsQ0FDQSxpSEFBQSxDQUNBLFVBQUEsQ0FDQSxhQUFBLENBQ0EsV0FBQSxDQUNBLE1BQUEsQ0FDQSxpQkFBQSxDQUNBLEtBQUEsQ0FDQSxVQUFBLENBR0Qsd0JBQ0MsU0FBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuY29udGFpbmVyIHtcXHJcXG5cXHRtaW4taGVpZ2h0OiAxMDB2aDtcXHJcXG5cXHRtaW4td2lkdGg6IDEwMCU7XFxyXFxuXFx0YmFja2dyb3VuZC1pbWFnZTogdXJsKFxcXCIuLi8uLi9pbWFnZXMvYmFja2dyb3VuZC5wbmdcXFwiKTtcXHJcXG5cXHRiYWNrZ3JvdW5kLXNpemU6IGF1dG87XFxyXFxuXFx0ZGlzcGxheTogZmxleDtcXHJcXG5cXHRhbGlnbi1pdGVtczogY2VudGVyO1xcclxcblxcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcblxcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuXFx0cG9zaXRpb246IHJlbGF0aXZlO1xcclxcblxcclxcblxcdC50aXRsZSB7XFxyXFxuXFx0XFx0Zm9udC1mYW1pbHk6IFxcXCJFeG8gMi4wIFRoaW5cXFwiO1xcclxcblxcdFxcdGNvbG9yOiAjRkZGRkZGO1xcclxcblxcdFxcdGZvbnQtc2l6ZTogMi4yNXJlbTtcXHJcXG5cXHRcXHRtYXJnaW4tYm90dG9tOiAxLjYlO1xcclxcblxcdFxcdHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG5cXHR9XFxyXFxuXFxyXFxuXFx0LmVsZW1lbnRzIHtcXHJcXG5cXHRcXHR3aWR0aDogMTAwJTtcXHJcXG5cXHRcXHRkaXNwbGF5OiBmbGV4O1xcclxcblxcdFxcdGZsZXgtd3JhcDogd3JhcDtcXHJcXG5cXHRcXHRqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXHJcXG5cXHJcXG5cXHRcXHQmPioge1xcclxcblxcdFxcdFxcdG1hcmdpbjogMCAxLjVyZW0gMS41cmVtIDEuNXJlbTtcXHJcXG5cXHRcXHR9XFxyXFxuXFx0fVxcclxcblxcclxcblxcdCY6OmFmdGVyIHtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcXHJcXG5cXHRcXHRiYWNrZ3JvdW5kOiAtbW96LWxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCA1ZS0wNSkgNDkuODglLCByZ2JhKDAsIDAsIDAsIDAuNSkgMTAwJSk7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogLXdlYmtpdC1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCA1ZS0wNSkgNDkuODglLCByZ2JhKDAsIDAsIDAsIDAuNSkgMTAwJSk7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQoMTgwZGVnLCByZ2JhKDAsIDAsIDAsIDAuNSkgMCUsIHJnYmEoMCwgMCwgMCwgNWUtMDUpIDQ5Ljg4JSwgcmdiYSgwLCAwLCAwLCAwLjUpIDEwMCUpO1xcclxcblxcdFxcdGJhY2tncm91bmQ6IC1vLWxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCA1ZS0wNSkgNDkuODglLCByZ2JhKDAsIDAsIDAsIDAuNSkgMTAwJSk7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogLW1zLWxpbmVhci1ncmFkaWVudCgxODBkZWcsIHJnYmEoMCwgMCwgMCwgMC41KSAwJSwgcmdiYSgwLCAwLCAwLCA1ZS0wNSkgNDkuODglLCByZ2JhKDAsIDAsIDAsIDAuNSkgMTAwJSk7XFxyXFxuXFx0XFx0YmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE4MGRlZywgcmdiYSgwLCAwLCAwLCAwLjUpIDAlLCByZ2JhKDAsIDAsIDAsIDVlLTA1KSA0OS44OCUsIHJnYmEoMCwgMCwgMCwgMC41KSAxMDAlKTtcXHJcXG5cXHRcXHRjb250ZW50OiBcXFwiXFxcIjtcXHJcXG5cXHRcXHRkaXNwbGF5OiBibG9jaztcXHJcXG5cXHRcXHRoZWlnaHQ6IDEwMCU7XFxyXFxuXFx0XFx0bGVmdDogMDtcXHJcXG5cXHRcXHRwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuXFx0XFx0dG9wOiAwO1xcclxcblxcdFxcdHdpZHRoOiAxMDAlO1xcclxcblxcdH1cXHJcXG5cXHJcXG5cXHQmPioge1xcclxcblxcdFxcdHotaW5kZXg6IDE7XFxyXFxuXFx0fVxcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLmxvY2FscyA9IHtcblx0XCJjb250YWluZXJcIjogXCJDczZlb1NHTmdsaFpRdVJIRzlHM1wiLFxuXHRcInRpdGxlXCI6IFwiellCQzRSaVdzVWhDRkxfM1drdWJcIixcblx0XCJlbGVtZW50c1wiOiBcIm1HUURZMEg2Mk55RzE1Tm9pbzFpXCJcbn07XG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ZvbnRzL1RyZWJ1Y2hldC1NUy90cmVidWNoZXQtbXMuY3NzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BVF9SVUxFX0lNUE9SVF8xX19fIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZm9udHMvRXhvMi4wLVRoaW4vRXhvMi4wLVRoaW4uY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIqe2JveC1zaXppbmc6Ym9yZGVyLWJveH1ib2R5e21hcmdpbjowO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFxcXCJUcmVidWNoZXQgTVNcXFwiLFxcXCJTZWdvZSBVSVxcXCIsXFxcIlJvYm90b1xcXCIsXFxcIk94eWdlblxcXCIsXFxcIlVidW50dVxcXCIsXFxcIkNhbnRhcmVsbFxcXCIsXFxcIkZpcmEgU2Fuc1xcXCIsXFxcIkRyb2lkIFNhbnNcXFwiLFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsc2Fucy1zZXJpZjstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZX1jb2Rle2ZvbnQtZmFtaWx5OnNvdXJjZS1jb2RlLXBybyxNZW5sbyxNb25hY28sQ29uc29sYXMsXFxcIkNvdXJpZXIgTmV3XFxcIixtb25vc3BhY2V9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2luZGV4LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFHQSxFQUNDLHFCQUFBLENBR0QsS0FDQyxRQUFBLENBQ0Esa0tBQUEsQ0FHQSxrQ0FBQSxDQUNBLGlDQUFBLENBR0QsS0FDQyx5RUFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCJAaW1wb3J0ICcuL2ZvbnRzL1RyZWJ1Y2hldC1NUy90cmVidWNoZXQtbXMuY3NzJztcXG5AaW1wb3J0ICcuL2ZvbnRzL0V4bzIuMC1UaGluL0V4bzIuMC1UaGluLmNzcyc7XFxuXFxuKiB7XFxuXFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuYm9keSB7XFxuXFx0bWFyZ2luOiAwO1xcblxcdGZvbnQtZmFtaWx5OiAtYXBwbGUtc3lzdGVtLCBCbGlua01hY1N5c3RlbUZvbnQsICdUcmVidWNoZXQgTVMnLCAnU2Vnb2UgVUknLCAnUm9ib3RvJywgJ094eWdlbicsXFxuXFx0XFx0J1VidW50dScsICdDYW50YXJlbGwnLCAnRmlyYSBTYW5zJywgJ0Ryb2lkIFNhbnMnLCAnSGVsdmV0aWNhIE5ldWUnLFxcblxcdFxcdHNhbnMtc2VyaWY7XFxuXFx0LXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuXFx0LW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuXFxuY29kZSB7XFxuXFx0Zm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsICdDb3VyaWVyIE5ldycsXFxuXFx0XFx0bW9ub3NwYWNlO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vRXhvMi4wLVRoaW4uZW90XCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18gPSBuZXcgVVJMKFwiLi9FeG8yLjAtVGhpbi53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi8qIEBmb250LWZhY2Uge1xcclxcblxcdGZvbnQtZmFtaWx5OiBcXFwiRXhvIDIuMCBUaGluXFxcIjtcXHJcXG5cXHRzcmM6IHVybChcXFwiLi9FeG8yLjAtVGhpbi53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxyXFxufSAqL1xcclxcblxcclxcbkBmb250LWZhY2Uge1xcclxcblxcdGZvbnQtZmFtaWx5OiBcXFwiRXhvIDIuMCBUaGluXFxcIjtcXHJcXG5cXHRzcmM6IGxvY2FsKFxcXCJFeG8gMi4wIFRoaW5cXFwiKSxcXHJcXG5cXHRcXHR1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpLFxcclxcblxcdFxcdHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9mb250cy9FeG8yLjAtVGhpbi9FeG8yLjAtVGhpbi5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7OztHQUdHOztBQUVIO0NBQ0MsMkJBQTJCO0NBQzNCOzt3REFFeUM7QUFDMUNcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyogQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJFeG8gMi4wIFRoaW5cXFwiO1xcclxcblxcdHNyYzogdXJsKFxcXCIuL0V4bzIuMC1UaGluLndvZmZcXFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXHJcXG59ICovXFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJFeG8gMi4wIFRoaW5cXFwiO1xcclxcblxcdHNyYzogbG9jYWwoXFxcIkV4byAyLjAgVGhpblxcXCIpLFxcclxcblxcdFxcdHVybChcXFwiLi9FeG8yLjAtVGhpbi5lb3RcXFwiKSxcXHJcXG5cXHRcXHR1cmwoXFxcIi4vRXhvMi4wLVRoaW4ud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fID0gbmV3IFVSTChcIi4vdHJlYnVjLndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCIuL3RyZWJ1Y2hldC1tcy1ib2xkLndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJUcmVidWNoZXQgTVNcXFwiO1xcclxcblxcdGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuXFx0c3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG5cXHRmb250LWZhbWlseTogXFxcIlRyZWJ1Y2hldCBNU1xcXCI7XFxyXFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuXFx0c3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcclxcbn1cXHJcXG5cXHJcXG4vKiBAZm9udC1mYWNlIHtcXHJcXG5cXHRmb250LWZhbWlseTogXFxcIlRyZWJ1Y2hldCBNU1xcXCI7XFxyXFxuXFx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcXHJcXG5cXHRzcmM6IGxvY2FsKFxcXCJUcmVidWNoZXQgTVNcXFwiKSxcXHJcXG5cXHRcXHR1cmwoXFxcIi4vdHJlYnVjLmVvdFxcXCIpLFxcclxcblxcdFxcdHVybChcXFwiLi90cmVidWMud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcclxcbn1cXHJcXG5cXHJcXG5AZm9udC1mYWNlIHtcXHJcXG5cXHRmb250LWZhbWlseTogXFxcIlRyZWJ1Y2hldCBNU1xcXCI7XFxyXFxuXFx0Zm9udC13ZWlnaHQ6IGJvbGQ7XFxyXFxuXFx0c3JjOiBsb2NhbChcXFwiVHJlYnVjaGV0IE1TXFxcIiksXFxyXFxuXFx0XFx0dXJsKFxcXCIuL3RyZWJ1Y2hldC1tcy1ib2xkLmVvdFxcXCIpLFxcclxcblxcdFxcdHVybChcXFwiLi90cmVidWNoZXQtbXMtYm9sZC53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxyXFxufSAqL1wiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9mb250cy9UcmVidWNoZXQtTVMvdHJlYnVjaGV0LW1zLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtDQUNDLDJCQUEyQjtDQUMzQixtQkFBbUI7Q0FDbkIsMkRBQXdDO0FBQ3pDOztBQUVBO0NBQ0MsMkJBQTJCO0NBQzNCLGlCQUFpQjtDQUNqQiwyREFBbUQ7QUFDcEQ7O0FBRUE7Ozs7Ozs7Ozs7Ozs7O0dBY0dcIixcInNvdXJjZXNDb250ZW50XCI6W1wiQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJUcmVidWNoZXQgTVNcXFwiO1xcclxcblxcdGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuXFx0c3JjOiB1cmwoXFxcIi4vdHJlYnVjLndvZmZcXFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJUcmVidWNoZXQgTVNcXFwiO1xcclxcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcblxcdHNyYzogdXJsKFxcXCIuL3RyZWJ1Y2hldC1tcy1ib2xkLndvZmZcXFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXHJcXG59XFxyXFxuXFxyXFxuLyogQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJUcmVidWNoZXQgTVNcXFwiO1xcclxcblxcdGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxyXFxuXFx0c3JjOiBsb2NhbChcXFwiVHJlYnVjaGV0IE1TXFxcIiksXFxyXFxuXFx0XFx0dXJsKFxcXCIuL3RyZWJ1Yy5lb3RcXFwiKSxcXHJcXG5cXHRcXHR1cmwoXFxcIi4vdHJlYnVjLndvZmZcXFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXHJcXG59XFxyXFxuXFxyXFxuQGZvbnQtZmFjZSB7XFxyXFxuXFx0Zm9udC1mYW1pbHk6IFxcXCJUcmVidWNoZXQgTVNcXFwiO1xcclxcblxcdGZvbnQtd2VpZ2h0OiBib2xkO1xcclxcblxcdHNyYzogbG9jYWwoXFxcIlRyZWJ1Y2hldCBNU1xcXCIpLFxcclxcblxcdFxcdHVybChcXFwiLi90cmVidWNoZXQtbXMtYm9sZC5lb3RcXFwiKSxcXHJcXG5cXHRcXHR1cmwoXFxcIi4vdHJlYnVjaGV0LW1zLWJvbGQud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcclxcbn0gKi9cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4vLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXztcblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcblx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIG1vZHVsZTsgfTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKGZ1bmN0aW9uKHByb21pc2VzLCBrZXkpIHtcblx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmZba2V5XShjaHVua0lkLCBwcm9taXNlcyk7XG5cdFx0cmV0dXJuIHByb21pc2VzO1xuXHR9LCBbXSkpO1xufTsiLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhc3luYyBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18udSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLnNoaW0uanNcIjtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIHVuZGVmaW5lZDtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi4vXCI7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmYuaiA9IGZ1bmN0aW9uKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHsgaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF07IH0pO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRcdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSkge1xuXHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubWVzc2FnZSA9ICdMb2FkaW5nIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YVsxXShlcnJvcik7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCwgXCJjaHVuay1cIiArIGNodW5rSWQsIGNodW5rSWQpO1xuXHRcdFx0XHR9IGVsc2UgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcblx0XHRcdH1cblx0XHR9XG59O1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xudmFyIHdlYnBhY2tKc29ucENhbGxiYWNrID0gZnVuY3Rpb24ocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpIHtcblx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcblx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcblx0dmFyIHJ1bnRpbWUgPSBkYXRhWzJdO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDA7XG5cdGlmKGNodW5rSWRzLnNvbWUoZnVuY3Rpb24oaWQpIHsgcmV0dXJuIGluc3RhbGxlZENodW5rc1tpZF0gIT09IDA7IH0pKSB7XG5cdFx0Zm9yKG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG5cdFx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8obW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZihydW50aW1lKSB2YXIgcmVzdWx0ID0gcnVudGltZShfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblx0fVxuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKCk7XG5cdFx0fVxuXHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdH1cblxufVxuXG52YXIgY2h1bmtMb2FkaW5nR2xvYmFsID0gc2VsZltcIndlYnBhY2tDaHVua2Z1bl9ib3hfdHpcIl0gPSBzZWxmW1wid2VicGFja0NodW5rZnVuX2JveF90elwiXSB8fCBbXTtcbmNodW5rTG9hZGluZ0dsb2JhbC5mb3JFYWNoKHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgMCkpO1xuY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjay5iaW5kKG51bGwsIGNodW5rTG9hZGluZ0dsb2JhbC5wdXNoLmJpbmQoY2h1bmtMb2FkaW5nR2xvYmFsKSk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1sxXS51c2VbMl0hLi9pbmRleC5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4vaW5kZXguY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4vQXBwLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuL0FwcC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuL0NhcmQubW9kdWxlLnNjc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4vQ2FyZC5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07IHJldHVybiBhcnIyOyB9XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IG51bGwgPT0gYXJyID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAobnVsbCAhPSBfaSkgeyB2YXIgX3MsIF9lLCBfeCwgX3IsIF9hcnIgPSBbXSwgX24gPSAhMCwgX2QgPSAhMTsgdHJ5IHsgaWYgKF94ID0gKF9pID0gX2kuY2FsbChhcnIpKS5uZXh0LCAwID09PSBpKSB7IGlmIChPYmplY3QoX2kpICE9PSBfaSkgcmV0dXJuOyBfbiA9ICExOyB9IGVsc2UgZm9yICg7ICEoX24gPSAoX3MgPSBfeC5jYWxsKF9pKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCk7IH0gY2F0Y2ggKGVycikgeyBfZCA9ICEwLCBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBudWxsICE9IF9pLnJldHVybiAmJiAoX3IgPSBfaS5yZXR1cm4oKSwgT2JqZWN0KF9yKSAhPT0gX3IpKSByZXR1cm47IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSB9XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cbmltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBzdHlsZXMgZnJvbSAnLi9DYXJkLm1vZHVsZS5zY3NzJztcbnZhciBwb3J0aW9ucyA9IFsn0L/QvtGA0YbQuNC5JywgJ9C/0L7RgNGG0LjRjycsICfQv9C+0YDRhtC40LgnLCAn0L/QvtGA0YbQuNC4JywgJ9C/0L7RgNGG0LjQuCcsICfQv9C+0YDRhtC40LknLCAn0L/QvtGA0YbQuNC5JywgJ9C/0L7RgNGG0LjQuScsICfQv9C+0YDRhtC40LknLCAn0L/QvtGA0YbQuNC5J107XG52YXIgbW91c2VzID0gWyfQvNGL0YjQtdC5JywgJ9C80YvRiNGMJywgJ9C80YvRiNC4JywgJ9C80YvRiNC4JywgJ9C80YvRiNC4JywgJ9C80YvRiNC10LknLCAn0LzRi9GI0LXQuScsICfQvNGL0YjQtdC5JywgJ9C80YvRiNC10LknLCAn0LzRi9GI0LXQuSddO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ2FyZChwcm9wcykge1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIGlzU2VsZWN0ZWQgPSBfdXNlU3RhdGUyWzBdLFxuICAgIHNldElzU2VsZWN0ZWQgPSBfdXNlU3RhdGUyWzFdO1xuICB2YXIgX3VzZVN0YXRlMyA9IHVzZVN0YXRlKGZhbHNlKSxcbiAgICBfdXNlU3RhdGU0ID0gX3NsaWNlZFRvQXJyYXkoX3VzZVN0YXRlMywgMiksXG4gICAgaXNTZWxlY3RlZEhvdmVyID0gX3VzZVN0YXRlNFswXSxcbiAgICBzZXRJc1NlbGVjdGVkSG92ZXIgPSBfdXNlU3RhdGU0WzFdO1xuICB2YXIgc2VsZWN0Q2FyZCA9IGZ1bmN0aW9uIHNlbGVjdENhcmQoKSB7XG4gICAgc2V0SXNTZWxlY3RlZCghaXNTZWxlY3RlZCk7XG4gICAgc2V0SXNTZWxlY3RlZEhvdmVyKGZhbHNlKTtcbiAgfTtcbiAgdmFyIGdldFdvcmQgPSBmdW5jdGlvbiBnZXRXb3JkKG4sIHdvcmRzKSB7XG4gICAgdmFyIHdvcmQgPSB3b3Jkc1tuICUgMTBdO1xuICAgIHdvcmQgPSBuID4gMTAgJiYgMjAgPiBuID8gd29yZHNbMF0gOiB3b3JkO1xuICAgIHJldHVybiB3b3JkO1xuICB9O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmNvbnRhaW5lclxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgY2xhc3NOYW1lOiBpc1NlbGVjdGVkID8gXCJcIi5jb25jYXQoc3R5bGVzLmJvZHksIFwiIFwiKS5jb25jYXQoc3R5bGVzLmJvZHlfc2VsZWN0ZWQsIFwiIFwiKS5jb25jYXQoaXNTZWxlY3RlZEhvdmVyID8gc3R5bGVzLmJvZHlfc2VsZWN0ZWRIb3ZlciA6ICcnKSA6IFwiXCIuY29uY2F0KHN0eWxlcy5ib2R5KSxcbiAgICBvbkNsaWNrOiBzZWxlY3RDYXJkLFxuICAgIG9uTW91c2VMZWF2ZTogZnVuY3Rpb24gb25Nb3VzZUxlYXZlKCkge1xuICAgICAgcmV0dXJuIHNldElzU2VsZWN0ZWRIb3Zlcih0cnVlKTtcbiAgICB9LFxuICAgIGRpc2FibGVkOiAhcHJvcHMuaXNBdmFpbGFibGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLnRleHRcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLnNsb2dhblxuICB9LCBwcm9wcy5zbG9nYW4pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMuYnJhbmRcbiAgfSwgcHJvcHMuYnJhbmQpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMudGFzdHlcbiAgfSwgXCJcXHUwNDQxIFwiLCBcIlwiLmNvbmNhdChwcm9wcy50YXN0eSkpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMuZGVzY3JpcHRpb25cbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgXCJcIi5jb25jYXQocHJvcHMucG9ydGlvbnMsIFwiIFwiKS5jb25jYXQoZ2V0V29yZChwcm9wcy5wb3J0aW9ucywgcG9ydGlvbnMpKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIFwiXCIuY29uY2F0KHByb3BzLmdpZnRzID09PSAxID8gJycgOiBwcm9wcy5naWZ0cywgXCIgXCIpLmNvbmNhdChnZXRXb3JkKHByb3BzLmdpZnRzLCBtb3VzZXMpKSwgXCIgXCIsIHByb3BzLnRleHQxKSwgcHJvcHMucG9ydGlvbnMgPiA1MCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIG51bGwsIHByb3BzLnRleHQyKSA6IG51bGwpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmltZyxcbiAgICBzcmM6IHByb3BzLmltZyxcbiAgICBhbHQ6IHByb3BzLmFsdEltZ1xuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogaXNTZWxlY3RlZCA/IFwiXCIuY29uY2F0KHN0eWxlcy53ZWlnaHQsIFwiIFwiKS5jb25jYXQoc3R5bGVzLndlaWdodF9zZWxlY3RlZCkgOiBcIlwiLmNvbmNhdChzdHlsZXMud2VpZ2h0KVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMuYW1vdW50XG4gIH0sICgnJyArIHByb3BzLndlaWdodC5hbW91bnQpLnJlcGxhY2UoJy4nLCAnLCcpKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLm1lYXN1cmVcbiAgfSwgcHJvcHMud2VpZ2h0Lm1lYXN1cmUpKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IHN0eWxlcy5DYWxsVG9BY3Rpb25cbiAgfSwgcHJvcHMuaXNBdmFpbGFibGUgPyBpc1NlbGVjdGVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgbnVsbCwgcHJvcHMudGV4dCkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmNhbGxUb0FjdGlvblRleHRcbiAgfSwgcHJvcHMuY2FsbFRvQWN0aW9uLCBcIlxceEEwXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiLCB7XG4gICAgb25DbGljazogc2VsZWN0Q2FyZCxcbiAgICBjbGFzc05hbWU6IHN0eWxlcy5idXR0b24sXG4gICAgY2hpbGRyZW46IHByb3BzLmNhbGxUb0FjdGlvbkJ1dHRvblxuICB9KSkgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMubm90QXZhaWxhYmxlXG4gIH0sIHByb3BzLm5vdEF2YWlsYWJsZSkpKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IENhcmQgZnJvbSAnLi4vY2FyZC9DYXJkJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENhcmRMaXN0KHByb3BzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgcHJvcHMuY2FyZHMubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENhcmQsIHtcbiAgICAgIGlzQXZhaWxhYmxlOiBjLmlzQXZhaWxhYmxlLFxuICAgICAgaWQ6IGMuaWQsXG4gICAgICB0ZXh0OiBjLnRleHQsXG4gICAgICBicmFuZDogYy5icmFuZCxcbiAgICAgIGdpZnRzOiBjLmdpZnRzLFxuICAgICAgaW1nOiBjLmltZyxcbiAgICAgIHBvcnRpb25zOiBjLnBvcnRpb25zLFxuICAgICAgc2xvZ2FuOiBjLnNsb2dhbixcbiAgICAgIHRhc3R5OiBjLnRhc3R5LFxuICAgICAgd2VpZ2h0OiBjLndlaWdodCxcbiAgICAgIGtleTogYy5pZCxcbiAgICAgIGFsdEltZzogXCJcXHUwNDFBXFx1MDQzRVxcdTA0NDJcXHUwNDM4XFx1MDQzQVwiLFxuICAgICAgY2FsbFRvQWN0aW9uOiBcIlxcdTA0MjdcXHUwNDM1XFx1MDQzM1xcdTA0M0UgXFx1MDQ0MVxcdTA0MzhcXHUwNDM0XFx1MDQzOFxcdTA0NDhcXHUwNDRDPyBcXHUwNDFGXFx1MDQzRVxcdTA0NDBcXHUwNDMwXFx1MDQzNFxcdTA0NDNcXHUwNDM5IFxcdTA0M0FcXHUwNDNFXFx1MDQ0MlxcdTA0MzUsXCIsXG4gICAgICBjYWxsVG9BY3Rpb25CdXR0b246IFwiXFx1MDQzQVxcdTA0NDNcXHUwNDNGXFx1MDQzOC5cIixcbiAgICAgIG5vdEF2YWlsYWJsZTogXCJcXHUwNDFGXFx1MDQzNVxcdTA0NDdcXHUwNDMwXFx1MDQzQlxcdTA0NENcXHUwNDNBXFx1MDQzMCwgXFx1MDQ0MSBcIi5jb25jYXQoYy50YXN0eSwgXCIgXFx1MDQzN1xcdTA0MzBcXHUwNDNBXFx1MDQzRVxcdTA0M0RcXHUwNDQ3XFx1MDQzOFxcdTA0M0JcXHUwNDQxXFx1MDQ0Ri5cIiksXG4gICAgICB0ZXh0MTogXCJcXHUwNDMyIFxcdTA0M0ZcXHUwNDNFXFx1MDQzNFxcdTA0MzBcXHUwNDQwXFx1MDQzRVxcdTA0M0FcIixcbiAgICAgIHRleHQyOiBcIlxcdTA0MzdcXHUwNDMwXFx1MDQzQVxcdTA0MzBcXHUwNDM3XFx1MDQ0N1xcdTA0MzhcXHUwNDNBIFxcdTA0MzRcXHUwNDNFXFx1MDQzMlxcdTA0M0VcXHUwNDNCXFx1MDQzNVxcdTA0M0RcIlxuICAgIH0pO1xuICB9KSk7XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4vQ29udGFpbmVyLm1vZHVsZS5zY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsyXSEuL0NvbnRhaW5lci5tb2R1bGUuc2Nzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVzIGZyb20gJy4vQ29udGFpbmVyLm1vZHVsZS5zY3NzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRhaW5lcihwcm9wcykge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLmNvbnRhaW5lclxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMudGl0bGVcbiAgfSwgcHJvcHMudGl0bGUpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XG4gICAgY2xhc3NOYW1lOiBzdHlsZXMuZWxlbWVudHNcbiAgfSwgcHJvcHMuY2hpbGRyZW4pKTtcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlcyBmcm9tICcuL0FwcC5tb2R1bGUuc2Nzcyc7XG5pbXBvcnQgaW1nIGZyb20gJy4vaW1hZ2VzL2NhdF9mdW4tYm94LnBuZyc7XG5pbXBvcnQgQ2FyZExpc3QgZnJvbSAnLi9jb21wb25lbnRzL0NhcmRMaXN0L0NhcmRMaXN0JztcbmltcG9ydCBDb250YWluZXIgZnJvbSAnLi9jb21wb25lbnRzL2NvbnRhaW5lci9Db250YWluZXInO1xuXG4vL2ZvciBleGFtcGxlXG52YXIgZGF0YSA9IFt7XG4gIGlzQXZhaWxhYmxlOiB0cnVlLFxuICBpZDogMSxcbiAgdGV4dDogJ9Cf0LXRh9C10L3RjCDRg9GC0LrQuCDRgNCw0LfQstCw0YDQvdCw0Y8g0YEg0LDRgNGC0LjRiNC+0LrQsNC80LguJyxcbiAgYnJhbmQ6ICfQvdGP0LzRg9GI0LrQsCcsXG4gIHNsb2dhbjogJ9GB0LrQsNC30L7Rh9C90L7QtSDQt9Cw0LzQvtGA0YHQutC+0LUg0Y/RgdGC0LLQvicsXG4gIGdpZnRzOiAxLFxuICBpbWc6IGltZyxcbiAgcG9ydGlvbnM6IDEwLFxuICB0YXN0eTogJ9GE0YPQsC3Qs9GA0LAnLFxuICB3ZWlnaHQ6IHtcbiAgICBhbW91bnQ6IDAuNSxcbiAgICBtZWFzdXJlOiAn0LrQsydcbiAgfVxufSwge1xuICBpc0F2YWlsYWJsZTogdHJ1ZSxcbiAgaWQ6IDIsXG4gIHRleHQ6ICfQk9C+0LvQvtCy0Ysg0YnRg9GH0YzQuCDRgSDRh9C10YHQvdC+0LrQvtC8INC00LAg0YHQstC10LbQsNC50YjQsNGPINGB0ZHQvNCz0YPRiNC60LAuJyxcbiAgYnJhbmQ6ICfQvdGP0LzRg9GI0LrQsCcsXG4gIHNsb2dhbjogJ9GB0LrQsNC30L7Rh9C90L7QtSDQt9Cw0LzQvtGA0YHQutC+0LUg0Y/RgdGC0LLQvicsXG4gIGdpZnRzOiAyLFxuICBpbWc6IGltZyxcbiAgcG9ydGlvbnM6IDQwLFxuICB0YXN0eTogJ9GA0YvQsdC+0LknLFxuICB3ZWlnaHQ6IHtcbiAgICBhbW91bnQ6IDIsXG4gICAgbWVhc3VyZTogJ9C60LMnXG4gIH1cbn0sIHtcbiAgaXNBdmFpbGFibGU6IGZhbHNlLFxuICBpZDogMyxcbiAgdGV4dDogJ9Ck0LjQu9C1INC40Lcg0YbRi9C/0LvRj9GCINGBINGC0YDRjtGE0LXQu9GP0LzQuCDQsiDQsdGD0LvRjNC+0L3QtS4nLFxuICBicmFuZDogJ9C90Y/QvNGD0YjQutCwJyxcbiAgc2xvZ2FuOiAn0YHQutCw0LfQvtGH0L3QvtC1INC30LDQvNC+0YDRgdC60L7QtSDRj9GB0YLQstC+JyxcbiAgZ2lmdHM6IDUsXG4gIGltZzogaW1nLFxuICBwb3J0aW9uczogMTAwLFxuICB0YXN0eTogJ9C60YPRgNC+0LknLFxuICB3ZWlnaHQ6IHtcbiAgICBhbW91bnQ6IDUsXG4gICAgbWVhc3VyZTogJ9C60LMnXG4gIH1cbn1dO1xuZnVuY3Rpb24gQXBwKCkge1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogc3R5bGVzLkFwcFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb250YWluZXIsIHtcbiAgICB0aXRsZTogXCJcXHUwNDIyXFx1MDQ0QiBcXHUwNDQxXFx1MDQzNVxcdTA0MzNcXHUwNDNFXFx1MDQzNFxcdTA0M0RcXHUwNDRGIFxcdTA0M0ZcXHUwNDNFXFx1MDQzQVxcdTA0M0VcXHUwNDQwXFx1MDQzQ1xcdTA0MzhcXHUwNDNCIFxcdTA0M0FcXHUwNDNFXFx1MDQ0MlxcdTA0MzA/XCJcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ2FyZExpc3QsIHtcbiAgICBjYXJkczogZGF0YVxuICB9KSkpO1xufVxuZXhwb3J0IGRlZmF1bHQgQXBwOyIsInZhciByZXBvcnRXZWJWaXRhbHMgPSBmdW5jdGlvbiByZXBvcnRXZWJWaXRhbHMob25QZXJmRW50cnkpIHtcbiAgaWYgKG9uUGVyZkVudHJ5ICYmIG9uUGVyZkVudHJ5IGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcbiAgICBpbXBvcnQoJ3dlYi12aXRhbHMnKS50aGVuKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZ2V0Q0xTID0gX3JlZi5nZXRDTFMsXG4gICAgICAgIGdldEZJRCA9IF9yZWYuZ2V0RklELFxuICAgICAgICBnZXRGQ1AgPSBfcmVmLmdldEZDUCxcbiAgICAgICAgZ2V0TENQID0gX3JlZi5nZXRMQ1AsXG4gICAgICAgIGdldFRURkIgPSBfcmVmLmdldFRURkI7XG4gICAgICBnZXRDTFMob25QZXJmRW50cnkpO1xuICAgICAgZ2V0RklEKG9uUGVyZkVudHJ5KTtcbiAgICAgIGdldEZDUChvblBlcmZFbnRyeSk7XG4gICAgICBnZXRMQ1Aob25QZXJmRW50cnkpO1xuICAgICAgZ2V0VFRGQihvblBlcmZFbnRyeSk7XG4gICAgfSk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCByZXBvcnRXZWJWaXRhbHM7IiwiaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5hc3luYy1pdGVyYXRvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5oYXMtaW5zdGFuY2UuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXMtY29uY2F0LXNwcmVhZGFibGUuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuaXRlcmF0b3IuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wubWF0Y2guanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wucmVwbGFjZS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zZWFyY2guanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuc3BlY2llcy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5zcGxpdC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC50by1wcmltaXRpdmUuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wudG8tc3RyaW5nLXRhZy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC51bnNjb3BhYmxlcy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvcHktd2l0aGluLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLWluZGV4LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmxhdC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQtbWFwLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5kZXgtb2YuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5sYXN0LWluZGV4LW9mLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkub2YuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZWR1Y2UtcmlnaHQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5yZXZlcnNlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zb3J0LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc3BlY2llcy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5jb25zdHJ1Y3Rvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LWJ1ZmZlci5zbGljZS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tanNvbi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24uaGFzLWluc3RhbmNlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLmpzb24udG8tc3RyaW5nLXRhZy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguYWNvc2guanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmFzaW5oLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC5hdGFuaC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2JydC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm1hdGguY2x6MzIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmNvc2guanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmV4cG0xLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC5mcm91bmQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmh5cG90LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC5pbXVsLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubWF0aC5sb2cxMC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm1hdGgubG9nMXAuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLmxvZzIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpZ24uanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnNpbmguanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRhbmguanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRvLXN0cmluZy10YWcuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5tYXRoLnRydW5jLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24uanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtZmluaXRlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLWludGVnZXIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuaXMtbmFuLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmlzLXNhZmUtaW50ZWdlci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLm1pbi1zYWZlLWludGVnZXIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtZmxvYXQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIucGFyc2UtaW50LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmFzc2lnbi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5kZWZpbmUtZ2V0dGVyLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmRlZmluZS1zZXR0ZXIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZW50cmllcy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5mcmVlemUuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZnJvbS1lbnRyaWVzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktbmFtZXMuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1leHRlbnNpYmxlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmlzLWZyb3plbi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5pcy1zZWFsZWQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5sb29rdXAtZ2V0dGVyLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QucHJldmVudC1leHRlbnNpb25zLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnNlYWwuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuYXBwbHkuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmNvbnN0cnVjdC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5kZWxldGUtcHJvcGVydHkuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmdldC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5oYXMuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LmlzLWV4dGVuc2libGUuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0Lm93bi1rZXlzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5yZWZsZWN0LnNldC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5jb25zdHJ1Y3Rvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmZsYWdzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnNldC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5jb2RlLXBvaW50LWF0LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmVuZHMtd2l0aC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mcm9tLWNvZGUtcG9pbnQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucGFkLWVuZC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5wYWQtc3RhcnQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmF3LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGVhdC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5yZXBsYWNlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnNlYXJjaC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tZW5kLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0tc3RhcnQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuYW5jaG9yLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmJpZy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ibGluay5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5ib2xkLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZpeGVkLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmZvbnRjb2xvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5mb250c2l6ZS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGFsaWNzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmxpbmsuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc21hbGwuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RyaWtlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdXAuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5mbG9hdDMyLWFycmF5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmxvYXQ2NC1hcnJheS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDgtYXJyYXkuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pbnQxNi1hcnJheS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmludDMyLWFycmF5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDgtYXJyYXkuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS51aW50OC1jbGFtcGVkLWFycmF5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDE2LWFycmF5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudWludDMyLWFycmF5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuY29weS13aXRoaW4uanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5ldmVyeS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZpbGwuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maWx0ZXIuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5maW5kLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZmluZC1pbmRleC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmZvci1lYWNoLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuZnJvbS5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmluY2x1ZGVzLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuaW5kZXgtb2YuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5pdGVyYXRvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LmpvaW4uanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5sYXN0LWluZGV4LW9mLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkubWFwLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkub2YuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZWR1Y2UtcmlnaHQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5yZXZlcnNlLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2V0LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc2xpY2UuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy9lcy50eXBlZC1hcnJheS5zb21lLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkuc29ydC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnN1YmFycmF5LmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMudHlwZWQtYXJyYXkudG8tbG9jYWxlLXN0cmluZy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLnR5cGVkLWFycmF5LnRvLXN0cmluZy5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL2VzLndlYWstbWFwLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvZXMud2Vhay1zZXQuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL3dlYi5pbW1lZGlhdGUuanNcIjtcbmltcG9ydCBcImNvcmUtanMvbW9kdWxlcy93ZWIucXVldWUtbWljcm90YXNrLmpzXCI7XG5pbXBvcnQgXCJjb3JlLWpzL21vZHVsZXMvd2ViLnVybC5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qc1wiO1xuaW1wb3J0IFwiY29yZS1qcy9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcbmltcG9ydCAnLi9pbmRleC5jc3MnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgcmVwb3J0V2ViVml0YWxzIGZyb20gJy4vcmVwb3J0V2ViVml0YWxzJztcbi8vIHdpbmRvdy5Qb3N0bWF0ZSA9IHJlcXVpcmUoJ3Bvc3RtYXRlL2J1aWxkL3Bvc3RtYXRlLm1pbi5qcycpO1xuXG52YXIgcm9vdCA9IFJlYWN0RE9NLmNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Jvb3QnKSk7XG5yb290LnJlbmRlciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuU3RyaWN0TW9kZSwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXBwLCBudWxsKSkpO1xuXG4vLyBJZiB5b3Ugd2FudCB0byBzdGFydCBtZWFzdXJpbmcgcGVyZm9ybWFuY2UgaW4geW91ciBhcHAsIHBhc3MgYSBmdW5jdGlvblxuLy8gdG8gbG9nIHJlc3VsdHMgKGZvciBleGFtcGxlOiByZXBvcnRXZWJWaXRhbHMoY29uc29sZS5sb2cpKVxuLy8gb3Igc2VuZCB0byBhbiBhbmFseXRpY3MgZW5kcG9pbnQuIExlYXJuIG1vcmU6IGh0dHBzOi8vYml0Lmx5L0NSQS12aXRhbHNcbnJlcG9ydFdlYlZpdGFscygpOyJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJtYXAiLCJpdGVtIiwiY29udGVudCIsIm5lZWRMYXllciIsImNvbmNhdCIsImxlbmd0aCIsImpvaW4iLCJpIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsInVuZGVmaW5lZCIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiaWQiLCJfayIsInB1c2giLCJ1cmwiLCJvcHRpb25zIiwiU3RyaW5nIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJ0ZXN0Iiwic2xpY2UiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwiX3R5cGVvZiIsIm9iaiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJhYSIsImNhIiwicCIsImEiLCJiIiwiYyIsImFyZ3VtZW50cyIsImRhIiwiU2V0IiwiZWEiLCJmYSIsImhhIiwiYWRkIiwiaWEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJqYSIsIk9iamVjdCIsImhhc093blByb3BlcnR5Iiwia2EiLCJsYSIsIm1hIiwidiIsImQiLCJlIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwidHlwZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJ6Iiwic3BsaXQiLCJmb3JFYWNoIiwidG9Mb3dlckNhc2UiLCJyYSIsInNhIiwidG9VcHBlckNhc2UiLCJ0YSIsInBhIiwiaXNOYU4iLCJxYSIsImNhbGwiLCJvYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwieGxpbmtIcmVmIiwidWEiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInZhIiwiZm9yIiwid2EiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiQSIsImFzc2lnbiIsIk1hIiwiRXJyb3IiLCJzdGFjayIsInRyaW0iLCJtYXRjaCIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsImRlZmluZVByb3BlcnR5Iiwic2V0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImwiLCJoIiwiZGlzcGxheU5hbWUiLCJpbmNsdWRlcyIsIm5hbWUiLCJQYSIsInRhZyIsInJlbmRlciIsIlFhIiwiJCR0eXBlb2YiLCJfY29udGV4dCIsIl9wYXlsb2FkIiwiX2luaXQiLCJSYSIsIlNhIiwiVGEiLCJub2RlTmFtZSIsIlZhIiwiX3ZhbHVlVHJhY2tlciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldCIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJ2YWx1ZSIsIlhhIiwiYWN0aXZlRWxlbWVudCIsImJvZHkiLCJZYSIsImRlZmF1bHRDaGVja2VkIiwiZGVmYXVsdFZhbHVlIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiWmEiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiYWIiLCJiYiIsImNiIiwiZGIiLCJvd25lckRvY3VtZW50IiwiZWIiLCJBcnJheSIsImlzQXJyYXkiLCJmYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiY2hpbGRyZW4iLCJoYiIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm9iIiwibGFzdENoaWxkIiwibm9kZVR5cGUiLCJub2RlVmFsdWUiLCJwYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJxYiIsInJiIiwic2IiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImtleXMiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJ0YiIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJpbnB1dCIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJzb3VyY2UiLCJ0cmFjayIsIndiciIsInViIiwidmIiLCJpcyIsIndiIiwieGIiLCJ0YXJnZXQiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJOYiIsImFwcGx5IiwibSIsIm9uRXJyb3IiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIlNiIiwiVGIiLCJWYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiV2IiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsIlhiIiwiWmIiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiWWIiLCIkYiIsImFjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImJjIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJjYyIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiZGMiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJCIiwidW5zdGFibGVfbm93IiwiZWMiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsImZjIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJnYyIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiaGMiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsImljIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJqYyIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsImtjIiwibGMiLCJvYyIsIk1hdGgiLCJjbHozMiIsInBjIiwicWMiLCJsb2ciLCJMTjIiLCJyYyIsInNjIiwidGMiLCJ1YyIsInBlbmRpbmdMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJ2YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiZXZlbnRUaW1lcyIsIkNjIiwiQyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIk1hcCIsIlBjIiwiUWMiLCJSYyIsIlNjIiwiZGVsZXRlIiwicG9pbnRlcklkIiwiVGMiLCJuYXRpdmVFdmVudCIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJ0YXJnZXRDb250YWluZXJzIiwiVmMiLCJXYyIsInByaW9yaXR5IiwiaXNEZWh5ZHJhdGVkIiwiY29udGFpbmVySW5mbyIsIlhjIiwiWWMiLCJkaXNwYXRjaEV2ZW50Iiwic2hpZnQiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJkZCIsImVkIiwidHJhbnNpdGlvbiIsImZkIiwiZ2QiLCJoZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJrZXkiLCJmcm9tQ2hhckNvZGUiLCJjb2RlIiwibG9jYXRpb24iLCJyZXBlYXQiLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwiZXZlbnQiLCJsaXN0ZW5lcnMiLCJwZSIsInFlIiwicmUiLCJzZSIsInRlIiwidWUiLCJ2ZSIsIndlIiwieGUiLCJ5ZSIsInplIiwib25pbnB1dCIsIkFlIiwiZGV0YWNoRXZlbnQiLCJCZSIsIkNlIiwiYXR0YWNoRXZlbnQiLCJEZSIsIkVlIiwiRmUiLCJIZSIsIkllIiwiSmUiLCJLZSIsIm5vZGUiLCJvZmZzZXQiLCJuZXh0U2libGluZyIsIkxlIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIk1lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiaHJlZiIsIk5lIiwiY29udGVudEVkaXRhYmxlIiwiT2UiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3RhcnQiLCJlbmQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsIm1pbiIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiZXh0ZW5kIiwicmFuZ2VDb3VudCIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImVsZW1lbnQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsImZvY3VzIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJXZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlhlIiwiWWUiLCJaZSIsImFuaW1hdGlvbiIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImxmIiwibWYiLCJuZiIsIlViIiwiaW5zdGFuY2UiLCJsaXN0ZW5lciIsIkQiLCJvZiIsImhhcyIsInBmIiwicWYiLCJyZiIsInJhbmRvbSIsInNmIiwiYmluZCIsImNhcHR1cmUiLCJwYXNzaXZlIiwibiIsInQiLCJKIiwieCIsInUiLCJ3IiwiRiIsInRmIiwidWYiLCJwYXJlbnRXaW5kb3ciLCJ2ZiIsIndmIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJqZSIsImNoYXIiLCJrZSIsInVuc2hpZnQiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJEZiIsIkVmIiwiX19odG1sIiwiRmYiLCJzZXRUaW1lb3V0IiwiR2YiLCJjbGVhclRpbWVvdXQiLCJIZiIsIlByb21pc2UiLCJKZiIsInF1ZXVlTWljcm90YXNrIiwicmVzb2x2ZSIsInRoZW4iLCJjYXRjaCIsIklmIiwiS2YiLCJMZiIsIk1mIiwicHJldmlvdXNTaWJsaW5nIiwiTmYiLCJPZiIsIlBmIiwiUWYiLCJSZiIsIlNmIiwiVGYiLCJVZiIsIkUiLCJHIiwiVmYiLCJIIiwiV2YiLCJYZiIsIllmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiWmYiLCJjaGlsZENvbnRleHRUeXBlcyIsIiRmIiwiYWciLCJiZyIsImdldENoaWxkQ29udGV4dCIsImNnIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJkZyIsImVnIiwiZmciLCJnZyIsImhnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwic2ciLCJ0ZyIsInVnIiwidmciLCJ3ZyIsInhnIiwieWciLCJJIiwiemciLCJBZyIsIkJnIiwiZWxlbWVudFR5cGUiLCJkZWxldGlvbnMiLCJDZyIsInBlbmRpbmdQcm9wcyIsIm92ZXJmbG93IiwidHJlZUNvbnRleHQiLCJyZXRyeUxhbmUiLCJEZyIsIm1vZGUiLCJFZyIsIkZnIiwiR2ciLCJtZW1vaXplZFByb3BzIiwiSGciLCJJZyIsIkpnIiwiS2ciLCJMZyIsImRlZmF1bHRQcm9wcyIsIk1nIiwiTmciLCJPZyIsIlBnIiwiUWciLCJSZyIsIl9jdXJyZW50VmFsdWUiLCJTZyIsImNoaWxkTGFuZXMiLCJUZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwiVWciLCJWZyIsImNvbnRleHQiLCJtZW1vaXplZFZhbHVlIiwibmV4dCIsIldnIiwiWGciLCJZZyIsImludGVybGVhdmVkIiwiWmciLCIkZyIsImFoIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwiYmgiLCJjaCIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJkaCIsIksiLCJlaCIsImZoIiwiZ2giLCJxIiwiciIsInkiLCJoaCIsImloIiwiamgiLCJDb21wb25lbnQiLCJyZWZzIiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsInByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJpbmRleCIsIndoIiwieGgiLCJ5aCIsImltcGxlbWVudGF0aW9uIiwiemgiLCJBaCIsImRvbmUiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwidGFnTmFtZSIsIkpoIiwiS2giLCJMaCIsIk0iLCJNaCIsInJldmVhbE9yZGVyIiwiTmgiLCJPaCIsIl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5IiwiUGgiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUWgiLCJSaCIsIk4iLCJPIiwiUCIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiUSIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJiYXNlUXVldWUiLCJxdWV1ZSIsImRpIiwiZWkiLCJmaSIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImxhc3RSZW5kZXJlZFN0YXRlIiwiZGlzcGF0Y2giLCJnaSIsImhpIiwiaWkiLCJqaSIsImtpIiwiZ2V0U25hcHNob3QiLCJsaSIsIm1pIiwiUiIsIm5pIiwibGFzdEVmZmVjdCIsInN0b3JlcyIsIm9pIiwicGkiLCJxaSIsInJpIiwiY3JlYXRlIiwiZGVzdHJveSIsImRlcHMiLCJzaSIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIkNpIiwiRGkiLCJFaSIsIkZpIiwiR2kiLCJIaSIsIklpIiwiSmkiLCJyZWFkQ29udGV4dCIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJpZGVudGlmaWVyUHJlZml4IiwiS2kiLCJtZXNzYWdlIiwiZGlnZXN0IiwiTGkiLCJNaSIsImNvbnNvbGUiLCJlcnJvciIsIk5pIiwiV2Vha01hcCIsIk9pIiwiUGkiLCJRaSIsIlJpIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJTaSIsImNvbXBvbmVudFN0YWNrIiwiVGkiLCJwaW5nQ2FjaGUiLCJVaSIsIlZpIiwiV2kiLCJYaSIsIlJlYWN0Q3VycmVudE93bmVyIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsImNvbXBhcmUiLCJjaiIsImRqIiwiZWoiLCJiYXNlTGFuZXMiLCJjYWNoZVBvb2wiLCJ0cmFuc2l0aW9ucyIsImZqIiwiZ2oiLCJoaiIsImlqIiwiamoiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJraiIsImxqIiwicGVuZGluZ0NvbnRleHQiLCJtaiIsIkFqIiwiQ2oiLCJEaiIsIm5qIiwib2oiLCJwaiIsImZhbGxiYWNrIiwicWoiLCJyaiIsInRqIiwiZGF0YXNldCIsImRnc3QiLCJ1aiIsInZqIiwiX3JlYWN0UmV0cnkiLCJzaiIsInN1YnRyZWVGbGFncyIsIndqIiwieGoiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiUyIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiYXV0b0ZvY3VzIiwiY3JlYXRlVGV4dE5vZGUiLCJUIiwiSGoiLCJJaiIsIkpqIiwiS2oiLCJVIiwiTGoiLCJXZWFrU2V0IiwiViIsIk1qIiwiVyIsIk5qIiwiT2oiLCJRaiIsIlJqIiwiU2oiLCJUaiIsIlVqIiwiVmoiLCJXaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJYaiIsIlgiLCJZaiIsIlpqIiwiYWsiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiYmsiLCJjayIsImRrIiwiZWsiLCJmayIsImlzSGlkZGVuIiwiZ2siLCJoayIsImRpc3BsYXkiLCJpayIsImprIiwia2siLCJsayIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwic3JjIiwiV2siLCJtayIsImNlaWwiLCJuayIsIm9rIiwicGsiLCJZIiwiWiIsInFrIiwicmsiLCJzayIsInRrIiwidWsiLCJJbmZpbml0eSIsInZrIiwid2siLCJ4ayIsInlrIiwiemsiLCJBayIsIkJrIiwiQ2siLCJEayIsIkVrIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiZXhwaXJlZExhbmVzIiwid2MiLCJjYWxsYmFja1ByaW9yaXR5IiwiaWciLCJGayIsIkdrIiwiSGsiLCJJayIsIkprIiwiS2siLCJMayIsIk1rIiwiTmsiLCJPayIsIlBrIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRMYW5lcyIsIlFrIiwidGltZW91dEhhbmRsZSIsIlJrIiwiU2siLCJUayIsIlVrIiwiVmsiLCJtdXRhYmxlUmVhZExhbmVzIiwiQmMiLCJQaiIsIm9uQ29tbWl0RmliZXJSb290IiwibWMiLCJvblJlY292ZXJhYmxlRXJyb3IiLCJYayIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIllrIiwiWmsiLCJhbCIsImlzUmVhY3RDb21wb25lbnQiLCJwZW5kaW5nQ2hpbGRyZW4iLCJibCIsIm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEiLCJjbCIsImNhY2hlIiwicGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyIsImRsIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJzcGxpY2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJjcmVhdGVSb290IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwiaHlkcmF0ZSIsImh5ZHJhdGVSb290IiwiaHlkcmF0ZWRTb3VyY2VzIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsImVyciIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJfX3NlbGYiLCJfX3NvdXJjZSIsImVzY2FwZSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicG9wIiwic29ydEluZGV4IiwicGVyZm9ybWFuY2UiLCJzZXRJbW1lZGlhdGUiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJuYXZpZ2F0b3IiLCJzY2hlZHVsaW5nIiwiaXNJbnB1dFBlbmRpbmciLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJmbG9vciIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJpc0NhbGxhYmxlIiwidHJ5VG9TdHJpbmciLCIkVHlwZUVycm9yIiwiVHlwZUVycm9yIiwiYXJndW1lbnQiLCJpc0NvbnN0cnVjdG9yIiwiJFN0cmluZyIsIndlbGxLbm93blN5bWJvbCIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJ1bmljb2RlIiwiaXNQcm90b3R5cGVPZiIsIml0IiwiUHJvdG90eXBlIiwiaXNPYmplY3QiLCJBcnJheUJ1ZmZlciIsIkRhdGFWaWV3IiwiZmFpbHMiLCJidWZmZXIiLCJpc0V4dGVuc2libGUiLCJOQU1FIiwiQ29uc3RydWN0b3IiLCJOQVRJVkVfQVJSQVlfQlVGRkVSIiwiREVTQ1JJUFRPUlMiLCJnbG9iYWwiLCJoYXNPd24iLCJjbGFzc29mIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5IiwiZGVmaW5lQnVpbHRJbiIsImdldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJ1aWQiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZW5mb3JjZUludGVybmFsU3RhdGUiLCJlbmZvcmNlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsIkludDhBcnJheSIsIkludDhBcnJheVByb3RvdHlwZSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUiLCJUeXBlZEFycmF5IiwiVHlwZWRBcnJheVByb3RvdHlwZSIsIk9iamVjdFByb3RvdHlwZSIsIlRPX1NUUklOR19UQUciLCJUWVBFRF9BUlJBWV9UQUciLCJUWVBFRF9BUlJBWV9DT05TVFJVQ1RPUiIsIk5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MiLCJvcGVyYSIsIlRZUEVEX0FSUkFZX1RBR19SRVFVSVJFRCIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0IiwiVWludDhBcnJheSIsIkludDE2QXJyYXkiLCJVaW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJVaW50MzJBcnJheSIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkJpZ0ludEFycmF5Q29uc3RydWN0b3JzTGlzdCIsIkJpZ0ludDY0QXJyYXkiLCJCaWdVaW50NjRBcnJheSIsImdldFR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsInByb3RvIiwiaXNUeXBlZEFycmF5Iiwia2xhc3MiLCJGdW5jdGlvbiIsImFUeXBlZEFycmF5IiwiYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsImV4cG9ydFR5cGVkQXJyYXlNZXRob2QiLCJLRVkiLCJwcm9wZXJ0eSIsImZvcmNlZCIsIkFSUkFZIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9yIiwiZXJyb3IyIiwiZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCIsImlzVmlldyIsInVuY3VycnlUaGlzIiwiRnVuY3Rpb25OYW1lIiwiZGVmaW5lQnVpbHRJbnMiLCJhbkluc3RhbmNlIiwidG9JbnRlZ2VyT3JJbmZpbml0eSIsInRvTGVuZ3RoIiwidG9JbmRleCIsIklFRUU3NTQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiYXJyYXlGaWxsIiwiYXJyYXlTbGljZSIsInNldFRvU3RyaW5nVGFnIiwiUFJPUEVSX0ZVTkNUSU9OX05BTUUiLCJQUk9QRVIiLCJDT05GSUdVUkFCTEVfRlVOQ1RJT05fTkFNRSIsIkNPTkZJR1VSQUJMRSIsInNldEludGVybmFsU3RhdGUiLCJBUlJBWV9CVUZGRVIiLCJEQVRBX1ZJRVciLCJQUk9UT1RZUEUiLCJXUk9OR19JTkRFWCIsIk5hdGl2ZUFycmF5QnVmZmVyIiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXJQcm90b3R5cGUiLCIkRGF0YVZpZXciLCJEYXRhVmlld1Byb3RvdHlwZSIsIlJhbmdlRXJyb3IiLCJmaWxsIiwicmV2ZXJzZSIsInBhY2tJRUVFNzU0IiwicGFjayIsInVucGFja0lFRUU3NTQiLCJ1bnBhY2siLCJwYWNrSW50OCIsInBhY2tJbnQxNiIsInBhY2tJbnQzMiIsInVucGFja0ludDMyIiwicGFja0Zsb2F0MzIiLCJwYWNrRmxvYXQ2NCIsImFkZEdldHRlciIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJzdG9yZSIsImJ5dGVMZW5ndGgiLCJieXRlcyIsImJ5dGVPZmZzZXQiLCJjb252ZXJzaW9uIiwiSU5DT1JSRUNUX0FSUkFZX0JVRkZFUl9OQU1FIiwiTmFOIiwiaiIsInRlc3RWaWV3IiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwidW5zYWZlIiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJ0b09iamVjdCIsInRvQWJzb2x1dGVJbmRleCIsImxlbmd0aE9mQXJyYXlMaWtlIiwiZGVsZXRlUHJvcGVydHlPclRocm93IiwiY29weVdpdGhpbiIsImxlbiIsInRvIiwiZnJvbSIsImluYyIsImFyZ3VtZW50c0xlbmd0aCIsImVuZFBvcyIsIiRmb3JFYWNoIiwiU1RSSUNUX01FVEhPRCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJjYWxsYmFja2ZuIiwicmVzdWx0IiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsImNyZWF0ZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3IiLCJnZXRJdGVyYXRvck1ldGhvZCIsIiRBcnJheSIsImFycmF5TGlrZSIsIklTX0NPTlNUUlVDVE9SIiwibWFwZm4iLCJtYXBwaW5nIiwic3RlcCIsIml0ZXJhdG9yTWV0aG9kIiwidG9JbmRleGVkT2JqZWN0IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImZyb21JbmRleCIsIkluZGV4ZWRPYmplY3QiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9SRUpFQ1QiLCJOT19IT0xFUyIsInRoYXQiLCJzcGVjaWZpY0NyZWF0ZSIsInNlbGYiLCJib3VuZEZ1bmN0aW9uIiwiZmlsdGVyIiwic29tZSIsImV2ZXJ5IiwiZmluZCIsImZpbmRJbmRleCIsImZpbHRlclJlamVjdCIsIiRsYXN0SW5kZXhPZiIsImxhc3RJbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIkZPUkNFRCIsInNlYXJjaEVsZW1lbnQiLCJWOF9WRVJTSU9OIiwiU1BFQ0lFUyIsIk1FVEhPRF9OQU1FIiwiYXJyYXkiLCJmb28iLCJCb29sZWFuIiwibWV0aG9kIiwiYUNhbGxhYmxlIiwiSVNfUklHSFQiLCJyaWdodCIsIlNJTEVOVF9PTl9OT05fV1JJVEFCTEVfTEVOR1RIX1NFVCIsIndyaXRhYmxlIiwibWF4IiwiZmluIiwibWVyZ2VTb3J0IiwiY29tcGFyZWZuIiwibWlkZGxlIiwiaW5zZXJ0aW9uU29ydCIsIm1lcmdlIiwibGxlbmd0aCIsInJsZW5ndGgiLCJsaW5kZXgiLCJyaW5kZXgiLCJvcmlnaW5hbEFycmF5IiwiYXJyYXlTcGVjaWVzQ29uc3RydWN0b3IiLCJhbk9iamVjdCIsIml0ZXJhdG9yQ2xvc2UiLCJmbiIsIkVOVFJJRVMiLCJJVEVSQVRPUiIsIlNBRkVfQ0xPU0lORyIsImNhbGxlZCIsIml0ZXJhdG9yV2l0aFJldHVybiIsImV4ZWMiLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIm9iamVjdCIsInN0cmluZ1NsaWNlIiwiVE9fU1RSSU5HX1RBR19TVVBQT1JUIiwiY2xhc3NvZlJhdyIsIiRPYmplY3QiLCJDT1JSRUNUX0FSR1VNRU5UUyIsInRyeUdldCIsImNhbGxlZSIsImlzTnVsbE9yVW5kZWZpbmVkIiwiaXRlcmF0ZSIsImRlZmluZUl0ZXJhdG9yIiwiY3JlYXRlSXRlclJlc3VsdE9iamVjdCIsInNldFNwZWNpZXMiLCJmYXN0S2V5IiwiaW50ZXJuYWxTdGF0ZUdldHRlckZvciIsImdldHRlckZvciIsImdldENvbnN0cnVjdG9yIiwid3JhcHBlciIsIkNPTlNUUlVDVE9SX05BTUUiLCJBRERFUiIsIml0ZXJhYmxlIiwiZmlyc3QiLCJBU19FTlRSSUVTIiwiZGVmaW5lIiwicHJldmlvdXMiLCJlbnRyeSIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwicHJldiIsInNldFN0cm9uZyIsIklURVJBVE9SX05BTUUiLCJnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsImdldFdlYWtEYXRhIiwiQXJyYXlJdGVyYXRpb25Nb2R1bGUiLCJ1bmNhdWdodEZyb3plblN0b3JlIiwiZnJvemVuIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImVudHJpZXMiLCJmaW5kVW5jYXVnaHRGcm96ZW4iLCIkIiwiaXNGb3JjZWQiLCJJbnRlcm5hbE1ldGFkYXRhTW9kdWxlIiwiY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsInVuY3VycmllZE5hdGl2ZU1ldGhvZCIsImVuYWJsZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsImR1bW15Iiwib3duS2V5cyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiZXhjZXB0aW9ucyIsIk1BVENIIiwicmVnZXhwIiwiZXJyb3IxIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInF1b3QiLCJzdHJpbmciLCJhdHRyaWJ1dGUiLCJwMSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImJpdG1hcCIsInRvUHJvcGVydHlLZXkiLCJwcm9wZXJ0eUtleSIsIm9yZGluYXJ5VG9QcmltaXRpdmUiLCJoaW50IiwibWFrZUJ1aWx0SW4iLCJkZXNjcmlwdG9yIiwiZ2V0dGVyIiwic2V0dGVyIiwiZGVmaW5lR2xvYmFsUHJvcGVydHkiLCJzaW1wbGUiLCJub25Db25maWd1cmFibGUiLCJub25Xcml0YWJsZSIsImRvY3VtZW50QWxsIiwiYWxsIiwiSVNfSFRNTEREQSIsIkVYSVNUUyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY2xhc3NMaXN0IiwiZG9jdW1lbnRDcmVhdGVFbGVtZW50IiwiRE9NVG9rZW5MaXN0UHJvdG90eXBlIiwiZmlyZWZveCIsIklTX0RFTk8iLCJJU19OT0RFIiwiQnVuIiwiRGVubyIsIlVBIiwidXNlckFnZW50IiwiUGViYmxlIiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCJ3ZWJraXQiLCJjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJkb250Q2FsbEdldFNldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUmVnRXhwUHJvdG90eXBlIiwiUmVnRXhwIiwiU0hBTSIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJ1bmN1cnJpZWROYXRpdmVSZWdFeHBNZXRob2QiLCJtZXRob2RzIiwibmF0aXZlTWV0aG9kIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwiJGV4ZWMiLCJkb2VzTm90RXhjZWVkU2FmZUludGVnZXIiLCJmbGF0dGVuSW50b0FycmF5Iiwib3JpZ2luYWwiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50TGVuIiwidGFyZ2V0SW5kZXgiLCJzb3VyY2VJbmRleCIsIm1hcEZuIiwicHJldmVudEV4dGVuc2lvbnMiLCJOQVRJVkVfQklORCIsIkZ1bmN0aW9uUHJvdG90eXBlIiwiJEZ1bmN0aW9uIiwiZmFjdG9yaWVzIiwiYXJnc0xlbmd0aCIsImFyZ3MiLCJwYXJ0QXJncyIsImdldERlc2NyaXB0b3IiLCJ1bmN1cnJ5VGhpc1dpdGhCaW5kIiwiYUZ1bmN0aW9uIiwibmFtZXNwYWNlIiwiZ2V0TWV0aG9kIiwiSXRlcmF0b3JzIiwidXNpbmdJdGVyYXRvciIsImZ1bmMiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZW1lbnQiLCJ0YWlsUG9zIiwic3ltYm9scyIsImNoZWNrIiwiZ2xvYmFsVGhpcyIsImdldEJ1aWx0SW4iLCJhYnMiLCJwb3ciLCJtYW50aXNzYUxlbmd0aCIsImV4cG9uZW50IiwibWFudGlzc2EiLCJleHBvbmVudExlbmd0aCIsImVNYXgiLCJlQmlhcyIsInJ0Iiwic2lnbiIsIm5CaXRzIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwiZnVuY3Rpb25Ub1N0cmluZyIsImluc3BlY3RTb3VyY2UiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbE1vZHVsZSIsIkZSRUVaSU5HIiwiUkVRVUlSRUQiLCJNRVRBREFUQSIsInNldE1ldGFkYXRhIiwib2JqZWN0SUQiLCJ3ZWFrRGF0YSIsIm9uRnJlZXplIiwiTkFUSVZFX1dFQUtfTUFQIiwic2hhcmVkS2V5IiwiT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQiLCJtZXRhZGF0YSIsImZhY2FkZSIsIlNUQVRFIiwiJGRvY3VtZW50QWxsIiwibm9vcCIsImVtcHR5IiwiY29uc3RydWN0b3JSZWdFeHAiLCJJTkNPUlJFQ1RfVE9fU1RSSU5HIiwiaXNDb25zdHJ1Y3Rvck1vZGVybiIsImlzQ29uc3RydWN0b3JMZWdhY3kiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJpc0Zpbml0ZSIsImlzUmVnRXhwIiwiVVNFX1NZTUJPTF9BU19VSUQiLCIkU3ltYm9sIiwiUmVzdWx0Iiwic3RvcHBlZCIsIlJlc3VsdFByb3RvdHlwZSIsInVuYm91bmRGdW5jdGlvbiIsIml0ZXJGbiIsIklTX1JFQ09SRCIsIklTX0lURVJBVE9SIiwiSU5URVJSVVBURUQiLCJzdG9wIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwiaW5uZXJSZXN1bHQiLCJpbm5lckVycm9yIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJyZXR1cm5UaGlzIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkVOVU1FUkFCTEVfTkVYVCIsIklTX1BVUkUiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwiSXRlcmF0b3JzQ29yZSIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJLRVlTIiwiVkFMVUVTIiwiSXRlcmFibGUiLCJERUZBVUxUIiwiSVNfU0VUIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsInZhbHVlcyIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJDT05GSUdVUkFCTEVfTEVOR1RIIiwiVEVNUExBVEUiLCJhcml0eSIsIiRleHBtMSIsImV4cG0xIiwiZXhwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyb3VuZFRpZXNUb0V2ZW4iLCJMT0cxMEUiLCJsb2cxMCIsImxvZzFwIiwidHJ1bmMiLCJub3RpZnkiLCJ0b2dnbGUiLCJwcm9taXNlIiwibWFjcm90YXNrIiwiUXVldWUiLCJJU19JT1MiLCJJU19JT1NfUEVCQkxFIiwiSVNfV0VCT1NfV0VCS0lUIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IiLCJtaWNyb3Rhc2siLCJmbHVzaCIsInBhcmVudCIsImRvbWFpbiIsImV4aXQiLCJoZWFkIiwiZW50ZXIiLCJuZXh0VGljayIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCJyZWplY3QiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsImdsb2JhbElzRmluaXRlIiwid2hpdGVzcGFjZXMiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJ0cmltbWVkU3RyaW5nIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCJoZXgiLCJyYWRpeCIsIm9iamVjdEtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIiRhc3NpZ24iLCJzeW1ib2wiLCJhbHBoYWJldCIsImNociIsImdldE93blByb3BlcnR5U3ltYm9scyIsImFjdGl2ZVhEb2N1bWVudCIsImRlZmluZVByb3BlcnRpZXNNb2R1bGUiLCJlbnVtQnVnS2V5cyIsImh0bWwiLCJTQ1JJUFQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJMVCIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIkpTIiwib3BlbiIsIlByb3BlcnRpZXMiLCJWOF9QUk9UT1RZUEVfREVGSU5FX0JVRyIsImRlZmluZVByb3BlcnRpZXMiLCJJRThfRE9NX0RFRklORSIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJFTlVNRVJBQkxFIiwiV1JJVEFCTEUiLCJBdHRyaWJ1dGVzIiwiJGdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldFdpbmRvd05hbWVzIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiQVJSQVlfQlVGRkVSX05PTl9FWFRFTlNJQkxFIiwiJGlzRXh0ZW5zaWJsZSIsIkZBSUxTX09OX1BSSU1JVElWRVMiLCJuYW1lcyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiV0VCS0lUIiwiX19kZWZpbmVTZXR0ZXJfXyIsImFQb3NzaWJsZVByb3RvdHlwZSIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiVE9fRU5UUklFUyIsInByZWYiLCJ2YWwiLCJOYXRpdmVQcm9taXNlQ29uc3RydWN0b3IiLCJJU19CUk9XU0VSIiwiTmF0aXZlUHJvbWlzZVByb3RvdHlwZSIsIlNVQkNMQVNTSU5HIiwiTkFUSVZFX1BST01JU0VfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRk9SQ0VEX1BST01JU0VfQ09OU1RSVUNUT1IiLCJQUk9NSVNFX0NPTlNUUlVDVE9SX1NPVVJDRSIsIkdMT0JBTF9DT1JFX0pTX1BST01JU0UiLCJGYWtlUHJvbWlzZSIsIkNPTlNUUlVDVE9SIiwiUkVKRUNUSU9OX0VWRU5UIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIlRhcmdldCIsIlNvdXJjZSIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIlVOU1VQUE9SVEVEX0RPVF9BTEwiLCJVTlNVUFBPUlRFRF9OQ0ciLCJuYXRpdmVSZXBsYWNlIiwibmF0aXZlRXhlYyIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwibGFzdEluZGV4IiwiVU5TVVBQT1JURURfWSIsIkJST0tFTl9DQVJFVCIsIk5QQ0dfSU5DTFVERUQiLCJyZUNvcHkiLCJncm91cCIsInJhdyIsImdyb3VwcyIsInN0aWNreSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaGFzSW5kaWNlcyIsImlnbm9yZUNhc2UiLCJkb3RBbGwiLCJ1bmljb2RlU2V0cyIsInJlZ0V4cEZsYWdzIiwiJFJlZ0V4cCIsIk1JU1NFRF9TVElDS1kiLCJFTkdJTkVfSVNfQlVOIiwiVVNFUl9BR0VOVCIsInZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoIiwiV1JBUCIsInNjaGVkdWxlciIsImhhc1RpbWVBcmciLCJmaXJzdFBhcmFtSW5kZXgiLCJoYW5kbGVyIiwidGltZW91dCIsImJvdW5kQXJncyIsInBhcmFtcyIsIlRBRyIsIlNIQVJFRCIsImNvcHlyaWdodCIsImxpY2Vuc2UiLCJhQ29uc3RydWN0b3IiLCJkZWZhdWx0Q29uc3RydWN0b3IiLCJjaGFyQ29kZUF0IiwiQ09OVkVSVF9UT19TVFJJTkciLCJwb3MiLCJzZWNvbmQiLCJjb2RlQXQiLCIkcmVwZWF0IiwiSVNfRU5EIiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImZpbGxMZW4iLCJzdHJpbmdGaWxsZXIiLCJpbnRNYXhMZW5ndGgiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwibWF4SW50IiwicmVnZXhOb25BU0NJSSIsInJlZ2V4U2VwYXJhdG9ycyIsIk9WRVJGTE9XX0VSUk9SIiwiJFJhbmdlRXJyb3IiLCJkaWdpdFRvQmFzaWMiLCJkaWdpdCIsImFkYXB0IiwiZGVsdGEiLCJudW1Qb2ludHMiLCJmaXJzdFRpbWUiLCJiYXNlTWludXNUTWluIiwiZW5jb2RlIiwib3V0cHV0IiwiY291bnRlciIsImV4dHJhIiwidWNzMmRlY29kZSIsImN1cnJlbnRWYWx1ZSIsImlucHV0TGVuZ3RoIiwiYmlhcyIsImJhc2ljTGVuZ3RoIiwiaGFuZGxlZENQQ291bnQiLCJoYW5kbGVkQ1BDb3VudFBsdXNPbmUiLCJxTWludXNUIiwiYmFzZU1pbnVzVCIsImxhYmVsIiwiZW5jb2RlZCIsImxhYmVscyIsIiR0cmltRW5kIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsInRyaW1FbmQiLCIkdHJpbVN0YXJ0IiwidHJpbVN0YXJ0Iiwid2hpdGVzcGFjZSIsImx0cmltIiwicnRyaW0iLCJTeW1ib2xQcm90b3R5cGUiLCJUT19QUklNSVRJVkUiLCJOQVRJVkVfU1lNQk9MIiwia2V5Rm9yIiwiJGxvY2F0aW9uIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImNsZWFySW1tZWRpYXRlIiwiRGlzcGF0Y2giLCJPTlJFQURZU1RBVEVDSEFOR0UiLCJydW4iLCJydW5uZXIiLCJldmVudExpc3RlbmVyIiwiZ2xvYmFsUG9zdE1lc3NhZ2VEZWZlciIsInByb3RvY29sIiwiaG9zdCIsImltcG9ydFNjcmlwdHMiLCJpbnRlZ2VyIiwidG9QcmltaXRpdmUiLCJwcmltIiwiQmlnSW50IiwidG9Qb3NpdGl2ZUludGVnZXIiLCJCWVRFUyIsImlzU3ltYm9sIiwiZXhvdGljVG9QcmltIiwiVFlQRURfQVJSQVlTX0NPTlNUUlVDVE9SU19SRVFVSVJFU19XUkFQUEVSUyIsIkFycmF5QnVmZmVyVmlld0NvcmUiLCJBcnJheUJ1ZmZlck1vZHVsZSIsImlzSW50ZWdyYWxOdW1iZXIiLCJ0b09mZnNldCIsInR5cGVkQXJyYXlGcm9tIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyb3VuZCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiV1JPTkdfTEVOR1RIIiwiZnJvbUxpc3QiLCJpc0FycmF5QnVmZmVyIiwiaXNUeXBlZEFycmF5SW5kZXgiLCJ3cmFwcGVkR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3JhcHBlZERlZmluZVByb3BlcnR5IiwiQ0xBTVBFRCIsIkdFVFRFUiIsIlNFVFRFUiIsIk5hdGl2ZVR5cGVkQXJyYXlDb25zdHJ1Y3RvciIsIlR5cGVkQXJyYXlDb25zdHJ1Y3RvclByb3RvdHlwZSIsImFkZEVsZW1lbnQiLCJ0eXBlZEFycmF5T2Zmc2V0IiwiJGxlbmd0aCIsIiRsZW4iLCJhcnJheUZyb21Db25zdHJ1Y3RvckFuZExpc3QiLCJ0eXBlZEFycmF5U3BlY2llc0NvbnN0cnVjdG9yIiwiaXNCaWdJbnRBcnJheSIsInRvQmlnSW50IiwidGhpc0lzQmlnSW50QXJyYXkiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJwb3N0Zml4IiwiVVJMIiwic2VhcmNoUGFyYW1zIiwicGF0aG5hbWUiLCJ0b0pTT04iLCJzb3J0IiwiVVJMU2VhcmNoUGFyYW1zIiwidXNlcm5hbWUiLCJwYXNzZWQiLCJyZXF1aXJlZCIsInBhdGgiLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImFycmF5QnVmZmVyTW9kdWxlIiwibmF0aXZlQXJyYXlCdWZmZXJTbGljZSIsInZpZXdTb3VyY2UiLCJ2aWV3VGFyZ2V0IiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCIsImlzQ29uY2F0U3ByZWFkYWJsZSIsInNwcmVhZGFibGUiLCJhcmciLCJhZGRUb1Vuc2NvcGFibGVzIiwiJGZpbHRlciIsIiRmaW5kSW5kZXgiLCJGSU5EX0lOREVYIiwiU0tJUFNfSE9MRVMiLCIkZmluZCIsIkZJTkQiLCJmbGF0TWFwIiwiZmxhdCIsImRlcHRoQXJnIiwiJGluY2x1ZGVzIiwiJGluZGV4T2YiLCJuYXRpdmVJbmRleE9mIiwiQVJSQVlfSVRFUkFUT1IiLCJBcmd1bWVudHMiLCJuYXRpdmVKb2luIiwic2VwYXJhdG9yIiwiJG1hcCIsIiRyZWR1Y2VSaWdodCIsIkNIUk9NRV9WRVJTSU9OIiwicmVkdWNlUmlnaHQiLCIkcmVkdWNlIiwicmVkdWNlIiwibmF0aXZlUmV2ZXJzZSIsIm5hdGl2ZVNsaWNlIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsImludGVybmFsU29ydCIsIkZGIiwiSUVfT1JfRURHRSIsIlY4IiwibmF0aXZlU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJTVEFCTEVfU09SVCIsIml0ZW1zTGVuZ3RoIiwiaXRlbXMiLCJhcnJheUxlbmd0aCIsImdldFNvcnRDb21wYXJlIiwic2V0QXJyYXlMZW5ndGgiLCJkZWxldGVDb3VudCIsImluc2VydENvdW50IiwiYWN0dWFsRGVsZXRlQ291bnQiLCJhY3R1YWxTdGFydCIsInRvSVNPU3RyaW5nIiwicHYiLCJkYXRlVG9QcmltaXRpdmUiLCJEYXRlUHJvdG90eXBlIiwiSEFTX0lOU1RBTkNFIiwiRlVOQ1RJT05fTkFNRV9FWElTVFMiLCJuYW1lUkUiLCJyZWdFeHBFeGVjIiwiJHN0cmluZ2lmeSIsIm51bWJlclRvU3RyaW5nIiwidGVzdGVyIiwibG93IiwiV1JPTkdfU1lNQk9MU19DT05WRVJTSU9OIiwiSUxMX0ZPUk1FRF9VTklDT0RFIiwic3RyaW5naWZ5V2l0aFN5bWJvbHNGaXgiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsImZpeElsbEZvcm1lZCIsInNwYWNlIiwiY29sbGVjdGlvbiIsImluaXQiLCIkYWNvc2giLCJhY29zaCIsInNxcnQiLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsIkxPRzJFIiwiJGNvc2giLCJjb3NoIiwiJGh5cG90IiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJhTGVuIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsIlVJTlQxNiIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMiIsInNpbmgiLCJ0YW5oIiwidGhpc051bWJlclZhbHVlIiwiTlVNQkVSIiwiTmF0aXZlTnVtYmVyIiwiUHVyZU51bWJlck5hbWVzcGFjZSIsIk51bWJlclByb3RvdHlwZSIsInRvTnVtZXJpYyIsInByaW1WYWx1ZSIsInRvTnVtYmVyIiwidGhpcmQiLCJtYXhDb2RlIiwiZGlnaXRzIiwiY2FsbGVkV2l0aE5ldyIsIk51bWJlcldyYXBwZXIiLCJ3cmFwIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwibmF0aXZlVG9GaXhlZCIsInRvRml4ZWQiLCJhY2MiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwiZGF0YVRvU3RyaW5nIiwicyIsImZyYWN0aW9uRGlnaXRzIiwiZnJhY3REaWdpdHMiLCJ4MiIsIl9fZGVmaW5lR2V0dGVyX18iLCIkZW50cmllcyIsIiRmcmVlemUiLCJmcmVlemUiLCJmcm9tRW50cmllcyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCIkZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlR2V0UHJvdG90eXBlT2YiLCIkaXNGcm96ZW4iLCJpc0Zyb3plbiIsIiRpc1NlYWxlZCIsImlzU2VhbGVkIiwibmF0aXZlS2V5cyIsIl9fbG9va3VwR2V0dGVyX18iLCJkZXNjIiwiX19sb29rdXBTZXR0ZXJfXyIsIiRwcmV2ZW50RXh0ZW5zaW9ucyIsIiRzZWFsIiwic2VhbCIsIiR2YWx1ZXMiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJjYXBhYmlsaXR5IiwiJHByb21pc2VSZXNvbHZlIiwicmVtYWluaW5nIiwiYWxyZWFkeUNhbGxlZCIsInJlYWwiLCJvblJlamVjdGVkIiwiSW50ZXJuYWwiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIm5hdGl2ZVRoZW4iLCJ0YXNrIiwiaG9zdFJlcG9ydEVycm9ycyIsIlByb21pc2VDb25zdHJ1Y3RvckRldGVjdGlvbiIsIlBST01JU0UiLCJOQVRJVkVfUFJPTUlTRV9TVUJDTEFTU0lORyIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiUHJvbWlzZVByb3RvdHlwZSIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIkRJU1BBVENIX0VWRU5UIiwiY3JlYXRlRXZlbnQiLCJVTkhBTkRMRURfUkVKRUNUSU9OIiwiaXNUaGVuYWJsZSIsImNhbGxSZWFjdGlvbiIsInJlYWN0aW9uIiwiZXhpdGVkIiwiZmFpbCIsInJlamVjdGlvbiIsIm9uSGFuZGxlVW5oYW5kbGVkIiwiaXNSZWplY3QiLCJub3RpZmllZCIsInJlYWN0aW9ucyIsIm9uVW5oYW5kbGVkIiwicmVhc29uIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJlbWl0IiwidW53cmFwIiwiaW50ZXJuYWxSZWplY3QiLCJpbnRlcm5hbFJlc29sdmUiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwiUHJvbWlzZVdyYXBwZXIiLCJwcm9taXNlUmVzb2x2ZSIsIm9uRmluYWxseSIsImlzRnVuY3Rpb24iLCJyYWNlIiwiUHJvbWlzZUNvbnN0cnVjdG9yV3JhcHBlciIsIkNIRUNLX1dSQVBQRVIiLCJmdW5jdGlvbkFwcGx5IiwidGhpc0FyZ3VtZW50IiwiYXJndW1lbnRzTGlzdCIsIm5hdGl2ZUNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJuZXdUYXJnZXQiLCIkYXJncyIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIm9iamVjdEdldFByb3RvdHlwZU9mIiwiaXNEYXRhRGVzY3JpcHRvciIsInJlY2VpdmVyIiwib2JqZWN0UHJldmVudEV4dGVuc2lvbnMiLCJvYmplY3RTZXRQcm90b3R5cGVPZiIsImV4aXN0aW5nRGVzY3JpcHRvciIsIm93bkRlc2NyaXB0b3IiLCJnZXRSZWdFeHBGbGFncyIsInByb3h5QWNjZXNzb3IiLCJOYXRpdmVSZWdFeHAiLCJTeW50YXhFcnJvciIsInN0cmluZ0luZGV4T2YiLCJJU19OQ0ciLCJDT1JSRUNUX05FVyIsIlJlZ0V4cFdyYXBwZXIiLCJwYXR0ZXJuIiwicmF3RmxhZ3MiLCJoYW5kbGVkIiwidGhpc0lzUmVnRXhwIiwicGF0dGVybklzUmVnRXhwIiwiZmxhZ3NBcmVVbmRlZmluZWQiLCJyYXdQYXR0ZXJuIiwibmFtZWQiLCJicmFja2V0cyIsIm5jZyIsImdyb3VwaWQiLCJncm91cG5hbWUiLCJoYW5kbGVOQ0ciLCJoYW5kbGVEb3RBbGwiLCJkZWZpbmVCdWlsdEluQWNjZXNzb3IiLCJJTkRJQ0VTX1NVUFBPUlQiLCJjYWxscyIsImV4cGVjdGVkIiwicGFpcnMiLCIkdG9TdHJpbmciLCJUT19TVFJJTkciLCJuYXRpdmVUb1N0cmluZyIsIk5PVF9HRU5FUklDIiwiSU5DT1JSRUNUX05BTUUiLCJjcmVhdGVIVE1MIiwiZm9yY2VkU3RyaW5nSFRNTE1ldGhvZCIsImFuY2hvciIsImJpZyIsImJsaW5rIiwiYm9sZCIsImNvZGVQb2ludEF0Iiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwibmF0aXZlRW5kc1dpdGgiLCJlbmRzV2l0aCIsIkNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDIiwic2VhcmNoU3RyaW5nIiwiZW5kUG9zaXRpb24iLCJmaXhlZCIsImZvbnRjb2xvciIsImZvbnRzaXplIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwiZWxlbWVudHMiLCJpdGFsaWNzIiwiU1RSSU5HX0lURVJBVE9SIiwicG9pbnQiLCJmaXhSZWdFeHBXZWxsS25vd25TeW1ib2xMb2dpYyIsImFkdmFuY2VTdHJpbmdJbmRleCIsIm5hdGl2ZU1hdGNoIiwibWF5YmVDYWxsTmF0aXZlIiwibWF0Y2hlciIsInJ4IiwicmVzIiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIiRwYWRFbmQiLCJwYWRFbmQiLCIkcGFkU3RhcnQiLCJwYWRTdGFydCIsInRlbXBsYXRlIiwicmF3VGVtcGxhdGUiLCJsaXRlcmFsU2VnbWVudHMiLCJnZXRTdWJzdGl0dXRpb24iLCJSRVBMQUNFIiwiUkVQTEFDRV9LRUVQU18kMCIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiXyIsIlVOU0FGRV9TVUJTVElUVVRFIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIm5hdGl2ZVNlYXJjaCIsInNlYXJjaGVyIiwicHJldmlvdXNMYXN0SW5kZXgiLCJzbWFsbCIsImNhbGxSZWdFeHBFeGVjIiwiTUFYX1VJTlQzMiIsIiRwdXNoIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1BMSVQiLCJuYXRpdmVTcGxpdCIsImludGVybmFsU3BsaXQiLCJsaW1pdCIsImxpbSIsImxhc3RMZW5ndGgiLCJsYXN0TGFzdEluZGV4Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibmF0aXZlU3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJzdHJpa2UiLCJzdWIiLCJzdXAiLCJ0cmltTGVmdCIsInRyaW1SaWdodCIsIiR0cmltIiwiZGVmaW5lV2VsbEtub3duU3ltYm9sIiwibmF0aXZlT2JqZWN0Q3JlYXRlIiwiZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsIiwiZGVmaW5lU3ltYm9sVG9QcmltaXRpdmUiLCJISURERU4iLCJRT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJkZXNjcmlwdGlvbiIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJOYXRpdmVTeW1ib2wiLCJFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUiLCJTeW1ib2xXcmFwcGVyIiwidGhpc1N5bWJvbFZhbHVlIiwic3ltYm9sRGVzY3JpcHRpdmVTdHJpbmciLCJOQVRJVkVfU1lNQk9MX1JFR0lTVFJZIiwiU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSIsIlN5bWJvbFRvU3RyaW5nUmVnaXN0cnkiLCJzeW0iLCJ1JEFycmF5Q29weVdpdGhpbiIsIiRldmVyeSIsIiRmaWxsIiwiYWN0dWFsVmFsdWUiLCJmcm9tU3BlY2llc0FuZExpc3QiLCJwcmVkaWNhdGUiLCJjcmVhdGVUeXBlZEFycmF5Q29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsImFycmF5VmFsdWVzIiwiYXJyYXlLZXlzIiwiYXJyYXlFbnRyaWVzIiwiR0VORVJJQyIsIklURVJBVE9SX0lTX1ZBTFVFUyIsInR5cGVkQXJyYXlWYWx1ZXMiLCIkam9pbiIsIiRzZXQiLCJXT1JLU19XSVRIX09CSkVDVFNfQU5EX0dFRVJJQ19PTl9UWVBFRF9BUlJBWVMiLCJUT19PQkpFQ1RfQlVHIiwiJHNvbWUiLCJBQ0NFUFRfSU5DT1JSRUNUX0FSR1VNRU5UUyIsIm1vZCIsImJlZ2luIiwiYmVnaW5JbmRleCIsIiR0b0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiVE9fTE9DQUxFX1NUUklOR19CVUciLCJVaW50OEFycmF5UHJvdG90eXBlIiwiYXJyYXlUb1N0cmluZyIsIklTX05PVF9BUlJBWV9NRVRIT0QiLCJJbnRlcm5hbFdlYWtNYXAiLCJjb2xsZWN0aW9uV2VhayIsIkZST1pFTiIsIlNFQUxFRCIsIklTX0lFMTEiLCIkV2Vha01hcCIsIldlYWtNYXBQcm90b3R5cGUiLCJuYXRpdmVTZXQiLCJuYXRpdmVEZWxldGUiLCJuYXRpdmVIYXMiLCJuYXRpdmVHZXQiLCJmcm96ZW5BcnJheSIsImFycmF5SW50ZWdyaXR5TGV2ZWwiLCJET01JdGVyYWJsZXMiLCJoYW5kbGVQcm90b3R5cGUiLCJDb2xsZWN0aW9uUHJvdG90eXBlIiwiQ09MTEVDVElPTl9OQU1FIiwiQXJyYXlJdGVyYXRvck1ldGhvZHMiLCJBcnJheVZhbHVlcyIsInNldFRhc2siLCJzY2hlZHVsZXJzRml4IiwiVVNFX05BVElWRV9VUkwiLCJhcnJheVNvcnQiLCJVUkxfU0VBUkNIX1BBUkFNUyIsIlVSTF9TRUFSQ0hfUEFSQU1TX0lURVJBVE9SIiwiZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSIsInNhZmVHZXRCdWlsdEluIiwibmF0aXZlRmV0Y2giLCJOYXRpdmVSZXF1ZXN0IiwiSGVhZGVycyIsIlJlcXVlc3RQcm90b3R5cGUiLCJIZWFkZXJzUHJvdG90eXBlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwicGx1cyIsInNlcXVlbmNlcyIsInBlcmNlbnRTZXF1ZW5jZSIsInBlcmNlbnREZWNvZGUiLCJzZXF1ZW5jZSIsImRlc2VyaWFsaXplIiwicmVwbGFjZW1lbnRzIiwic2VyaWFsaXplIiwiVVJMU2VhcmNoUGFyYW1zSXRlcmF0b3IiLCJVUkxTZWFyY2hQYXJhbXNTdGF0ZSIsInBhcnNlT2JqZWN0IiwicGFyc2VRdWVyeSIsImJpbmRVUkwiLCJ1cGRhdGUiLCJlbnRyeUl0ZXJhdG9yIiwiZW50cnlOZXh0IiwicXVlcnkiLCJ1cGRhdGVVUkwiLCJVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciIsIlVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSIsImFwcGVuZCIsImdldEFsbCIsImZvdW5kIiwiaGVhZGVyc0hhcyIsImhlYWRlcnNTZXQiLCJ3cmFwUmVxdWVzdE9wdGlvbnMiLCJoZWFkZXJzIiwiZmV0Y2giLCJSZXF1ZXN0Q29uc3RydWN0b3IiLCJSZXF1ZXN0IiwiZ2V0U3RhdGUiLCJFT0YiLCJhcnJheUZyb20iLCJ0b0FTQ0lJIiwiVVJMU2VhcmNoUGFyYW1zTW9kdWxlIiwiZ2V0SW50ZXJuYWxVUkxTdGF0ZSIsImdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUiLCJOYXRpdmVVUkwiLCJJTlZBTElEX1NDSEVNRSIsIklOVkFMSURfSE9TVCIsIklOVkFMSURfUE9SVCIsIkFMUEhBIiwiQUxQSEFOVU1FUklDIiwiRElHSVQiLCJIRVhfU1RBUlQiLCJPQ1QiLCJERUMiLCJIRVgiLCJGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UIiwiRk9SQklEREVOX0hPU1RfQ09ERV9QT0lOVF9FWENMVURJTkdfUEVSQ0VOVCIsIkxFQURJTkdfQU5EX1RSQUlMSU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UiLCJUQUJfQU5EX05FV19MSU5FIiwic2VyaWFsaXplSG9zdCIsImNvbXByZXNzIiwiaWdub3JlMCIsImlwdjYiLCJtYXhJbmRleCIsImN1cnJTdGFydCIsImN1cnJMZW5ndGgiLCJmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSIsIkMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQiLCJmcmFnbWVudFBlcmNlbnRFbmNvZGVTZXQiLCJwYXRoUGVyY2VudEVuY29kZVNldCIsInVzZXJpbmZvUGVyY2VudEVuY29kZVNldCIsInBlcmNlbnRFbmNvZGUiLCJzcGVjaWFsU2NoZW1lcyIsImZ0cCIsImZpbGUiLCJodHRwIiwiaHR0cHMiLCJ3cyIsIndzcyIsImlzV2luZG93c0RyaXZlTGV0dGVyIiwibm9ybWFsaXplZCIsInN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIiLCJpc1NpbmdsZURvdCIsInNlZ21lbnQiLCJTQ0hFTUVfU1RBUlQiLCJTQ0hFTUUiLCJOT19TQ0hFTUUiLCJTUEVDSUFMX1JFTEFUSVZFX09SX0FVVEhPUklUWSIsIlBBVEhfT1JfQVVUSE9SSVRZIiwiUkVMQVRJVkUiLCJSRUxBVElWRV9TTEFTSCIsIlNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMiLCJTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyIsIkFVVEhPUklUWSIsIkhPU1QiLCJIT1NUTkFNRSIsIlBPUlQiLCJGSUxFIiwiRklMRV9TTEFTSCIsIkZJTEVfSE9TVCIsIlBBVEhfU1RBUlQiLCJQQVRIIiwiQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSCIsIlFVRVJZIiwiRlJBR01FTlQiLCJVUkxTdGF0ZSIsImlzQmFzZSIsImZhaWx1cmUiLCJ1cmxTdHJpbmciLCJwYXJzZSIsInN0YXRlT3ZlcnJpZGUiLCJjb2RlUG9pbnRzIiwiYnVmZmVyQ29kZVBvaW50cyIsInBvaW50ZXIiLCJzZWVuQXQiLCJzZWVuQnJhY2tldCIsInNlZW5QYXNzd29yZFRva2VuIiwic2NoZW1lIiwiZnJhZ21lbnQiLCJjYW5ub3RCZUFCYXNlVVJMIiwiaXNTcGVjaWFsIiwiaW5jbHVkZXNDcmVkZW50aWFscyIsImNvZGVQb2ludCIsImVuY29kZWRDb2RlUG9pbnRzIiwicGFyc2VIb3N0Iiwic2hvcnRlblBhdGgiLCJudW1iZXJzU2VlbiIsImlwdjRQaWVjZSIsInN3YXBzIiwic3dhcCIsImFkZHJlc3MiLCJwaWVjZUluZGV4IiwicGFyc2VJUHY2IiwicGFydHNMZW5ndGgiLCJudW1iZXJzIiwicGFydCIsImlwdjQiLCJwYXJ0cyIsInBhcnNlSVB2NCIsImNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCIsInBhdGhTaXplIiwic2V0SHJlZiIsImdldE9yaWdpbiIsIlVSTENvbnN0cnVjdG9yIiwib3JpZ2luIiwiZ2V0UHJvdG9jb2wiLCJzZXRQcm90b2NvbCIsImdldFVzZXJuYW1lIiwic2V0VXNlcm5hbWUiLCJnZXRQYXNzd29yZCIsInNldFBhc3N3b3JkIiwiZ2V0SG9zdCIsInNldEhvc3QiLCJnZXRIb3N0bmFtZSIsInNldEhvc3RuYW1lIiwiaG9zdG5hbWUiLCJnZXRQb3J0Iiwic2V0UG9ydCIsImdldFBhdGhuYW1lIiwic2V0UGF0aG5hbWUiLCJnZXRTZWFyY2giLCJzZXRTZWFyY2giLCJnZXRTZWFyY2hQYXJhbXMiLCJnZXRIYXNoIiwic2V0SGFzaCIsIlVSTFByb3RvdHlwZSIsImFjY2Vzc29yRGVzY3JpcHRvciIsIm5hdGl2ZUNyZWF0ZU9iamVjdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIm5hdGl2ZVJldm9rZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwibG9jYWxzIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwic3R5bGVzSW5ET00iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJpbmRleEJ5SWRlbnRpZmllciIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4IiwiYXBpIiwiZG9tQVBJIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwiaW5zZXJ0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudERvY3VtZW50IiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkZWZpbml0aW9uIiwibyIsImNodW5rSWQiLCJwcm9taXNlcyIsIm1pbmlDc3NGIiwicHJvcCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwibmMiLCJvblNjcmlwdENvbXBsZXRlIiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJ0b1N0cmluZ1RhZyIsImJhc2VVUkkiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwicmVxdWVzdCIsIndlYnBhY2tKc29ucENhbGxiYWNrIiwicGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24iLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiX2FycmF5V2l0aEhvbGVzIiwiX3MiLCJfZSIsIl94IiwiX3IiLCJfYXJyIiwiX24iLCJfZCIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImFycjIiLCJwb3J0aW9ucyIsIm1vdXNlcyIsIkNhcmQiLCJfdXNlU3RhdGUyIiwiaXNTZWxlY3RlZCIsInNldElzU2VsZWN0ZWQiLCJfdXNlU3RhdGU0IiwiaXNTZWxlY3RlZEhvdmVyIiwic2V0SXNTZWxlY3RlZEhvdmVyIiwic2VsZWN0Q2FyZCIsImdldFdvcmQiLCJ3b3JkcyIsIndvcmQiLCJjbGFzc05hbWUiLCJvbk1vdXNlTGVhdmUiLCJpc0F2YWlsYWJsZSIsInNsb2dhbiIsImJyYW5kIiwidGFzdHkiLCJnaWZ0cyIsInRleHQxIiwidGV4dDIiLCJhbHQiLCJhbHRJbWciLCJ3ZWlnaHQiLCJhbW91bnQiLCJtZWFzdXJlIiwiY2FsbFRvQWN0aW9uIiwiY2FsbFRvQWN0aW9uQnV0dG9uIiwibm90QXZhaWxhYmxlIiwiQ2FyZExpc3QiLCJjYXJkcyIsIkNvbnRhaW5lciIsInRpdGxlIiwib25QZXJmRW50cnkiLCJnZXRFbGVtZW50QnlJZCIsIl9yZWYiLCJnZXRDTFMiLCJnZXRGSUQiLCJnZXRGQ1AiLCJnZXRMQ1AiLCJnZXRUVEZCIl0sInNvdXJjZVJvb3QiOiIifQ==